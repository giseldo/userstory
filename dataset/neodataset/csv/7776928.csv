issuekey,created,title,description,storypoints
21891217,2019-06-13 20:05:01.288,Triage package v2.0 with customer bugs and missed SLO bugs,"## Background

We are making progress in lowering the time to resolve bugs and increasing awareness.

Its time for an iteration on the content and the structure of the triage content. 
## Current structure

We currently have 3 sections. 

Examples 
* https://gitlab.com/gitlab-org/gitlab-ee/issues/12050
* https://gitlab.com/gitlab-org/gitlab-ee/issues/12042

1. ~feature issues with no milestone and we request that product managers add a milestone to them.
1. ~bug with ~frontend issues with no severity and priority labels. We then ask the ~frontend manager to schedule them.
1. ~bug with with no severity and priority labels. We then ask the ~frontend manager to schedule them.

## Improvements 
1. [x] With Product Managers grooming their features continuously we should consider changing section `1.` to narrow down only ~feature with ~customer. Continue to ask them to be scheduled.
1. [x] With ~Quality handling triage level 1 which includes adding a severity label, we should change section `2.` and `3.` to just ~bug without a milestone. Ask the EM to ensure that the priority is correct or set and schedule a milestone. Maintain 15 max count and prioritize ~bug with ~customer first. https://gitlab.com/gitlab-org/quality/triage-ops/merge_requests/140
1. [x] Include a report on bugs that is past their SLO https://gitlab.com/gitlab-org/quality/triage-ops/issues/137
1. [x] Include heat map on all ~bug for that area. https://gitlab.com/gitlab-org/quality/triage-ops/issues/166
1. [x] Update handbook triage package information.

## Format

Hi, `PM_PLACEHOLDER` `FE_EM_PLACEHOLDER` `BE_EM_PLACEHOLDER`
This is a group or stage level triage package that aims to summarize the feature proposals and bugs which have not been scheduled or triaged. For more information please refer to the handbook:
 - https://about.gitlab.com/handbook/engineering/quality/guidelines/triage-operations/#current-packages

Scheduling the workload is a collaborative effort by the Product Managers and Engineering Managers for that group. Please work together to provide a best estimate on priority and milestone assignments. For each issue please:
 - Determine if the issue should be closed if it is no longer relevant or a duplicate.
 - If it is still relevant please assign either a best estimate versioned milestone, the %Backlog or the %""Awaiting further demand"" milestone.
 - Specifically for ~bug, if there is no priority or clarity on a versioned milestone, please add a Priority label. Priority labels have an estimate SLO attached to them and help team members and the wider community understand roughly when it will be considered to be scheduled.
   - `LINK_TO_PRIORITY_DEFINITION`
 - Once a milestone has been assigned please check off the box for that issue.
 - Please work with your team to complete the list by the due date set.


### Heat map report

Here is a heat map report on the distribution of open ~bug for your area.

```
Add heatmap
```

### Feature Proposal section

For the following feature proposals. Please either close or assign either a versioned milestone, the %Backlog or the %""Awaiting further demand"" milestone.

#### Unscheduled ~feature with ~customer 

``` 
Lists customer feature proposals with no milestones
Limit: 15 issues
```
#### Unscheduled ~feature (non customer)

```
Lists feature proposals with no milestones
Limit: 15 issues
```

### Bug section

For the following bugs. Please either close or assign either a versioned milestone, the %Backlog or the %""Awaiting further demand"" milestone and ensure that a priority label is set.

#### Unscheduled ~frontend ~bug with ~customer 

```Lists customer bugs for frontend with no milestone
Limit: 15 issues
```
#### Unscheduled ~frontend ~bug (non customer) 

```Lists bugs for frontend with no milestone in the project
Limit: 15 issues
```

#### Unscheduled ~bug with ~customer 

```Lists customer bugs without frontend with no milestone
Limit: 15 issues
```

#### Unscheduled ~bug (non customer) 

```Lists bugs without frontend with no milestone
Limit: 15 issues
```

#### ~bug with Missed SLO target section

```Lists bugs that have passed their priority related SLO threshold
Limit: P1 and P2
```",7
21830077,2019-06-12 09:13:28.138,Consolidate labels for marking issues that are open for community contributions,"### Problem

The ~""Accepting merge requests"" label which is mostly used for making it easier to [contribute](https://about.gitlab.com/community/contribute/) by marking issues that are open for community contributions.

This is interfered, most probably unintentionally, by similar labels like the [Accepting Merge Requests](https://gitlab.com/gitlab-org/omnibus-gitlab/-/labels?utf8=%E2%9C%93&subscribed=&search=Accepting) label in the [`omnibus-gitlab`](https://gitlab.com/gitlab-org/omnibus-gitlab) project (see  related [issues](https://gitlab.com/gitlab-org/omnibus-gitlab/issues?label_name%5B%5D=Accepting+Merge+Requests)) and the [Accepting community contributions](https://gitlab.com/gitlab-org/design.gitlab.com/-/labels?utf8=✓&subscribed=&search=Accepting) label in the [`design.gitlab.com`](https://gitlab.com/gitlab-org/design.gitlab.com) project (see related [issues](https://gitlab.com/gitlab-org/design.gitlab.com/issues?label_name%5B%5D=Accepting+community+contributions)).


### Proposal

1. Delete the [Accepting Merge Requests](https://gitlab.com/gitlab-org/omnibus-gitlab/-/labels?utf8=%E2%9C%93&subscribed=&search=Accepting) project label in `omnibus-gitlab` and replace it, on the related [issues](https://gitlab.com/gitlab-org/omnibus-gitlab/issues?label_name%5B%5D=Accepting+Merge+Requests), with the `gitlab-org` group label ~""Accepting merge requests"". /cc @ibaum @marin @twk3
1. Delete the [Accepting community contributions](https://gitlab.com/gitlab-org/design.gitlab.com/-/labels?utf8=✓&subscribed=&search=Accepting) project label in `design.gitlab.com` and replace it, on the related [issues](https://gitlab.com/gitlab-org/design.gitlab.com/issues?label_name%5B%5D=Accepting+community+contributions), with the `gitlab-org` group label ~""Accepting merge requests"". /cc @pedroms @tauriedavis",1
21827911,2019-06-12 08:13:35.509,"Remove ""~Accepting merge requests"" label on all merge requests","### Problem

The ~""Accepting merge requests"" label is usually attached to issues that are marked as open for community contributions.
However, it's also attached to [merged requests](https://gitlab.com/groups/gitlab-org/-/merge_requests?scope=all&utf8=%E2%9C%93&state=all&label_name[]=Accepting%20merge%20requests) opened directly from the issue using the [dropdown option](https://docs.gitlab.com/ee/user/project/issues/issue_data_and_actions.html#22-create-merge-request) or using the [quick actions](https://docs.gitlab.com/ee/user/project/quick_actions.html#quick-actions-for-issues-and-merge-requests). The label is also sometimes added manually on merge requests.

### Proposal

1. Remove the ~""Accepting merge requests"" label from _all_ merge requests.
2. Add a policy rule for the @gitlab-bot to auto remove this label from future merge requests that will continue to attach that label due to current UX. There is probably no need to change the current UX since auto removing the automatically attached ~""Accepting merge requests"" label would be unnecessarily too specific, right?",2
21767038,2019-06-10 18:23:06.006,Add report for unscheduled customer bugs in Group level triage package 3.0,"This is the help with `Key result`: Triage all existing customer ~S1 ~S2 ~bug and have them scheduled with a milestone.

* All existing ~customer ~S1 and ~S2 without a scheduled milestone. 
* Put the information in CE and EE.

This is done: https://gitlab.com/gitlab-org/gitlab-ce/issues/63136

We need to evaluate including this in the weekly triage packages",2
21214882,2019-05-23 10:01:36.206,Independently infer and apply group and stage labels,"## Proposal

* The bot does doesn't change a stage or group label if it's already set.
* A group label is chosen only if the highest group match from its category labels is > 50%.
* A group label is chosen only if the it matches the already set stage label (if applicable).
* A stage label is set based on the chosen or already set group label.
* The bot leaves a message that explains its inference logic.

### Triage workflow

```mermaid
graph LR
A{Stage label is present?} -- Yes --> B
B{Group label is present?} -- Yes --> X1[Nothing to do.]
B -- No --> E
E{Group is detected based on category labels<br>with a match rate > 50% among all category labels?} -- Yes --> H
E -- No --> K
H{Does detected group label matches stage label?} -- Yes --> X2[Set detected group label.]
H -- No --> K
K{Several potential groups in current<br>stage detected from category labels?} -- Yes --> X3[Manual triage required.]
K -- No --> X4[Set default group label based on stage label.]

A -- No --> C
C{Group label is present?} -- Yes --> X5[Set stage label based on group label, we're done!]
C -- No --> G
G{Group is detected based on feature/category labels?} -- Yes --> X6[Set group and stage labels.]
G -- No --> X7[Manual triage required.]
```

### Use-cases/test-cases

| Stage label | Group label | Category labels | Team label | New labels | Bot message | Note |
| ----------- | ----------- | --------------- | ---------- | ---------- | ----------- | ---- |
| ~""devops::configure"" | ~""group::autodevops and kubernetes"" | ~""wiki"" | ~""Verify"" | :no_entry_sign: | :no_entry_sign: | No new labels. |
| ~""devops::configure"" | ~""group::autodevops and kubernetes"" | ~""wiki"" | :no_entry_sign: | :no_entry_sign: | :no_entry_sign: | No new labels. |
| ~""devops::configure"" | ~""group::autodevops and kubernetes"" | :no_entry_sign: | ~""Verify"" | :no_entry_sign: | :no_entry_sign: | No new labels. |
| ~""devops::configure"" | ~""group::autodevops and kubernetes"" | :no_entry_sign: | :no_entry_sign: | :no_entry_sign: | :no_entry_sign: | No new labels. |
| ~""devops::create"" | :no_entry_sign: | ~""wiki"" (100% matching stage) | ~""Verify"" | ~""group::knowledge"" | `Setting ~""group::knowledge"" based on ~""wiki"".` | Group based on category since category matches stage |
| ~""devops::create"" | :no_entry_sign: | ~""wiki"" (100% matching stage) | :no_entry_sign: | ~""group::knowledge"" | `Setting ~""group::knowledge"" based on ~""wiki"".` | Group based on category since category matches stage |
| ~""devops::create"" | :no_entry_sign: | ~""wiki"" ~elasticsearch (100% matching stage, 2 different groups) | ~""Verify"" | ~""group::knowledge"" | :no_entry_sign: | Manual triage required since the 2 potential groups are conflicting |
| ~""devops::create"" | :no_entry_sign: | ~""wiki"" ~elasticsearch (100% matching stage, 2 different groups) | :no_entry_sign: | ~""group::knowledge"" | :no_entry_sign: | Manual triage required since the 2 potential groups are conflicting |
| ~""devops::create"" | :no_entry_sign: | ~""wiki"" ~""design management"" ~""analytics"" (66% matching stage) | ~""Verify"" | ~""group::knowledge"" | `Setting ~""group::knowledge"" based on ~""design management"" ~""wiki"".` | Group based on category since category matches stage |
| ~""devops::create"" | :no_entry_sign: | ~""wiki"" ~""design management"" ~""analytics"" (66% matching stage) | :no_entry_sign: | ~""group::knowledge"" | `Setting ~""group::knowledge"" based on ~""design management"" ~""wiki"".` | Group based on category since category matches stage |
| ~""devops::create"" | :no_entry_sign: | ~""wiki"" ~""analytics"" (50% matching stage) | ~""Verify"" | ~""group::knowledge"" | `Setting ~""group::knowledge"" based on ~""wiki"".` | Group based on category since category matches stage |
| ~""devops::create"" | :no_entry_sign: | ~""wiki"" ~""analytics"" (50% matching stage) | :no_entry_sign: | ~""group::knowledge"" | `Setting ~""group::knowledge"" based on ~""wiki"".` | Group based on category since category matches stage |
| ~""devops::create"" | :no_entry_sign: | ~""wiki"" ~""analytics"" ~""epics"" (33% matching stage) | ~""Verify"" | ~""group::knowledge"" | `Setting ~""group::knowledge"" based on ~""wiki"".` | Group based on category since category matches stage |
| ~""devops::create"" | :no_entry_sign: | ~""wiki"" ~""analytics"" ~""epics"" (33% matching stage) | :no_entry_sign: | ~""group::knowledge"" | `Setting ~""group::knowledge"" based on ~""wiki"".` | Group based on category since category matches stage |
| ~""devops::package"" | :no_entry_sign: | ~""design management"" (none matching stage) | ~""Verify"" | ~""group::package"" | `Setting ~""group::package"" based on ~""devops::package"".` | Group based on stage since category does not match stage |
| ~""devops::package"" | :no_entry_sign: | ~""design management"" (none matching stage) | :no_entry_sign: | ~""group::package"" | `Setting ~""group::package"" based on ~""devops::package"".` | Group based on stage since category does not match stage |
| ~""devops::configure"" | :no_entry_sign: | :no_entry_sign: | ~""Gitaly"" | ~""group::autodevops and kubernetes"" | `Setting ~""group::autodevops and kubernetes"" based on ~""devops::configure"".` | Group based on stage |
| ~""devops::verify"" | :no_entry_sign: | :no_entry_sign: | :no_entry_sign: | ~""group::ci and runner"" | `Setting ~""group::ci and runner"" based on ~""devops::verify"".` | Default group from stage |
| :no_entry_sign: | ~""group::source code"" | ~""design management"" ~""markdown"" | ~""Verify"" | ~""devops::create"" | `Setting ~""devops::create"" based on ~""group::source code"".` | Stage based on group |
| :no_entry_sign: | ~""group::source code"" | ~""design management"" ~""markdown"" | :no_entry_sign: | ~""devops::create"" | `Setting ~""devops::create"" based on ~""group::source code"".` | Stage based on group |
| :no_entry_sign: | ~""group::memory"" | :no_entry_sign: | ~""Gitaly"" | ~""devops::enablement"" | `Setting ~""devops::enablement"" based on ~""group::memory"".` | Stage label based on group |
| :no_entry_sign: | ~""group::memory"" | :no_entry_sign: | :no_entry_sign: | ~""devops::enablement"" | `Setting ~""devops::enablement"" based on ~""group::memory"".` | Stage label based on group |
| :no_entry_sign: | :no_entry_sign: | ~""backend"" ~""bug"" | ~""Plan"" | ~""devops::plan"" ~""group::team planning"" | `Setting ~""devops::plan"" and ~""group::team planning"" based on ~""Plan"".` | Stage and group based on team |
| :no_entry_sign: | :no_entry_sign: | ~""bug"" ~""rake tasks"" | :no_entry_sign: | :no_entry_sign: | :no_entry_sign: | Manual triage required |
| :no_entry_sign: | :no_entry_sign: | ~""internationalization"" (best match: 100%) | ~""Verify"" | ~""devops::manage"" ~""group::measure"" | `Setting ~""devops::manage"" and ~""group::measure"" based on ~""internationalization"".` | Stage and group based on category |
| :no_entry_sign: | :no_entry_sign: | ~""internationalization"" (best match: 100%) | :no_entry_sign: | ~""devops::manage"" ~""group::measure"" | `Setting ~""devops::manage"" and ~""group::measure"" based on ~""internationalization"".` | Stage and group based on category |
| :no_entry_sign: | :no_entry_sign: | ~""snippets"" ~""elasticsearch"" ~""internationalization"" (best match: 66%) | ~""Verify"" | ~""devops::create"" ~""group::editor"" | `Setting ~""devops::create"" and ~""group::editor"" based on ~""elasticsearch"" ~""snippets"".` | Stage and group based on category label |
| :no_entry_sign: | :no_entry_sign: | ~""snippets"" ~""elasticsearch"" ~""internationalization"" (best match: 66%) | :no_entry_sign: | ~""devops::create"" ~""group::editor"" | `Setting ~""devops::create"" and ~""group::editor"" based on ~""elasticsearch"" ~""snippets"".` | Stage and group based on category label |
| :no_entry_sign: | :no_entry_sign: | ~""elasticsearch"" ~""internationalization"" (best match: 50%) | ~""Verify"" | ~""devops::verify"" ~""group::ci and runner"" | `Setting ~""devops::verify"" and ~""group::ci and runner"" based on ~""Verify"".` | Stage and group based on team |
| :no_entry_sign: | :no_entry_sign: | ~""elasticsearch"" ~""internationalization"" (best match: 50%) | :no_entry_sign: | :no_entry_sign: | :no_entry_sign: | Manual triage required |
| :no_entry_sign: | :no_entry_sign: | ~""pipeline"" ~""elasticsearch"" ~""internationalization"" (best match: 33%) | ~""Verify"" | ~""devops::verify"" ~""group::ci and runner"" | `Setting ~""devops::verify"" and ~""group::ci and runner"" based on ~""Verify""` | Stage and group based on team |
| :no_entry_sign: | :no_entry_sign: | ~""pipeline"" ~""elasticsearch"" ~""internationalization"" (best match: 33%) | :no_entry_sign: | :no_entry_sign: | :no_entry_sign: | Manual triage required |
| :no_entry_sign: | :no_entry_sign: | ~""backstage"" (no match) | ~""Verify"" | ~""devops::verify"" ~""group::ci and runner"" | `Setting ~""devops::verify"" and ~""group::ci and runner"" based on ~""Verify""` | Stage and group based on team |
| :no_entry_sign: | :no_entry_sign: | ~""backstage"" (no match) | :no_entry_sign: | :no_entry_sign: | :no_entry_sign: | Manual triage required |
",4
21137285,2019-05-21 08:34:12.458,Generate 5x5 grid heat map report on existing open bugs for all group triage packages,"We need to start educating teams on how to use different priority and severity levers.

The first iteration is to provide visibility into how the bug distribution looks like for each group.

* Add 5x5 grid heat map. (Mock up below)
* We can reuse @lmcandrew script to generate the table here: https://gitlab.com/lmcandrew/markdown-issue-viewer
* Add a table the top of the triage report, one for all bugs in that group

![Screen_Shot_2019-05-21_at_1.28.31_AM](/uploads/93cb1f7a2c515951831aa8885db271b0/Screen_Shot_2019-05-21_at_1.28.31_AM.png)

## Format
|| ~S1 | ~S2 | ~S3 | ~S4 | `no severity` |
|----|----|----|----|----|----|
~P1 | [2](https://gitlab.com/gitlab-org/gitlab-ce/issues?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=Quality&label_name[]=bug&label_name[]=P1&label_name[]=S1) | [0](https://gitlab.com/gitlab-org/gitlab-ce/issues?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=Quality&label_name[]=bug&label_name[]=P1&label_name[]=S2) | [0](https://gitlab.com/gitlab-org/gitlab-ce/issues?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=Quality&label_name[]=bug&label_name[]=P1&label_name[]=S3) | [0](https://gitlab.com/gitlab-org/gitlab-ce/issues?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=Quality&label_name[]=bug&label_name[]=P1&label_name[]=S3) | 1
~P2 | [0](https://gitlab.com/gitlab-org/gitlab-ce/issues?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=Quality&label_name[]=bug&label_name[]=P2&label_name[]=S1) | [2](https://gitlab.com/gitlab-org/gitlab-ce/issues?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=Quality&label_name[]=bug&label_name[]=P2&label_name[]=S2) | [8](https://gitlab.com/gitlab-org/gitlab-ce/issues?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=Quality&label_name[]=bug&label_name[]=P2&label_name[]=S3) | [1](https://gitlab.com/gitlab-org/gitlab-ce/issues?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=Quality&label_name[]=bug&label_name[]=P2&label_name[]=S4) | 1
~P3 | [0](https://gitlab.com/gitlab-org/gitlab-ce/issues?scope=all&utf8=%E2%9C%93&state=opened&label_name%5B%5D=Quality&label_name%5B%5D=bug&label_name%5B%5D=P3&label_name%5B%5D=S1) | [0](https://gitlab.com/gitlab-org/gitlab-ce/issues?scope=all&utf8=%E2%9C%93&state=opened&label_name%5B%5D=Quality&label_name%5B%5D=bug&label_name%5B%5D=P3&label_name%5B%5D=S2) | [7](https://gitlab.com/gitlab-org/gitlab-ce/issues?scope=all&utf8=%E2%9C%93&state=opened&label_name%5B%5D=Quality&label_name%5B%5D=bug&label_name%5B%5D=P3&label_name%5B%5D=S3) | [1](https://gitlab.com/gitlab-org/gitlab-ce/issues?scope=all&utf8=%E2%9C%93&state=opened&label_name%5B%5D=Quality&label_name%5B%5D=bug&label_name%5B%5D=P3&label_name%5B%5D=S4) | 3
~P4 | [0](https://gitlab.com/gitlab-org/gitlab-ce/issues?scope=all&utf8=%E2%9C%93&state=opened&label_name%5B%5D=Quality&label_name%5B%5D=bug&label_name%5B%5D=P4&label_name%5B%5D=S1) | [0](https://gitlab.com/gitlab-org/gitlab-ce/issues?scope=all&utf8=%E2%9C%93&state=opened&label_name%5B%5D=Quality&label_name%5B%5D=bug&label_name%5B%5D=P4&label_name%5B%5D=S2) | [2](https://gitlab.com/gitlab-org/gitlab-ce/issues?scope=all&utf8=%E2%9C%93&state=opened&label_name%5B%5D=Quality&label_name%5B%5D=bug&label_name%5B%5D=P4&label_name%5B%5D=S3) | [7](https://gitlab.com/gitlab-org/gitlab-ce/issues?scope=all&utf8=%E2%9C%93&state=opened&label_name%5B%5D=Quality&label_name%5B%5D=bug&label_name%5B%5D=P4&label_name%5B%5D=S4) | 1
`no priority` | 1 | 6 | 19 | 5 | 145",10
21071454,2019-05-20 00:40:42.331,Update the triage package for the Package team,"~Package team is booting up with @dcroft. 

This issue is to capture the changes needed to ensure @dcroft has visibility into these packages.",1
20287221,2019-04-24 02:17:31.302,Apply Control and Framework labels to Manage issues,"Manage is going to split into [two groups](https://about.gitlab.com/handbook/product/categories/#manage-stage), Control and Framework. We'd love some help to get the many Manage issues correctly labeled so these groups can prepare for a successful split. :slight\_smile: 

The [label breakdown between the two groups](https://about.gitlab.com/handbook/product/categories/#other-functionality-in-manage):

~""group:control"" 

* ~""user management"" 
* ~""user profile"" 
* ~permissions 
* ~""audit events"" 
* ~""spam fighting"" 
* ~""admin dashboard"" 
* ~ldap 
* ~saml 
* ~authentication 
* ~authorization 
* ~oauth 
* ~group 
* ~groups 
* ~2FA 
* ~""group templates"" 
* ~subgroups 

~""group:framework"" 

* ~analytics 
* ~""cycle analytics"" 
* ~convdev 
* ~project 
* ~""project export""
* ~""project import"" 
* ~""project templates"" 
* ~""gitlab.com"" 
* ~navigation 
* ~internationalization 
* ~importers 
* ~import 

### Proposal

* [ ]  Apply the ~""group:control"" label to all issues with both the ~Manage label OR the ~""devops:manage"" AND one of the ~""group:control"" subject labels above.
* [ ]  Apply the ~""group:framework"" label to all issues with both the ~Manage label OR the ~""devops:manage"" AND one of the ~""group:framework"" subject labels above.",2
20061459,2019-04-15 10:38:45.837,Group triage packages to use stage label instead of Group label,It’s valid to have several group labels but only one stage label :thinking_face: Right now these issues will appear in both groups’ triage package but may not be relevant to both groups… (example: https://gitlab.com/gitlab-org/gitlab-ee/issues/9216). Maybe we should find group issues based on the stage label instead? Because we recommend only one of those be added to any issue at one time,2
19375872,2019-03-22 16:56:30.380,Autolabel group label on MRs based on author group information from team.yml,"We need to start enforcing a high-level data hygiene on throughputs. 

> let's use this issue to implement the team member mapping to group labels. Also let's stop using the word ""team"" we need to be clear on the terminology.

Let's reuse the mechanism from enforcing stage labels. 

## Proposal
* Singularity on **Stages** and **Groups** will be built-in with scoped labels.
  * **Stages** ~""devops::plan"", ~""devops::create"", etc.
  * **Groups** ~""group::source code"" ~""group::knowledge"" ~""group::editor"", etc.
* Improving the hygiene accounting on `group::xxx` labels
  * For un-labeled MRs we should be able to infer from a team member mapping in `team.yml` at that point in time to the `group::xxx`. This would also solve the case when engineers move from group to group since the label preserves that mapping at that point in time.
  * We will not auto label things that are corrected by a human or if the label is already present. 
  * If data is not present in `team.yml` we should introduce a structure there
* Improving the hygiene accounting to `devops:xxx` labels
  * If there is category label, map to the stage of category label.
  * If there is only group label, we will not auto label, as the group label could belong to an MR author who is working outside of their stage 
  * We will not auto label things that are corrected by a human or if the label is already present. 
* Stretch: Auto add specialty label and either ~frontend / ~backend 

## Solution

First we attempt to add **group label** based on the MR author in `pre-hygiene` stage. This would set the stage for `stage-and-group-labels-hygiene` whereby most MRs would have **group label** set either manually or inferred from the MR author.

The next `stage-and-group-labels-hygiene` job will then attempt to infer the remaining labels based on this table:

| # | has_stage_label? | has_group_label? | has_category_labels? | group_is_part_of_stage? | inference_strategy|
| -- | ------ | ------ | ----- | ------ | ------ |
| 1 | true | true | true | N.A | Not needed |
| 2 | true | true | false | true | infer category from group |
| 3 | true | true | false | false | do not infer category - too many categories per stage to infer reliably | 
| 4 | true | false | true | N.A | infer group from category or stage | 
| 5 | false | true | true | N.A | infer stage from category | 
| 6 | false | true | false | N.A | do not infer stage and category | 
| 7 | false | false | false | N.A | Not possible to infer | 

## Work to do
- [x] Create a new entry point for MR label inference based on above
- [x] Create new job in `pre-hygiene` to add group label based on MR author
- [ ] Use new entry point in MR label inference",5
18988283,2019-03-11 14:44:00.342,"~""broken master"" was renamed to ~""master:broken""",Adopt the changes from https://gitlab.com/gitlab-com/www-gitlab-com/merge_requests/19989/diffs,1
18730991,2019-03-01 20:02:21.187,Better way to handle consecutive 3 month pings on stale issues with no contributor activity,"How can we handle situations like this better https://gitlab.com/gitlab-org/gitlab-ce/issues/50358#note_144460196

Ideas: 
* Add logic to grooming bot to filter activity of `GitLab Bot`
* Add logic to ignore ~""awaiting feedback"" for this specific rule",2
18618744,2019-02-26 16:21:21.509,"Add ~""Community contributor"" across the gitlab-org group","For now we have a [special schedule for runner](https://gitlab.com/gitlab-org/quality/triage-ops/pipeline_schedules/11219/edit) which sets ~""Community contribution""

We can escalate this to be gitlab-org group level after having https://gitlab.com/gitlab-org/gitlab-triage/merge_requests/89

/cc @markglenfletcher @meks",1
15794979,2018-11-13 13:54:19.111,"Create a new rule to add ~""Community contribution"" for core members (`gitlab-core-team`)","Because they're part of `@gitlab-org` and the current rules will not add the labels for core members.

----

The following discussion from !49 should be addressed:

- [ ] @gtsiolis started a [discussion](https://gitlab.com/gitlab-org/quality/triage-ops/merge_requests/49#note_116834216):  (+3 comments)

    > @gitlab-org/triage do you think contributions from the core team members should have the ~""Community contribution"" label or not? If yes, I think we could a) add a new policy to add ~""Community contribution"" label for members of `@gitlab-core-team`, b) update this rule to include a second `condition` which I don't think it's currently possible, or c) introduce a new label like *Core Team Contribution*.",2
13949668,2018-09-06 09:02:42.569,Remove `no-severity` and `no-priority` labels from issues with S/P labels,"When asking a team member to help with adding S/P labels. We ensure that the prompt does not happen again by adding a ~""no\-severity"" or ~""no\-priority"" label.

Once the S/P labels have been applied, we could walk through and remove the ~""no\-priority"" and ~""no\-severity"" labels.

This makes the issues look cleaner and the remaining presence of this label could potentially impact other rules later. But I don't think this is essential right now",2
13641034,2018-08-23 08:33:58.272,Think of a way to create the labels for a new milestone automatically,"We now have a lot of labels which corresponds to a particular milestone. We're creating them manually, but I think it's really easily to forget it or create it too early or too late. Too early, we might misuse them. Too late, it's inconvenient when we want to use them.

Example of milestone labels:

* ~""missed:11.2"" and ~""Pick into 11.2"" We only need them passing 11.2 freeze date
* ~""regression:11.2"" We only need this after 11.2 is released

Could we make the bot create them automatically? We already know when ~""missed:11.2"" should be applied, and for ~""regression:11.2"" it's probably after the end of that milestone (i.e. 23th)

What we're missing is probably just a way to create the label in https://gitlab.com/gitlab-org/gitlab-triage

/cc @meks @markglenfletcher",3
34232373,2020-05-06 18:51:02.945,Audit the current group definition for group triage reports,"Now who should be assigned and mentioned were defined at [lib/group_definition.rb](https://gitlab.com/gitlab-org/quality/triage-ops/-/blob/master/lib/group_definition.rb), and some groups were outdated from the information written on [Product sections, stages, groups, and categories](https://about.gitlab.com/handbook/product/categories/).

One example mentioned at https://gitlab.com/gitlab-org/quality/triage-ops/-/merge_requests/483#note_334640221 that ~""group::threat management""  was renamed to ~""group::threat insights"", and we need to reflect that.

I'll go over it and also split engineering managers so we can reuse better for https://gitlab.com/gitlab-org/quality/triage-ops/-/merge_requests/483

For example, change this:

``` ruby
def group_analytics
  {
    mentions: %w[@dennis @djensen @npost @jshackelford @wortschi],
    assignees: %w[@dennis @djensen @jshackelford @wortschi],
    labels: ['group::analytics']
  }
end
```

To this:

``` ruby
def group_analytics
  {
    pm: %w[@jshackelford],
    em: %w[@wortschi @djensen],
    product_design: %w[@npost],
    labels: ['group::analytics']
  }
end
```

I am confused if `@dennis` is a frontend engineering manager for this group, so I think I might need to ask a lot of people for confirming the new list...

/cc @gl-quality/eng-prod",5
34186745,2020-05-06 07:10:52.276,Specs are broken in `master`,Job [#539322500](https://gitlab.com/gitlab-org/quality/triage-ops/-/jobs/539322500) failed for bbde31cf2d9b07fe17b65d41b04bdf31a2b9ab54:,1
34162336,2020-05-05 15:49:05.150,Create a new set of scoped labels for product Sections,"## Summary

I'd like to see scoped labels for GitLab Sections (Dev, Ops, Secure, Enablement), as part of our [product hierarchy](https://about.gitlab.com/handbook/product/categories/#hierarchy). This scoped label would be applied automatically whenever a group:: label is present that aligns to a group within that section in our product hierarchy.

## Why

My motivation is that it would help me personally search across all issues with a certain additional label (for instance all P1 bugs, Customer, or CEO Interest) across the entire section. In that regard it has a limited set of potential users, namely myself and other section leaders.


## Plan

- [X] Create labels for section
  * ~""section::dev"" 
  * ~""section::enablement"" 
  * ~""section::growth"" 
  * ~""section::ops"" 
  * ~""section::securedefend"" 
- [x] Notify in #development, #product prior to the first run of the inference so that subscribers can turn off. [Slack](https://gitlab.slack.com/archives/CU4RJDQTY/p1596722811156600)
- [ ] Add section inference to auto-label inference that applies without a comment from GitLab bot
  * Infer and apply section label from group label
  * Update documentation at https://about.gitlab.com/handbook/engineering/quality/triage-operations/#auto-labelling-of-issues => https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/57538
  * Communicate via Slack and What's Happening at GitLab",3
34153691,2020-05-05 12:25:28.909,Group::Spaces changes,"## Summary

~""group::spaces"" is being absorbed into ~""group::access"" with https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/48457. We need to ensure that the triage reports and labels are updated with the change. 

For every case above, the Engineering Productivity team needs to ensure that:

* The label change is factored into the triage mechanism.
* Engineering Dashboards at <https://quality-dashboard.gitlap.com/groups/gitlab-org> are updated.
* Old labels are migrated correctly on affected issues and merge requests.

### Action items

* [-] (If applicable) Dashboard creation: create or update the stage/group in <https://gitlab.com/gitlab-org/gitlab-insights/blob/master/lib/gitlab_insights.rb>.
* [x] https://gitlab.com/gitlab-org/quality/triage-ops/-/merge_requests/500 (If applicable) Label migration on existing issues and merge requests: apply the new label to opened & closed issues, and open & merged merge requests.
  * [x] Check if label migration will apply labels which have subscribers.
    [Communicate with the subscribers](https://about.gitlab.com/handbook/engineering/quality/triage-operations/#communicate-early-and-broadly-about-expected-automation-impact)
    before applying the label migration.
* [x] (If applicable) Archive the old label with renaming and adding ""DEPRECATED"" at the end of the label name.
* [-] (If applicable) Delete the old dashboard views using the deprecated labels.
* [x] https://gitlab.com/gitlab-org/quality/triage-ops/-/merge_requests/499 (If applicable) Update the group triage report definition to use the new label
* [-] (If applicable) Update the group label's description to refer to the new Stage.

/cc @gl-quality/eng-prod",2
33601275,2020-04-22 01:15:28.024,Category::Billing does not exist,"## Problem

The `gitlab-org:stage-and-group-labels-hygeine` job failed and retried the job 2 additional times in https://gitlab.com/gitlab-org/quality/triage-ops/pipelines/138494857. https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/43007 was merged earlier today which introduced a new Billing Category but did not have a label. 

This caused the Label Inference comment to be applied 3 times since the label didn't exist like:
![image](/uploads/3a46502c8a37c7f2aee269ccbcd96117/image.png)",1
33558413,2020-04-21 08:09:49.278,Failure in `gitlab-org:stage-and-group-labels-hygiene`,"Job [#519421583](https://gitlab.com/gitlab-org/quality/triage-ops/-/jobs/519421583) failed for 1dff6a9bb586b085772b21f3a94a0caafaf2c46b:

```
 .[DEBUG] query_api: https://gitlab.com/api/v4/groups/9970/issues?per_page=100&state=opened&page=390/builds/gitlab-org/quality/triage-ops/lib/devops_labels.rb:330:in `group_part_of_stage?': undefined method `include?' for nil:NilClass (NoMethodError)
 	from /builds/gitlab-org/quality/triage-ops/lib/devops_labels.rb:383:in `inference_strategy_for_merge_request'
 	from /builds/gitlab-org/quality/triage-ops/lib/devops_labels.rb:420:in `infer_new_labels'
 	from /builds/gitlab-org/quality/triage-ops/lib/devops_labels.rb:351:in `new_stage_and_group_labels_from_intelligent_inference'
 	from /builds/gitlab-org/quality/triage-ops/lib/devops_labels.rb:355:in `comment_for_intelligent_stage_and_group_labels_inference'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/lib/gitlab/triage/resource/context.rb:24:in `eval'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/lib/gitlab/triage/resource/context.rb:22:in `instance_eval'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/lib/gitlab/triage/resource/context.rb:22:in `eval'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/lib/gitlab/triage/command_builders/text_content_builder.rb:65:in `eval_interpolation'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/lib/gitlab/triage/command_builders/text_content_builder.rb:55:in `format_item'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/lib/gitlab/triage/command_builders/base_command_builder.rb:30:in `block in content_string'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/lib/gitlab/triage/command_builders/base_command_builder.rb:29:in `map'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/lib/gitlab/triage/command_builders/base_command_builder.rb:29:in `content_string'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/lib/gitlab/triage/command_builders/base_command_builder.rb:12:in `build_command'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/lib/gitlab/triage/action/comment.rb:42:in `build_comment'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/lib/gitlab/triage/action/comment.rb:31:in `block in act'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/lib/gitlab/triage/policies_resources/rule_resources.rb:15:in `block in each'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/lib/gitlab/triage/policies_resources/rule_resources.rb:14:in `each'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/lib/gitlab/triage/policies_resources/rule_resources.rb:14:in `each'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/lib/gitlab/triage/action/comment.rb:30:in `act'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/lib/gitlab/triage/action.rb:24:in `act'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/lib/gitlab/triage/action.rb:12:in `block in process'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/lib/gitlab/triage/action.rb:11:in `each'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/lib/gitlab/triage/action.rb:11:in `process'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/lib/gitlab/triage/engine.rb:178:in `process_action'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/lib/gitlab/triage/engine.rb:115:in `block (2 levels) in process_rules'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/lib/gitlab/triage/engine.rb:167:in `block in resources_for_rule'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/lib/gitlab/triage/expand_condition.rb:13:in `each'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/lib/gitlab/triage/expand_condition.rb:13:in `perform'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/lib/gitlab/triage/engine.rb:151:in `resources_for_rule'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/lib/gitlab/triage/engine.rb:111:in `block in process_rules'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/lib/gitlab/triage/engine.rb:110:in `each'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/lib/gitlab/triage/engine.rb:110:in `process_rules'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/lib/gitlab/triage/engine.rb:57:in `block in perform'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/lib/gitlab/triage/engine.rb:52:in `each'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/lib/gitlab/triage/engine.rb:52:in `perform'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/bin/gitlab-triage:15:in `block in <top (required)>'
 	from /usr/local/lib/ruby/2.6.0/set.rb:338:in `each_key'
 	from /usr/local/lib/ruby/2.6.0/set.rb:338:in `each'
 	from /usr/local/bundle/gems/gitlab-triage-1.7.1/bin/gitlab-triage:10:in `<top (required)>'
 	from /usr/local/bundle/bin/gitlab-triage:23:in `load'
 	from /usr/local/bundle/bin/gitlab-triage:23:in `<main>'
```",2
33132638,2020-04-10 09:38:39.824,Investigate why are we triggering a lot of unuseful pipelines,"The only thing those pipelines were doing was `lint-policies`, and apparently we don't need them? /cc @gl-quality/eng-prod 

![Screen_Shot_2020-04-10_at_17.33.41](/uploads/770eec5a7b715d1328fc39aa6d691068/Screen_Shot_2020-04-10_at_17.33.41.png)",1
33104059,2020-04-09 14:20:40.681,Update Relevant Labels and Automation to remove the word `Grooming`,"[This MR](https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/45894) added Grooming to our mis-used terms. 

There was one follow-up action from that MR:

> Adjust labels with the word Grooming in them in [GitLab.org](https://gitlab.com/groups/gitlab-org/-/labels?utf8=%E2%9C%93&subscribed=&search=grooming) and [GitLab.com](https://gitlab.com/groups/gitlab-com/-/labels?utf8=%E2%9C%93&subscribed=&search=grooming) projects 

Can we adjust the labels as appropriate and update any automation which references them?",1
33065698,2020-04-08 19:11:17.356,Idle merge request triage report,"## Problem

Merge requests are being idle with no activity on them and are merged more than 30 days from the time when they are opened. [March release analysis](https://docs.google.com/document/d/1o9cJACy8ACxUS2WpvdFdikuIR_Db6Bxdbzja-e9aBGc/edit#) showed that 4% of all MRs in March took more than 30 days to merge (122). We want to better understand this population and determine if automation can help reduce number.

## Plan

Create a stale merge request group triage package which collects group MRs that have been `updated_at` `older_than` `4 weeks` and run every two weeks. The triage package will be assigned to the group Engineering Managers.

- Assigned to: Group Engineering managers
- Report frequency: On 8th and 23rd every month

### Template 

>>>
Hi #{assignee}!

This is a group level idle merge request report. This report contains open Merge Requests that have not been updated in four weeks for review. 

> Please review these merge requests to identify if there are any steps that can shorten the time to merge, such as reminding the author about it, changing the DRI, etc.
---

## Stale merge requests

1. [gitlab-org/gitlab!123](link-to-mr) - MR Title
1. [gitlab-org/gitlab!234](link-to-mr) - MR Title

>>>

## References

- https://docs.google.com/document/d/1o9cJACy8ACxUS2WpvdFdikuIR_Db6Bxdbzja-e9aBGc/edit#
- https://docs.google.com/spreadsheets/d/1hTPsJ1ueYfzjgqc3vDsRa5iGOEtbTsNrVfYJNh5oifM/edit#gid=24949791
- Handbook update: https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/48764",5
32339785,2020-03-23 14:41:49.581,Update assignment of triage reports for Templates group to Import group,"## Summary

Now that ownership of Templates is back with Import group, please update assignees of Templates group triage reports (example: https://gitlab.com/gitlab-org/gitlab/-/issues/212113) to the PM, EM, PD for the [Import group](https://about.gitlab.com/handbook/product/categories/#import-group).",1
32102619,2020-03-17 19:48:20.384,Remove testcases default labeling,"## Problem

The ~""group::not_owned"" default label that is applied to issues in https://gitlab.com/gitlab-org/quality/testcases/-/issues will be creating confusion with ~""group::not_owned"" being looked at for a potential Product triage package: https://gitlab.com/gitlab-com/www-gitlab-com/-/issues/6245

Originally this policy was added with https://gitlab.com/gitlab-org/quality/triage-ops/-/issues/345

## Proposal

- [ ] Turn off policy for ~""group::not_owned"" on the testcases project 
- [ ] Unlabel issues with ~""group::not_owned"" within testcases project & label with ~Quality.",2
32099515,2020-03-17 17:45:30.525,Triage automation for devops::verify to report missing category fails to detect Category:MergeTrains is applied,"The triage automation/report for ~""devops::verify"" to report missing category fails to detect when an issue already has the ~""Category:Merge Trains"" label applied.

The ~""Category:Merge Trains"" was recently moved from Release stage to Verify stage in https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/41969.",1
32076281,2020-03-17 11:21:16.026,Rename `triage-package` to `triage-report`,"## Summary

This template is for the following types of label changes

* Adding a new Stage or Group
* Renaming an existing Stage or Group

For every case above, the Engineering Productivity team needs to ensure that:

* The label change is factored into the triage mechanism.
* Old labels are migrated correctly on affected issues and merge requests.

### Action items

* [ ] (If applicable) Rename ~""triage-package"" to ~""triage-report""
* [ ] (If applicable) Update the triage mechanism to use the new label


/cc @gl-quality/eng-prod",2
31823511,2020-03-10 09:37:15.367,Category inference failure when Department label and no stage label applied to MR,Job [#461562992](https://gitlab.com/gitlab-org/quality/triage-ops/-/jobs/461562992) failed for 24f0438428c1d6b553df2e5d5b771a82485ed496:,2
31572347,2020-03-04 23:34:42.147,Global Search group and category name change,"As part of https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/42162 the `Search` group and category were changed to `Global Search`.

We also used the feature label `elasticsearch` heavily which I'd like to rename to:

`Advanced Global Search`

If we could also introduce one for `Basic Global Search` that would be ideal as well.


Please let me know if additional details are needed.

## Summary

This template is for the following types of label changes

* Adding a new Stage or Group
* Renaming an existing Stage or Group

For every case above, the Engineering Productivity team needs to ensure that:

* The label change is factored into the triage mechanism.
* Engineering Dashboards at <https://quality-dashboard.gitlap.com/groups/gitlab-org> are updated.
* Old labels are migrated correctly on affected issues and merge requests.

### Action items

* [x] Rename ~""group::search"" to ~""group::global search"" 
* [x] Rename ~""Category:Search"" to ~""Category:Global Search"" 
* [x] Rename ~elasticsearch to ~""advanced global search"" 
* [x] Update the group triage package definition to use the new label: https://gitlab.com/gitlab-org/gitlab-insights/-/merge_requests/190
* [-] (If applicable) Dashboard creation: create or update the stage/group in <https://gitlab.com/gitlab-org/gitlab-insights/blob/master/lib/gitlab_insights.rb>.
* [-] (If applicable) Label migration on existing issues and merge requests: apply the new label to opened & closed issues, and open & merged merge requests.
* [-] (If applicable) Archive the old label with renaming and adding ""DEPRECATED"" at the end of the label name.
* [-] (If applicable) Delete the old dashboard views using the deprecated labels.

/cc @gl-quality/eng-prod",2
31552853,2020-03-04 15:26:07.205,Add Triage Policy for Support Forum Auto-Close,"## Proposal

As apart of https://gitlab.com/gitlab-com/support/support-team-meta/issues/1346#plan, create a new daily policy to lock and close issues in https://gitlab.com/gitlab-com/support-forum/ that have not had a comment in last 30 days. 

This policy would be similar to https://gitlab.com/gitlab-org/quality/triage-ops/-/blob/master/policies/projects/gitlab-foss/move-gitlab-foss-issues-to-gitlab.yml. 

```
conditions:
  state: opened
```

Post a message within https://gitlab.com/gitlab-com/support/support-team-meta/issues/1346#plan

>>>
Hey! :wave:

We're closing the Support Forum issue tracker in favor of the [community forum](https://forum.gitlab.com) and [support channels](https://about.gitlab.com/support/#contact-support). We recognize that the Support Forum issue tracker has not received much attention in the last few months, and want to redirect our community members to locations that are regularly monitored by GitLab staff.

As a result, we are closing all issues.

If the issue you're facing is a *reproducible* bug, please search for an existing issue on the [GitLab project tracker](https://gitlab.com/gitlab-org/gitlab/issues) or [file a bug issue](https://gitlab.com/gitlab-org/gitlab/issues/new?issuable_template=Bug).

If you are still encountering an issue, please raise a new one in the [appropriate place](https://gitlab.com/gitlab-com/support-forum/-/blob/master/README.md) and link back to the closed issue if there's any important context that should be preserved.

The current project will become a read-only project with an [updated Readme](https://gitlab.com/gitlab-com/support-forum/-/blob/master/README.md) on where to raise new issues.
>>>
  

## Open Questions

- [x] Is `updated_at` for the issue sufficient? This is [available through `gitlab-triage`](https://gitlab.com/gitlab-org/gitlab-triage#date-condition) and would make the policy simpler. 
- [x] Are support forum issues being moved to gitlab-org/gitlab or closed? Based on https://gitlab.com/gitlab-com/support/support-team-meta/issues/1346#note_283532621 it seems move but I'm not sure that's the right action for every support-forum issue.",1
31464931,2020-03-02 16:04:25.463,Issues without category report includes issues with category,"https://gitlab.com/gitlab-org/gitlab/issues/208610 has issues listed that include Category labels for ~""devops::release"" 

For example: 

- https://gitlab.com/gitlab-org/gitlab/issues/207978 includes ~""Category:Auto DevOps"" and ~""Category:Kubernetes Management"" 
- https://gitlab.com/gitlab-org/gitlab/issues/207852 includes ~""Category:Release Governance"" 
- https://gitlab.com/gitlab-org/gitlab/issues/34264 includes ~""Category:Audit Events"" and ~""Category:Release Governance""",1
31282982,2020-02-26 10:27:54.685,Job Failed #450362191,Job [#450362191](https://gitlab.com/gitlab-org/quality/triage-ops/-/jobs/450362191) failed for 58f58f85f934396aa1d1b9d27ec49cebc8792c53:,1
31219208,2020-02-24 22:45:06.133,"Apply ~""Community Contribution"" for merged_mrs","## Objective

Minimize the amount of manual ~""Community contribution"" application for merged community MRs like: https://gitlab.com/gitlab-org/gitlab/-/merge_requests/23301#note_292568353

## Proposal 

- [ ] Apply ~""Community contribution"" for **open and merged** Merge Requests from `non-gitlab-org` members that are not already labelled ~""Community contribution"".",2
31194559,2020-02-24 09:49:20.632,Job Failed #447201719,"Job [#447201719](https://gitlab.com/gitlab-org/quality/triage-ops/-/jobs/447201719) failed for 8f50ea662e700592959afdb7e516ba5f4c76de6d:

Unlabelled issue triage reports are failing to be created due to a missing constant",1
31046524,2020-02-19 22:23:17.049,Deliverable labels removed from 12.8,"Yesterday, the Deliverable labels were removed from open 12.8 Deliverables. It looks like it may have been done by the jobs in https://gitlab.com/gitlab-org/quality/triage-ops/-/merge_requests/366

https://gitlab.com/gitlab-org/omnibus-gitlab/issues/4838 is an example where it removed the Deliverable label, without updating the milestone or setting the missed label? That the time this issue was a Deliverable assigned to 12.8 . In distribution we encountered this on a handful of issues that we were expecting to be moved to 12.9


cc\ @ljlane @mendeni",1
30942039,2020-02-17 18:54:11.122,Execution order for Label Inference and Triage Report,"## Problem

The order of Category Label Inference and Triage report is causing some confusion and I'm not able to easily track down what ran when with the large amount of pipelines. . 

From @jyavorska on [Slack](https://gitlab.slack.com/archives/C3JJET4Q6/p1581932656014900): 

>>> 
Hello, possibly it's still expected but I noticed the bots ran out of order again - I received triage reports of the need to apply category labels that another bot came along and automatically applied category labels to. (edited) 
>>>

- [ ] What is the order for the pipelines on 2020-02-16 on `gitlab-org`
  - Label Inference daily: https://gitlab.com/gitlab-org/quality/triage-ops/-/jobs/439127366
  - Team Triage weekly: https://gitlab.com/gitlab-org/quality/triage-ops/-/jobs/439125366
- [ ] Is there a way to simplify this or ensure that triage packages are created after the label inference for that week.",2
30743550,2020-02-14 07:36:37.934,Add group name prefix to job names,"Add prefix `gitlab-org` to the following jobs:
- `label-merge-request-author-group`
- `stage-and-group-labels-hygiene`

Follow up from https://gitlab.com/gitlab-org/quality/triage-ops/-/merge_requests/390#note_287596184)
",1
30609168,2020-02-11 03:07:49.198,"Draft a plan for an escalation chain for ~availability S1, S2, and S3 have exceeded the time to resolve","## Proposal

* [ ] Draft a plan for an escalation chain when ~S1, ~S2, and ~S3 have exceeded the time to resolve.",3
30609075,2020-02-11 03:00:47.254,Apply ~bug to ~availability issues,"## Proposal 

- [ ] Add a hygiene rule for the gitlab-org group level which will apply ~bug for all issues labeled ~availability without ~bug. 

* See @meks reasoning here:

> As I stated before in https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/39270#note_280407345, ~availability issues are a category of bugs, we don't have a good hygiene on label yet (which we will fix with automation). This iteration aims to have better clarity and specifics on how to deal with bugs/defects that immediately impacts GitLab.com ~availability. The overall ~bug pie is huge, this sets out to make a subset of that better with clearer and specific actionable steps.",2
30608965,2020-02-11 02:53:36.586,"Add new section to Triage Report for ~""availability"" issues","## Proposal

- [ ] Add a ~availability Issues section to the triage report above the ~bug section.
  - [ ] List issue by severity/priority for all group + ~availability issues",2
30526041,2020-02-08 00:33:29.024,Label automation enforcement for ~availability issues in product facing projects,"Per the new ~availability Priorization and Severity scheme https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/39270 we should do a few triage-ops automation to help enforce and raise awareness. 

### Triage report 

- [x] Add a new section above ~bug to list issues that are labelled with ~availability - https://gitlab.com/gitlab-org/quality/triage-ops/issues/406

### Triage Automation

- [x] Label issues that have ~availability with ~bug. ~availability is another category of bugs. - https://gitlab.com/gitlab-org/quality/triage-ops/issues/407
  - See my reasoning here:
  - > As I stated before in https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/39270#note_280407345, ~availability issues are a category of bugs, we don't have a good hygiene on label yet (which we will fix with automation). This iteration aims to have better clarity and specifics on how to deal with bugs/defects that immediately impacts GitLab.com ~availability. The overall ~bug pie is huge, this sets out to make a subset of that better with clearer and specific actionable steps.
- [x] Enforce [prioritization band](https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/39270#prioritization-band) with Triage Serverless. - https://gitlab.com/gitlab-org/quality/triage-serverless/issues/22
  - When an issue with ~availability has a Severity label, automatically add the minimally allowed Priority label.
    - ~availability ~S1 => ~P1 
    - ~availability ~S2 => ~P1 
    - ~availability ~S3 => ~P2
    - ~availability ~S4 => ~P3 
  - Enforce prioritization, we do not allow the following labels
    - ~availability ~S1 cannot have ~P2 ~P3 ~P4 it can only have ~P1
    - ~availability ~S2 cannot have ~P2 ~P3 ~P4 it can only have ~P1
    - ~availability ~S3 cannot have ~P3 ~P4 it can only have ~P2 or ~P1 (extra credit)
    - ~availability ~S4 cannot have ~P4 it can only have ~P3 or ~P2 / ~P1 (extra credit)
- [x] Draft a plan for an escalation chain when ~S1, ~S2, and ~S3 have exceeded the time to resolve. - https://gitlab.com/gitlab-org/quality/triage-ops/-/issues/426
- [x] Add dashboards to visualize - https://gitlab.com/gitlab-org/gitlab-insights/issues/161

---- 

| Severity | Availability Impact | Reproducibility | Time to resolve | Deployment target | Minimum priority |
| -------- | ------- | -------------- | --------------- | ----------------- | ----------------- |
| ~S1 | Roadblock on GitLab.com and blocking customer's business goals and day-to-day workflow | Consistently reproducible | Within 48 hrs | Hotfix to GitLab.com | ~P1 |
| ~S2 | Significant impact on GitLab.com and customer's day-to-day workflow. Customers have an acceptable workaround in place. | Consistently reproducible | Within 5 business days | Next deployment window after resolution | ~P1 |
| ~S3 | Broad impact on GitLab.com and minor inconvenience to customer's day-to-day workflow. No workaround needed.  | Inconsistently reproducible | Within 30 days | Next release after resolution | ~P2 |
| ~S4 | Minimal impact on GitLab.com, no known customers affected | Inconsistently reproducible | Within 60 days  | Next release after resolution | ~P3 |

Merge request https://gitlab.com/gitlab-com/www-gitlab-com/merge_requests/39270/diffs

## Prioritization band

To call out specifics on what priorities can be set on an ~availability issue, please refer to the table below.

As we implement these labels, we can have triage automation enforce these priorities based on the labels set forth.

| Issue  | Allowed Priorities |
| ------ | ------ |
| ~availability ~S1  | ~P1 only |
| ~availability ~S2  | ~P1 only |
| ~availability ~S3  | ~P2 as baseline, ~P1 allowed |
| ~availability ~S4  | ~P3 as baseline, ~P2 ~P1 allowed |",8
30279780,2020-02-03 04:32:52.639,Use Issue and Merge Request resource class to determine how to infer the labels,"Previously the method `#new_stage_and_group_labels_from_intelligent_inference` uses `infer_from_category: false` for merge request label inferrence.

With https://gitlab.com/gitlab-org/quality/triage-ops/-/merge_requests/390#note_281173182, the inference between an Issue and Merge Request are becoming orthogonal.

I'm suggesting to change from using `infer_from_category` flag to determine whether to infer for an MR or an issue to using the resource class itself.",1
30278633,2020-02-03 03:31:40.683,Add comment mentioning that the author's correct group could not be determined,"Following from https://gitlab.com/gitlab-org/quality/triage-ops/-/merge_requests/390#note_278719721, some MRs may not have group label applied because the author's correct group could not be determined.

This may happen in the following scenarios:
- MR author is a gitlab team member:
  - The MR author's group is not listed in `www-gitlab-com` `data/team.yml` under `departments`
  - The MR author may belong to more than one teams (e.g member of one team and intern in another)
- MR author is a community member

/cc @gl-quality/eng-prod",3
30144257,2020-01-31 10:37:54.874,Cut down on assignees on group triage report issues,"### Summary

Sometimes group triage report issues are created but do not need to cover a certain topic.

For example, all frontend bugs are scheduled so there is no section for frontend bugs. In this case we still assign the Frontend Engineering Manager to the triage report. Let's make it so that people that do not need to be involved in a triage report are not assigned

### Aims

- Cut down on the number of triage reports that people are unnecessarily assigned to
  - Hopefully this will make triage reports less annoying and improve engagement

### Proposal

Instead of using a collection of assignees, use a Hash by department type and add a quick action to assign the relevant users as part of their summary action",3
30081975,2020-01-29 11:21:58.542,"Delete ""[DEPRECATED]"" label","### Description

Hi there! This is Arturo from the Ecosystem team (cc. @nhxnguyen). We like to remove one label: team-tasks~10375644 because we are now using team-tasks~10690808.

I've searched for the issues and merge requests with that label and we can safely remove the label, see:
- https://gitlab.com/groups/gitlab-org/-/issues?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=Ecosystem%20%5BDEPRECATED%5D
- https://gitlab.com/groups/gitlab-org/-/merge_requests?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=Ecosystem%20%5BDEPRECATED%5D

Can you help us with that, please?

### Plan

We have deleted ~""Ecosystem [DEPRECATED]"", we are currently evaluating if anything broke, if nothing adverse was an effect, we can start deleting all of them. 

- [-] Create a record of issues which do not have a go forward devops:: label based on legacy team label: https://gitlab.com/gitlab-org/quality/triage-ops/issues/399#note_293402819
- [x] Remove team labels from label inference for Triage Ops: https://gitlab.com/gitlab-org/quality/triage-ops/-/blob/47ee6d33bde3eb142dbd11bf7918037660ee8a0b/lib/devops_labels.rb#L20-41 => https://gitlab.com/gitlab-org/quality/triage-ops/-/merge_requests/432
- [x] Remove Deprecated team dashboards from the Quality Dashboard: https://quality-dashboard.gitlap.com/groups/gitlab-org/teams => https://gitlab.com/gitlab-org/gitlab-insights/-/merge_requests/191
- [x] Delete the following labels
  - [x] ~""CI/CD [DEPRECATED]"" ([0 open issues](https://gitlab.com/groups/gitlab-org/-/issues?scope=all&utf8=✓&state=opened&label_name[]=CI%2FCD%20%5BDEPRECATED%5D), [0 open MRs](https://gitlab.com/groups/gitlab-org/-/merge_requests?scope=all&utf8=✓&state=opened&label_name[]=CI%2FCD%20%5BDEPRECATED%5D))
  - [x] ~""Distribution [DEPRECATED]"" ([0 open issues](https://gitlab.com/groups/gitlab-org/-/issues?scope=all&utf8=✓&state=opened&label_name[]=Distribution%20%5BDEPRECATED%5D), [0 open MRs](https://gitlab.com/groups/gitlab-org/-/merge_requests?scope=all&utf8=✓&state=opened&label_name[]=Distribution%20%5BDEPRECATED%5D))
  - [x] ~""Gitaly [DEPRECATED]"" ([0 open issues](https://gitlab.com/groups/gitlab-org/-/issues?scope=all&utf8=✓&state=opened&label_name[]=Gitaly%20%5BDEPRECATED%5D), [0 open MRs](https://gitlab.com/groups/gitlab-org/-/merge_requests?scope=all&utf8=✓&state=opened&label_name[]=Gitaly%20%5BDEPRECATED%5D))
  - [x] ~""Memory [DEPRECATED]"" ([0 open issues](https://gitlab.com/groups/gitlab-org/-/issues?scope=all&utf8=✓&state=opened&label_name[]=Memory%20%5BDEPRECATED%5D), [0 open MRs](https://gitlab.com/groups/gitlab-org/-/merge_requests?scope=all&utf8=✓&state=opened&label_name[]=Memory%20%5BDEPRECATED%5D))
  - [x] ~""Gitter [DEPRECATED]"" ([0 open issues](https://gitlab.com/groups/gitlab-org/-/issues?scope=all&utf8=✓&state=opened&label_name[]=Gitter%20%5BDEPRECATED%5D), [0 open MRs](https://gitlab.com/groups/gitlab-org/-/merge_requests?scope=all&utf8=✓&state=opened&label_name[]=Gitter%20%5BDEPRECATED%5D))
  - [x] ~""Growth [DEPRECATED]"" ([0 open issues](https://gitlab.com/groups/gitlab-org/-/issues?scope=all&utf8=✓&state=opened&label_name[]=Growth%20%5BDEPRECATED%5D), [0 open MRs](https://gitlab.com/groups/gitlab-org/-/merge_requests?scope=all&utf8=✓&state=opened&label_name[]=Growth%20%5BDEPRECATED%5D))
  - [x] ~""Monitor [DEPRECATED]"" ([0 open issues](https://gitlab.com/groups/gitlab-org/-/issues?scope=all&utf8=✓&state=opened&label_name[]=Monitor%20%5BDEPRECATED%5D), [0 open MRs](https://gitlab.com/groups/gitlab-org/-/merge_requests?scope=all&utf8=✓&state=opened&label_name[]=Monitor%20%5BDEPRECATED%5D))
  - [x] ~""Package [DEPRECATED]"" ([0 open issues](https://gitlab.com/groups/gitlab-org/-/issues?scope=all&utf8=✓&state=opened&label_name[]=Package%20%5BDEPRECATED%5D), [0 open MRs](https://gitlab.com/groups/gitlab-org/-/merge_requests?scope=all&utf8=✓&state=opened&label_name[]=Package%20%5BDEPRECATED%5D))
  - [x] ~""Release [DEPRECATED]"" ([0 open issues](https://gitlab.com/groups/gitlab-org/-/issues?scope=all&utf8=✓&state=opened&label_name[]=Release%20%5BDEPRECATED%5D), [0 open MRs](https://gitlab.com/groups/gitlab-org/-/merge_requests?scope=all&utf8=✓&state=opened&label_name[]=Release%20%5BDEPRECATED%5D))
  - [x] ~""Serverless [DEPRECATED]"" ([0 open issues](https://gitlab.com/groups/gitlab-org/-/issues?scope=all&utf8=✓&state=opened&label_name[]=Serverless%20%5BDEPRECATED%5D), [0 open MRs](https://gitlab.com/groups/gitlab-org/-/merge_requests?scope=all&utf8=✓&state=opened&label_name[]=Serverless%20%5BDEPRECATED%5D))
  - [x] ~""Defend [DEPRECATED]"" ([0 open issues](https://gitlab.com/groups/gitlab-org/-/issues?scope=all&utf8=✓&state=opened&label_name[]=Defend%20%5BDEPRECATED%5D), [0 open MRs](https://gitlab.com/groups/gitlab-org/-/merge_requests?scope=all&utf8=✓&state=opened&label_name[]=Defend%20%5BDEPRECATED%5D))
  - [x] ~""Secure [DEPRECATED]"" ([0 open issues](https://gitlab.com/groups/gitlab-org/-/issues?scope=all&utf8=✓&state=opened&label_name[]=Secure%20%5BDEPRECATED%5D), [0 open MRs](https://gitlab.com/groups/gitlab-org/-/merge_requests?scope=all&utf8=✓&state=opened&label_name[]=Secure%20%5BDEPRECATED%5D))
  - [x] ~""Platform [DEPRECATED]"" ([738 open issues](https://gitlab.com/groups/gitlab-org/-/issues?scope=all&utf8=✓&state=opened&label_name[]=Platform%20%5BDEPRECATED%5D), [0 open MRs](https://gitlab.com/groups/gitlab-org/-/merge_requests?scope=all&utf8=✓&state=opened&label_name[]=Platform%20%5BDEPRECATED%5D)) => can be safely removed since it was split into Manage, Plan, Create.
  - [x] ~""Verify [DEPRECATED]"" 
  - [x] ~""Configure [DEPRECATED]"" 
- [ ] Get https://gitlab.com/gitlab-org/quality/triage-ops/issues/242 done and delete:
  - [ ] ~""Create [DEPRECATED]"" 
  - [ ] ~""Plan [DEPRECATED]"" 
  - [ ] ~""Manage [DEPRECATED]"" ",5
29995171,2020-01-27 18:59:43.338,Review Communiuty contributions MR report for 01-27-2020,"The weekly report only ran for Runner this week, and I didn't see a report for `gitlab-org` or `gitaly`

Relevant info: https://gitlab.com/gitlab-org/quality/triage-ops/-/jobs/415424122",1
29802532,2020-01-21 12:09:10.570,Group or stage report for flaky-master specs,"There's a concern that quarantined flaky-master specs could stick around. Should we create a report around flaky-master specs that have passed a certain threshold?

## Proposal

- Add a section to the team-triage report that lists ~P1 ~""failure::flaky-test"" non-~QA issues - ~QA issues are triaged by the Quality Triage Report",1
29032460,2019-12-24 15:16:17.080,`dry-run:schedule` for now will only run the first schedule from the variants,"I realized this when I was thinking how to dry-run some of the schedules. The problematic code is in `Schedule::Manager#find_schedule!`:

``` ruby
def find_schedule!(project_path)
  schedules_specification.find do |spec|
    spec.project_path == project_path
  end ||
    raise(
      InvalidDryRunScheduleName,
      ""Cannot find schedule named #{project_path.inspect} in #{raw_schedules_path}"")
end
```

It's using `find` to find the first matching specification, however, there can have multiple ones with the same `project_path`. `find` is a linear search, so we always return the first one.

For example, in the current schedule `gitlab-org/gitaly`, there are two schedules underneath:

``` yaml
gitlab-org/gitaly:
  base:
    variables:
      TRIAGE_SOURCE_TYPE: projects
      TRIAGE_SOURCE_PATH: 2009901
  variants:
    - id: 29054 # https://gitlab.com/gitlab-org/quality/triage-ops/pipeline_schedules/29054/edit
      active: true
      description: '[DAILY] gitlab-org/gitaly'
      variables:
        # hygiene
        TRIAGE_LABEL_ACCEPTING_MERGE_REQUESTS: 1
        TRIAGE_LABEL_MISSED_SLO: 1
        TRIAGE_LABEL_REMINDERS: 1
        TRIAGE_MOVE_MILESTONE_FORWARD: 1
    - id: 29055 # https://gitlab.com/gitlab-org/quality/triage-ops/pipeline_schedules/29055/edit
      active: true
      description: '[WEEKLY] gitlab-org/gitaly'
      cron: '0 0 * * 1'
      variables:
        # package
        TRIAGE_COMMUNITY_MERGE_REQUESTS: 1
        TRIAGE_MISSING_CATEGORIES: 1
        TRIAGE_TEAM_TRIAGE_PACKAGE: 1
```

For now it'll only dry-run the first one (daily), ignoring the second one (weekly)

This might not be important to fix before we actually need it, but we need to know this limitation.

/cc @gl-quality/eng-prod",1
28938656,2019-12-20 03:48:39.466,Apply default labels for gitlab-org/charts/gitlab-runner,"## Proposal

Apply runner related labels to Issues in https://gitlab.com/gitlab-org/charts/gitlab-runner similar to https://gitlab.com/gitlab-org/quality/triage-ops/blob/master/policies/projects/gitlab-runner/default-labels.yml

    - ~""devops::verify"" 
    - ~""group::runner""
    - ~""Category:Runner""",2
28781868,2019-12-16 18:26:32.694,Update auto-labeling from the bot to account for new categories,"* Groups are now called Subgroups https://gitlab.com/gitlab-com/www-gitlab-com/merge_requests/36874
* Category updates for Manage:Compliance - Audit Events, Audit Management, and Compliance Controls https://gitlab.com/gitlab-com/www-gitlab-com/merge_requests/34261
* Static site editor to Create https://gitlab.com/gitlab-com/www-gitlab-com/merge_requests/32938
* Update Secure Stage with new Group and Categories https://gitlab.com/gitlab-com/www-gitlab-com/merge_requests/35204
* Update Defend Stage with new group ""Anomaly Detection"" and moving categories to correct group https://gitlab.com/gitlab-com/www-gitlab-com/merge_requests/35196

cc @gl-quality/eng-prod",1
27583120,2019-11-26 15:41:38.689,Feedback on Unlabelled Issues Triage Package,"## Summary

During the [EP Team meeting](https://docs.google.com/document/d/1QxRQRLP-GpiCis4oFvm0NLm1lJm6WcTP2rcYfn6RC-Y/edit#bookmark=id.1ntpraugze7) we discussed the reduced participation in the [Unlabelled issues triage package](https://about.gitlab.com/handbook/engineering/quality/triage-operations/#newly-created-unlabelled-issues-requiring-first-triage) and would like feedback on how it can be improved. 

### Improvements

- Utilize OOO status indicator for triage package - https://gitlab.com/gitlab-org/quality/triage-ops/issues/162
- Investigate making PM DRI for check for duplicate issues - https://gitlab.com/gitlab-org/quality/triage-ops/-/issues/505
- Reduce load with https://gitlab.com/gitlab-org/quality/team-tasks/-/issues/295",1
27190554,2019-11-18 21:06:56.593,"Apply ~documentation to Open ~""Community contribution"" documentation MRs","### Proposal 

Apply ~documentation to open  ~""Community contribution"" MRs that have changes to `docs/`. 

As @godfat suggested, this might be easier than trying to react with Triage-Serverless. 

From https://gitlab.com/gitlab-org/technical-writing/issues/39#note_240604168 to help facilitate ~""Community contribution"" doc improvements.",3
26641989,2019-11-04 07:37:50.078,Label missed-deliverable and missed milestones after the milestone expires but before the 22nd,"This is due to the confusion of the EMs, our self-managed customers, the wider community and also a request from the delivery team.

We have 2 dates to juggle for a given release.
1. On the 17th when the milestone expires. 
1. When we release on the 22nd.

Currently, there is still a possibility of things being part of the release even if the issue is closed after the 17th but before the 22nd. This is due to the time window between these 2 dates. There is confusion due to bot labeling. Some ~""missed-deliverable"" are still being delivered since labeling on the 17th was too soon. After discussing with @marin the general idea is to leave the milestone as they are and tack on the additional buffer with the bot labelling.


Until we can actually infer via automation, how every change makes it through to production, we have the below as an iteration.

### Proposal 

Label ~""missed-deliverable"" and `missed:x.y` version on the last business day before the 22nd.
* If the 22nd falls on a friday, we label this on thursday the 21th.
* If the 22nd falls on a monday, we label this on friday the 19th.
* If the 22nd falls on either weekend days, we label this on friday the 21th or the 20th.

This labeling will happen on the last business day at midnight pacific time. 

#### Implementation

For the logic, we are already pulling from the milestone dates. I am proposing that this should be an addon so we still rely on what is in `gitlab-org` milestones but calculate it in respect to the 22nd. 

* From a given milestone, find the last day (expire date) that will give us the month/year.
* From the month/year look up what day is the 21st of that month/year. 
  * If the 21st is a weekday, bot runs labelling on that day.
  * If the 21st is sunday, bot runs labelling on the 19th.
  * If the 21st is saturday, bot runs labelling on the 20th.


Thoughts @godfat @gl-quality/eng-prod ?

cc @marin @gitlab-org/delivery",3
26538049,2019-10-31 20:07:18.424,"Setup Search team triage report and make Changzheng Liu, the new EM of Search, a recipient of `group::search` triage report","## Summary

Search team is new. If the triage report has not been setup, please set it up in the bot.

Please make @changzhengliu the recipient of this triage report.

* [ ] Triage packages
   * Group triage packages
* WIP: Infer stage and group labels from subject labels
",2
26276381,2019-10-24 13:02:15.424,Adopt merge request pipelines,"Following up from https://gitlab.com/gitlab-org/quality/triage-ops/merge_requests/325#note_235030694

We need to fully move to merge request pipelines, otherwise some pushes might create confusing two pipelines at the same time!

![Screen_Shot_2019-10-24_at_20.17.46](/uploads/685a3e95090e0085c190716fe06ce4e2/Screen_Shot_2019-10-24_at_20.17.46.png)

On the above screenshot, we can also see the pipelines are out of orders.",2
26263337,2019-10-24 07:36:34.614,Update `group::orchestration` triage package EM from @DylanGriffith to @sengelhard,,1
26184390,2019-10-22 08:14:23.591,Add a way to automatically manage pipeline schedules,"We start to have many pipeline schedules so that would be easier to have a script that automatically manages them for us, based on a specification YAML file.

1. Pipeline schedules are specified in a `pipeline-schedules.yml` YAML file
1. Pipeline schedules are synchronized automatically on every `master` commit
1. The same job runs with `--dry-run` on MRs",3
97475064,2019-09-27 08:12:45.429,Notification ping when the number of unique Zendesk or Salesforce links reach a threshold,"The step 2 at https://gitlab.com/gitlab-org/quality/triage-ops/issues/156

* Count the number of unique zendesk links in the discussions / comments.
* If 5 and above mention the Engineering Manager and Product Manager for that group.
* If more than 7 and above mention the Dir of Product for that group.
* No need to store any caching we just get a count before adding logic to the notification.",3
25068466,2019-09-20 22:16:56.160,Make priority and severity scoped labels,"Per @tipyn in https://gitlab.slack.com/archives/C3JJET4Q6/p1568852155060400

We also have discussed making ~S1 ~S2 .. and ~P1 ~P2 labels scoped before. https://gitlab.com/gitlab-org/gitlab/issues/27906#priorities-and-severities

Right now as teams and groups are getting better at using these labels we should consider changing them to scoped labels so that only one of the labels are present when changing. 

### Priority
* ~P1 to ~""priority::1"" 
* ~P2 to ~""priority::2""
* ~P3 to ~""priority::3""
* ~P4 to ~""priority::4""

### Severity
* ~S1 to ~""severity::1""
* ~S2 to ~""severity::2""
* ~S3 to ~""severity::3""
* ~S4 to ~""severity::4""

I believe the next steps are to estimate the work and changes need in all of our systems. Triage automation and charts to reflect this. 

## Steps:

0. [x] `gitlab-org/gitlab` :arrow_right: https://gitlab.com/gitlab-org/gitlab/-/merge_requests/39136 and https://gitlab.com/gitlab-org/gitlab/-/merge_requests/40280
0. [x] `gitlab-org/release-tools` :arrow_right: https://gitlab.com/gitlab-org/release-tools/-/merge_requests/1151
0. [x] `gitlab-com/www-gitlab-com` :arrow_right: https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/59662
0. [x] `gitlab-org/quality/triage-ops` :arrow_right: https://gitlab.com/gitlab-org/quality/triage-ops/-/merge_requests/574
0. [x] `gitlab-org/gitlab-insights` :arrow_right: https://gitlab.com/gitlab-org/gitlab-insights/-/merge_requests/197
0. [x] `gitlab-org/quality/insights-config` :arrow_right: https://gitlab.com/gitlab-org/quality/insights-config/-/merge_requests/13
0. [x] `gitlab-com/gl-infra/incident-management` :arrow_right: https://ops.gitlab.net/gitlab-com/gl-infra/incident-management/-/merge_requests/18
0. [x] `gitlab-com/gl-infra/triage-ops` :arrow_right: https://gitlab.com/gitlab-com/gl-infra/triage-ops/-/merge_requests/43
0. [x] `gitlab-com/gl-infra/production` :arrow_right: https://gitlab.com/gitlab-com/gl-infra/production/-/merge_requests/34
0. [x] (merge around the time we rename) `gitlab-org/quality/triage-serverless` :arrow_right: https://gitlab.com/gitlab-org/quality/triage-serverless/-/merge_requests/29
0. [x] Rename the labels to scoped labels for `gitlab-org` https://gitlab.com/groups/gitlab-org/-/labels?search=P1
0. [x] Rename the labels to scoped labels for `gitlab-com` https://gitlab.com/groups/gitlab-com/-/labels?search=P1
0. [x] (after renamed) `gitlab-org/release-tools` :arrow_right: https://gitlab.com/gitlab-org/release-tools/-/merge_requests/1155

@gl-quality/eng-prod",5
24779110,2019-09-13 21:50:34.808,Add charts/gitlab to milestone/deliverable triage,"## Summary

This issue is for requesting triage automation on a given project. Please link to the project needed and select from a list of triage automation rules to be added.

Project: https://gitlab.com/gitlab-org/charts/gitlab

* Automation that does not require an assignee.
  * Rescheduling of milestones (milestone grooming)
  * Labelling ~""missed-deliverable"" and `missed:x.y` based on the scheduled milestone.


The Distribution team is slowly working on aligning our process to the rest of the gitlab teams. We aren't ready yet to opt-in to all daily tasks, but we have switched to using the `Deliverable` label, so can now make use of the missed deliverable handling.

I've taken a look, and I think we can use the `move-milestone-forward.yml` and `labels-reminders.yml` policies.",2
24779070,2019-09-13 21:46:03.024,Add gitlab-omnibus to milestone/deliverable triage,"## Summary

This issue is for requesting triage automation on a given project. Please link to the project needed and select from a list of triage automation rules to be added.

Project: https://gitlab.com/gitlab-org/omnibus-gitlab/

* Automation that does not require an assignee.
  * Rescheduling of milestones (milestone grooming)
  * Labelling ~""missed-deliverable"" and `missed:x.y` based on the scheduled milestone.


The Distribution team is slowly working on aligning our process to the rest of the gitlab teams. We aren't ready yet to opt-in to all daily tasks, but we have switched to using the `Deliverable` label, so can now make use of the missed deliverable handling.

I've taken a look, and I think we can use the `move-milestone-forward.yml` and `labels-reminders.yml` policies.",2
24718482,2019-09-12 08:30:02.248,"Rename `roadmaps` to `Category:Roadmaps`, `Category:Agile Portfolio Management` to `Category:Epics`","## Summary

Once https://gitlab.com/gitlab-com/www-gitlab-com/merge_requests/29027/diffs is merged, rename `roadmaps` to `Category:Roadmaps`, and `Category:Agile Portfolio Management` to `Category:Epics`.

* ~""roadmaps"": [https://gitlab.com/groups/gitlab-org/-/issues?scope=all&utf8=%E2%9C%93&state=opened&label_name\[\]=roadmaps](https://gitlab.com/groups/gitlab-org/-/issues?scope=all&utf8=%E2%9C%93&state=opened&label_name%5B%5D=roadmaps)
* ~""Category:Agile Portfolio Management"": [https://gitlab.com/groups/gitlab-org/-/issues?scope=all&utf8=%E2%9C%93&state=opened&label_name\[\]=Category%3AAgile%2FPortfolio%2FManagement](https://gitlab.com/groups/gitlab-org/-/issues?scope=all&utf8=%E2%9C%93&state=opened&label_name%5B%5D=Category%3AAgile%2FPortfolio%2FManagement)

For every case above, the Engineering Productivity team needs to ensure that:

* The label change is factored into the triage mechanism.
* Engineering Dashboards at https://quality-dashboard.gitlap.com/groups/gitlab-org are updated.
* Old labels are migrated correctly on affected issues and merge requests.

## Action items

* [ ] (If applicable) Dashboard creation: create or update the stage/group in https://gitlab.com/gitlab-org/gitlab-insights/blob/master/lib/gitlab_insights.rb.
* [ ] (If applicable) Label migration on existing issues and merge requests: apply the new label to opened & closed issues, and open & merged merge requests.
* [ ] (If applicable) Archive the old label with renaming and adding ""DEPRECATED"" at the end of the label name.
* [ ] (If applicable) Delete the old dashboard views using the deprecated labels.
* [ ] (If applicable) Update the group triage package definition to use the new label

/cc @gl-quality/eng-prod @kokeefe @johnhope @donaldcook",2
24716863,2019-09-12 07:59:51.906,Rename `search` to `Category:Search`,"## Summary

Rename `search` to `Category:Search`.

* ~""search"": [https://gitlab.com/groups/gitlab-org/-/issues?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=search](https://gitlab.com/groups/gitlab-org/-/issues?scope=all&utf8=%E2%9C%93&state=opened&label_name%5B%5D=search)

For every case above, the Engineering Productivity team needs to ensure that:

* The label change is factored into the triage mechanism.
* Engineering Dashboards at <https://quality-dashboard.gitlap.com/groups/gitlab-org> are updated.
* Old labels are migrated correctly on affected issues and merge requests.

## Action items

* [ ] (If applicable) Dashboard creation: create or update the stage/group in <https://gitlab.com/gitlab-org/gitlab-insights/blob/master/lib/gitlab_insights.rb>.
* [ ] (If applicable) Label migration on existing issues and merge requests: apply the new label to opened & closed issues, and open & merged merge requests.
* [ ] (If applicable) Archive the old label with renaming and adding ""DEPRECATED"" at the end of the label name.
* [ ] (If applicable) Delete the old dashboard views using the deprecated labels.
* [ ] (If applicable) Update the group triage package definition to use the new label

/cc @gl-quality/eng-prod @phikai @craig-gomes",1
24701232,2019-09-11 18:03:04.096,Growth groups will be renamed,"## Summary

Please list the Stage, Group or Category labels changes required. The change can fall under the 3 scenarios below:

* Renaming an existing Stage or Group ~""group::activation"" will be `group::acquisition`
* Renaming an existing Stage or Group ~""group::upsell"" will be `group::conversion`
* Renaming an existing Stage or Group ~""group::adoption"" will be `group::expansion`

For every case above, the Engineering Productivity team needs to ensure that:

* The label change is factored into the triage mechanism.
* Engineering Dashboards at <https://quality-dashboard.gitlap.com/groups/gitlab-org> are updated.
* Old labels are migrated correctly on affected issues and merge requests.

## Action items

* [ ] (If applicable) Dashboard creation: create or update the stage/group in <https://gitlab.com/gitlab-org/gitlab-insights/blob/master/lib/gitlab_insights.rb>. => https://gitlab.com/gitlab-org/gitlab-insights/merge_requests/163
* [x] ~~(If applicable) Label migration on existing issues and merge requests: apply the new label to opened & closed issues, and open & merged merge requests.~~
* [x] ~~(If applicable) Archive the old label with renaming and adding ""DEPRECATED"" at the end of the label name.~~
* [x] Rename the group labels.
* [x] ~~(If applicable) Delete the old dashboard views using the deprecated labels.~~
* [ ] (If applicable) Update the group triage package definition to use the new label => https://gitlab.com/gitlab-org/quality/triage-ops/merge_requests/304",2
97475066,2019-09-11 16:16:35.259,Dockerfile.dev mismatch with production,"`Dockerfile.dev` was using https://gitlab.com/Alexand/ruby-function-invoker but now it seems production is using https://gitlab.com/gitlab-org/serverless/runtimes/ruby which behaves differently.

We need to bring them align.",2
24376212,2019-09-02 08:46:07.826,Add exception so the prep/backport MRs for patch releases never have their milestones updated,"The milestone was updated by the bot on https://gitlab.com/gitlab-org/gitlab-ee/merge_requests/15885 

```
 🤖 GitLab Bot 🤖 @gitlab-bot changed milestone to %12.3 8 hours ago
🤖 GitLab Bot 🤖 @gitlab-bot added missed:12.2 label 8 hours ago
```

Because these are backport MRs the milestone should stay 12.2, perhaps we should add a new label to identify these MRs since they are special.

We also, potentially have backport MRs that developers open against 12.2 that will be targeting the `12-2-stable[-ee]` branches.

If we could skip anything targeting `MAJOR-MINOR-stable*` that would suffice I think.",1
24193187,2019-08-27 08:13:23.266,`VersionedMilestone#group_milestone` incorrect milestone query when source_id is not a path,"Job [#280629926](https://gitlab.com/gitlab-org/quality/triage-ops/-/jobs/280629926) failed for c7e8a8da969a3518bf8895b8af800647e2f74284:

Related to changing to using numeric IDs for projects and groups across our rules",2
24146995,2019-08-26 07:29:00.628,Do not fail the schedules if tests won't pass,"Now we have two incidents due to changes from www-gitlab-com:

* https://gitlab.com/gitlab-org/quality/triage-ops/issues/253
* https://gitlab.com/gitlab-org/quality/triage-ops/issues/287

I think we need to do something here. Here are a few options:

* Use `webmock` to avoid dependencies on www-gitlab-com
* Remove those backward compatible tests: https://gitlab.com/gitlab-org/quality/triage-ops/issues/253#note_201456403
* Avoid running tests on schedules
* Make tests allow to fail on schedules

@gl-quality/eng-prod Which would you prefer?",2
24078307,2019-08-23 06:01:07.463,Label `missed:x.y` as soon as the milestone expires and not when we close and reschedule issues and MRs,"We currently label ~""missed-deliverable"" when a milestone expires.

However we do not label them with `~missed:x.y` e.g. ~""missed:12.2"" and etc. We only do this after the milestone is closed.

This can cause a short time where an issue detected as ~""missed-deliverable"" is re-scheduled by a human manually into the next milestone. This would result in an issue with ~""missed-deliverable"" but we cannot pin down which version it was missed. This is likely the cause of the grey undefined missed deliverables.

For example see https://gitlab.com/gitlab-org/gitlab-ce/issues/59754#note_207090158, I had to add ~""missed:12.2"" manually. This will get labeled tomorrow since %12.2 is now closed. 

![Screen_Shot_2019-08-22_at_10.56.47_PM](/uploads/a81eac33735476be3bfd64efb102a5a3/Screen_Shot_2019-08-22_at_10.56.47_PM.png)

## Proposal

* Let's label both ~""missed-deliverable"" and `missed:x.y` labels together as soon as the milestone expires.


@kwiebers or @markglenfletcher maybe one of you can help take this up? I would like someone other than @godfat to do it to spread the knowledge here.

Please see work that @godfat has done prior, this should be an easy tweak to the triage rules. https://gitlab.com/gitlab-org/quality/triage-ops/merge_requests/163/diffs

Also @joshlambert for awareness.",2
24041768,2019-08-22 12:04:23.187,Consider creating a CI config file per project,"We should consider creating one CI config file per project and explicitly list the jobs that should run for each project.

That would clarify what are the policies that run for each project.",3
23980332,2019-08-20 16:45:51.771,"Rename ~""group::serverless and paas"" label to ~""group::serverless""","## Summary

Following https://gitlab.com/gitlab-com/www-gitlab-com/merge_requests/28665, we will need to rename of ~""group::serverless and paas"" label to ~""group::serverless"".

For every case above, the Engineering Productivity team needs to ensure that:

* The label change is factored into the triage mechanism.
* Engineering Dashboards at <https://quality-dashboard.gitlap.com/groups/gitlab-org> are updated.
* Old labels are migrated correctly on affected issues and merge requests.

## Action items

* [x] (If applicable) Dashboard creation: create or update the stage/group in <https://gitlab.com/gitlab-org/gitlab-insights/blob/master/lib/gitlab_insights.rb>. => https://gitlab.com/gitlab-org/gitlab-insights/merge_requests/155
* [ ] ~~(If applicable) Label migration on existing issues and merge requests: apply the new label to opened & closed issues, and open & merged merge requests.~~
* [ ] ~~(If applicable) Archive the old label with renaming and adding ""DEPRECATED"" at the end of the label name.~~
* [ ] ~~(If applicable) Delete the old dashboard views using the deprecated labels.~~",2
23980322,2019-08-20 16:45:28.992,"Rename ~""group::team planning"" to ~""group::project management""","## Summary

Following https://gitlab.com/gitlab-com/www-gitlab-com/merge_requests/28178/diffs, we will need to rename of ~""group::team planning"" to ~""group::project management"".

For every case above, the Engineering Productivity team needs to ensure that:

* The label change is factored into the triage mechanism.
* Engineering Dashboards at <https://quality-dashboard.gitlap.com/groups/gitlab-org> are updated.
* Old labels are migrated correctly on affected issues and merge requests.

## Action items

* [x] (If applicable) Dashboard creation: create or update the stage/group in <https://gitlab.com/gitlab-org/gitlab-insights/blob/master/lib/gitlab_insights.rb>.
* [x] (If applicable) Label migration on existing issues and merge requests: apply the new label to opened & closed issues, and open & merged merge requests.
* [x] (If applicable) Archive the old label with renaming and adding ""DEPRECATED"" at the end of the label name.
* [x] (If applicable) Delete the old dashboard views using the deprecated labels.

/cc @gl-quality/eng-prod",2
23980280,2019-08-20 16:43:50.584,Fix stage label detection to disallow nested scoped labels,"It was brought to my attention that some nested scoped labels starts as a stage label, but then have an additional scoping, e.g. `~devops::release::feature flags` (currently only exists for the `gitlab-ee` project).

We should fix the logic to only detect stage labels matching something like `/\Adevops::\w+\z/`.",2
23966673,2019-08-20 10:15:27.562,Stage/group labels inference doesn't work for confidential issues,"Due to how `gitlab-triage` works by default, it redact attributes of confidential resources, so we cannot infer labels in the `actions.comment` action since attributes are redacted.

We can work-around that by setting `@redact_confidentials = false` before performing the inference for now.",2
23965988,2019-08-20 09:54:35.772,Consider using group/project IDs instead of path in jobs and pipeline schedules for better stability,"The following discussion from !243 should be addressed:

- [ ] @zj-gitlab started a [discussion](https://gitlab.com/gitlab-org/quality/triage-ops/merge_requests/243#note_205556529):  (+1 comment)

    > Bit of a nitpick, but I think using project IDs are more stable. For example, I've changed my username to `zj-gitlab` and the old username still gets mentions from bots that work by username instead of ID. Not sure how often we move projects, but could be a potential issue.

I think that's a good suggestion, and I think it would be fine since the project/group name should be present in the job or pipeline schedule. I'll resolve that in a separate issue, thanks!

This is also relevant with the single codebase changes approaching.",2
23911507,2019-08-19 12:25:12.051,Consider cleaning up Ecosystem-specific labels,"It seems the Ecosystem group has a lot of labels, even duplicate labels.

## `gitlab-org` Group labels

- ~""group::ecosystem::integrations""
- ~""group::ecosystem::marketplace"" 
- ~""group::ecosystem::sdk""

These are categories labels and should follow the `Category::<category name>` convention documented at https://about.gitlab.com/handbook/marketing/website/#category-attributes under `label`.

## `gitlab-org/gitlab-ce` Project labels

- ~""ecosystem::integration"" 
- ~""ecosystem::integration::chat"" 
- ~""ecosystem::integration::cicd"" 
- ~""ecosystem::integration::infra"" 
- ~""ecosystem::integration::jenkins"" 
- ~""ecosystem::integration::metrics"" 
- ~""ecosystem::integration::other"" 
- ~""ecosystem::integration::security"" 
- ~""ecosystem::integration::workflow""
- ~""ecosystem::integration::marketplace""
- ~""ecosystem::marketplace"" duplicates the `gitlab-ce` ~""ecosystem::integration::marketplace"" and the `gitlab-org` ~""group::ecosystem::marketplace""
- ~""ecosystem::sdk"" duplicates the `gitlab-org` ~""group::ecosystem::sdk""

I'm not in favor of triple-nested scoped labels, and these shouldn't be project-specific labels, but group labels instead (we could just promote them to group labels).",2
23881255,2019-08-18 20:34:04.944,"Remove the ~""group::analytics"" & ~""devops::manage"" labels when they're associated with the ~project, ~""gitlab.com"" or ~navigation labels","Hi, 

Can we please move the issues with tags `project`, `gitlab.com` and `navigation` to `group::unallocated`? I think it makes sense to have them with a tag, so that management is aware how many of those are without anyone looking after them (https://gitlab.slack.com/archives/C0NFPSFA8/p1565991373232800). 

cc: @Jeremy, @ebrinkman 

This issue is a follow up of: https://gitlab.com/gitlab-com/www-gitlab-com/merge_requests/27707#note_203529447 and the series thereof.",2
23847366,2019-08-16 16:23:04.338,Improve community contribution MR discovery and coaching,"This was brought up organically by @joshlambert that some of the MRs for ~""devops::verify"" from the community are building up. Some of them being almost 1 year. 

> Josh: We have a huge backlog of community contributed MR’s in Verify (specifically Runner) of over 100 (~20% of total). This is proving to be a very frustrating experience, not just contributors but also paying customers: https://gitlab.com/gitlab-org/gitlab-runner/merge_requests/1041#note_202338266. => Josh: Mek, can we add the backlog of community MR’s to triagebot and quality dashboard? => Mek: We already have a Community Contribution triage package, I‘ll follow up on making improving the format. 

We have community MR triage packages for MRs already https://about.gitlab.com/handbook/engineering/quality/triage-operations/index.html#community-merge-requests-requiring-attention

This seems to only be active for `GitLab CE` & `GitLab EE` I think we should expand this to other core projects e.g.
* [x] Gitaly - https://gitlab.com/gitlab-org/quality/triage-ops/pipeline_schedules/29055/edit
* [x] Runner - https://gitlab.com/gitlab-org/quality/triage-ops/pipeline_schedules/29680/edit

Other improvements:

* [x] Consider adding ~""Community contribution"" to this type of triage report so we can filter on ~""triage-package"" and ~""Community contribution"" => !260
  * https://gitlab.com/gitlab-org/gitlab-ce/issues/58131
* [x] Spell out the names of these triage reports. Instead of `Merge requests requiring attention` call it `Community Contributions MR report` => !260
* [x] Add a daily report for untriaged 'Community contribution' MRs: https://gitlab.com/gitlab-org/quality/triage-ops/-/merge_requests/592
* [x] Draw attention to EMs for ~""Community contribution"" based on a `~group::` label: https://gitlab.com/gitlab-org/quality/triage-ops/-/issues/565 => https://gitlab.com/gitlab-org/quality/triage-ops/-/merge_requests/622
* [ ] Post these Community Triage package on the #mr-coach channel",3
23776019,2019-08-14 12:09:04.312,New policy to move all open issues from `gitlab-org/gitlab-foss` to `gitlab-org/gitlab`,"As part of https://gitlab.com/gitlab-org/gitlab-ee/issues/13304, `gitlab-org/gitlab-foss` issue tracker will stay open but we want to automatically move new issues to `gitlab-org/gitlab`.

We should leave an explanation message when doing so, and this should set up as a daily hygiene automation (or even a serverless automation).",2
23729660,2019-08-13 08:08:28.675,Who's the correct PM for the Runner group?,"In https://gitlab.com/gitlab-org/quality/triage-ops/blob/a730c493e301bd052e8f54142540ece57d216553/policies/team-triage-package.yml#L1065-1066 the PM for the Runner group is set to @jlenny but in https://about.gitlab.com/handbook/product/categories/#runner-group it's @joshlambert?

What is the correct PM for ~""group::runner""?",1
23729426,2019-08-13 08:03:09.196,Create a triage package for the Import group,I just noticed that the [Import group](https://about.gitlab.com/handbook/product/categories/#import-group) doesn't have a triage package!,1
23719468,2019-08-12 23:52:21.203,Software Composition Analysis group will be renamed to Composition Analysis,"## Summary

From https://gitlab.com/gitlab-com/www-gitlab-com/merge_requests/26742, ~""group::software composition analysis""  will be renamed to ~""group::composition analysis"" 

For every case above, the Engineering Productivity team needs to ensure that:

* The label change is factored into the triage mechanism.
* Engineering Dashboards at <https://quality-dashboard.gitlap.com/groups/gitlab-org> are updated.
* Old labels are migrated correctly on affected issues and merge requests.

## Action items

* [x] Dashboard creation: create or update the stage/group in <https://gitlab.com/gitlab-org/gitlab-insights/blob/master/lib/gitlab_insights.rb>. => https://gitlab.com/gitlab-org/gitlab-insights/merge_requests/150
* [x] No need to migrate anything since the label will be renamed. ~~(If applicable) Label migration on existing issues and merge requests: apply the new label to opened & closed issues, and open & merged merge requests.~~
* [x] ~~(If applicable) Archive the old label with renaming and adding ""DEPRECATED"" at the end of the label name.~~
* [x] Same here, the existing dashboard will just be changed to use the new label name. ~~(If applicable) Delete the old dashboard views using the deprecated labels.~~

/cc @gl-quality/eng-prod",2
23719004,2019-08-12 23:19:09.514,Update Larissa Lane as PM for group::distribution and group::memory,"We have a new PM for ~""group::distribution"" and ~""group::memory"". Please add ownership from product in all triage automation to `Larissa Lane` @ljlane.

@gl-quality/eng-prod 

/cc @ebrinkman",1
23621774,2019-08-08 22:50:15.038,Search group will be part of enablement,"## Summary

~group::search will be created under ~""devops::enablement"" https://gitlab.com/gitlab-com/www-gitlab-com/merge_requests/27493#note_201799245

All search features and `~category::` will be moved here as well. 

For every case above, the Engineering Productivity team needs to ensure that:

* The label change is factored into the triage mechanism.
* Engineering Dashboards at <https://quality-dashboard.gitlap.com/groups/gitlab-org> are updated.
* Old labels are migrated correctly on affected issues and merge requests.

## Action items

* [x] Triage automation: create or update the stage/group/categories in <https://gitlab.com/gitlab-org/quality/triage-ops/blob/master/lib/devops_labels.rb>.
* [x] (If applicable) Dashboard creation: create or update the stage/group in <https://gitlab.com/gitlab-org/gitlab-insights/blob/master/lib/gitlab_insights.rb>. - https://gitlab.com/gitlab-org/gitlab-insights/merge_requests/149
* [ ] (If applicable) Label migration on existing issues and merge requests: apply the new label to opened & closed issues, and open & merged merge requests. - https://gitlab.com/gitlab-org/quality/triage-ops/merge_requests/246
* [ ] ~~(If applicable) Archive the old label with renaming and adding ""DEPRECATED"" at the end of the label name.~~
* [ ] ~~(If applicable) Delete the old dashboard views using the deprecated labels.~~

/cc @phikai 
/cc @gl-quality/eng-prod",3
23615792,2019-08-08 17:55:58.717,Default Group Label for Specific Projects,"## Proposal 

Add new policies for each project that will be scheduled and run prior to the daily label inference policy.

## Background and Research

@phikai reported that Issues that were labeled with ~search had the ~""devops::create"" and ~""group::editor"" labels applied by GitLab Bot. 

The impacted issues look to be issues without a group label present and have a matching category label which will be used to infer the stage and group label. Examples looking at ~search :

- https://gitlab.com/gitlab-org/gitter/webapp/issues/1510
- https://gitlab.com/gitlab-org/gitlab-docs/issues/167
- https://gitlab.com/gitlab-org/gitter/webapp/issues?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=search
- https://gitlab.com/gitlab-org/gitlab-docs/issues?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=search

While I was looking at the examples in the searches, it seemed that there was not a group label on the impacted issues. On an ongoing basis, there will be a comment informing why the labels were inferred but we disabled that for the bulk runs in https://gitlab.com/gitlab-org/quality/triage-ops/merge_requests/199/pipelines

@markglenfletcher had the idea to default group labels for certain projects. Here's some of the mappings from the groups he identified if we want to go that route. 
- [Gitaly](https://gitlab.com/gitlab-org/gitaly) - ~""group::gitaly"" 
- [Runner](https://gitlab.com/gitlab-org/gitlab-runner) - ~""group::runner"" 
- [Gitter](https://gitlab.com/gitlab-org/gitter) - ~""group::gitter"" 
- [Omnibus](https://gitlab.com/gitlab-org/omnibus-gitlab) - ~""group::distribution"" 
- [GitLab CNG](https://gitlab.com/gitlab-org/build/CNG) - ~""group::distribution"" 

There is likely more that I'm missing but I started with what I could find and felt confident in :smile: ",2
23609759,2019-08-08 14:15:30.008,Deprecate the legacy team labels,"## Summary

We will deprecate the following legacy team labels according to the new rollout plan at https://gitlab.com/gitlab-org/quality/triage-ops/issues/172#rollout-steps by adding a ` [DEPRECATED]` suffix to them:

- [x] ~Manage
- [x] ~Plan
- [x] ~Create
- [x] ~Verify
- [x] ~Package
- [x] ~Release
- [x] ~Configure
- [x] ~Serverless
- [x] ~Monitor
- [x] ~Secure
- [x] ~Defend
- [x] ~Growth
- [x] ~Gitaly
- [x] ~Gitter
- [x] ~Distribution
- [x] ~Geo
- [x] ~Memory
- [x] ~Ecosystem

Groups should be using exclusively their group and stage labels from now on.

## Action items

### On 2019-08-13

- [x] Announce the deprecation on the company call, `#development`, `#product`, and Engineering Week in Review.

>>>
On 2019-08-19, we will deprecate the team labels by adding a ` [DEPRECATED]` suffix to them (https://gitlab.com/gitlab-org/quality/triage-ops/issues/254). Please use the Stage (`devops::xxx`) and Group (`group::xxx`) labels instead.

- This is part of an effort to transition from team labels to stage & group labels: https://gitlab.com/gitlab-org/quality/triage-ops/issues/172#note_201666990
- We are tackling the remaining edge cases where more than one legacy team labels exists after this https://gitlab.com/gitlab-org/quality/triage-ops/issues/242.
>>>

### Before 2019-08-19

- [x] Triage automation: create or update the stage/group/categories in <https://gitlab.com/gitlab-org/quality/triage-ops/blob/master/lib/devops_labels.rb>. => https://gitlab.com/gitlab-org/quality/triage-ops/merge_requests/255
- [x] Dashboard creation: update the teams in <https://gitlab.com/gitlab-org/gitlab-insights/blob/master/lib/gitlab_insights.rb>. => https://gitlab.com/gitlab-org/gitlab-insights/merge_requests/151
- [x] ~~(If applicable) Label migration on existing issues and merge requests: apply the new label to opened & closed issues, and open & merged merge requests.~~
- [x] The native Insights configuration
- [x] The Periscope dashboards
- [x] Update https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/development/contributing/issue_workflow.md => https://gitlab.com/gitlab-org/gitlab-ce/merge_requests/31811

### On 2019-08-19

- [x] Archive the old labels with renaming and adding ""DEPRECATED"" at the end of the label names.
- [x] ~~(If applicable) Delete the old dashboard views using the deprecated labels.~~",3
23582070,2019-08-07 16:35:29.668,Replace blocked label with workflow::blocked,"## Summary

To assist in reporting and reduce duplicate labels, we will be conslidating ~""blocked [deprecated in favor of workflow : : blocked]"" and ~""workflow::blocked"". To do this, we will need to rename both labels to reduce the amount of change to [Org Boards]() and email notifications triggered by GitLab Bot. 

Currently the ~""workflow::blocked"" label is used less than the ~""blocked [deprecated in favor of workflow : : blocked]"" so we will rename ~""blocked [deprecated in favor of workflow : : blocked]"" to ~""workflow::blocked"" and migrate the existing ~""workflow::blocked"" to the new label.

| Type of Resource | ~""workflow::blocked"" Count | ~""blocked [deprecated in favor of workflow : : blocked]"" Count |
| ------ | ------ | ------ |
| Boards | 10 | 16 |
| Issues | [23](https://gitlab.com/groups/gitlab-org/-/issues?scope=all&utf8=%E2%9C%93&state=all&label_name[]=workflow%3A%3Ablocked) | [164](https://gitlab.com/groups/gitlab-org/-/issues?scope=all&utf8=✓&state=all&label_name[]=blocked%20%5Bdeprecated%20in%20favor%20of%20workflow%20%3A%20%3A%20blocked%5D) |
| MRs | [3](https://gitlab.com/groups/gitlab-org/-/merge_requests?scope=all&utf8=✓&state=all&label_name[]=workflow%3A%3Ablocked) | [63](https://gitlab.com/groups/gitlab-org/-/merge_requests?scope=all&utf8=%E2%9C%93&state=all&label_name[]=blocked%20%5Bdeprecated%20in%20favor%20of%20workflow%20%3A%20%3A%20blocked%5D) |

Boards were counted by looking at group boards at the gitlab-org level: https://gitlab.com/api/v4/groups/gitlab-org/boards

### Board List
  - [In dev / In review](https://gitlab.com/groups/gitlab-org/-/boards/364214)
  - [Health - Workflow](https://gitlab.com/groups/gitlab-org/-/boards/1160198)
  - [Geo Kanban Build](https://gitlab.com/groups/gitlab-org/-/boards/1181257)
  - [Monitor kick off - Workflow](https://gitlab.com/groups/gitlab-org/-/boards/1223141)
  - [Plan Kanban](https://gitlab.com/groups/gitlab-org/-/boards/1226305)
  - [12.3 Package](https://gitlab.com/groups/gitlab-org/-/boards/1229228)
  - [Team Planning Kanban](https://gitlab.com/groups/gitlab-org/-/boards/1235826)
  - [Certify Kanban](https://gitlab.com/groups/gitlab-org/-/boards/1235846)
  - [Miranda Fluharty](https://gitlab.com/groups/gitlab-org/-/boards/1241526)
  - [Manage::Analytics::Product Process](https://gitlab.com/groups/gitlab-org/-/boards/1244153)


## Action items

* [ ] ~~Triage automation: create or update the stage/group/categories in <https://gitlab.com/gitlab-org/quality/triage-ops/blob/master/lib/devops_labels.rb>.~~
* [ ] ~~(If applicable) Dashboard creation: create or update the stage/group in <https://gitlab.com/gitlab-org/gitlab-insights/blob/master/lib/gitlab_insights.rb>.~~
* [ ] (If applicable) Label migration on existing issues and merge requests: apply the new label to opened & closed issues, and open & merged merge requests. => https://gitlab.com/gitlab-org/quality/triage-ops/merge_requests/238/diffs
* [x] (If applicable) Archive the old label with renaming and adding ""DEPRECATED"" at the end of the label name.
* [ ] ~~(If applicable) Delete the old dashboard views using the deprecated labels.~~
* [ ] Rename the existing labels based on the following rules
  - [ ] `~workflow::blocked` -> `~workflow::blocked-migrate` - temporary to free up scoped label
  - [ ] `~blocked [deprecated in favor of workflow : : blocked]`  -> `~""workflow::blocked"" 
* [ ] Announce that ~""blocked (deprecated) — use workflow : : blocked instead"" will be deleted in favor of ~""workflow::blocked""
  * [ ] Company call - Communicated on 8/14
  * [ ] `#development`
  * [ ] `#product`
* [ ]  Delete the ~""blocked [deprecated in favor of workflow : : blocked]"" label

/cc @gl-quality/eng-prod",2
23537567,2019-08-06 11:29:48.314,A breaking API change broke the `policies/label-accepting-merge-requests.yml` policy,"A breaking change to the Issues and MRs API was introduced and reported in https://gitlab.com/gitlab-org/gitlab-ce/issues/65676.

This in turn made our `policies/label-accepting-merge-requests.yml` policy apply the ~""Accepting merge requests"" to a lot of issues that don't have a milestone, where normally they shouldn't (as we target issues with a milestone only).

A fix is in preparation to prevent that from happening while the API issue is fixed and deployed, and to revert the mistakenly added labels: https://gitlab.com/gitlab-org/quality/triage-ops/merge_requests/233",2
23522646,2019-08-05 22:27:48.492,Consolidate more labels for marking issues that are open for community contributions,"### Problem

Following the changes in https://gitlab.com/gitlab-org/quality/triage-ops/issues/179, there are three more label variants for marking issues that are open for community contributions. These include:

1. **7 issues** with ~""Accepting Merge Requests"" project label used in the [`gitlab-workhorse`](https://gitlab.com/gitlab-org/gitlab-workhorse) project.
2. **2 issues** with ~""accepting merge requests"" project label used in the [`gitlab-mattermost`](https://gitlab.com/gitlab-org/gitlab-mattermost) project.
3. **3 issues** with ~""accepting MR"" project label used in the [`cookbook-gitlab`](https://gitlab.com/gitlab-org/cookbook-gitlab) project.

The issues affected are very few but this can cause some confusion during issue search.

![Screenshot_2019-08-06_at_01.24.26](/uploads/5586a43046937e826363a4f5e56dabea/Screenshot_2019-08-06_at_01.24.26.png)

### Proposal

Let's remove these three project labels and replace them on all attached issues with the group label ~""Accepting merge requests"".",1
23366840,2019-08-01 03:47:02.917,Remove association between `gitlab.com` label and Manage/Analytics,"## Overview

GitLab Bot appears to apply ~""devops::manage"" and ~""group::analytics"" (or possibly Measure) to issues associated with the ~""gitlab.com"" label. This isn't as helpful as we'd like, since ~""gitlab.com"" issues span more than just Manage issues - see https://gitlab.com/gitlab-org/gitlab-ce/issues/62052 for an example.

## Proposal

Either:
* Remove the association for `gitlab.com` and don't automatically apply a stage/group label, or
* Don't attempt to reapply stage/group labels for `gitlab.com` issues.

cc @meks @rymai @markglenfletcher",1
23366460,2019-08-01 03:07:24.320,Un-scope category labels,"### Problem to solve

The label documentation mentions `Subject` labels: https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/development/contributing/issue_workflow.md#subject-labels but it currently mixes feature and category labels. We need to clarify this.

For the distinction between **Category** and **Feature**, see https://about.gitlab.com/handbook/product/categories/#hierarchy

There is no official naming/color convention for these labels but an ongoing normalization proposal with https://gitlab.com/gitlab-org/quality/triage-ops/merge_requests/169 suggest to leverage scoped labels.

I don't think scoped labels are useful here and they even prevent some existing workflow (e.g. having an [epic related to multiple categories](https://gitlab.com/groups/gitlab-org/-/epics/971)). Requiring to split into sub-epics/issues will generate unnecessary overhead.

NB:  There is a dedicated proposal to normalize feature labels: https://gitlab.com/gitlab-org/quality/triage-ops/issues/247, this issue focuses on feature labels. 

### Example

Issues/Epics are not only about product/category strategies, but there are also engineering initiatives and some of them cover multiples categories depending on how the code is structured. E.g. in ~""devops::secure"" we have a lot of overlapping areas between the groups and categories as the code is generic. One unique change to the code can impact several categories.

This MR https://gitlab.com/gitlab-org/gitlab-ee/merge_requests/14376 impacts 4 categories.

**Without scoped labels:** 

- we can have 1 epic, 1 issue, 1 MR, all labeled with the 4 category labels. Simple and straightforward.

**With scoped labels:**

- we need 1 parent epic, 4 child epics, 4 issues, all labeled independently with 1 category label.
- the MR can't have the category labels reflecting the change it's providing.
- these are way too much useless items to maintain. Engineers need to update `workflow::xxx` labels and close issues after deployed and tested on prod. This also clutters the issue boards for no benefit.


### Proposal:

- [x] Naming convention `Category: Feature with Spaces And Capital Letters as Desired`
- [x] No scoped labels (mutual exclusion).
- [x] Color `#428BCA`

Once we agree on the convention, tasks list:

- [x] Update the docs by creating a distinct `Category labels` section => https://gitlab.com/gitlab-org/gitlab-ce/merge_requests/32053/diffs
- [x] Update any label references in `www-gitlab-com` => https://gitlab.com/gitlab-com/www-gitlab-com/merge_requests/28532/diffs
- [x] Update the scripts/automation in this project => https://gitlab.com/gitlab-org/quality/triage-ops/merge_requests/274/diffs
- [x] Once the three above MR are merged, update the labels according to the naming convention and color
- [x] Communicate broadly
  - [x] Company call
  - [x] Slack: `#development`, `#quality`, `#product`",3
23356109,2019-07-31 15:50:27.207,Add group and stage label inference to GitLab Charts,"The Helm Charts are stored within the GitLab [charts](https://gitlab.com/charts) group and not on gitlab-org. This means label inference is not run on the charts projects.

Applying the labels will enable issue and merge requests reporting by group/stage for the Charts projects. This would cause some chatter on issues & merge requests from GitLab Bot.

Charts are getting moved into gitlab-org eventually: https://gitlab.com/gitlab-org/distribution/team-tasks/issues/422

## Dry Run Results

Pipeline runs (as of 8/5):
- `stage-and-group-labels-hygiene.yml` - 69 matching issues: https://gitlab.com/gitlab-org/quality/triage-ops/-/jobs/266437366
- `mr-migrate-legacy-labels.yml` - 15 open merge requests & 294 merged merge requests: https://gitlab.com/gitlab-org/quality/triage-ops/-/jobs/266438245

Looking for feedback from @gitlab-org/distribution ",2
23328092,2019-07-30 22:19:29.521,New group::import is now in effect for devops::manage,"## Summary

Please list the Stage, Group or Category labels changes required. The change can fall under the 3 scenarios below:

* Adding a new Stage or Group - ~""group::import"" under ~""devops::manage"" 

For every case above, the Engineering Productivity team needs to ensure that:

* The label change is factored into the triage mechanism.
* Engineering Dashboards at <https://quality-dashboard.gitlap.com/groups/gitlab-org> are updated.
* Old labels are migrated correctly on affected issues and merge requests.

## Action items

* [x] Triage automation: create or update the stage/group/categories in <https://gitlab.com/gitlab-org/quality/triage-ops/blob/master/lib/devops_labels.rb>. => https://gitlab.com/gitlab-org/quality/triage-ops/merge_requests/215
* [x] (If applicable) Dashboard creation: create or update the stage/group in <https://gitlab.com/gitlab-org/gitlab-insights/blob/master/lib/gitlab_insights.rb>. => https://gitlab.com/gitlab-org/gitlab-insights/merge_requests/140
* [x] (If applicable) Label migration on existing issues and merge requests: apply the new label to opened & closed issues, and open & merged merge requests.
* [ ] ~~(If applicable) Archive the old label with renaming and adding ""DEPRECATED"" at the end of the label name.~~
* [ ] ~~(If applicable) Delete the old dashboard views using the deprecated labels.~~

/cc @gl-quality/eng-prod @jeremy",2
23324327,2019-07-30 19:08:05.582,Remove missed-SLO label from all P3 and P4 Bugs,"Identify all P3 and P4 bugs which have a ~""missed-SLO"" label and remove it. These are feeding into insights reporting that needs to be removed per https://gitlab.com/gitlab-com/Product/issues/376

@meks @rymai - I tweaked this a bit from our discussion this morning so that it's only looked at GitLab bot applied labels. What do you think?",2
23321200,2019-07-30 17:10:21.801,Proposal: change type labels to be scoped and create children labels per type,"## Proposal

1. Change type labels to be scoped, e.g. `type::bug`, `type::backstage`
1. Create children scoped labels per type, e.g. `bug::ui`, `bug::performance`, `backstage::technical debt`, `backstage::static analysis`, `backstage::ci config` etc.

This proposal is extracted from the discussion at https://gitlab.com/gitlab-org/quality/triage-ops/issues/88.",3
23308529,2019-07-30 14:16:23.200,"Re-enable the ""intelligent"" stage/group label inference for open issues","Once https://gitlab.com/gitlab-org/quality/triage-ops/issues/234 is done, all closed and open issues should have a stage/group label set from their team label (except for the ones with multiple team labels), so we should be able to re-enable the ""intelligent"" stage/group label inference **for open issues**, in the daily schedule.",2
23308480,2019-07-30 14:14:37.093,Perform a 1:1 team -> stage/group inference for closed issues and merge requests,"As discussed in today's Engineering Productivity call, we should perform the 1:1 team -> stage/group inference for closed issues and merge requests as well, for historical data consistency.",4
23266535,2019-07-29 14:20:38.562,Add @gitter-badger to the `gitlab-org` group,"### Problem

Following the problem described in https://gitlab.com/gitlab-org/quality/triage-ops/issues/174, contributions by @gitter-badger are also marked with the ~""Community contribution"" label. See [merge requests](https://gitlab.com/gitlab-org/gitter/webapp/merge_requests?scope=all&utf8=%E2%9C%93&state=opened&author_username=gitter-badger) in `gitlab-org/gitter` group.

### Proposal

Following the relevant slack [discussion](https://gitlab.slack.com/archives/C3W3PSR88/p1564361438009100) (internal), let's move the @gitter-badger as a member (_Developer_) in the `gitlab-org` group. The description of the bot has been updated to include purpose and ownership.",1
23206085,2019-07-26 18:00:56.105,Temporarily remove missed SLO detection for P3,"We currently have a high number of ~P3 backlog. 

We need to allow more flexibility and headroom for Product to groom the existing P3 bugs. 

As such, we have decided to temporarily disable the missed SLO detection for ~P3 for the time being and focus on ~P1 and ~P2 

@godfat @rymai @markglenfletcher 

/cc @joshlambert @clefelhocz1 @craig-gomes @tpazitny ",2
23204594,2019-07-26 16:37:56.313,Rename RUN_DAILY and RUN_WEEKLY,"On !195, we found that the naming of the variables for `RUN_DAILY` and `RUN_WEEKLY` were named in an unclear manner. These variables are important to help group jobs into a collection to run within a single pipeline execution. 

From what I can tell, here's what what policies are run behind those two variables. Everything else seems to run in a `RUN_SINGLE` pipeline.

## Run daily
- [Label reminders](https://gitlab.com/gitlab-org/quality/triage-ops/blob/master/policies/labels-reminders.yml)
- [Stage and group label hygiene](https://gitlab.com/gitlab-org/quality/triage-ops/blob/master/policies/stage-and-group-labels-hygiene.yml)
- [MR migrate legacy labels](https://gitlab.com/gitlab-org/quality/triage-ops/blob/master/policies/mr-migrate-legacy-labels.yml)
- [Accepting merge requests](https://gitlab.com/gitlab-org/quality/triage-ops/blob/master/policies/label-accepting-merge-requests.yml)
- [Move milestone forward](https://gitlab.com/gitlab-org/quality/triage-ops/blob/master/policies/move-milestone-forward.yml)
- [Discover](https://gitlab.com/gitlab-org/quality/triage-ops/blob/master/policies/discover.yml)
- [Missed SLO](https://gitlab.com/gitlab-org/quality/triage-ops/blob/master/policies/label-missed-slo.yml)
- [Unlabelled issues](https://gitlab.com/gitlab-org/quality/triage-ops/blob/master/policies/unlabelled-issues.yml) - only when `UNLABELLED_TRIAGE_PACKAGE` is also set

## Run weekly
- [Team triage package](https://gitlab.com/gitlab-org/quality/triage-ops/blob/master/policies/team-triage-package.yml)
- [Missing categories](https://gitlab.com/gitlab-org/quality/triage-ops/blob/master/policies/missing-categories.yml)
- [Community merge requests](https://gitlab.com/gitlab-org/quality/triage-ops/blob/master/policies/community-merge-requests.yml) - only when $COMMUNITY_TRIAGE_PACKAGE is also set

## Proposal

There are currently two different types of triage policies that I group all policies into. 

- `TRIAGE_PACKAGE` - classification of incoming issues and merge requests for a group or project to aid in identifying actionable items for Product and Group/Stage Managers.
- `TRIAGE_HYGEINE` - label or comment automation to aid in reporting or nudging behavior into desired direction. The daily jobs that don't have `packages` in the job name fit this category to me.

The job name would be where we can indicate the desired frequency (`schedule:daily:reminders:labels` or `schedule:weekly:packages:community-merge-requests`

### Steps

1. Create new anchors based on the triage categories (ie `triage-package` and `triage-hygeine`) which leverage a different variable.
1. Convert existing jobs to use the new anchors
1. Update the README with the new variables description
1. After merge is completed, update the existing scheduled pipelines variables


I am still getting my bearings and lack the historical context. I don't want to create a change that would be confusing. I also don't have great view of where Triage Packages 2.0 and 3.0 and how the evolution of our policies fit within these categories.

@rymai @godfat @markglenfletcher - What are your thoughts?

/cc @meks",2
23151613,2019-07-25 09:59:35.201,"Split ""CI & Runner"" group","## Summary

Splitting one ""CI & Runner"" group into two ""Continuous Integration"" and ""Runner"" groups.

Please list the Stage or Group labels changes required. The change can fall under the 3 scenarios below:
* Splitting a Stage into multiple Groups
* Changing the Categories in a Stage
* Adding a new Stage

For every case above, the Engineering Productivity needs to ensure that:
* The label change is factored into the triage mechanism.
* Old labels are migrated correctly on affected Issues and Merge Requests.
* Engineering Dashboards in https://quality-dashboard.gitlap.com/groups/gitlab-org is setup correctly as well.

## Action items

* [x] Label migration on existing Issues and Merge Requests: apply the new label to closed/merged and in-progress work. 
* [x] Dashboard creation: create new dashboard view for new stage/group categories https://quality-dashboard.gitlap.com/groups/gitlab-org, location `gitlab_insights.rb`
* [x] If applicable, archive the old labels with renaming and adding ""DEPRECATED"" at the end of the label name.
* [x] If applicable, delete the old dashboard views using the deprecated labels.

/cc @godfat @markglenfletcher @rymai @meks",3
23145118,2019-07-25 08:21:59.921,Update the triage operations guidelines to make sure that a heads-up is given in #development/#product/company call when an automation is expected to triage more than 100 issues/MRs at once,"Following the recent 1:1 team -> stage/group inference automation (https://gitlab.com/gitlab-org/quality/triage-ops/issues/201), @gitlab-bot added stage and group labels to all the merge MRs under the `gitlab-org` group that had a single team label.

We should give a heads-up in several Slack channels as well as the company call when we anticipate this amount of updates.

We should document that in https://about.gitlab.com/handbook/engineering/quality/guidelines/triage-operations/.",2
23137466,2019-07-25 03:58:00.692,Milestone cleanup report renaming cuts off what was rescheduled,"https://gitlab.com/gitlab-org/gitlab-ee/issues/13044


Issue was named as ""Automatically rescheduled issues"" but was renamed to ""Automatically rescheduled to 12.2"" the last word was truncated `issues`

![Screen_Shot_2019-07-24_at_8.53.29_PM](/uploads/94e745db82885ab9bd6efe0c7de9a434/Screen_Shot_2019-07-24_at_8.53.29_PM.png)",1
23121643,2019-07-24 15:27:00.544,"Change the ""intelligent"" stage/group label inference logic to do the team -> stage/group inference first, and add a new ""team to stage/group"" inference logic","Change the ""intelligent"" stage/group label inference logic to:

1. Only use the 1:1 team -> stage/group inference for issues for now
1. Remove the 300 threshold for issues so that all open issues gets a stage/group from their single team label
1. Finish 1:1 team -> stage/group inference for issues 
1. (Optional depending on the anticipated number of issues that would be updated) Re-add a threshold for issues
1. Use the ""intelligent"" inference for issues",3
23084751,2019-07-23 13:36:10.418,YAML lint in the pipeline?,To facilitate changes from outside the project we could lint the YML files for policies,1
22827273,2019-07-16 07:03:17.026,Close the merge request milestone movement report sooner,"The report looks like: https://gitlab.com/gitlab-org/gitaly/issues/1784

We want to close it automatically, but because of the ordering we're processing the rules, this will only get closed in the next run.

We should do better, but for now we can just wait for tomorrow.

>>>
The report was an issue, not a merge request, so this of course won't do anything. It doesn't close the issue right now because the report was only generated after we processed the merge requests. Whenever we're trying to close the report, the report for merge requests wasn't generated yet!

So we need to run the same issue rule again after merge request rule is done. Well, or wait for tomorrow...
>>>

----

The following discussion from !178 should be addressed:

- [ ] @godfat started a [discussion](https://gitlab.com/gitlab-org/quality/triage-ops/merge_requests/178#note_189649103):  (+2 comments)

    > Close for merge request report, too: https://gitlab.com/gitlab-org/gitlab-ce/issues/64291",2
22803453,2019-07-15 13:30:13.549,Make it possible to configure policies/unlabelled-issues.yml,"Currently `policies/unlabelled-issues.yml` is a triaging package which has fixed names and people to rotate, so we can't reuse it for other groups. However we want to make it configurable so that we can easily apply to other groups.

The current rotation code is:

``` ruby
potential_triagers = %w[@markglenfletcher @godfat @ddavison @mlapierre @at.ramya @sliaquat @tnikic @zeffmorgan @tpazitny @wlsf82 @dchevalier2 @asoborov @grantyoung @jennielouie].shuffle
list_items = resource[:items].split(""\n"")
items_per_triagers = potential_triagers
  .zip(list_items.each_slice((list_items.size.to_f / potential_triagers.size).ceil))
  .to_h.compact

items_per_triagers.each_with_object([]) do |(triager, items), text|
  text << ""#{triager}\n\n#{items.join(""\n"")}""
end.join(""\n\n"")
```

And:

```
/assign #{items_per_triagers.keys.join(' ')}
/label ~Quality ~""triage\-package""
```

We can aim to make it look like this:

``` ruby
items_per_triagers = pick_triagers(resource[:items], ENV['TRIAGERS'])
```

And use it like:

``` ruby
#{ items_for_triagers(items_per_triagers) }

/assign #{items_per_triagers.keys.join(' ')}
/label ~""#{ENV['TRIAGERS_GROUP']}"" ~""triage\-package""
```

The following discussion from !183 should be addressed:

- [ ] @markglenfletcher started a [discussion](https://gitlab.com/gitlab-org/quality/triage-ops/merge_requests/183#note_191755695):  (+1 comment)

    > Approach looks good to me. I agree with letting these parts of the flow be disabled for now.
    > 
    > I think that we should strive to enable the unlabelled/untriaged triage package jobs for all projects in the future, but instead of looping in the Quality team, allow a list of triage team members to be defined that are best suited to that project. I feel that this will allow teams to keep track of reported issues and increase responsiveness when communicating with issue authors.",3
22641251,2019-07-09 17:11:58.535,Extend daily/weekly schedules to other projects,"Try to find the right balance for repeating and flexibility

* [x] Gitaly: https://gitlab.com/gitlab-org/quality/triage-ops/issues/184
* [x] Runner: https://gitlab.com/gitlab-org/quality/triage-ops/issues/68 and https://gitlab.com/gitlab-org/quality/triage-ops/issues/164
* [x] QA",2
22613413,2019-07-08 20:58:10.698,Automation to ensure that issues and MRs with legacy team labels have a 1:1 mapping to their devops stage or group label,"We need an on-going automated rule to apply `devops::xxxx` to issues and MRs based on their legacy team labels. 

This is the first step to ensure we can transition each groups to use the new labels.

We would want a rule that continuously runs and auto adds the new stage and group labels where these old team labels exist.  

**Stages** 

* ~Manage  => ~""devops::manage"" 
* ~Create => ~""devops::create"" 
* ~Plan => ~""devops::plan""
* ~Verify => ~""devops::verify"" 
* ~Package => ~""devops::package"" 
* ~Release => ~""devops::release"" 
* ~Configure => ~""devops::configure"" 
* ~Monitor => ~""devops::monitor"" 
* ~Secure => ~""devops::secure"" 
* ~Defend => ~""devops::defend"" 
* ~Growth => ~""devops::growth""
* ~Enablement => ~""devops::enablement""

**Groups**

* ~Gitaly =>  ~""group::gitaly""  
* ~Gitter =>  ~""group::gitter""
* ~Health => ~""group::health"" 
* ~Distribution =>  ~""group::distribution"" 
* ~Geo =>  ~""group::geo"" 
* ~Memory =>  ~""group::memory"" 
* ~Ecosystem =>  ~""group::ecosystem"" 

#### Phases

##### Merge Requests
1. Add devops stage labels and (where necessary) group labels to merged Merge Requests that have a clear 1:1 mapping between legacy and stage label !184
   - This accounts for the majority of throughputs and will make them visible in the stages dashboards
     - https://quality-dashboard.gitlap.com/groups/gitlab-org/stages/devops::create
     - https://quality-dashboard.gitlap.com/groups/gitlab-org/teams/create
2. Determine devops stage label to apply to merged Merge Requests that do not have a clear 1:1 mapping
   - Some MRs have several legacy labels and it's unclear which stage label should be applied
   - We cannot apply two as stage labels are scoped labels
   - We can use feature label inference to determine stage labels where possible and manual labelling for the outstanding MRs
3. Determine devops stage label to apply to merged MRs with no legacy label
   - We can infer the stage labels from the category labels where possible
3. Add devops stage labels to open MRs in the same manner as 1, 2, and 3
   - Not essential as only `merged` MRs are counted for throughputs
4. Determine group labels for merged MRs through author


##### Issues
1. Add devops stage labels to issues via feature label inference implemented in https://gitlab.com/gitlab-org/quality/triage-ops/merge_requests/155
   - We are in the process of rolling this out completely here for both issues and MRs resources  
      - https://gitlab.com/gitlab-org/quality/triage-ops/issues/211",4
22514012,2019-07-04 08:47:24.796,Consider removing the ~group label in favor of the ~groups label,"It seems the ~group label (https://gitlab.com/groups/gitlab-org/-/issues?scope=all&utf8=✓&state=opened&label_name[]=group) is duplicating the ~groups label (https://gitlab.com/groups/gitlab-org/-/issues?scope=all&utf8=✓&state=opened&label_name[]=groups).

I suggest removing the ~group label in favor of the ~groups label.

Plan of action:

- [x] Bulk-add the ~groups label to all the issues/MRs that currently have the ~group label set
   - [x] Issues: https://gitlab.com/groups/gitlab-org/-/issues?label_name%5B%5D=group
   - [x] MRs: https://gitlab.com/groups/gitlab-org/-/merge_requests?label_name%5B%5D=group
   - [x] Epics: https://gitlab.com/groups/gitlab-org/-/epics?label_name%5B%5D=group
- [x] Remove the ~group label

@jeremy What do you think since you're the product manager for ~""group::access""?",1
22198404,2019-06-24 16:26:45.326,Move all issue rescheduling to happen on the 23rd instead and move it to the next milestone,"Captures the following work on rescheduling for https://gitlab.com/gitlab-com/www-gitlab-com/issues/4593

* [x] Feature freeze and missed deliverables https://gitlab.com/gitlab-com/www-gitlab-com/issues/4593#missed-deliverable
  * Remove feature freeze detection on the 7th
  * Move missed deliverable when milestone is closed.
  * Keep bot message
* [x] Generic missed items https://gitlab.com/gitlab-com/www-gitlab-com/issues/4593#generic-missed-items-clean-up
  * Move missed issues and MRs when milestone is closed.
  * ~~Remove report generation since we are already labeling it with `missed:x.y`~~
  * Close the report after generation
  * Change the report to use numbered list
  * Fix the bug updating the title for the report
  * Remove bot message on  `missed:x.y` just move the issue",2
22114976,2019-06-20 16:49:29.921,Remove `Deliverable` label if milestone is beyond current+1,"The ~Deliverable  label is intended to be applied to issues once they have been formally included in a release, gone through kickoff, etc: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#release-scoping-labels

There are issues however where the ~Deliverable   is applied to pretty far out issues, for example right now there are 13 ~Deliverable   for %""12.4"", which has not had any planning rigor. This is proving to frustrate our user community, as this label is now misleading. What has generally happened is the issue was pushed out of a release, and people forgot to remove the label.

It would be great if we could remove this automatically, to improve our issue hygiene.",3
22034573,2019-06-18 17:06:50.761,Move generic code to gitlab-triage and keep only domain specific code here,"The following discussion from !149 should be addressed:

- [ ] @rymai started a [discussion](https://gitlab.com/gitlab-org/quality/triage-ops/merge_requests/149#note_182469799):  (+2 comments)

    > 1. `lib/extension.rb` sounds like a very generic name
    > 1. Why not implementing the generic part of this feature into `gitlab-triage` directly (i.e. `EngineExtension`, `RulePolicyExtension`, `IssueBuilderExtension#initialize`)? That way we'd only override `IssueBuilderExtension#description` to add the heatmap.

* [ ] Rename `lib/extension.rb` -> https://gitlab.com/gitlab-org/quality/triage-ops/merge_requests/155
* [ ] Introduce another object to contain the conditions and the raw resources -> https://gitlab.com/gitlab-org/gitlab-triage/issues/147
* [ ] Expose the raw resources so we can extend it

The most offending code is:

``` ruby
yield(resources, conditions.merge(all_resources: all_resources))
```

@rymai had a comment about it: https://gitlab.com/gitlab-org/quality/triage-ops/merge_requests/149#note_182469796

> Could we change this method in `gitlab-triage` to directly yield `resources, conditions, resources_without_limit` instead? I find it hackish to merge `all_resources: all_resources` into `conditions` here... :thinking:

To be honest, I spent a lot of time figuring this out, and I got really confused around this code. This was because the object we put into `BasePolicy#resources` can actually have different types for `SummaryPolicy` and `RulePolicy`.

I left a comment in `lib/gitlab/triage/policies/summary_policy.rb`

``` ruby
# Due to resources is a different type, this will never work
# FIXME: We should try to make sure type is consistent for resources
def comment?
  false
end
```

This shares the same issue. Depending on the instance, `resources` can mean different things. In `RulePolicy` it's an array of resources, but in `SummaryPolicy` it's a hash mapping from rules to the resources.

In order to fix the confusion here, I would like to introduce a new class wrapping it. I don't know how to name it yet, but it should carry the difference.

And then, we can attach this `all_resources` (or raw resources) to this object, instead of attaching it to the conditions.

I need to attach it to the conditions for now, because I don't know how to properly attach it to either an array or a hash (!) If we try to detect that, it's going to be even more confusing...

I consider that a ~""technical debt"" without adding an actual object for that part, and I think we need to fix it now before we move on, because we do need to add something on top of it now.",1
22034279,2019-06-18 16:49:45.310,Put issues filter link to the heat map,"The following discussion from !149 should be addressed:

- [ ] @godfat started a [discussion](https://gitlab.com/gitlab-org/quality/triage-ops/merge_requests/149#note_182700145): 

    > We can definitely construct the issue link here, but I find it not so straightforward because we need to put up the query by ourselves, and this is pretty isolated so I think we can probably do this later.",2
126998496,2023-04-20 17:11:31.408,"Add ~""pipeline:run-as-if-jh"" when changes are detected in feature flag and dependencies","Follow up from https://gitlab.com/gitlab-org/gitlab/-/merge_requests/109232#note_1361020187 where we cannot describe this in `rules` so we can only do this externally, and via the label is the easiest workaround.",2
126582476,2023-04-13 07:33:43.866,"Don't label group/project access token mrs as ""community contribution""s","See https://gitlab.com/gitlab-org/secure/vulnerability-research/advisories/cves-private/-/merge_requests/1467 for example

I guess we should not be labelling these as community contributions- that way they won't come up in the daily community mr triage report for example

/cc @gl-quality/eng-prod",1
126338348,2023-04-06 14:04:50.314,TypeError triage/triage/pipeline_failure/slack_notifier.rb in schedule_type error no implicit conversion of String into Integer,https://sentry.gitlab.net/gitlab/triage-ops/issues/4120780/?environment=production,1
126093760,2023-03-31 19:01:26.909,Enable PipelineFailureManagement for all current use-cases,,2
125902581,2023-03-28 14:47:46.637,Introduce SlackNotifier to handle Slack notification for pipeline failures,,3
125804033,2023-03-27 10:39:46.945,Introduce classes to create incidents from pipeline events,,2
125803985,2023-03-27 10:38:27.695,Port the existing pipeline failure tooling from gitlab-org/gitlab,This is [iteration 1 of the plan](https://gitlab.com/groups/gitlab-org/-/epics/10172#iteration-1).,3
125803926,2023-03-27 10:36:34.256,Support pipeline events,,2
123392663,2023-02-09 19:35:11.981,Are we really stubbing everything in devops_labels_spec.rb?,"The following discussion from !1949 should be addressed:

>>>
I have a question though. I thought all of the api calls are stubbed in the spec [here](https://gitlab.com/gitlab-org/quality/triage-ops/-/blob/master/spec/lib/devops_labels_spec.rb#L17), how are we still getting a failing pipeline? I really thought that stubbing would have prevented this type of surprise broken pipelines
>>>",2
122473081,2023-01-26 08:48:29.609,gitlab:missed-resources is failing,"Job [#3663720487](https://gitlab.com/gitlab-org/quality/triage-ops/-/jobs/3663720487) failed for 98d594879ad947c29e81a349e030b755c390282d:

```
W, [2023-01-26T00:26:40.841873 #27]  WARN -- sentry: ** [Raven] Failed to submit event: /builds/gitlab-org/quality/triage-ops/lib/missed_resource_helper.rb:42:in `release_date_for': undefined method `year' for nil:NilClass (NoMethodError)
	from /builds/gitlab-org/quality/triage-ops/lib/missed_resource_helper.rb:9:in `missed_resource?'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.28.0/lib/gitlab/triage/resource/context.rb:31:in `eval'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.28.0/lib/gitlab/triage/resource/context.rb:25:in `instance_eval'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.28.0/lib/gitlab/triage/resource/context.rb:25:in `eval'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.28.0/lib/gitlab/triage/filters/ruby_conditions_filter.rb:22:in `calculate'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.28.0/lib/gitlab/triage/engine.rb:381:in `block in filter_resources'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.28.0/lib/gitlab/triage/engine.rb:333:in `select'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.28.0/lib/gitlab/triage/engine.rb:333:in `filter_resources'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.28.0/lib/gitlab/triage/engine.rb:302:in `block in resources_for_rule'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.28.0/lib/gitlab/triage/expand_condition.rb:13:in `each'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.28.0/lib/gitlab/triage/expand_condition.rb:13:in `perform'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.28.0/lib/gitlab/triage/engine.rb:279:in `resources_for_rule'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.28.0/lib/gitlab/triage/engine.rb:183:in `block in process_rules'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.28.0/lib/gitlab/triage/engine.rb:182:in `each'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.28.0/lib/gitlab/triage/engine.rb:182:in `process_rules'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.28.0/lib/gitlab/triage/engine.rb:79:in `block in perform'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.28.0/lib/gitlab/triage/engine.rb:70:in `each'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.28.0/lib/gitlab/triage/engine.rb:70:in `perform'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.28.0/bin/gitlab-triage:18:in `block in <top (required)>'
	from /usr/local/lib/ruby/2.7.0/set.rb:328:in `each_key'
	from /usr/local/lib/ruby/2.7.0/set.rb:328:in `each'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.28.0/bin/gitlab-triage:11:in `<top (required)>'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/bin/gitlab-triage:23:in `load'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/bin/gitlab-triage:23:in `<main>'
```",2
114137368,2022-08-30 09:24:27.370,Job Failed #2951014112: lib/untriaged_helper.rb:20:in `ceil': NaN (FloatDomainError),"Job [#2951014112](https://gitlab.com/gitlab-org/quality/triage-ops/-/jobs/2951014112) failed for 7a918aa21f56beb7a09da2d530465e07d1e14bb2:

Sentry: https://sentry.gitlab.net/gitlab/triage-ops/issues/3430594/?environment=default&referrer=alert_email

```
[DEBUG] rate_limit_infos: Rate limit remaining: 1975 (reset at 2022-08-30 02:08:33 +0000)/builds/gitlab-org/quality/triage-ops/lib/untriaged_helper.rb:20:in `ceil': NaN (FloatDomainError)
	from /builds/gitlab-org/quality/triage-ops/lib/untriaged_helper.rb:20:in `distribute_items'
	from /builds/gitlab-org/quality/triage-ops/lib/untriaged_helper.rb:27:in `distribute_and_display_items_per_triager'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.1/lib/gitlab/triage/resource/context.rb:82:in `eval'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.1/lib/gitlab/triage/resource/context.rb:23:in `instance_eval'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.1/lib/gitlab/triage/resource/context.rb:23:in `eval'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.1/lib/gitlab/triage/command_builders/text_content_builder.rb:63:in `eval_interpolation'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.1/lib/gitlab/triage/command_builders/text_content_builder.rb:53:in `format_item'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.1/lib/gitlab/triage/command_builders/base_command_builder.rb:34:in `block in content_string'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.1/lib/gitlab/triage/command_builders/base_command_builder.rb:33:in `map'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.1/lib/gitlab/triage/command_builders/base_command_builder.rb:33:in `content_string'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.1/lib/gitlab/triage/command_builders/base_command_builder.rb:14:in `build_command'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.1/lib/gitlab/triage/entity_builders/issue_builder.rb:77:in `build_text'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.1/lib/gitlab/triage/entity_builders/issue_builder.rb:30:in `description'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.1/lib/gitlab/triage/action/summarize.rb:76:in `post_issue_body'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.1/lib/gitlab/triage/action/summarize.rb:44:in `perform'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.1/lib/gitlab/triage/action/summarize.rb:33:in `act'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.1/lib/gitlab/triage/action.rb:28:in `act'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.1/lib/gitlab/triage/action.rb:16:in `block in process'
```",1
111583641,2022-07-13 13:16:44.204,JiHu AppSec Notifier wasn't triggered on a JiHu Contribution,The [JiHu AppSec notifier](https://about.gitlab.com/handbook/ceo/chief-of-staff-team/jihu-support/jihu-security-review-process.html) was not triggered on https://gitlab.com/gitlab-org/gitlab/-/merge_requests/90956#note_a8f30383f81d5e765f9e0132e3f5d6d4d32bcd80 and we need to find out why.,2
111517484,2022-07-12 14:36:05.139,Remind MR authors that set MWPS that this is not a compliant action,"## Objective

Reduce the amount of MRs merged to `gitlab-org/gitlab` by the MR author as apart of https://gitlab.com/gitlab-com/gl-security/security-assurance/security-compliance-commercial-and-dedicated/sec-compliance/observation-management/-/issues/318

## Proposal

Remind the MR Author (similar to https://gitlab.com/gitlab-org/gitlab/-/merge_requests/89719#note_994821846) when they set MWPS on their MR that this is a non-compliant action and another maintainer should merge the MR. 

Use https://gitlab.com/gitlab-org/quality/triage-ops/-/blob/master/triage/processor/remind_merged_mr_deviating_from_guidelines.rb as a reference implementation on the merge when pipeline succeeds event. 

### Limitations

- Approvals can't be revoked (https://gitlab.com/gitlab-org/gitlab/-/issues/367392) so we are going to inform first and then block merging with https://gitlab.com/gitlab-org/gitlab/-/issues/366696",3
109039691,2022-05-24 13:30:20.277,Don't ask community contributions to set a type label for now,"It seems we're missing the logic to exclude ~""Community contribution"" in https://gitlab.com/gitlab-org/quality/triage-ops/-/blob/d7baaeed5b5b32ad8e8046cb196ec0e5838ee605/triage/job/type_label_nudger_job.rb#L17.

See https://gitlab.com/gitlab-org/gitlab/-/merge_requests/88409#note_958051092 for an example.",1
108867636,2022-05-20 12:05:53.659,Suggest community contributors to use gitlab-org/gitlab on creating an MR on gitlab-org/gitlab-foss,"`@gitlab-bot` should suggest community contributors to use gitlab-org/gitlab on creating an MR on `gitlab-org/gitlab-foss`.

Currently bot suggests the same message with one for `gitlab-org/gitlab`.

### Example
https://gitlab.com/gitlab-org/gitlab-foss/-/merge_requests/33104#note_954012005",1
108800671,2022-05-19 10:35:30.297,Consider making the `request_review` reactive command response message more concise,"The response message for the `request_review` reactive command is currently a bit verbose I think.

Example of the current behavior (https://gitlab.com/gitlab-org/gitlab/-/merge_requests/87857#note_951003725):

![Screen_Shot_2022-05-19_at_12.32.26](/uploads/1cabd153137106ed32caa8e7998a82fa/Screen_Shot_2022-05-19_at_12.32.26.png)

Making it more concise would reduce the noise for ~""Community contribution"" authors (and everyone else).",1
108351360,2022-05-11 08:00:40.484,Group community-related processors under `triage/processor/community`,,2
108139741,2022-05-06 10:37:45.762,Auto apply Hackathon label and link with tracking issue for FY23Q2 Hackathon,"## Summary

This issue is for requesting triage automation on a given project. Please link to the project needed and select from a list of triage automation rules to be added.

Project: https://gitlab.com/gitlab-com, https://gitlab.com/gitlab-org

* Automation that does not require an assignee.
  * Labelling ~""Hackathon"" on any ~""Community contribution"" labeled MR during May 9th, 12 pm UTC (noon), and May
  13th 12 pm UTC (noon)
  * Leaving the following comment: 

` This MR will be considered [part of](https://gitlab.com/gitlab-com/marketing/community-relations/contributor-program/hackathon/-/issues/65) the quarterly [GitLab Hackathon](https://about.gitlab.com/community/hackathon/) for a chance to win a [prize](https://about.gitlab.com/community/hackathon/#prize).

Can you make sure this MR is mentioning/linking the relevant it's attempting to close?

Thank you for your contribution!`

cc @kwiebers",1
107913898,2022-05-03 09:55:11.452,Implement type label nudger processor,"## Objective

Reduce maintenance for updates to type label nudge and allow for easier rollout to projects

### Why is this important? 

The 3 types (Bug, Feature & Maintenance) is key to our report to industry analysts. It is important for GitLab to communicate effort spent into a format that is easily understandable widely in the industry. We provide this metric to our leadership reporting and improve the accuracy with subtypes categorization. 

Additionally tracking accurate work output allows the team to compare output to backlog and adjust focus accordingly. 

### Proposal

1. Create a type label discussion for non-\~""Community contribution"" MRs opened without a type for the [top 20 offending undefined projects](https://app.periscopedata.com/app/gitlab/1021219/Type-Research?widget=14627996&udv=0) with the below message requesting the MR be classified label. => https://gitlab.com/gitlab-org/quality/triage-ops/-/merge_requests/1374
1. Expand to additional projects based on [undefined ratio](https://app.periscopedata.com/app/gitlab/1021219/Type-Research?widget=14627996&udv=0) (what proportion of merged MRs do not have a type) for projects over 20 MRs in the last 90 days
1. Expand to all `is_part_of_product` projects

```
:wave: @#{event.event_actor_username} - please add ~""type::bug"", ~""type::feature"", ~""type::maintenance"", or a [subtype](https://about.gitlab.com/handbook/engineering/metrics/#work-type-classification) label to this merge request. 

        - ~""type::bug"": Defects in shipped code and fixes for those defects. This includes all the bug types (availability, performance, security vulnerability, mobile, etc.) 
        - ~""type::feature"": Effort to deliver new features, feature changes & improvements. This includes all changes as part of new product requirements like application limits.
        - ~""type::maintenance""`: Up-keeping efforts & catch-up corrective improvements that are not Features nor Bugs. This includes restructuring for long-term maintainability, stability, reducing technical debt, improving the contributor experience, or upgrading dependencies.

        See [the handbook](https://about.gitlab.com/handbook/engineering/metrics/#work-type-classification) for more guidance on classifying. 
```",2
107153975,2022-04-25 17:30:02.127,Replace SUS with non-sus label when feature::addition or Actionable Insight::exploration needed is applied to issues,"## Objective

Replace ~SUS with ~""non-SUS"" if ~""feature::addition"" or ~""Actionable Insight::Exploration needed"" is on an issue so that the rules in https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/100632#note_918555284 can be automated.

## Acceptance Criteria

* Convert ~SUS labels to be scoped: https://gitlab.com/gitlab-org/quality/triage-ops/-/issues/982#note_923537080",1
107024845,2022-04-22 11:09:44.718,"Gitlab::Error::BadRequest: Server responded with code 400, message: 400 Bad request - Note {:note=>[""can't be blank""]}. Requ...","Sentry Issue: [TRIAGE-OPS-DA](https://sentry.gitlab.net/gitlab/triage-ops/issues/3270725/?referrer=gitlab_integration)

```
Gitlab::Error::BadRequest: Server responded with code 400, message: 400 Bad request - Note {:note=>[""can't be blank""]}. Request URI: https://gitlab.com/api/v4/projects/20699/merge_requests/6055/notes
  gitlab/request.rb:71:in `validate'
    raise error_klass, response if error_klass
  gitlab/request.rb:55:in `block (2 levels) in <class:Request>'
    validate response
  triage/triage/reaction.rb:40:in `post_request'
    Triage.api_client.post(path, body: { body: body }) unless Triage.dry_run?
  triage/triage/reaction.rb:12:in `add_comment'
    Reaction.post_request(path, body)
  triage/processor/reactive_labeler.rb:50:in `post_label_command'
    add_comment <<~MARKDOWN.chomp
...
(16 additional frame(s) were not displayed)
```

I believe the issue happens when someone asks to apply a label that doesn't match the allowed pattern, e.g. `@gitlab-bot label \~""group::Omnibus Package""`.",2
107022856,2022-04-22 10:23:20.490,/builds/gitlab-org/quality/triage-ops/lib/missed_resource_helper.rb:29:in `move_to_current_milest...,"Sentry Issue: [TRIAGE-OPS-D8](https://sentry.gitlab.net/gitlab/triage-ops/issues/3269330/?referrer=gitlab_integration)

```
/builds/gitlab-org/quality/triage-ops/lib/missed_resource_helper.rb:29:in `move_to_current_milestone': undefined method `title' for nil:NilClass (NoMethodError)
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.0/lib/gitlab/triage/resource/context.rb:28:in `eval'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.0/lib/gitlab/triage/resource/context.rb:23:in `instance_eval'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.0/lib/gitlab/triage/resource/context.rb:23:in `eval'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.0/lib/gitlab/triage/command_builders/text_content_builder.rb:63:in `eval_interpolation'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.0/lib/gitlab/triage/command_builders/text_content_builder.rb:53:in `format_item'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.0/lib/gitlab/triage/command_builders/base_command_builder.rb:34:in `block in content_string'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.0/lib/gitlab/triage/command_builders/base_command_builder.rb:33:in `map'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.0/lib/gitlab/triage/command_builders/base_command_builder.rb:33:in `content_string'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.0/lib/gitlab/triage/command_builders/base_command_builder.rb:14:in `build_command'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.0/lib/gitlab/triage/action/comment.rb:43:in `build_comment'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.0/lib/gitlab/triage/action/comment.rb:32:in `block in act'
	from /usr/local/lib/ruby/2.7.0/delegate.rb:83:in `each'
	from /usr/local/lib/ruby/2.7.0/delegate.rb:83:in `method_missing'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.0/lib/gitlab/triage/action/comment.rb:31:in `act'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.0/lib/gitlab/triage/action.rb:28:in `act'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.0/lib/gitlab/triage/action.rb:16:in `block in process'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.0/lib/gitlab/triage/action.rb:15:in `each'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.0/lib/gitlab/triage/action.rb:15:in `process'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.0/lib/gitlab/triage/engine.rb:324:in `process_action'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.0/lib/gitlab/triage/engine.rb:186:in `block (2 levels) in process_rules'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.0/lib/gitlab/triage/engine.rb:308:in `block in resources_for_rule'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.0/lib/gitlab/triage/expand_condition.rb:13:in `each'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.0/lib/gitlab/triage/expand_condition.rb:13:in `perform'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.0/lib/gitlab/triage/engine.rb:278:in `resources_for_rule'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.0/lib/gitlab/triage/engine.rb:182:in `block in process_rules'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.0/lib/gitlab/triage/engine.rb:181:in `each'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.0/lib/gitlab/triage/engine.rb:181:in `process_rules'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.0/lib/gitlab/triage/engine.rb:76:in `block in perform'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.0/lib/gitlab/triage/engine.rb:67:in `each'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.0/lib/gitlab/triage/engine.rb:67:in `perform'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.0/bin/gitlab-triage:18:in `block in <top (required)>'
	from /usr/local/lib/ruby/2.7.0/set.rb:328:in `each_key'
	from /usr/local/lib/ruby/2.7.0/set.rb:328:in `each'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.23.0/bin/gitlab-triage:11:in `<top (required)>'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/bin/gitlab-triage:23:in `load'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/bin/gitlab-triage:23:in `<main>'
```

I believe the problem is in the `Issuable#root_id` method in `gitlab-triage`: https://gitlab.com/gitlab-org/ruby/gems/gitlab-triage/-/blob/870ca5c6964740829351ec039d08928c19621aed/lib/gitlab/triage/resource/shared/issuable.rb#L72",2
107024128,2022-04-21 23:56:17.670,Bot message cleanup refactoring,"We have a wide implementation of bot automated message and this can be overwhelming and noisy to our team members. 


Create this issue to start reducing / redundant or irrelevant messages 

1. Bot messages containing code related requirements in documentation MR 
    - https://gitlab.com/gitlab-org/gitlab/-/merge_requests/80756#note_920336781 
    - Add docs minimal job context?
1. Redundant prompt to apply labels 
    -  https://gitlab.com/gitlab-org/gitlab/-/issues/359166#note_914475256

cc @rymai @kwiebers I created this issue to start refactoring bot messages based on feedback heard. 

If you have seen anymore of these please add to them",2
106786438,2022-04-18 17:04:56.014,Rename event_user to event_actor,"So we can finally move away from `event_user` which is sometimes confusing with `resource_user`. The idea is that:

* `event_user` -> `event_actor`
* `resource_user` -> `resource_author`",1
106652916,2022-04-14 16:10:52.148,Consider enabling the `LabelInference` processor for `gitlab-com/runbooks`,"We should consider enabling the `LabelInference` processor for the https://gitlab.com/gitlab-com/runbooks project, e.g. https://gitlab.com/gitlab-com/runbooks/-/merge_requests/4518#note_bb9e07f01265e875fefcd649863efe112f391cb8.

Related to https://gitlab.com/gitlab-org/quality/team-tasks/-/issues/1190#note_846835116.",2
106465289,2022-04-11 18:46:06.848,Remove conflicting sub-work type if a different scoped type is applied,"## Objective

Reduce misalignment of sub and parent [Work types](https://about.gitlab.com/handbook/engineering/metrics/#work-type-classification) on issues and merge requests.

A one-off migration may need to be done to fix any contradicting parent and sub type on open issues and merge requests.

This would be similar to https://gitlab.com/gitlab-org/quality/triage-ops/-/blob/master/triage/processor/label_inference.rb but to remove child labels when a different type label is added (currently it adds and removes parent labels when a child label is added).",3
106284538,2022-04-07 22:05:59.181,Add New  Category Labels for Group:: Authentication and Authorization,"## Summary

This template is for new or renaming Category labels. This review helps to ensure there will be no impact with triage automation and reports.

### Action items

* [x] Link the merge request to www-gitlab-com for the [category.yml](https://gitlab.com/gitlab-com/www-gitlab-com/blob/master/data/categories.yml) change - https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/101822
* [ ] (If applicable) Label migration on existing issues and merge requests: apply the new label to opened & closed issues, and open & merged merge requests.
* [ ] (If applicable) Rename the old label by adding `[DEPRECATED]` at the end of the label name, like ~""CI/CD [DEPRECATED]"".


/cc @gl-quality/eng-prod",1
105830413,2022-03-31 15:32:45.133,Move Category:Pages issues to group:editor,"## Summary

This template is for new or renaming Category labels. This review helps to ensure there will be no impact with triage automation and reports.

~""group::editor"" is now the group responsible for ~""Category:Pages"" so we need to migrate the issue and MR labels accordingly. This should only be done on **open** issues and MRs.

More detail here: https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/100227#note_895335961



### Action items

* [ ] Link the merge request to www-gitlab-com for the [category.yml](https://gitlab.com/gitlab-com/www-gitlab-com/blob/master/data/categories.yml) change
* [ ] (If applicable) Label migration on existing issues and merge requests: apply the new label to opened & closed issues, and open & merged merge requests.
* [ ] (If applicable) Rename the old label by adding `[DEPRECATED]` at the end of the label name, like ~""CI/CD [DEPRECATED]"".


/cc @gl-quality/eng-prod",2
105439409,2022-03-24 15:25:47.656,Add @gitlab-release-tools-bot to Automation Accounts,"https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/101092 should not have ~""Community contribution"" applied or thanks.",1
105340361,2022-03-23 10:14:50.406,"Gitlab::Error::BadRequest: Server responded with code 400, message: 400 Bad request - Note {:note=>[""can't be blank""]} in `AvailabilityPriority`","Sentry Issue: [TRIAGE-OPS-BM](https://sentry.gitlab.net/gitlab/triage-ops/issues/3237312/?referrer=gitlab_integration)

```
Gitlab::Error::BadRequest: Server responded with code 400, message: 400 Bad request - Note {:note=>[""can't be blank""]}. Request URI: https://gitlab.com/api/v4/projects/278964/merge_requests/83494/notes
  gitlab/request.rb:71:in `validate'
    raise error_klass, response if error_klass
  gitlab/request.rb:55:in `block (2 levels) in <class:Request>'
    validate response
  triage/triage/reaction.rb:22:in `post_request'
    Triage.api_client.post(path, body: { body: body }) unless Triage.dry_run?
  triage/triage/reaction.rb:12:in `add_comment'
    Reaction.post_request(path, body)
  triage/processor/availability_priority.rb:43:in `ensure_priority'
    add_comment(""/label ~priority::#{default}"")
...
(16 additional frame(s) were not displayed)
```",2
105339117,2022-03-23 09:56:32.474,no implicit conversion of nil into String in `RemindMergedMrDeviatingFromGuideline`,"Sentry Issue: [TRIAGE-OPS-BN](https://sentry.gitlab.net/gitlab/triage-ops/issues/3237542/?referrer=gitlab_integration)

```
TypeError: no implicit conversion of nil into String
  time.rb:372:in `_parse'
    d = Date._parse(date, comp)
  time.rb:372:in `parse'
    d = Date._parse(date, comp)
  triage/processor/remind_merged_mr_deviating_from_guidelines.rb:58:in `latest_pipeline_is_recent_enough?'
    Time.parse(latest_pipeline_detailed.finished_at) >= (Time.now - 3600 * HOURS_THRESHOLD_FOR_STALE_MR_PIPELINE)
  triage/processor/remind_merged_mr_deviating_from_guidelines.rb:40:in `latest_pipeline_valid?'
    latest_pipeline_is_recent_enough?
  triage/processor/remind_merged_mr_deviating_from_guidelines.rb:20:in `applicable?'
    !latest_pipeline_valid?
...
(14 additional frame(s) were not displayed)
```",2
102961942,2022-02-24 01:08:59.416,Close issues that have the 'auto closed' label but are not actually closed,"Due to a bug fixed at https://gitlab.com/gitlab-org/quality/triage-ops/-/merge_requests/1184, there are a number of issues in `gitlab-org/customers-gitlab-com` and `gitlab-org/license-gitlab-com` that have issues labelled with ~""auto closed"" but are not actually closed.

Let's perform a once-off job to close this issues to keep things tidy.",2
102914116,2022-02-23 09:55:42.198,Consolidate the `Accepting merge requests` and `Seeking community contributions` hygiene policies,"Kind of a follow-up to https://gitlab.com/gitlab-org/quality/triage-ops/-/merge_requests/1101 which can result in duplicate notes from the bot:

![Screen_Shot_2022-02-23_at_10.42.28](/uploads/83e74d18bbe73b24a90bf81ee9ff0070/Screen_Shot_2022-02-23_at_10.42.28.png)

I'll consolidate both labels automation in a single file.",2
102498775,2022-02-15 18:30:57.158,Make AppSec review comments for JiHu contributions in the CNG repository,"We recently had [a JiHu contribution](https://gitlab.com/gitlab-org/build/CNG/-/merge_requests/886#note_843817808) that was properly labeled as ~""JiHu contribution"" but did not get the AppSec comment. I'm guessing the CNG repository isn't something that triage-ops is monitoring. This may be intentional, so there may be a reason for this that I'm unaware of.

Ideally, AppSec would be getting pings for this repository as well.

If there's a reason why triage-ops doesn't/can't monitor this repository, we can try to figure out another way to get AppSec reviews of those MRs.",2
102491841,2022-02-15 16:17:46.111,Apply type label from related issue,"## Objective

Increase ~type::* label coverage and accuracy by automatically applying types from issues when 1 type can be inferred from related issues

## Proposal

When a merge request does not have a type::* and has a related issue or issues where 1 type::* label is available, apply the type label from the issue(s) to the merge request",3
102431293,2022-02-14 17:28:59.351,Look at current labels instead of added labels in PlanUxMrReviewSupport,"The following discussion from !1111 should be addressed:

- [ ] @mvanremmerden started a [discussion](https://gitlab.com/gitlab-org/quality/triage-ops/-/merge_requests/1111#note_836167763):  (+3 comments)

    > @rymai @markglenfletcher It seems like the script might not actually pick up items as expected, shouldn't it have been triggered for this MR: https://gitlab.com/gitlab-org/gitlab/-/merge_requests/80124#note_8195fb85c4f7c66c218e1213f8b96c5dc3c33a89",1
102424808,2022-02-14 16:04:43.270,TypeError: no implicit conversion of nil into String | triage/processor/remind_merged_mr_deviating_from_guidelines.rb:44:in `latest_pipeline_is_recent_enough?',"Sentry Issue: [TRIAGE-OPS-9J](https://sentry.gitlab.net/gitlab/triage-ops/issues/3184468/?referrer=gitlab_integration)

```
TypeError: no implicit conversion of nil into String
  time.rb:372:in `_parse'
    d = Date._parse(date, comp)
  time.rb:372:in `parse'
    d = Date._parse(date, comp)
  triage/processor/remind_merged_mr_deviating_from_guidelines.rb:44:in `latest_pipeline_is_recent_enough?'
    Time.parse(latest_pipeline_detailed.finished_at) >= (Time.now - 3600 * HOURS_THRESHOLD_FOR_STALE_MR_PIPELINE)
  triage/processor/remind_merged_mr_deviating_from_guidelines.rb:18:in `applicable?'
    (!latest_pipeline_is_canonical? || !latest_pipeline_is_recent_enough?)
  triage/triage/processor.rb:38:in `triage'
    return unless applicable?
...
(20 additional frame(s) were not displayed)
```

I think this happens when the latest pipeline is still running. In that case, we should return `true`.",1
102367224,2022-02-14 01:07:14.793,Cannot run specs locally,"When attempting to run `bundle exec rspec` locally, there are two failures:

```sh
Failures:

  1) ThreatInsightsHelper#threat_insights_fe retrieves team members from www-gitlab-com and returns a random threat insights frontend engineer
     Failure/Error: json = with_retries { HTTParty.get(json_url, format: :plain) }

     WebMock::NetConnectNotAllowedError:
       Real HTTP connections are disabled. Unregistered request: GET https://gitlab-org.gitlab.io/gitlab-roulette/roulette.json with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'User-Agent'=>'Ruby'}

       You can stub this request with the following snippet:

       stub_request(:get, ""https://gitlab-org.gitlab.io/gitlab-roulette/roulette.json"").
         with(
           headers: {
       	  'Accept'=>'*/*',
       	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
       	  'User-Agent'=>'Ruby'
           }).
         to_return(status: 200, body: """", headers: {})

       ============================================================
     # ./lib/www_gitlab_com.rb:43:in `block in fetch_json'
     # ./lib/www_gitlab_com.rb:54:in `with_retries'
     # ./lib/www_gitlab_com.rb:43:in `fetch_json'
     # ./lib/www_gitlab_com.rb:39:in `roulette'
     # ./lib/team_member_select_helper.rb:39:in `out_of_office_team_members'
     # ./lib/team_member_select_helper.rb:44:in `out_of_office?'
     # ./lib/team_member_select_helper.rb:32:in `block in select_team_member_usernames'
     # ./lib/team_member_select_helper.rb:31:in `each'
     # ./lib/team_member_select_helper.rb:31:in `each_with_object'
     # ./lib/team_member_select_helper.rb:31:in `select_team_member_usernames'
     # ./lib/team_member_select_helper.rb:16:in `select_team_members_by_department_specialty_role'
     # ./lib/team_member_select_helper.rb:8:in `select_random_team_member'
     # ./lib/threat_insights_helper.rb:16:in `threat_insights_fe'
     # ./spec/lib/threat_insights_helper_spec.rb:43:in `block (3 levels) in <top (required)>'

  2) ThreatInsightsHelper#threat_insights_be retrieves team members from www-gitlab-com and returns a random threat insights backend engineer
     Failure/Error: json = with_retries { HTTParty.get(json_url, format: :plain) }

     WebMock::NetConnectNotAllowedError:
       Real HTTP connections are disabled. Unregistered request: GET https://gitlab-org.gitlab.io/gitlab-roulette/roulette.json with headers {'Accept'=>'*/*', 'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3', 'User-Agent'=>'Ruby'}

       You can stub this request with the following snippet:

       stub_request(:get, ""https://gitlab-org.gitlab.io/gitlab-roulette/roulette.json"").
         with(
           headers: {
       	  'Accept'=>'*/*',
       	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
       	  'User-Agent'=>'Ruby'
           }).
         to_return(status: 200, body: """", headers: {})

       ============================================================
     # ./lib/www_gitlab_com.rb:43:in `block in fetch_json'
     # ./lib/www_gitlab_com.rb:54:in `with_retries'
     # ./lib/www_gitlab_com.rb:43:in `fetch_json'
     # ./lib/www_gitlab_com.rb:39:in `roulette'
     # ./lib/team_member_select_helper.rb:39:in `out_of_office_team_members'
     # ./lib/team_member_select_helper.rb:44:in `out_of_office?'
     # ./lib/team_member_select_helper.rb:32:in `block in select_team_member_usernames'
     # ./lib/team_member_select_helper.rb:31:in `each'
     # ./lib/team_member_select_helper.rb:31:in `each_with_object'
     # ./lib/team_member_select_helper.rb:31:in `select_team_member_usernames'
     # ./lib/team_member_select_helper.rb:16:in `select_team_members_by_department_specialty_role'
     # ./lib/team_member_select_helper.rb:8:in `select_random_team_member'
     # ./lib/threat_insights_helper.rb:12:in `threat_insights_be'
     # ./spec/lib/threat_insights_helper_spec.rb:35:in `block (3 levels) in <top (required)>'

--snip--

Finished in 5.06 seconds (files took 3.42 seconds to load)
1521 examples, 2 failures

Failed examples:

rspec ./spec/lib/threat_insights_helper_spec.rb:40 # ThreatInsightsHelper#threat_insights_fe retrieves team members from www-gitlab-com and returns a random threat insights frontend engineer
rspec ./spec/lib/threat_insights_helper_spec.rb:32 # ThreatInsightsHelper#threat_insights_be retrieves team members from www-gitlab-com and returns a random threat insights backend engineer

```",2
102027886,2022-02-08 00:24:37.683,Ping team members in MRs that are waiting for a review,"## Proposal

1. Ping inactive reviewers on community MRs ready for review to either review or reassign to someone else.
   * Conditions:
     * MR has ~""Community contribution"" and ~""workflow::ready for review""
     * MR doesn't have ~""automation:reviewers-reminded""
     * No activity on the MR in the last 7 days
     * MR has reviewer(s) assigned
1. Ping MR coaches on community MRs ready for review.
   * Conditions:
     * MR has ~""Community contribution"" and ~""workflow::ready for review""
     * MR doesn't have ~""automation:reviewers-reminded""
     * No activity on the MR in the last day (i.e. after 1 day of inactivity, ping an MR coach)
     * MR has no reviewers assigned

In both policies, we hint to add ~""workflow::in dev"" if some work from the author is actually required.

If the reviewer doesn't take any action, the policy won't fire again, unless ~""automation:reviewers-reminded"" is removed.

These policies should ensure that the ball is rolling when a ~""Community contribution"" MR is under a GitLab team member responsibility.",2
101997194,2022-02-07 13:17:51.972,Reactive reminder for merged MRs without a full merged result pipeline,Related to #887 that we should also remind people if the latest pipeline is not a full merged result pipeline (triggered before approved),2
101825177,2022-02-03 14:55:44.155,Reactive reminder for merged MRs deviating from guidelines,"## Objective

Provide feedback on merge request guidelines to minimize the opportunity of a ~""master:broken"" when a merge request is merged that deviates from the guidelines at https://docs.gitlab.com/ee/development/code_review.html#merging-a-merge-request

### Proposal

When a merge request is merged that deviates from these guidelines a reminder should be posted to the event_user for the merge event.

https://gitlab.com/gitlab-org/gitlab/-/merge_requests/75808#note_830752842",2
101676530,2022-02-01 17:33:38.132,Add coverage tracking and enforcement,"## Summary

This prevent issues such as https://gitlab.com/gitlab-org/quality/triage-ops/-/issues/883, we should track and enforce a very high coverage for this project.",3
101675832,2022-02-01 17:18:06.329,NameError: undefined local variable or method `label_names' for #<Triage::DefaultLabelUponClosing:0x00007f70...,"# Error Details:
- Sentry event: https://sentry.gitlab.net/gitlab/triage-ops/issues/3178482
- First seen: 
2022-02-01T17:12:32+00:00
- Last seen: 2022-02-01T17:12:32+00:00
 - Event: 1
- Users: 0",1
101270732,2022-01-26 09:10:41.352,Job Failed #2016178858 - Discover,"Job [#2016178858](https://gitlab.com/gitlab-org/quality/triage-ops/-/jobs/2016178858) failed for a89c849571a693cff8ffbd0bb9d2b7fa9e4f4d07:

### Trace

```
/builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.21.0/lib/gitlab/triage/filters/votes_conditions_filter.rb:46:in `calculate': undefined method `>' for nil:NilClass (NoMethodError)
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.21.0/lib/gitlab/triage/engine.rb:340:in `block in filter_resources'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.21.0/lib/gitlab/triage/engine.rb:331:in `select'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.21.0/lib/gitlab/triage/engine.rb:331:in `filter_resources'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.21.0/lib/gitlab/triage/engine.rb:300:in `block in resources_for_rule'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.21.0/lib/gitlab/triage/expand_condition.rb:13:in `each'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.21.0/lib/gitlab/triage/expand_condition.rb:13:in `perform'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.21.0/lib/gitlab/triage/engine.rb:277:in `resources_for_rule'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.21.0/lib/gitlab/triage/engine.rb:181:in `block in process_rules'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.21.0/lib/gitlab/triage/engine.rb:180:in `each'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.21.0/lib/gitlab/triage/engine.rb:180:in `process_rules'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.21.0/lib/gitlab/triage/engine.rb:75:in `block in perform'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.21.0/lib/gitlab/triage/engine.rb:66:in `each'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.21.0/lib/gitlab/triage/engine.rb:66:in `perform'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.21.0/bin/gitlab-triage:18:in `block in <top (required)>'
	from /usr/local/lib/ruby/2.7.0/set.rb:328:in `each_key'
	from /usr/local/lib/ruby/2.7.0/set.rb:328:in `each'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/gems/gitlab-triage-1.21.0/bin/gitlab-triage:11:in `<top (required)>'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/bin/gitlab-triage:23:in `load'
	from /builds/gitlab-org/quality/triage-ops/vendor/ruby/2.7.0/bin/gitlab-triage:23:in `<main>'
```

It appears the response was incorrect. Following the API request results in

```
{""error"":""milestone_id does not have a valid value""}
```",1
100165334,2022-01-05 19:20:53.131,Remove Accessibility Categories and Usability Testing Categories from automation,"## Summary

In https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/95994, we have removed two categories: Accessibility testing and Usability Testing. 

I have already removed the category in categories.yml, and removed the labels after relabelling the issues with their correct label. I want to confirm that there is no other triage or reports we need to update with these category removals. 

### Action items

* [x] Link the merge request to www-gitlab-com for the [category.yml](https://gitlab.com/gitlab-com/www-gitlab-com/blob/master/data/categories.yml) change
* [x] (If applicable) Label migration on existing issues and merge requests: apply the new label to opened & closed issues, and open & merged merge requests.
* [x] (If applicable) Rename the old label by adding `[DEPRECATED]` at the end of the label name, like ~""CI/CD [DEPRECATED]"". => I actually deleted the label :see_no_evil: 


/cc @gl-quality/eng-prod",1
100073930,2022-01-04 11:55:58.692,Update group label name from monitor to respond,"## Summary

~""group::monitor"" will be renaming to `~group::respond` with https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/96249. Label needs to be confirmed with https://about.gitlab.com/groups.json after the MR is merged. 

This should be a simple label rename with no migration like https://gitlab.com/gitlab-org/quality/triage-ops/-/issues/845. 

### Action items

* [ ] (If applicable) Label migration on existing issues and merge requests: apply the new label to opened & closed issues, and open & merged merge requests.
  * [ ] Check if label migration will apply labels which have subscribers.
    [Communicate with the subscribers](https://about.gitlab.com/handbook/engineering/quality/triage-operations/#communicate-early-and-broadly-about-expected-automation-impact)
    before applying the label migration.
* [-] (If applicable) Archive the old label with renaming and adding ""DEPRECATED"" at the end of the label name.
* [-] (If applicable) Delete the old dashboard views using the deprecated labels.
* [ ] (If applicable) Update the group triage report definition to use the new label.
* [ ] (If applicable) Update the group label's description to refer to the new Stage.

/cc @gl-quality/eng-prod",2
99573850,2021-12-21 16:15:48.701,Ensure Severity label is applied for UX issues,"From Eng Staff Offsite. We want GitLab Bot notifications to make sure we add severity to issues with these labels:
1. ""Actionable Insight,"" 
1. ""Low SUS Score,"" 
1. ""UX scorecard-rec,"" 
1. ""cm-scorecard-rec,"" 
1. ""UX debt,"" 
1. ""UI polish,"" 
1. ""UX solution validation,"" 
1. ""accessibility,"" 
1. ""VP-UX Dogfooding,"" 
1. UX bugs

We will point to the UX severity guidelines in https://about.gitlab.com/handbook/engineering/quality/issue-triage/#severity",3
98941435,2021-12-13 12:31:57.345,Skip full mr pipeline trigger on approval for qa only changes,"Currently, if merge request contains changes only in qa folder, upon first approval a full pipeline will be triggered.

The issue with that is, that first minimal pipeline already triggers e2e tests and triggering full rspec and jest suite do not provide any additional benefits.",2
98911699,2021-12-13 04:30:24.900,"Do not include ""Testcases"" in the daily triage report","This is an example: https://gitlab.com/gitlab-org/quality/triage-reports/-/issues/5637 

The issues mentioned here are actually ""testcases"" - issue_type field is different. 

We might have to figure out a way to differentiate it.",2
98764201,2021-12-09 16:22:26.925,"Follow-up from ""Generalize the policy to prompt for slipping check""","The following discussion from !1019 should be addressed:

- [x] @oregand started a [discussion](https://gitlab.com/gitlab-org/quality/triage-ops/-/merge_requests/1019#note_756434396):  (+2 comments)

    > @rymai 
    > 
    > Are we able to conditionally act on these type of actions? i.e.
    > 
    > ```
    > if group::editor
    >   mention:
    >     - ericschurter
    > ```
    > 
    > Or can we dynamically pass a name to a policy perhaps?",1
98629626,2021-12-07 22:04:03.969,Increase default group label application for project/group MRs,"## Objective

Increase the ~group::* label coverage to improve filtered MR searches inside `gitlab-org` and increase discoverability of MRs in team Merge Request reports

## Proposal

See discussion in https://docs.google.com/document/d/1yzHuosvykzb_kaldjGP9I6wxpNpMXdNEvEFBkHyZpXs/edit#bookmark=id.gnno3zgd2hh3

- Review merged MRs for `is_part_of_product` projects (maybe in Sisense?) to identify groups and projects that are good candidates to auto-apply labels",3
98174237,2021-11-30 12:55:50.278,"Web service from this project isn't used, the one from triage-serverless is used instead","I realized that triage-ops deployment isn’t used so any changes that were merged after the merging of triage-serverless into triage-ops haven’t been deployed. I’m trying to figure out what needs to be changed. I’m wondering of maybe we should take the opportunity to deploy a new cluster with a new triage-ops.gitlab.com domain so that once it’s ready we can just add the DNS record and update the webhook URL to use the up-to-date cluster.

We could maybe take the opportunity to resolve https://gitlab.com/gitlab-org/quality/triage-ops/-/issues/766 at the same time.

For reference, the K8s config was introduced by https://gitlab.com/gitlab-org/quality/triage-serverless/-/merge_requests/27/diffs.",3
98154574,2021-11-30 09:01:15.383,"Override ""infer group from MR authors"" logic for Distribution team members","Distribution team was partitioned to two charters - Build and Deploy. This was reflected in team page data file, where departments now say `Distribution Build BE Team` and `Distribution Deploy BE Team`. Triage-ops, when inferring group labels from MR authors sanitizes these as `group::distribution build` and `group::distribution deploy`. However, those labels do not exist because the team still uses a single group label `group::distribution`.

So, we need an override from `group::distribution build` and `group::distribution deploy` labels to `group::distribution` label.",1
97467150,2021-11-17 08:57:51.948,Re-enable production deployment of the reactive service,"The following discussion from !996 should be addressed:

- [ ] @godfat-gitlab started a [discussion](https://gitlab.com/gitlab-org/quality/triage-ops/-/merge_requests/996#note_734985007): 

    > This seems to be where next we want to change.",2
97474838,2021-11-16 08:26:23.965,Allow community contributors to request a review,"Similar to https://gitlab.com/gitlab-org/quality/triage-serverless/-/issues/173 and https://gitlab.com/gitlab-org/quality/triage-serverless/-/merge_requests/181, we should allow anyone to request a review with `@gitlab-bot request_review`.

The command should probably post to `#mr-coaching` in Slack for now.

We should monitor the number of requests from community contributors.",3
97474842,2021-11-08 11:36:24.218,New policies to set default type labels upon issue/MR merged/closed event,"The idea is to create policies for the `merge_request.merged` event, based on the one-off migrations that were performed by https://gitlab.com/gitlab-org/quality/triage-ops/-/merge_requests/944.

The description of the policies can be found at https://gitlab.com/gitlab-org/quality/triage-ops/-/issues/731.

- Set triage-serverless~2779335 merged and closed issues & MRs without a `type::*` label to `~type::maintenance`
- Set triage-serverless~2278655 merged closed issues & MRs without a `type::*` label to `~type::maintenance`",2
96561900,2021-11-02 08:58:36.205,Job Failed #1737994920,"Job [#1737994920](https://gitlab.com/gitlab-org/quality/triage-ops/-/jobs/1737994920) failed for 398bbf2d1872bb4cd0d6b25e17f5c63986923cd2:

```
  1) DevopsLabels DevopsLabels::Context#stage_for_group returns the stage name of the given group
     Failure/Error: expect(resource.stage_for_group('distribution')).to eq('enablement')
       expected: ""enablement""
            got: nil
       (compared using ==)
     # ./spec/lib/devops_labels_spec.rb:694:in `block (4 levels) in <top (required)>'
     # ./vendor/ruby/2.7.0/gems/webmock-3.10.0/lib/webmock/rspec.rb:37:in `block (2 levels) in <top (required)>'
  2) DevopsLabels DevopsLabels::Context#first_group_for_stage returns the first group of the given stage
     Failure/Error: expect(resource.first_group_for_stage('enablement')).to eq('distribution')
       expected: ""distribution""
            got: ""distribution_build""
       (compared using ==)
     # ./spec/lib/devops_labels_spec.rb:682:in `block (4 levels) in <top (required)>'
     # ./vendor/ruby/2.7.0/gems/webmock-3.10.0/lib/webmock/rspec.rb:37:in `block (2 levels) in <top (required)>'
```",1
97474866,2021-10-01 02:19:06.916,Use JSON structured log for better parsing in GCP,"GKE logging agent automatically parses JSON logs as structured log and they will be available as `jsonPayload`.

https://cloud.google.com/logging/docs/structured-logging

To start with, we could add the following keys to the log:
- `message`
- `severity`

Subsequently, we could add more metadata to the log, for example:
- the relevant processor
- sync (web request) or async (background jobs)
- duration
- etc",3
94432123,2021-09-28 08:58:00.587,Job Failed #1628339249,"Job [#1628339249](https://gitlab.com/gitlab-org/quality/triage-ops/-/jobs/1628339249) failed for 7e33bd5ea2f855b6a8e8eea848e85a974b855829:

```
  1) DevopsLabels.teams_per_user username: ""lulalala"", expected_teams: [""fulfillment_provision"", ""license""] returns teams of user
     Failure/Error: expect(described_class.teams_per_user(username)).to contain_exactly(*expected_teams)
       expected collection contained:  [""fulfillment_provision"", ""license""]
       actual collection contained:    [""license"", ""license""]
       the missing elements were:      [""fulfillment_provision""]
       the extra elements were:        [""license""]
     # ./spec/lib/devops_labels_spec.rb:76:in `block (4 levels) in <top (required)>'
     # ./vendor/ruby/2.7.0/gems/webmock-3.10.0/lib/webmock/rspec.rb:37:in `block (2 levels) in <top (required)>'
Finished in 1.96 seconds (files took 1.17 seconds to load)
653 examples, 1 failure
Failed examples:
rspec './spec/lib/devops_labels_spec.rb[1:6:6:1]' # DevopsLabels.teams_per_user username: ""lulalala"", expected_teams: [""fulfillment_provision"", ""license""] returns teams of user
```",1
97474870,2021-09-22 23:19:02.384,"Resolve edge case in which approval of a ""draft"" MR triggers a detached pipeline","When a maintainer approves a MR on gitlab, @danger-bot will automatically trigger a new pipeline, stating:

> To ensure full test coverage, a new pipeline has been started.

![CleanShot_2021-09-22_at_18.05.43_2x](/uploads/4cfe22672d42b877eaff27f1d89d9dd6/CleanShot_2021-09-22_at_18.05.43_2x.png)

However, if the MR is still marked as a ""Draft"", this new `detached` pipeline is [run against the source branch](https://docs.gitlab.com/ee/ci/pipelines/pipelines_for_merged_results.html) rather than against the merged result. I had erroneously presumed that the pipeline triggered upon approval would be against the merged result, and this resulted in gitlab-org/gitlab~3496950 :scream: 

When I merged gitlab-org/gitlab!69072, I:

1. clicked ""approve""
1. clicked ""mark as ready""
1. waited for the new pipeline to become visible
1. clicked ""merge when pipeline succeeds""
1. a detached pipeline was run which did not include the latest changes from `master` and missed a test failure which would have occured against a merged result pipeline
1. the pipeline passed and the merged branch ended up breaking master.

Had I instead clicked ""mark as ready"" _before_ clicking ""approve"", the full merged result pipeline would have been created instead and this test failure would have been caught before it was automatically merged.

### Recommendation

This behavior _is_ documented, so it is certainly my mistake, but I think if it's possible for @danger-bot to trigger a full merged-result pipeline regardless of the draft state we should configure it to do so (or failing that, it should produce a **warning** saying that the MR is marked as a draft and that a full merged-result pipeline should be triggered.)

-----------

Original discussion from gitlab-org/gitlab!70746:

> > I was not cognizant of any behavior change for pipelines triggered within draft MRs
>
> Yeah, it's a slightly surprising behaviour, but it is [documented](https://docs.gitlab.com/ee/ci/pipelines/pipelines_for_merged_results.html) (emphasis mine):
>
> > When the merge request can’t be merged, the pipeline runs against the source branch only. For example, when:
> >
> > * The target branch has changes that conflict with the changes in the source branch.
> > * The merge request **is a Draft merge request**.
>
> ---
>
> > The pipeline was triggered by `@danger-bot` automatically upon my approval of the MR, so that’s why it doesn’t show me as the triggerer.
> >
> > Do you think there an actionable issue here @markrian?
>
> That does sound like an edge-case bug in our `@danger-bot` tooling, yes (i.e., when the MR is `Draft`). Do you know where we might file an issue or MR for this?",3
97474872,2021-09-16 14:32:54.148,Consider cleaning up left-overs from the Knative integration,"It looks we still have some left-overs from Knative:

- https://gitlab.com/gitlab-org/quality/triage-serverless/-/serverless/functions
- https://gitlab.com/gitlab-org/quality/triage-serverless/-/blob/master/serverless.yml
- https://gitlab.com/gitlab-org/quality/triage-serverless/-/blob/master/config/triage-virtual-service.yaml
- [Screen_Shot_2021-09-16_at_16.30.55](/uploads/5b0065b5fcf4a8f29eefab18354bf965/Screen_Shot_2021-09-16_at_16.30.55.png)",3
97474874,2021-09-15 19:02:38.428,Delay pinging AppSec team for JiHu contributions after first approval,"Following up https://gitlab.com/gitlab-org/quality/triage-serverless/-/issues/125, this is brought up from https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/90253#note_677426770

## Problem

If we ping the AppSec team too early in the life cycle of a merge request, chances are AppSec team can review too early and the review becomes outdated quickly, therefore a complete re-review might be needed later.

## Proposal

Given that it's difficult to shift the ping after the ""last"" approval, we can at least shift the ping after the ""first"" approval.

Below was copied and edited from https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/90253#note_677426770

* MR gets submitted
* Bot makes [the unresolved thread](https://gitlab.com/gitlab-org/quality/triage-serverless/-/merge_requests/145/diffs) that acts as a blocker to merging until AppSec can review it (but does not `@-mention` the AppSec team yet)
* Reviewers/maintainers go through the MR, request some changes, eventually approve it
* Once approved by the reviewers/maintainers, automation comments in that unresolved thread and pings the AppSec team for a ~~{-final-}~~{+follow up+} approval

## Implementation

With https://gitlab.com/gitlab-org/quality/triage-serverless/-/merge_requests/153 where it can leave a unique mark in the comment, and a way to detect if the unique mark is already being left, we can extend this so that it can find the original thread and attach new comments in the thread.

* Wrap the first AppSec thread with a unique mark
* When we receive an approval, find the above thread with the unique mark
* Comment and ping AppSec team on the thread
* (Bonus) Make sure the thread cannot be resolved before AppSec team member is pinged!
* (Bonus bonus) Make sure that only team members can resolve the thread!

## Question: Final approval?

If we may find a good way to determine what is the ""last"" approval, we can as well make AppSec get pinged after that so AppSec team can be the last one to approve. This will be more ideal because we can make sure there's no loophole that AppSec team review can get outdated.

We can as well think about making this process more formal so maintainers can just follow that rule manually.

## Question: triage-ops?

Can we do the same for triage-ops?",2
93102029,2021-09-03 20:52:20.695,One-off migration for old types to new scoped types,"1. Remove `~type::feature` when `~type::maintenance` exists - based on both labels being present after rename in https://gitlab.com/gitlab-org/quality/team-tasks/-/issues/1003
1. Set ~security open, merged and closed MRs and open issues without a `type::*` label to `~type::maintenance`
1. Set ~documentation open, merged closed MRs and open issues without a `type::*` label to `~type::maintenance`

### Questions

- Where should ~documentation be defaulted to?",3
93099757,2021-09-03 19:58:07.195,Update triage-ops type label references,"As apart of https://gitlab.com/groups/gitlab-org/-/epics/6622

Update the following references:

- [ ] https://gitlab.com/gitlab-org/quality/triage-ops/-/blob/master/lib/untriaged_helper.rb
- [ ] https://gitlab.com/gitlab-org/quality/triage-ops/-/blob/master/policies/template/team-summary.yml.erb
- [ ] Probably more",2
93065038,2021-09-03 09:57:03.330,"Handle ~group::not_owned label for ""Untriaged community merge requests"" policy","## Problem

In reports like https://gitlab.com/gitlab-org/quality/triage-reports/-/issues/4457 MRs with label ~""group::not_owned"" often have missing stage labels.

Those MRs, although properly labelled otherwise, still show up in reports because stage label is missing if MRs changes span multiple stages (hence ~""group::not_owned"").

## Proposed solution

Make this specific policy (https://gitlab.com/gitlab-org/quality/triage-ops/-/blob/master/policies/stages/report/untriaged-community-merge-requests.yml#L18) aware of the following condition:
* Skip MR for the report if the MR has ~""group::not_owned"" and stage label is missing",2
92149112,2021-08-17 22:26:14.056,Update Author Label Inference Docs and Order,"In a recent [Engineering Productivity team meeting](https://docs.google.com/document/d/1yzHuosvykzb_kaldjGP9I6wxpNpMXdNEvEFBkHyZpXs/edit#bookmark=id.nni8n0dmw9v6) we discussed how the author label inference can conflict with rules like the Feature Flag rules.

We decided that we should modify the order to have author inference be after Category inference and update these docs:

- https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#group-labels
- https://about.gitlab.com/handbook/engineering/metrics/#stage-and-group-labels",3
90527365,2021-07-19 23:31:34.408,Remove automatic addition of the Category:Templates label,"## Summary

There appears to be automation that sets label `Category:Templates` for any new issue in `https://gitlab.com/gitlab-org/project-templates`. This automation needs to be removed, as `Category:Templates` no longer exists. Any other automation based on the `Category:Templates` label should also be removed.

### Action items

* [x] Link the merge request to www-gitlab-com for the [category.yml](https://gitlab.com/gitlab-com/www-gitlab-com/blob/master/data/categories.yml) change: https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/86626
* [ ] (If applicable) Label migration on existing issues and merge requests: apply the new label to opened & closed issues, and open & merged merge requests.
* [ ] (If applicable) Rename the old label by adding `[DEPRECATED]` at the end of the label name, like ~""CI/CD [DEPRECATED]"".


/cc @gl-quality/eng-prod",1
90525449,2021-07-19 22:05:02.804,Discrepancy between  Issue / issue count between the Quality Heat map and the actual issue list,"#### Problem:

The discrepancy was noticed in the most recent Triage issue - https://gitlab.com/gitlab-org/quality/triage-reports/-/issues/3911 (2021-07-19) 

Discussion - https://gitlab.com/gitlab-org/quality/triage-reports/-/issues/3911#note_630403592

In the [Heat map for triage failures](https://gitlab.com/gitlab-org/quality/triage-reports/-/issues/3911#heatmap-for-triage-failures), clicking on [157 issues under No severity, No priority](https://gitlab.com/groups/gitlab-org/-/issues?state=opened&label_name%5B%5D=Quality&label_name%5B%5D=QA&not%5Blabel_name%5D%5B%5D=priority%3A%3A1&not%5Blabel_name%5D%5B%5D=priority%3A%3A2&not%5Blabel_name%5D%5B%5D=priority%3A%3A3&not%5Blabel_name%5D%5B%5D=priority%3A%3A4&not%5Blabel_name%5D%5B%5D=severity%3A%3A1&not%5Blabel_name%5D%5B%5D=severity%3A%3A2&not%5Blabel_name%5D%5B%5D=severity%3A%3A3&not%5Blabel_name%5D%5B%5D=severity%3A%3A4) section lists out ~ 1666 Open issues which includes triage reports, test sessions, etc. 
![Screen_Shot_2021-07-19_at_6.01.12_PM](/uploads/68882f2c12c2100968cae9a030997cdf/Screen_Shot_2021-07-19_at_6.01.12_PM.png)

#### Expected behaviour:
The issue list should display the same number of Open issues that was shown in the Heat Map.

#### Actual behaviour:
The issue list displayed ~1666 Open issues rather than 157 as shown in the Heat Map.
![Screen_Shot_2021-07-19_at_6.03.18_PM](/uploads/8a936e037b161e4b670da953d87e3ff3/Screen_Shot_2021-07-19_at_6.03.18_PM.png)

#### Potential ROot cause/ Solution:

```
Kyle Wiebers @kwiebers · 1 hour ago
Owner
I think this is due to that table having the .only-gitlab filter applied for the role but the policy is run at the gitlab-org group level so the links in the heatmap go to the group but the counts are for the project.
```",3
88809413,2021-06-16 12:24:50.673,Move monthly EM bugs/performance issues triage into this project,"A monthly job runs in the Plan project (https://gitlab.com/gitlab-org/plan/) that generates triage issues for EMs in Plan and Create which make it easier to include bugs and performance issues in the release post.

* Job definitions: [.gitlab-ci.yml](https://gitlab.com/gitlab-org/plan/-/blob/master/.gitlab-ci.yml)
* Schedule: [`0 14 13 * *`](https://gitlab.com/gitlab-org/plan/-/pipeline_schedules)
* Policies: https://gitlab.com/gitlab-org/plan/-/tree/master/policies
* Example issues: [Plan bugs for 14.0](https://gitlab.com/gitlab-org/plan/-/issues/342), [Create performance issues for 13.12](https://gitlab.com/gitlab-org/create-stage/-/issues/12853)

A stage-level report is generated that makes it easy for EMs to collaborate by providing a checklist with each item to be triaged, along with a markdown list that can be copied into a commit on the corresponding MR. 

This job has a number of downsides that would benefit from its being moved into this project:

- The creation of the issues in pipelines fails because they trigger spam detection, so they have to be manually copied from artifacts into issues;
- Maintenance is within the Plan project and is somewhat opaque to other teams.

The current implementation also has the following drawbacks:

- DRIs are frequently out of date as the SSoT is different from https://gitlab.com/gitlab-org/quality/triage-ops/-/blob/master/group-definition.yml;
- Code is not DRY, each policy is replicated including issue description text. Expanding to other stages requires duplicating policies in full each time;
- Current milestone isn't usable in title or description.

### Proposal

Move this monthly triage into this project, allowlisting it to Plan and Create only to begin with. Then gradually add stages as they show an interest.

The following steps could be used:

- [x] Align the current policies as closely as possible with this project's
   - [x] Remove legacy Ruby script and jobs https://gitlab.com/gitlab-org/plan/-/merge_requests/43
   - [x] Copy the `group-definition.yml` file into the project
   - [x] Refactor policies to use `group-definition.yml` as the SSoT for EMs and Groups
- [x] Make a single policy for each triage issue type (bugs and performance issues) that consumes the `group-definition.yml`
- [x] Move the triage into this project 
- [x] Remove jobs and clean up the Plan project https://gitlab.com/gitlab-org/plan/-/merge_requests/51",2
88549667,2021-06-11 03:03:04.276,Update labels to reflect two merged groups,"Recently ~""group::dynamic analysis"" and ~""group::fuzz testing"" merged, and kept the name ~""group::dynamic analysis"". This organizational change is reflected in this MR, https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/79866

We need to determine how to handle the ~""group::fuzz testing"" label. It is still intermittently being used by customers and team members. It is also has issues associated with it that have been closed. 

Whatever updates need to be made should be reflected in the handbook:
https://about.gitlab.com/handbook/product/product-processes/#creating-new-groups",3
86176415,2021-04-29 03:59:00.935,Category:Experimentation split into four new categories,"## Summary

The existing `Category:Experimentation` can be removed. There are four new categories added, with changes to features.yml and categories.yml

- https://gitlab.com/groups/gitlab-org/-/labels?utf8=%E2%9C%93&subscribed=&search=Category%3AAdoption%20Experiment
- https://gitlab.com/groups/gitlab-org/-/labels?utf8=%E2%9C%93&subscribed=&search=Category%3AActivation%20Experiment
- https://gitlab.com/groups/gitlab-org/-/labels?utf8=%E2%9C%93&subscribed=&search=Category%3AConversion%20Experiment
- https://gitlab.com/groups/gitlab-org/-/labels?utf8=%E2%9C%93&subscribed=&search=Category%3AExpansion%20Experiment

The original `Category:Experimentation` label has not been removed yet, but has been `[DEPRECATED]`

- https://gitlab.com/groups/gitlab-org/-/labels?utf8=%E2%9C%93&subscribed=&search=Category%3AExperimentation

I manually migrated the issues and MRs (there were no Epics with this label).

### Action items

* [x] https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/80937
* [x] (If applicable) Label migration on existing issues and merge requests: apply the new label to opened & closed issues, and open & merged merge requests.
* [x] (If applicable) Rename the old label by adding `[DEPRECATED]` at the end of the label name, like ~""CI/CD [DEPRECATED]"".
* [ ] Disable the inference for all single-category labels under ~""devops::growth"".

#### Background

- issues:
  - https://gitlab.com/gitlab-org/quality/triage-ops/-/issues/656
  - https://gitlab.com/gitlab-com/gl-infra/scalability/-/issues/1008
- related MRs:
  - https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/75987
  - https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/80837
  - https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/80937
  

/cc @gl-quality/eng-prod",1
78420046,2021-02-04 11:06:13.991,Pre-fill some variables for manual dry-run jobs,"Now that we can pre-fill variables in manual jobs (https://docs.gitlab.com/ee/ci/yaml/README.html#prefill-variables-in-manual-pipelines), we should use it in this project.",2
77809583,2021-01-25 16:10:16.351,Treat non-scoped group label as a group label,"Spinning off from https://gitlab.com/gitlab-org/quality/triage-ops/-/issues/631#note_480174901

Instead of treating non-scoped group label a special case, we can just treat them the same. This means whenever there's a non-scoped group label (e.g. ~""group:certify""), we do not need to infer another group label.

This way, when there's ~""group:certify"" we can still infer categories for it, and also make it possible to infer that from the categories. This will also require https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/71331 to specify which exact label we need to use for the group label.

With this we can fully resolve https://gitlab.com/gitlab-org/quality/triage-ops/-/issues/631

For now we're just working around it by silencing it when ~""group:certify"" is added.",2
77526286,2021-01-20 09:13:54.962,"Consider retiring the ""Community contributions merge request report"" issue","Now that:

1. We automatically label community contributions with ~""Community contribution"" (with `triage-serverless`): https://gitlab.com/gitlab-org/quality/triage-serverless/-/blob/987f8db13d1741b2df08d901fb660fcb137afc6e/triage/processor/thank_community_contribution.rb#L34
1. ~""Community contribution"" are triaged so that they have a group label set: https://gitlab.com/gitlab-org/quality/triage-ops/-/blob/master/policies/stages/report/untriaged-community-merge-requests.yml
1. ~""Community contribution"" are surfaced per group in the ""Merge requests requiring attention for <group>"" report: https://gitlab.com/gitlab-org/quality/triage-ops/-/blob/006cb0be0bac79b0435d9132cfb5ff6e3456d53b/policies/template/merge-requests-needing-attention.yml.erb#L79-107

The ""Community contributions merge request report"" issue isn't useful (e.g. https://gitlab.com/gitlab-org/gitlab/-/issues/249036) and should probably be retired. It seems to only include MRs opened by former team members (hence which don't have the ~""Community contribution"" label set).",1
77060765,2021-01-12 03:21:25.399,Label `group::provision` doesn't exist,"# Error Details:
- Sentry event: https://sentry.gitlab.net/gitlab/triage-ops/issues/2441732
- First seen: 
2021-01-12T00:06:27+00:00
- Last seen: 2021-01-12T00:08:10+00:00
 - Events: 3
- Users: 0

```

bundler: failed to load command: gitlab-triage (/usr/local/bundle/bin/gitlab-triage)
/usr/local/bundle/gems/gitlab-triage-1.14.3/lib/gitlab/triage/command_builders/label_command_builder.rb:20:in `block in ensure_labels_exist!': Label `group::provision` doesn't exist! (Gitlab::Triage::Resource::Label::LabelDoesntExistError)
	from /usr/local/bundle/gems/gitlab-triage-1.14.3/lib/gitlab/triage/command_builders/label_command_builder.rb:16:in `each'
	from /usr/local/bundle/gems/gitlab-triage-1.14.3/lib/gitlab/triage/command_builders/label_command_builder.rb:16:in `ensure_labels_exist!'
	from /usr/local/bundle/gems/gitlab-triage-1.14.3/lib/gitlab/triage/command_builders/label_command_builder.rb:8:in `build_command'
	from /usr/local/bundle/gems/gitlab-triage-1.14.3/lib/gitlab/triage/action/comment.rb:44:in `build_comment'
	from /usr/local/bundle/gems/gitlab-triage-1.14.3/lib/gitlab/triage/action/comment.rb:32:in `block in act'
	from /usr/local/lib/ruby/2.6.0/delegate.rb:83:in `each'
```",1
97474929,2020-12-17 15:13:30.122,Allow contributors to ping the gitlab-bot for adding a type label,"Following triage-serverless#52 and triage-serverless#63, we should allow contributors to add a type label to a MR with a syntax like `@gitlab-bot label ~""type::bug""`.

- Only the author of the issuable will be able to request labelling.
- Only a group or type label can be requested for now.
- Rate limiting is set to 60 label commands per author per hour.",2
75756531,2020-12-08 10:12:36.088,Consider fetching users from the roulette project to be able to exclude OOO people from triage reports,,2
74423476,2020-11-16 11:07:34.550,Job Failed #850788746,"Job [#850788746](https://gitlab.com/gitlab-org/quality/triage-ops/-/jobs/850788746) failed for 286fdff9d2e8c5f7e3b01aaa412d4fcbe3c204f7:

```
  1) DevopsLabels DevopsLabels::Context#new_stage_and_group_labels_from_intelligent_inference and #comment_for_intelligent_stage_and_group_labels_inference stage: no, group: yes, category: no, team: no => Stage label based on group returns a comment with a /label quick action
     Failure/Error: expect(resource.comment_for_intelligent_stage_and_group_labels_inference).to eq %(#{explanation}\n#{label_action})
       expected: ""Setting label(s) ~\""devops::enablement\"" ~\""section::enablement\"" based on ~\""group::memory\"".\n/label ~\""devops::enablement\"" ~\""section::enablement\""""
            got: ""Setting label(s) ~\""Category:Memory\"" ~\""devops::enablement\"" ~\""section::enablement\"" based on ~\""group::memory\"".\n/label ~\""Category:Memory\"" ~\""devops::enablement\"" ~\""section::enablement\""""
       (compared using ==)
       Diff:
       @@ -1,3 +1,3 @@
       -Setting label(s) ~""devops::enablement"" ~""section::enablement"" based on ~""group::memory"".
       -/label ~""devops::enablement"" ~""section::enablement""
       +Setting label(s) ~""Category:Memory"" ~""devops::enablement"" ~""section::enablement"" based on ~""group::memory"".
       +/label ~""Category:Memory"" ~""devops::enablement"" ~""section::enablement""
     # ./spec/lib/devops_labels_spec.rb:837:in `block (5 levels) in <top (required)>'
```",1
73985416,2020-11-06 17:58:12.199,Deprecate Category:Alert Management label,"## Summary

**We need to deprecate the ~""Category:Alert Management"" label. This category is getting removed from categories.yml. All issues with this label can be moved to ~""Category:Incident Management""**

This template is for new or renaming Category labels. This review helps to ensure there will be no impact with triage automation and reports.

### Action items

* [x] Link the merge request to www-gitlab-com for the [category.yml](https://gitlab.com/gitlab-com/www-gitlab-com/blob/master/data/categories.yml) change: https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/67449
* [x] (If applicable) Label migration on existing issues and merge requests: apply the new label to opened & closed issues, and open & merged merge requests.
* [ ] (If applicable) Rename the old label by adding `[DEPRECATED]` at the end of the label name, like ~""CI/CD [DEPRECATED]"".


/cc @gl-quality/eng-prod",2
73980025,2020-11-06 01:53:48.716,Ensure issues for current milestone have a tier label,"## Overview
To specify the tier of a new feature, Product will typically apply a label to issues specifying the license tier of the feature (e.g. `GitLab Premium`). However, we periodically may forget to apply this label consistently, which can also lead to [confusion at times](https://gitlab.com/gitlab-com/Product/-/issues/1669).

I've definitely done this - the problem isn't that I applied the incorrect label, but that I neglected to apply it at all in the midst of creating multiple issues. In order to prevent this, we should make sure that issues with the current milestone (e.g. issues that are being worked on) have a tiering label so we're being intentional about which tier a feature belongs in.

## Proposal
Set up a triage policy:
* If an issue is scheduled for the current milestone AND has a `group::` label AND has a ~direction label AND does not have one of ~""GitLab Core"", ~""GitLab Starter"", ~""GitLab Premium"" , or ~""GitLab Ultimate""
* Then leave a comment in the issue and @ mention the relevant PM to add an appropriate tier label.",1
73719353,2020-11-02 08:26:16.368,Rename 'value stream management' group to 'optimize',"Handbook update: https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/66633/diffs

For every case above, the Engineering Productivity team needs to ensure that:

* The label change is factored into the triage mechanism.
* Engineering Dashboards at https://quality-dashboard.gitlap.com/groups/gitlab-org are updated.
* Old labels are migrated correctly on affected issues and merge requests.

### Action items

* [x] Rename ~""group::value stream management"" to ~""group::optimize""
* [x] Rename ~""Category:Value Stream Analytics"" to ~""Category:Value Stream Management""
* [x] Update the group triage report definition to use the new label: https://gitlab.com/gitlab-org/quality/triage-ops/-/merge_requests/674
* [x] Update the group label's description to refer to the new Stage.
* [x] Rename ~""group::analytics"" to ~""group::optimize"" in Periscope: https://gitlab.com/gitlab-data/periscope/-/merge_requests/78",2
73546321,2020-10-28 23:36:13.781,Rename group::acquisition to group::activation,"## Summary

Tracking issue: https://gitlab.com/gitlab-org/growth/team-tasks/-/issues/230

* Renaming an existing Stage or Group

~""group::acquisition"" is becoming ~""group::activation"" due to a change in Growth KPIs:

* https://about.gitlab.com/handbook/product/performance-indicators/#new-group-namespace-create-stage-adoption-rate
* https://about.gitlab.com/direction/growth/#growth-kpi
* https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/66124/diffs#ded7bbea02ff2128954ee2b752d088426082101b_176_174 (not a direct line-for-line match)

For every case above, the Engineering Productivity team needs to ensure that:

* The label change is factored into the triage mechanism.
* Engineering Dashboards at <https://quality-dashboard.gitlap.com/groups/gitlab-org> are updated.
* Old labels are migrated correctly on affected issues and merge requests.

### Action items

* [x] Rename ~""group::acquisition"" to ~""group::activation""
* [x] Update the group triage report definition to use the new label: https://gitlab.com/gitlab-org/quality/triage-ops/-/merge_requests/668
* [x] Update the group label's description to refer to the new Stage.
* [x] Rename ~""group::acquisition"" to ~""group::activation"" in Periscope: https://gitlab.com/gitlab-data/periscope/-/merge_requests/77

/cc @gl-quality/eng-prod @jstava",2
73546233,2020-10-28 23:31:49.085,Rename group::retention to group::adoption,"## Summary

* Renaming an existing Stage or Group

~""group::retention"" is becoming ~""group::adoption"" due to a change in Growth KPIs:

* https://about.gitlab.com/handbook/product/performance-indicators/#new-group-namespace-create-stage-adoption-rate
* https://about.gitlab.com/direction/growth/#growth-kpi
* https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/66124/diffs#ded7bbea02ff2128954ee2b752d088426082101b_176_173 (not a direct line-for-line match)

**Note** this new group label has been created and is being used.

https://gitlab.com/dashboard/issues?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=group%3A%3Aadoption


For every case above, the Engineering Productivity team needs to ensure that:

* The label change is factored into the triage mechanism.
* Engineering Dashboards at <https://quality-dashboard.gitlap.com/groups/gitlab-org> are updated.
* Old labels are migrated correctly on affected issues and merge requests.

### Action items

* [x] Add ~""group::retention"" to all issues/MRs with ~""group::adoption""
  * [x] Remove the ~""group::adoption"" label
  * [x] Rename ~""group::retention"" to ~""group::adoption""
* [x] Update the group triage report definition to use the new label: https://gitlab.com/gitlab-org/quality/triage-ops/-/merge_requests/669
* [x] Update the group label's description to refer to the new Stage.
* [x] Rename ~""group::retention"" to ~""group::adoption"" in Periscope: https://gitlab.com/gitlab-data/periscope/-/merge_requests/79

/cc @gl-quality/eng-prod @mkarampalas",2
73144511,2020-10-22 08:47:42.813,Rename 'analytics' group to 'value stream management',"## Summary

Handbook update: https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/65811

For every case above, the Engineering Productivity team needs to ensure that:

* The label change is factored into the triage mechanism.
* Engineering Dashboards at <https://quality-dashboard.gitlap.com/groups/gitlab-org> are updated.
* Old labels are migrated correctly on affected issues and merge requests.

### Action items

* [x] Rename ~""group::analytics"" to ~""group::value stream management""
* [x] Rename ~""Category:Value Stream Management"" to ~""Category:Value Stream Analytics""
* [x] (If applicable) Label migration on existing issues and merge requests: apply the new label to opened & closed issues, and open & merged merge requests.
  * [x] Merge ~""value stream analytics"" into ~""Category:Value Stream Analytics"": https://gitlab.com/gitlab-org/quality/triage-ops/-/merge_requests/663
  * [ ] Check if label migration will apply labels which have subscribers.
    [Communicate with the subscribers](https://about.gitlab.com/handbook/engineering/quality/triage-operations/#communicate-early-and-broadly-about-expected-automation-impact)
    before applying the label migration.
* [x] Update the group triage report definition to use the new label: https://gitlab.com/gitlab-org/quality/triage-ops/-/merge_requests/662
* [x] Update the group label's description to refer to the new Stage.
* [ ] Rename ~""group::analytics"" to ~""group::value stream management"" in Periscope: https://gitlab.com/gitlab-data/periscope/-/merge_requests/75",3
71640154,2020-09-24 15:55:36.941,Fulfillment Section Rollout,"## Description

Fulfillment is moving to its own section with https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/62755 and I'm unsure of the implications we need to consider

## Tasks

- [x] Create ~""section::fulfillment"", ~""devops::fulfillment"", ~""group::purchase"", ~""group::provision"", ~""Category:Purchase"", and ~""Category:Provision"" `gitlab-org` group labels
- [x] Consider changes to the Embedded Team Dashboard for [UX](https://app.periscopedata.com/app/gitlab/736036/UX-Embedded-Dashboard) and [Quality](https://app.periscopedata.com/app/gitlab/736012/Quality-Embedded-Dashboard)
- [x] Update [`group-definition.yml`](https://gitlab.com/gitlab-org/quality/triage-ops/-/blob/master/group-definition.yml) and generate corresponding policies and jobs => https://gitlab.com/gitlab-org/quality/triage-ops/-/merge_requests/643

### Migration => https://gitlab.com/gitlab-org/quality/triage-ops/-/merge_requests/639

1. [x] Rename \~""group::fulfillment"" to ~""devops::fulfillment""
1. [x] Migrate current ~""devops::fulfillment"" + ~frontend issues/MRs to ~""section::fulfillment"" + ~""group::purchase"" - ~""section::growth"" - ~""devops::growth"" in `gitlab-org/gitlab`: https://gitlab.com/gitlab-org/quality/triage-ops/-/jobs/769726383
   - Expected updates: 78 issues, 100 MRs
1. [x] [**To be confirmed**] Migrate current ~""devops::fulfillment"" issues/MRs to ~""section::fulfillment"" + ~""group::provision"" - ~""section::growth"" - ~""devops::growth"" in `gitlab-org/customers-gitlab-com`: https://gitlab.com/gitlab-org/quality/triage-ops/-/jobs/769726383
   - Expected updates: 1782 issues, 1775 MRs
1. [x] Migrate current ~""devops::fulfillment"" issues/MRs to ~""section::fulfillment"" + ~""group::provision"" - ~""section::growth"" - ~""devops::growth"" in `gitlab-org/license-gitlab-com`: https://gitlab.com/gitlab-org/quality/triage-ops/-/jobs/769726387
   - Expected updates: 110 issues, 76 MRs

### Potential migration

1. [x] Migrate ~""Category:Billing"" [794 issues](https://gitlab.com/groups/gitlab-org/-/issues?label_name%5B%5D=Category%3ABilling), [65 MRs](https://gitlab.com/groups/gitlab-org/-/merge_requests?label_name%5B%5D=Category%3ABilling), and [14 epics](https://gitlab.com/groups/gitlab-org/-/epics?label_name%5B%5D=Category%3ABilling) to ~""Category:Purchase"" / ~""Category:Provision""?",3
70746784,2020-09-04 17:21:25.412,Triage issues are polluting issue search in gitlab-org/gitlab,"### Problem to solve

When searching through issues in [gitlab-org/gitlab](https://gitlab.com/gitlab-org/gitlab), it common for the results to contain many triage issues - sometimes an overwhelming number.  This is not desirable.  Triage issues have little or no value as search results.  Generally users (internal and external to GitLab) would prefer to see the underlying issues that these triage issues refer to, but the triage issues are so keyword-rich they are crowding out those higher-value search results.

### Proposal

Triage report issues should be created in [gitlab-org/quality/triage-reports](https://gitlab.com/gitlab-org/quality/triage-reports), not in [gitlab-org/gitlab](https://gitlab.com/gitlab-org/gitlab).

### Related links

- As recently as %12.4, issues for ""Automatically rescheduled issues"" and ""Automatically rescheduled merge_requests"" ([example](https://gitlab.com/gitlab-org/gitlab/-/issues?scope=all&utf8=%E2%9C%93&state=closed&search=automatically+rescheduled)) were also crowding search results.  Those issues were apparently discontinued or moved elsewhere.

### Screenshots

<details>
<summary>A real search query returning triage issues as 4 of the top 6 results</summary>
![Screen_Shot_2020-09-04_at_12.20.37_PM](/uploads/016d6d981b96dd3b094bfe208081a77f/Screen_Shot_2020-09-04_at_12.20.37_PM.png)
</details>

<details>
<summary>A real search query returning triage issues as 3 of the top 6 results</summary>
![Screen_Shot_2020-09-04_at_11.35.43_AM](/uploads/62e5623ddbf9e290bf6a1faae3852d0a/Screen_Shot_2020-09-04_at_11.35.43_AM.png)
</details>",1
70610007,2020-09-02 04:28:11.420,unlabelled-issues job failed with undefined `items_per_triagers`,"Sentry issue: https://sentry.gitlab.net/gitlab/triage-ops/issues/1802903/?environment=default

This failure seems to stem from https://gitlab.com/gitlab-org/quality/triage-ops/-/merge_requests/592#note_405730964",2
70565887,2020-09-01 09:16:30.274,Consider inferring stage/group labels from category labels for MRs as well as issues,"As suggested in https://gitlab.com/gitlab-org/quality/triage-ops/-/issues/506#note_405199143, given that we now set stage/group labels based on the author in the `pre-hygiene` stage (https://gitlab.com/gitlab-org/quality/triage-ops/-/blob/master/.gitlab/ci/pre-hygiene.yml), that means it should be safe to infer stage/group labels based on category labels in the `hygiene` stage.",2
70270641,2020-08-25 13:34:34.584,Consider labelling community contributions every 30 minutes instead of once a day,"In order to improve the discovery of ~""Community contribution"" MRs and reduce the cycle time for those (https://gitlab.com/gitlab-org/quality/triage-ops/-/issues/271), one very boring step we can do is to apply the ~""Community contribution"" every 30 minutes instead of once a day.",2
69975015,2020-08-18 18:38:40.720,Investigate why some issues did not get section labels,"This was brought up at https://gitlab.com/gitlab-org/quality/triage-ops/-/issues/528#note_398105857

* https://gitlab.com/gitlab-org/gitlab/-/issues/233112
* https://gitlab.com/gitlab-org/gitlab/-/issues/225466
* https://gitlab.com/gitlab-org/gitlab/-/issues/218642",1
68120565,2020-07-20 14:56:13.986,Triage Reports are not created for week of 2020-07-20,"Team triage reports are not being created. I suspect the same issues as https://gitlab.com/gitlab-com/gl-security/abuse-team/abuse/-/issues/252

This issue is to investigate the root cause and get triage-reports created. 

## Actions

- [x] Announce issues in #product, #development, #eng-managers - https://gitlab.slack.com/archives/C0NFPSFA8/p1595258572124700
- [x] Manually create team triage reports
  - [x] `gitlab-org/gitlab`: https://gitlab.com/gitlab-org/quality/triage-ops/-/pipelines/168898689 and https://gitlab.com/gitlab-org/quality/triage-ops/-/pipelines/168900258
  - [x] `gitlab-org/gitaly`: https://gitlab.com/gitlab-org/quality/triage-ops/-/pipelines/168899495
  - [x] `gitlab-org/gitlab-runner`: https://gitlab.com/gitlab-org/quality/triage-ops/-/pipelines/168899804",2
51543407,2020-06-29 15:51:09.644,Remove the rules for removing `group::not_owned`,"The following discussions from !537 should be addressed:

- [ ] @godfat started a [discussion](https://gitlab.com/gitlab-org/quality/triage-ops/-/merge_requests/537#note_366305619): 

    > Can remove this after one-off is done.
    > 
    > Or maybe we can keep it for a day, and remove tomorrow after it ran in schedule?

- [ ] @godfat started a [discussion](https://gitlab.com/gitlab-org/quality/triage-ops/-/merge_requests/537#note_366305633): 

    > Can remove this after one-off is done.
    > 
    > Or maybe we can keep it for a day, and remove tomorrow after it ran in schedule?",1
51535650,2020-06-29 15:34:51.604,Add an explanation to handbook for why sometimes we don't put direct links,"The following discussion from !539 should be addressed:

- [ ] @kwiebers started a [discussion](https://gitlab.com/gitlab-org/quality/triage-ops/-/merge_requests/539#note_367659257):  (+6 comments)

So we can use this link for longer explanation.",1
43837480,2020-06-15 14:36:47.596,`gitlab-triage` release process to include bumping version used by `triage-ops`?,"`triage-ops` now uses the `gitlab-triage` version from the Gemfile:
- https://gitlab.com/gitlab-org/quality/triage-ops/-/merge_requests/521/diffs

So it's possible that the automated runs will not pull and install the latest version of `gitlab-triage` if we exceed the rule.

Should we make it part of the `gitlab-triage` release process to bump the version here in `triage-ops`?",1
41390147,2020-06-10 18:55:35.393,Make the idle merge requests report easier to navigate,"Following up from https://gitlab.com/gitlab-org/quality/triage-ops/-/issues/486#note_358196219

- Update the description to explain why we don't have direct links
- Use backticks for full URL
- ~~Add a section in the bottom and let people to copy and paste into another comment box, hit preview, here you go, links for you~~

```
- gitlab-org/gitlab!28949
- gitlab-org/gitlab!28949
- gitlab-org/gitlab!28949
```",1
35468015,2020-06-05 08:23:50.768,Add more context to Sentry events when scheduled pipeline fails,Identify and add additional context to Sentry to help in debugging failure in scheduled pipelines.,1
34529294,2020-05-13 22:52:03.134,Reports for Community merge requests requiring attention for Secure analyzers,"Within the Secure Sub-Department we get many `~""Community contribution""` MRs. We would like a report similar to what was set up for GitLab EE (example at https://gitlab.com/gitlab-org/gitlab-foss/-/issues/58131)

It looks like a related initiative was created within https://gitlab.com/gitlab-org/quality/triage-ops/-/issues/271 that may have extended to more projects. A challenge regarding reviewer roulette was mentioned. 

## Iteration 1

- [ ] Create a report for all of `security-products` groupo MRs + ~""Community contribution"" that is similar to the community-merge-requests policy and assigned to @nmccorrison @twoodham @gonzoyumo @sethgitlab: https://gitlab.com/gitlab-org/quality/triage-ops/-/issues/477#note_343589797

## Dynamic Application Security Testing (DAST)
1. https://gitlab.com/gitlab-org/security-products/dast (to be moved into `https://gitlab.com/gitlab-org/security-products/analyzers/dast` - per this [comment](https://gitlab.com/gitlab-org/quality/triage-ops/-/issues/477#note_350220388))

## Static Application Security Testing (SAST)
1. https://gitlab.com/gitlab-org/security-products/analyzers/tslint
1. https://gitlab.com/gitlab-org/security-products/analyzers/secrets
1. https://gitlab.com/gitlab-org/security-products/analyzers/spotbugs
1. https://gitlab.com/gitlab-org/security-products/analyzers/sobelow
1. https://gitlab.com/gitlab-org/security-products/analyzers/pmd-apex
1. https://gitlab.com/gitlab-org/security-products/analyzers/gosec
1. https://gitlab.com/gitlab-org/security-products/analyzers/kubesec
1. https://gitlab.com/gitlab-org/security-products/analyzers/nodejs-scan
1. https://gitlab.com/gitlab-org/security-products/analyzers/security-code-scan
1. https://gitlab.com/gitlab-org/security-products/analyzers/phpcs-security-audit
1. https://gitlab.com/gitlab-org/security-products/analyzers/brakeman
1. https://gitlab.com/gitlab-org/security-products/analyzers/bandit
1. https://gitlab.com/gitlab-org/security-products/analyzers/flawfinder

## Dependency Scanning
1. https://gitlab.com/gitlab-org/security-products/analyzers/gemnasium
1. https://gitlab.com/gitlab-org/security-products/analyzers/gemnasium-maven
1. https://gitlab.com/gitlab-org/security-products/analyzers/gemnasium-python
1. https://gitlab.com/gitlab-org/security-products/analyzers/gemnasium-maven-plugin
1. https://gitlab.com/gitlab-org/security-products/analyzers/bundler-audit
1. https://gitlab.com/gitlab-org/security-products/analyzers/retire.js

## Container Scanning
1. https://gitlab.com/gitlab-org/security-products/analyzers/klar

## Shared
1. https://gitlab.com/gitlab-org/security-products/analyzers/common",2
34517547,2020-05-13 15:55:25.690,Obsolete group: anomaly detection,"## Summary

* ~""group::anomaly detection"" should no longer be used.

### Action items

* [x] (If applicable) Dashboard creation: create or update the stage/group in <https://gitlab.com/gitlab-org/gitlab-insights/blob/master/lib/gitlab_insights.rb>.
* [x] (If applicable) Label migration on existing issues and merge requests: apply the new label to opened & closed issues, and open & merged merge requests.
  * [ ] Check if label migration will apply labels which have subscribers.
    [Communicate with the subscribers](https://about.gitlab.com/handbook/engineering/quality/triage-operations/#communicate-early-and-broadly-about-expected-automation-impact)
    before applying the label migration.
* [ ] (If applicable) Archive the old label with renaming and adding ""DEPRECATED"" at the end of the label name.
* [x] (If applicable) Delete the old dashboard views using the deprecated labels.
* [ ] (If applicable) Update the group triage report definition to use the new label.
* [ ] (If applicable) Update the group label's description to refer to the new Stage.

/cc @gl-quality/eng-prod",2
34517440,2020-05-13 15:52:07.795,Obsolete group: runtime application security,"## Summary

* ~""group::runtime application security"" should no longer be used.

### Action items

* [x] (If applicable) Dashboard creation: create or update the stage/group in <https://gitlab.com/gitlab-org/gitlab-insights/blob/master/lib/gitlab_insights.rb>: https://gitlab.com/gitlab-org/gitlab-insights/-/merge_requests/195
* [x] (If applicable) Label migration on existing issues and merge requests: apply the new label to opened & closed issues, and open & merged merge requests.
  * [ ] Check if label migration will apply labels which have subscribers.
    [Communicate with the subscribers](https://about.gitlab.com/handbook/engineering/quality/triage-operations/#communicate-early-and-broadly-about-expected-automation-impact)
    before applying the label migration.
* [ ] (If applicable) Archive the old label with renaming and adding ""DEPRECATED"" at the end of the label name.
* [x] (If applicable) Delete the old dashboard views using the deprecated labels.
* [x] (If applicable) Update the group triage report definition to use the new label.
* [x] (If applicable) Update the group label's description to refer to the new Stage.

/cc @gl-quality/eng-prod",2
34517302,2020-05-13 15:49:17.864,Obsolete group: attack surface,"## Summary

* ~""group::attack surface"" should no longer be used.

### Action items

* [x] (If applicable) Dashboard creation: create or update the stage/group in <https://gitlab.com/gitlab-org/gitlab-insights/blob/master/lib/gitlab_insights.rb>: https://gitlab.com/gitlab-org/gitlab-insights/-/merge_requests/195
* [x] (If applicable) Label migration on existing issues and merge requests: apply the new label to opened & closed issues, and open & merged merge requests.
  * [ ] Check if label migration will apply labels which have subscribers.
    [Communicate with the subscribers](https://about.gitlab.com/handbook/engineering/quality/triage-operations/#communicate-early-and-broadly-about-expected-automation-impact)
    before applying the label migration.
* [ ] (If applicable) Archive the old label with renaming and adding ""DEPRECATED"" at the end of the label name.
* [x] (If applicable) Delete the old dashboard views using the deprecated labels.
* [x] (If applicable) Update the group triage report definition to use the new label.
* [x] (If applicable) Update the group label's description to refer to the new Stage.

/cc @gl-quality/eng-prod",2
