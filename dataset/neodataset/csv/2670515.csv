issuekey,created,title,description,storypoints
109014572,2022-05-24 06:37:36.833,Namespace dropdown doesn't default to the namespace in the URL params,"Namespace dropdown doesn't default to the namespace in the URL params since its looking for namespace id on a non-existent order (`current_namespace_id: @order&.gl_namespace_id` in `_new_gitlab_com_subscription.html.haml` but on new subscription purchase flow, the order is yet to be created).

Since we're in related area, it's also worth removing non-applicable reference to subscription when creating a new SaaS subscription.

![Screen_Shot_2022-05-24_at_6.40.35_PM](/uploads/5e37c52bb52f413fabced01e10453b13/Screen_Shot_2022-05-24_at_6.40.35_PM.png)

Created from [this note](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3242#note_653915057)

> In `app/views/subscriptions/_new_gitlab_com_subscription.html.haml`:

> * If we are creating a new subscription, there should be no `subscription_id` params, thus no `@subscription` and no `@order`.
> * `current_namespace_id` is required to set the default selected namespace, but should it be from `params[:gl_namespace_id]` instead of from `@order&.gl_namespace_id`?

> ```
> #js-new-gitlab-com-subscription{ data: { subscriptions_path: subscriptions_path,
>   plan_id: @plan.id,
>   plan_name: @plan.name,
>   customer: CustomerPresenter.new(current_customer).present.to_json,
>   subscription: @subscription ? SubscriptionPresenter.new(@subscription, current_customer).present : nil,     <---
>   namespaces: gitlab_namespaces_for_select.to_json,
>   namespaces_with_paid_plan: gitlab_namespaces_ineligible_for_purchase_ids,
>   current_namespace_id: @order&.gl_namespace_id,                                                              <---
>   seat_price: @plan.price,
>   payment_methods: @payment_methods.to_json } }
> ```

 <br/>

`init_new_gitlab_subscription.js` and `new_gitlab_subscription_form.vue` might need some cleanup with the above changes to remove `subscription` usage.

A couple of things to make sure with the changes:

1. The default selected namespace when visiting the new SaaS subscription page should be the one in the params (this is broken currently since its looking for namespace on non-existent order for yet to be purchased subscription)
2. We're still able to preview transaction when selecting different namespaces with correct prices and purchasing new subscription still works as before",2
108983087,2022-05-23 14:33:45.721,CustomersDot <> GitLab.com Access Token Short Expiry,"## Summary

Unsure if this is a ""bug"" per se, and [from slack discussions](https://gitlab.slack.com/archives/CMJ8JR0RH/p1653039025967549), nothing on cdot code has changed recently.  But multiple support engineers have noticed this as seemingly different from how it worked until now.

Recently (within the last week as of 2022-05-23), Support team has noticed customer's cDot accounts no longer being linked to their GitLab.com users.  From admin point of view, ""GitLab Groups"" page shows `Customer has not linked their GitLab.com account.` even when the Customer record has a `uid` and `gitlab` provider.  This creates an extra challenge for us on the support side due to reduced visibility on customer's namespaces.

From a customer POV, My Account > Your GitLab.com account shows `No account linked.` _unless_ the view is loaded as a customer logging into cDot using their GitLab account.

In the history tab, very recent entries exist nullifying the access token.  For example, [my account on customers.staging](https://customers.staging.gitlab.com/admin/customer/59644): 

> 2022-05-23 13:35 | khughes+test63@gitlab.com | update [updated_at = 2022-05-23 13:35:35 UTC, access_token = ] 

The Provider is (and has been) `gitlab` and UID is `1688436` ([my staging account](https://staging.gitlab.com/khughes))

The question here is: what changed and is it worth investigating?

It seems like nothing on cDot side has changed recently, so perhaps GitLab.com side?

### Support impact

There are a few services on cDot side which do rely on user-level access token when available, for example [Gitlab::HostedPlans::CreateTrialService](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/b3f20f2538d4da3bd016e19f86938e118f420f76/app/services/gitlab/hosted_plans/create_trial_service.rb#L115-121).  Support tooling [relies on that service](https://gitlab.com/gitlab-com/support/toolbox/console-training-wheels/-/blob/master/lib/support_team.rb#L143) for ""extending"" expired subscriptions; it doesn't currently supply an admin token so it fails to work otherwise.  Anecdotally speaking, this has worked fine up until very recently where we're now seeing accounts that had persisted access_tokens being invalidated.

### Customer impact

For the customer purchasing perspective, it contributes to a bit of a confusing process when managing an existing subscription.  Again, using my staging account (which was previously linked), trying to add minutes into an existing sub:

![screenshot-2022-05-23-10_29](/uploads/0961cc676bc8241044eaea608396cb72/screenshot-2022-05-23-10_29.png)

Sends me to the purchase URL (`https://customers.staging.gitlab.com/subscriptions/new?plan_id=2c92a0086a07f4a8016a2c0a1f7b4b4c&subscription_id=A-S00082613&transaction=ci_minutes`) now requiring an extra step to re-link: `https://customers.staging.gitlab.com/auth/gitlab?redirect_to=https%3A%2F%2Fcustomers.staging.gitlab.com%2Fsubscriptions%2Fnew%3Fplan_id%3D2c92a0086a07f4a8016a2c0a1f7b4b4c%26subscription_id%3DA-S00082613%26transaction%3Dci_minutes`

which resulted in a 404

![screenshot-2022-05-23-10_30](/uploads/2146394e4d2f48c58dfdaf04f790774c/screenshot-2022-05-23-10_30.png)

Refreshed the page landed me back at the purchase workflow

![screenshot-2022-05-23-10_31](/uploads/7c66b37a566044ccc83d97a40ed32e59/screenshot-2022-05-23-10_31.png)

## Workarounds

* Have the customer re-link their account, possibly every few hours?
* Note for console users needing to workaround it: pass `is_admin=true` to [BaseTrialService](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/cc75943924e1874a37640dca3929d2ca023d29c5/app/services/gitlab/base_trial_service.rb#L11)

Example:  https://gitlab.zendesk.com/agent/tickets/303004
<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",3
108813978,2022-05-19 14:16:02.959,[BE] Emoji in Customer name causes errors interacting with Zuora,"### Problem

Customers are able to set emoji in their names in CustomersDot accounts. When we try to make a subscription purchase, we take the `bill_to_contact` details from the Customer record in the CustomersDot app. This results [in the following error from Zuora:](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/3267234/events/76539035/)

```ruby
Body: [{""Success""=>false, ""Errors""=>[{""Code""=>""UNKNOWN_ERROR"", ""Message""=>""Operation failed due to an unknown error.""}]}]
```

<img src=""/uploads/97e77d6dcc65d008dc0e8d5144c528c4/CleanShot_2022-05-09_at_15.05.09.png"" width='500px' />

### Steps to reproduce

1. Create a new account on Gitlab
3. Navigate to CustomersDot and select `sign in with Gitlab`
4. Fill out the details to register for a customers dot account, and add an emoji to the first name
5. Create a group on GitLab and navigate to billing
6. Select a plan, fill out the details and submit the purchase
7. There is an `UNKNOWN_ERROR` message

<img src=""/uploads/5901d4353e4af31417b9a499a1a3d103/CleanShot_2022-05-09_at_14.54.59.png"" width='500px' />

#### Workaround

Once the emoji is removed from the name on the customers dot account, the purchase completes successfully.

### Proposal

1. Don't allow customers to create or edit their account to have emoji in their: `first_name, last_name, company`",3
108774546,2022-05-18 22:49:29.348,Order actions: update a product in a subscription (amendment),"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Similar to [other amendment actions](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4323#problem), we need a service to that creates an `orderActions` object when a [product in a subscription is updated](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AC_Orders_Tutorials/C_Update_a_Product_in_a_Subscription?_gl=1%2A1udimk6%2A_ga%2AMzk3MTU1OTE4LjE2NDgwNjkzODE.%2A_ga_MY8CQ650DH%2AMTY1MjkxMjQ0OC41Ny4xLjE2NTI5MTM3NTAuMA..&_ga=2.124943242.1673435247.1652906974-397155918.1648069381).

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

n the module `app/services/order_actions`, create a service class `UpdateProduct`.

The service implements the following:

* inherits `OrderActions::BaseService`
* defines `#execute` method that accepts `params`

The `#execute` method constructs `orderAction` object to add a product to a subscription, with the below parameters:
| Parameter | Type | Description |
|-----------|------|-------------|
| `type` | String | Constant value: `UpdateProduct ` |
| `triggerDates` | Array of Objects | Each object has the keys: `name` and `triggerDate`. Defines `ContractEffective`, `ServiceActivation` and `CustomerAcceptance` dates |
|`updateProduct `|Object|Defines `ratePlanId ` and `chargeOverrides` (see example payload below)|

<details>
<summary> Example request </summary>

```
{
  ""type"": ""UpdateProduct"",
  ""triggerDates"": [
    {
      ""name"": ""ContractEffective"",
      ""triggerDate"": $Today
    },
    {
      ""name"": ""ServiceActivation"",
      ""triggerDate"": $Today
    },
    {
      ""name"": ""CustomerAcceptance"",
      ""triggerDate"": $Today
    }
  ],
  ""updateProduct"": {
    ""ratePlanId"": $RPId,
    ""chargeUpdates"": [
      {
        ""chargeNumber"": $ChargeNum,
        ""pricing"": {
          ""recurringVolume"": {
            ""quantity"": 50
          }
        }
      }
    ]
  }
}

```

</details>

### Result

### Next steps (if any)

### How will we measure success?",2
108774317,2022-05-18 22:37:24.130,Order actions: renew subscription (amendment),"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

CDot portal currently supports ability to renew a subscription using the [amendment api](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/68a37d0799e631fd9430ad07cebd620fdd97a271/app/services/amend_subscription_service.rb#L156).

In the Orders API renewing a subscription can be done with `orderAction` of type `RenewSubscription`.

Similar to [other amendment actions](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4323#problem), we need a service to that creates an `orderActions` object when a [subscription is being renewed](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AC_Orders_Tutorials/C_Renew_a_Subscription?_ga=2.158945338.1673435247.1652906974-397155918.1648069381&_gl=1%2A1yg5lba%2A_ga%2AMzk3MTU1OTE4LjE2NDgwNjkzODE.%2A_ga_MY8CQ650DH%2AMTY1MjkwNjk3Mi41Ni4xLjE2NTI5MDgyMDUuMA..).

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Order related services can be summarized in the following way:

![Orders_architecture](/uploads/1283f86682dff3e6aa5aff82959502de/Orders_architecture.jpg)

The renewal order action can be supported with the below steps:

- [ ] Create a `RenewSubscription` order action service in `app/services/zuora/orders/actions`. The service inherits `Zuora::Orders::Actions::BaseService`
- [ ] Implement `#execute` method. The `#execute` method returns the hash required by `RenewSubscription` orderAction (`type` and `triggerDates`)
- [ ] Since `CreateSubscription` service also implements `triggerDates` (see [source](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/68a37d0799e631fd9430ad07cebd620fdd97a271/app/services/zuora/orders/actions/create_subscription.rb#L42)), we can create an entity for `TriggerDates` in `app/services/zuora/orders/entities`. Use this entity in `RenewSubscription` and refactor `CreateSubscription` to use it. Example of an entity: [`NewAccount`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/app/services/zuora/orders/entities/new_account.rb).


### References

`RenewSubscription` orderAction attributes:

| Parameter | Type | Description |
|-----------|------|-------------|
| `type` | String | Constant value: `RenewSubscription` |
| `triggerDates` | Array of Objects | Each object has the keys: `name` and `triggerDate`. Defines `ContractEffective`, `ServiceActivation` and `CustomerAcceptance` dates <br/>`ContractEffective`: $Subscription.term_end_date <br/>`ServiceActivation`: current_date <br/>`CustomerAcceptance`: Not present in existing payload. We can probably use current date.   <br/>Refer example below for object construction. |

<details>
<summary> Example return object </summary>

```
{
  ""type"": ""RenewSubscription"",
  ""triggerDates"": [
    {
      ""name"": ""ContractEffective"",
      ""triggerDate"": ""$Subscription.term_end_date""
    },
    {
      ""name"": ""ServiceActivation"",
      ""triggerDate"": ""$Today""
    },
    {
       ""name"": ""CustomerAcceptance"",
       ""triggerDate"": ""$Today""
    }
  ]
}
```

</details>

### Result

The service constructs the `orderActions` object to renews a subscription.

### Next steps (if any)

### How will we measure success?",2
108774061,2022-05-18 22:22:36.431,Order actions: service to remove a product from a subscription (amendment),"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Similar to [other amendment actions](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4323#problem), we need a service to that creates an `orderActions` object when a [product is being removed from a subscription](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AC_Orders_Tutorials/D_Remove_a_Product_from_a_Subscription?_ga=2.132862094.1673435247.1652906974-397155918.1648069381&_gl=1%2Azr4393%2A_ga%2AMzk3MTU1OTE4LjE2NDgwNjkzODE.%2A_ga_MY8CQ650DH%2AMTY1MjkxMjQ0OC41Ny4wLjE2NTI5MTI0NDguMA..).

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

In the module `app/services/order_actions`, create a service class `RemovedProduct`.

The service implements the following:

* inherits `OrderActions::BaseService`
* defines `#execute` method that accepts `params`

The `#execute` method constructs `orderAction` object to add a product to a subscription, with the below parameters:

| Parameter | Type | Description |
|-----------|------|-------------|
| `type` | String | Constant value: `RemoveProduct ` |
| `triggerDates` | Array of Objects | Each object has the keys: `name` and `triggerDate`. Defines `ContractEffective`, `ServiceActivation` and `CustomerAcceptance` dates |
| `removeProduct ` | Object | Defines `ratePlanId`, the rate plan ID of the product being removed |

<details>

<summary> Example return object </summary>
{
  ""orderDate"": ""$Today"",
  ""existingAccountNumber"": ""$AccountNum"",
  ""subscriptions"": [
    {
      ""subscriptionNumber"": ""$SubscriptionNum"",
      ""orderActions"": [
        {
          ""type"": ""RemoveProduct"",
          ""triggerDates"": [
            {
              ""name"": ""ContractEffective"",
              ""triggerDate"": ""$Today""
            },
            {
              ""name"": ""ServiceActivation"",
              ""triggerDate"": ""$Today""
            },
            {
              ""name"": ""CustomerAcceptance"",
              ""triggerDate"": ""$Today""
            }
          ],
          ""removeProduct"": {
            ""ratePlanId"": ""$RPId""
          }
        }
      ]
    }
  ],
  ""processingOptions"": {
    ""runBilling"": false,
    ""collectPayment"": false
  }
}
</details>

### Result

The service constructs the `orderActions` object to remove a product from a subscription.

### Next steps (if any)

### How will we measure success?",2
108773221,2022-05-18 21:38:03.463,Order actions: service to add a product to a subscription (amendment),"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

CDot uses the Zuora's amend subscription API for at least the following use cases:

  - [remove a product](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/c5b1db13d4af8db292118c2227c696c1ee8f61c2/app/services/amendment_base_service.rb#L39) ([downgrade main product](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/app/services/amend_subscription_service.rb#L30))
  - [add a new product](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/c5b1db13d4af8db292118c2227c696c1ee8f61c2/app/services/amendment_base_service.rb#L45) ([upgrade main product](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/app/services/amend_subscription_service.rb#L30))
  - [renew subscription](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/c5b1db13d4af8db292118c2227c696c1ee8f61c2/app/services/amend_subscription_service.rb#L139)
  - [apply true ups](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/c5b1db13d4af8db292118c2227c696c1ee8f61c2/app/services/amend_subscription_service.rb#L32) (add a new product)
  - [update product](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/c5b1db13d4af8db292118c2227c696c1ee8f61c2/app/services/amend_subscription_service.rb#L33)

Although they are all amendment actions, in the Orders API each of it are **different** Order actions and their payload varies.

In this issue, we will focus on creating a service to [Add a Product to a subscription](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AC_Orders_Tutorials/A_Add_a_Product_to_a_Subscription?_ga=2.166350910.1673435247.1652906974-397155918.1648069381&_gl=1%2A5yur29%2A_ga%2AMzk3MTU1OTE4LjE2NDgwNjkzODE.%2A_ga_MY8CQ650DH%2AMTY1MjkwNjk3Mi41Ni4xLjE2NTI5MDgyMjMuMA..).

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

In the module `app/services/zuora/orders/actions`, create a service class `AddProduct`.

The service implements the following:
  * inherits `Zuora::Orders::Actions::BaseService`
  * defines `.execute` method that accepts `params` and instantiates an object of the class and invoked `#execute`
  * defines `#execute` method

The `#execute` method constructs `orderAction` object to add a product to a subscription, with the below parameters:

|Parameter|Type|Description|
|---|---|---|
|`type`|String|Constant value: `AddProduct`|
|`triggerDates`|Array of Objects| Each object has the keys: `name` and `triggerDate`. </br> Defines `ContractEffective`, `ServiceActivation` and `CustomerAcceptance` dates|
|`addProduct`|Object|Defines `productRatePlanId` and `chargeOverrides` (see example payload below)|

The params are set in accordance to the current logic for adding a new product in `AmendSubscriptionService`

<details>
<summary> Example return object: </summary>

```json
{
  ""orderDate"": $Today,
  ""existingAccountNumber"": $AccountNum,
  ""subscriptions"": [
    {
      ""subscriptionNumber"": $SubscriptionNum,
      ""orderActions"": [
        {
          ""type"": ""AddProduct"",
          ""triggerDates"": [
            {
              ""name"": ""ContractEffective"",
              ""triggerDate"": $Today
            },
            {
              ""name"": ""ServiceActivation"",
              ""triggerDate"": $Today
            },
            {
              ""name"": ""CustomerAcceptance"",
              ""triggerDate"": $Today
            }
          ],
          ""addProduct"": {
            ""productRatePlanId"": $ProductRPId,
            ""chargeOverrides"": [
              {
                ""productRatePlanChargeId"": $ProductRPChargeId,
                ""pricing"": {
                  ""recurringFlatFee"": {
                    ""listPrice"": 10
                  }
                }
              }
            ]
          }
        }
      ]
    }
  ],
  ""processingOptions"": {
    ""runBilling"": false,
    ""collectPayment"": false
  }
}
```

</details>


### Result

The service constructs the `orderActions` object to add a new product to a subscription.

### Next steps (if any)

The service is used in `OrderManagerService` to add a new product to a subscription.

### How will we measure success?",2
108735850,2022-05-18 10:19:08.979,Allow validating older licenses in Admin,"### Problem

During a recent incident, a [license](https://customers.gitlab.com/admin/license/20343) that was created in 2017 was validated in `/admin/license/validate_license`. The validations for a license have changed over time and now require fields like expires at, zuora subscription id or zuora subscription name to be present. 

Since this wasn't the case when the mentioned license was created, the license can not be decrypted in `/admin/license/validate_license`.

### Proposal

Allow using `/admin/license/validate_license` with older licenses that aren't decrytable as of today because of validation changes. At the moment there are two display, a green alert for a successful validation and a red one for any issues with validating the license. Add a yellow alert for licenses that aren't considered valid anymore to differentiate between an actual valid license and a license that was once considered valid.

### Result

Ability to validate older license in `/admin/license/validate_license`.",1
108703553,2022-05-17 20:28:36.654,Use order manager service in subscription controller,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Once we have the elements to create an order, the next step is we use it to create a new subscription. This change should be feature flagged.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

When feature flag is turned on, use  [`OrderManagerService`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4314) when creating a new subscription via the [`SubscriptionsController`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/66c2b5da4aa5a9d338c3bd2bbe1cee96933772b9/app/controllers/subscriptions_controller.rb#L80) workflow.

Marketplace changes to be handled as part of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4526

:warning: Ensure the Subscription via Orders API workflow is enabled only when:

- Feature flag is enabled
- Not a marketplace request
- Not a preview

### Result

Orders API is used to create subscription.

### Next steps (if any)

### How will we measure success?",2
108700526,2022-05-17 19:02:55.175,Create job for Zuora Order client,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

In CDot, Zuora actions are usually invoked as a [background job](https://gitlab.com/gitlab-org/customers-gitlab-com/-/tree/main/app/jobs/zuora/actions), as these actions make API calls to Zuora.

Once we have [Zuora::Order action](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4286) created, we can similarly add a background job that invokes the order action. 

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Create `Zuora::Actions::Order` job in `app/jobs/zuora/actions`. 

The `#perform` method has supports the following:

  - it accepts `params` argument. The argument supports keys that `IronBank::Actions::Order` accepts: `orderDate`, `existingAccountNumber`, `subscriptions` and `processingOptions`.
  - It invokes IronBank Order action `IronBank::Actions::Order.call(params)`
  - returns the result returned by IronBank Order action
  - handles appropriate exceptions

### Result

The `Zuora::Actions::Order` job is used to create orders in Zuora.

### Next steps (if any)



### How will we measure success?",1
108642385,2022-05-16 21:40:06.745,Order Manager Service,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

The service module `Zuora::Orders` holds service class that generates `orderAction` object for each type ([create a subscription](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4310), renewing a subscription, and so on).

The purpose of Order Manager Service is to construct the payload for [Create Orders API](https://www.zuora.com/developer/api-reference/?_ga=2.234436310.991883880.1652218606-397155918.1648069381&_gl=1*9e5pc3*_ga*Mzk3MTU1OTE4LjE2NDgwNjkzODE.*_ga_MY8CQ650DH*MTY1MjI5OTkwOS41MC4xLjE2NTIzMDAyNzYuMA..#operation/POST_Order).

For the `orderActions` object, it can invoke the individual order action services.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Create `OrderManagerService` service under `Zuora::Orders` module in `app/services`.

Define `#execute` method constructs the payload object with params to create a new subscription (in the scope of this issue):

| Parameter | Type | Description |
|-----------|------|-------------|
| `orderDate` | String | Current date |
| `existingAccountNumber` | String | Account number |
| `subscriptions` | Array of objects | In the scope of this issue, invoke the [service to create a subscription](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4310). It will return an `orderActions` object |
| `processingOptions` | Object | Define `run_billing`, `collect_payment`. Refer example below. |

<details>
<summary> Example return object (click to expand) </summary>

```json
          {
            order_date: ""2022-05-23"",
            existing_account_number: ""A00477295"",
            subscriptions: [
              {
                ""order_actions"": [
                  {
                    ""type"": ""CreateSubscription"",
                    ""trigger_dates"": [
                      {
                        ""name"": ""ContractEffective"",
                        ""trigger_date"": ""2022-05-23""
                      },
                      {
                        ""name"": ""ServiceActivation"",
                        ""trigger_date"": ""2022-05-23""
                      },
                      {
                        ""name"": ""CustomerAcceptance"",
                        ""trigger_date"": ""2022-05-23""
                      }
                    ],
                    ""create_subscription"": {
                      ""terms"": {
                        ""initial_term"": {
                          ""start_date"": ""2022-05-23"",
                          ""period"": 12,
                          ""period_type"": ""Month"",
                          ""term_type"": ""TERMED""
                        },
                        ""renewal_setting"": ""RENEW_WITH_SPECIFIC_TERM"",
                        ""renewal_terms"": [
                          {
                            ""period"": 12,
                            ""period_type"": ""Month""
                          }
                        ]
                      },
                      ""subscribe_to_rate_plans"": [
                        {
                          ""product_rate_plan_id"": ""2c92c0f97700a4f70177060963d923c8""
                        }
                      ]
                    }
                  }
                ]
              }
            ],
            processing_options: {
              ""run_billing"": false,
              ""collect_payment"": false
            }
          }
```

</details>

### Result

The service creates the entire payload required to create a subscription using Orders API.

### Next steps (if any)

### How will we measure success?",2
108639963,2022-05-16 20:19:47.492,Orders: Base service,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

The [Create Order's API](https://www.zuora.com/developer/api-reference/?_ga=2.234436310.991883880.1652218606-397155918.1648069381&_gl=1*9e5pc3*_ga*Mzk3MTU1OTE4LjE2NDgwNjkzODE.*_ga_MY8CQ650DH*MTY1MjI5OTkwOS41MC4xLjE2NTIzMDAyNzYuMA..#operation/POST_Order) supports multiple **Order operations** such as Creating a Subscription, Adding a product to a subscription, renewing a subscription and so on.

Each operation can be a separate service under module `Zuora::Orders`. The purpose of the base class is to contain shared logic of the operations. 

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Create a module `Zuora::Orders` in `app/services`. The module will be used to hold all Order operations.

Define `BaseService` in the `Zuora::Orders` module. `Zuora::Orders::BaseService` service inherits [`BaseService`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/app/services/base_service.rb).

`Zuora::Orders::BaseService` will not have any implementation code at this time however we can add logic as and when we introduce other order operations (e.g. https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4310).",1
108637489,2022-05-16 19:23:20.422,Order action: service to create a subscription,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

The [Create Order's API](https://www.zuora.com/developer/api-reference/?_ga=2.234436310.991883880.1652218606-397155918.1648069381&_gl=1*9e5pc3*_ga*Mzk3MTU1OTE4LjE2NDgwNjkzODE.*_ga_MY8CQ650DH*MTY1MjI5OTkwOS41MC4xLjE2NTIzMDAyNzYuMA..#operation/POST_Order) supports multiple **Order actions** such as [Creating a Subscription](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AC_Orders_Tutorials/AA_Create_a_Subscription?_gl=1%2A17by380%2A_ga%2AMzk3MTU1OTE4LjE2NDgwNjkzODE.%2A_ga_MY8CQ650DH%2AMTY1MjkxMjQ0OC41Ny4xLjE2NTI5MTMyMDcuMA..&_ga=2.174692130.1673435247.1652906974-397155918.1648069381), Adding a product to a subscription, renewing a subscription and so on. For the sake of this issue, we will focus on the order action to `Create a subscription`.

The Create Order's API has a `subscriptions` array that is responsible for determining all the actions that need to be performed in the Order.

The `subscriptions` array is a collection of `orderActions` objects. An `orderActions` object is an array of actions.

We need a dedicated service for each type of action that will be responsible for constructing an `orderActions` object  (e.g. a service each for `CreateSubscription`, `RenewSubscription`) .

In this issue, we create a service for `CreateSubscription` type and it is somewhat analogous to [`SubscribeService`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/f730068274d6d4a60615571539243c0c32bef935/app/services/subscribe_service.rb).

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Create module `Zuora::Orders` in `app/services`. This module can be used to services for all Order operations. 

The purpose of each service is to process and return an `orderActions` object used in the [Create Order's API](https://www.zuora.com/developer/api-reference/?_ga=2.234436310.991883880.1652218606-397155918.1648069381&_gl=1*9e5pc3*_ga*Mzk3MTU1OTE4LjE2NDgwNjkzODE.*_ga_MY8CQ650DH*MTY1MjI5OTkwOS41MC4xLjE2NTIzMDAyNzYuMA..#operation/POST_Order).

Create a service `CreateSubscription` in the `Zuora::Orders` module defined. The service implements the following:

  - create and inherit `Zuora::Orders::BaseService`. This base service may not have any utility as of now, but as we create other order action services, we can refactor common code to this base class.
  - defines `#execute` method that accepts `params`

The `#execute` method constructs `orderAction` object to create a new subscription, with the below parameters:

|Parameter|Type|Description|
|---|---|---|
|`type`|String|Will always be `CreateSubscription`|
|`triggerDates`|Array of objects|Each object has 2 keys: `name` and `triggerDate`. Defines the following dates: <br/> [`ContractEffective`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/f730068274d6d4a60615571539243c0c32bef935/app/services/subscribe_service.rb#L162): current date <br/>  [`ServiceActivation`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/f730068274d6d4a60615571539243c0c32bef935/app/services/subscribe_service.rb#L163): current date <br/> `CustomerAcceptance`: Not present in existing payload. We can probably use current date. <br/> Refer example below for object construction. |
|`createSubscription`|Object|Define `terms`, `subscriptionNumber`, `subscribeToRatePlans`. Refer example below.|

**Note:** Refer to [`SubscribeService`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/f730068274d6d4a60615571539243c0c32bef935/app/services/subscribe_service.rb#L163) to determine how the values are set currently.

<details>
<summary>Example return object</summary>

```json
{
  ""type"": ""CreateSubscription"",
  ""triggerDates"": [
    {
      ""name"": ""ContractEffective"",
      ""triggerDate"": ""$Today""
    },
    {
      ""name"": ""ServiceActivation"",
      ""triggerDate"": ""$Today""
    },
    {
      ""name"": ""CustomerAcceptance"",
      ""triggerDate"": ""$Today""
    }
  ],
  ""createSubscription"": {
    ""terms"": {
      ""initialTerm"": {
        ""startDate"": ""$Today"",
        ""period"": 12,
        ""periodType"": ""Month"",
        ""termType"": ""TERMED""
      },
      ""renewalSetting"": ""RENEW_WITH_SPECIFIC_TERM"",
      ""renewalTerms"": [
        {
          ""period"": 12,
          ""periodType"": ""Month""
        }
      ]
    },
    ""subscribeToRatePlans"": [
      {
        ""productRatePlanId"": ""$ProductRPId""
      }
    ]
  }
}
```
</details>


### Result

The service creates the `orderActions` payload required to create a subscription using Orders API.

### Next steps (if any)

### How will we measure success?",2
108600336,2022-05-16 09:40:12.601,Make sure Unleash errors do not bring the application down,"### Problem

See https://gitlab.com/gitlab-com/gl-infra/production/-/issues/7033#note_942314208 for full context

Part of https://gitlab.com/groups/gitlab-com/gl-infra/-/epics/703

### Proposal

Make sure Unleash has some sort of caching that allows us to avoid any downtime in the event the communication with GitLab.com is down.

We could also question the user of Unleash if this is given us problems and explore other options.

### Result

Avoid downtime in CustomersDot due to the feature flag system being down",3
108528662,2022-05-13 18:15:22.422,Determine Ramp Id for a Zuora Subscription,"### Background

In [this thread](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3968#note_913327995), we're discussing the best way to retrieve Ramp Id for a Subscription using the Zuora REST API.  We mainly need Ramp Id as a way to determine if a Subscription is ramp enabled.

As we've found out, Zuora doesn't make Ramp Id available in many of the Subscription-related API endpoints as mentioned in [the thread](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3968#note_913327995).  It's missing from the following endpoints notably:

> * `https://rest.apisandbox.zuora.com/v1/describe/Subscription`: The [v1/describe/\*](https://www.zuora.com/developer/api-reference/#operation/GET_Describe) endpoints are used to determine the schema for each Zuora resource. For Subscription, nothing related to ramps is included in the result.
> * `https://rest.apisandbox.zuora.com/v1/object/subscription/8ad09fc280042bf401801a2c4b1538ec`: The [v1/object/subscription/id](https://www.zuora.com/developer/api-reference/#operation/Object_GETSubscription) endpoint is used by CDot frequently to retrieve data for a particular subscription. It's a key endpoint utilized by the gem/library that CDot uses to interface with Zuora. No ramp information is returned in this API response either.
> * `https://rest.apisandbox.zuora.com/v1/action/query`: The [v1/action/query](https://www.zuora.com/developer/api-reference/#operation/Action_POSTquery) endpoint is used by CDot when filtering is required (e.g. get a list of active subscriptions for a given account id). Constructing a query that references ramp id leads to an error so it seems like Ramp data is not available here either.

We've engaged with Zuora Support to see if they could add this data to these endpoints.  Zuora's response [as noted here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3968#note_941398840) was:

> We are planning to add Ramp ID to this GET Subscription API and are targeting sprint 34, which will be completed by May 20, 2022 and available in production approx 2 weeks after that : https://www.zuora.com/developer/api-reference/#operation/GET_SubscriptionsByKey
>
> Note that it is not the same API that was referenced earlier by Mark (GET Subscription API (https://www.zuora.com/developer/api-reference/#operation/Object_GETSubscription). We are not planning to enhance the Object_GETSubscription API. You can use GET Subscription by Key instead.

[My comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3968#note_941422221) shown below, speaks to why this might be problematic:

> This is a little disappointing. It's nice that ramp id will be added to https://www.zuora.com/developer/api-reference/#operation/GET_SubscriptionsByKey but that endpoint isn't supported by IronBank (the gem used by CDot). We could write custom code to use this endpoint to get ramp id but at that point it doesn't seem that much different from using https://www.zuora.com/developer/api-reference/#operation/GET_RampsBySubscriptionKey ([mentioned above](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3968#note_932690820)) which is already available for use.

In this issue, let's continue the thread [started here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3968#note_913327995) and determine the best path forward to determining if a Subscription is ramp enabled.  I'm breaking this off into its own issue as it will focus the topic and also allow us to close https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3968 as this issue is [no longer relevant](https://gitlab.com/groups/gitlab-org/-/epics/7099#note_945251257).

### Proposal

Mark Q, Jessica, and I met on 2022-05-24 and agreed on a plan for determining ramp ID for a subscription. For this issue, we will pursue a short-term solution of using the https://www.zuora.com/developer/api-reference/#operation/GET_RampsBySubscriptionKey API endpoint to get the ramp ID for a subscription.  Long-term, this solution will be replaced with using the ramp id from https://www.zuora.com/developer/api-reference/#operation/Object_GETSubscription when Zuora updates this endpoint in late June.  We will open a new issue for the long-term solution.",3
108475574,2022-05-12 20:53:31.424,Rename external id and source fields from Order to Subscription,"### Problem

As [described here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4070#note_945175025), we need to modify the params and Zuora custom fields related to `External Order Id` and `External Order Source`.  It turns out an Order in Arrow is closer to what we know as a Subscription rather than Order.  This issue should cover updating the Marketplace API as well as the Ironbank schema files that reference these Zuora custom fields.

I've already engaged with Ent Apps about adding the new custom fields so that we can begin updating the IronBank schema files.

### Proposal

- [x] Update the IronBank schema files for sandbox and staging. https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4769, https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4781
   - Remove fields `ExternalOrderId__c` and `ExternalOrderSource__c`
   - Add fields `ExternalSubscriptionId__c` and `ExternalSubscriptionSource__c`
- [x] Update Marketplace API endpoint to reference new fields https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4782
- [x] Once schemas are updated, notify Ent Apps in https://gitlab.com/gitlab-com/business-technology/enterprise-apps/financeops/finance-systems/-/issues/628 that legacy custom fields can be removed from API Sandbox and Central Sandbox.
   - Notified [here](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/financeops/finance-systems/-/issues/628#note_954973121)",2
108454361,2022-05-12 14:51:49.712,Remove set_super_sonics_aware_field_before_license_notification once Orders API is in use,"### Problem

As described in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4185, there was a race condition where license notification was delivered to customers before the super sonics aware flag could be set on `CloudActivation`.  This was addressed in https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4702 with some additional code [in `app/workers/zuora_callback_worker.rb`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4702/diffs#bdf5b9dac21f5beca61699558db5ec40ffde85ab_164_162), `set_super_sonics_aware_field_before_license_notification`.

Something similar happened in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4513 after the release on 2022-07-07 of Strict Cloud License (SCL). When renewing and the SCL flags were not set yet, a race condition led to sending out the wrong email (unified email instead of cloud activation email). This was fixed in https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5053 with the same approach as above. To ensure this race condition isn't happening for subscriptions before the SCL release, the Super Sonics release date is used instead for the fix.

However, once CDot transitions to fully using the Orders API, we should no longer need these extra codes because all actions will be associated with one order which yields one subscription version, whereas the Amend API leading to multiple amendments and subscription versions.  The race condition should not be an issue under Orders.

### Proposal

Remove the additional code introduced in introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4702 and https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5053. In `app/workers/zuora_callback_worker.rb`, the methods [`set_super_sonics_aware_field_before_license_notification`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/app/workers/zuora_callback_worker.rb#L179) and [`set_super_sonics_flags_before_license_notification`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/app/workers/zuora_callback_worker.rb#L132) have to be removed. As well as the method [`renewed_after_super_sonics_released?`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/app/models/subscription.rb#L231) in the Subscription model.

This work cannot be done until CustomersDot transitions using Zuora Orders API ([epic](https://gitlab.com/groups/gitlab-org/-/epics/6438)) which is currently being planned in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4173.",1
108444981,2022-05-12 12:31:21.417,Update new logo in gitlab_login.haml,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
New GitLab logo was updated in CustomersDot portal in #4242. However we seemed to have missed to update the `app/views/devise/sessions/gitlab_login.haml` template. 

#### Steps to reproduce

1. Create/find a user on GitLab that has not linked their account to customers-dot yet
1. Navigate to `<HOSTNAME>/subscriptions/community_program/new?edition=saas&product=oss`
1. Observe logo on the button `Continue with your GitLab.com account` to be old logo.

### Proposal
Update new logo in the above mentioned template. Also check if the logo update has been missed in any other place in CustomersDot.

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result
New logo should be visible in `app/views/devise/sessions/gitlab_login.haml` template. 

### Next steps (if any)

### How will we measure success?",1
108399802,2022-05-11 20:55:26.793,Create IronBank Order API client,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

As part of the plan to [upgrade to Orders API](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4173), we need a way for CDot to be able to create orders on Zuora.
The [recommended](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Migration_Guidance#Subscribe_and_Amend_REST_API_Migration) way to create orders is to invoke Zuora's [Create Order API](https://www.zuora.com/developer/api-reference/?_ga=2.234436310.991883880.1652218606-397155918.1648069381&_gl=1*9e5pc3*_ga*Mzk3MTU1OTE4LjE2NDgwNjkzODE.*_ga_MY8CQ650DH*MTY1MjI5OTkwOS41MC4xLjE2NTIzMDAyNzYuMA..#operation/POST_Order).

The IronBank gem we use to interact with Zuora does [not](https://github.com/zendesk/iron_bank/issues/80) support Order object and its related actions. Please however note [`Zuora::Order`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/lib/zuora/order.rb) IronBank resource already exist in CDot.

Although IronBank defines actions such as [Subscribe](https://github.com/zendesk/iron_bank/blob/5a6aae4bd75f74a0906b6256d0824c2e7412d282/lib/iron_bank/actions/subscribe.rb) and [Amend](https://github.com/zendesk/iron_bank/blob/5a6aae4bd75f74a0906b6256d0824c2e7412d282/lib/iron_bank/actions/amend.rb), `actions` are soon going to be deprecated. 

We should therefore avoid creating action classes. Some common behavior from [`IronBank::Actions`](https://github.com/zendesk/iron_bank/blob/5a6aae4bd75f74a0906b6256d0824c2e7412d282/lib/iron_bank/action.rb) base class can be re used.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Create an client for Orders that implements `#create` method that accepts the parameters defined below, and creates an Order in Zuora.

[Create Order API](https://www.zuora.com/developer/api-reference/?_ga=2.234436310.991883880.1652218606-397155918.1648069381&_gl=1*9e5pc3*_ga*Mzk3MTU1OTE4LjE2NDgwNjkzODE.*_ga_MY8CQ650DH*MTY1MjI5OTkwOS41MC4xLjE2NTIzMDAyNzYuMA..#operation/POST_Order) can be used for multitude of purposes such as creating a subscription, ramp deal, adding a product to a subscription, renewing and cancelling a subscription and so on.

Instead of supporting all use cases in the initial iteration, we can iterate over this and start with the bare minimum functionality to create a subscription.

[Creating a subscription through the Orders API](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AC_Orders_Tutorials/AA_Create_a_Subscription?_gl=1%2A2t5uja%2A_ga%2AMzk3MTU1OTE4LjE2NDgwNjkzODE.%2A_ga_MY8CQ650DH%2AMTY1MjMwODUyNC41MS4xLjE2NTIzMDg4NDIuMA..&_ga=2.200168166.991883880.1652218606-397155918.1648069381) requires **at least** the following parameters:

| Name | Type | Description |
|---|---|---|
|`orderDate` (**Required**) | string <date> | The date when the order is signed. |
|`existingAccountNumber`| string | `accountNumber` |
|`subscriptions`| Array of object | Each item includes a set of order actions, which will be applied to the same base subscription |
|`processingOptions`| object (processingOptionsOrders) | Invoice or Payment |


<details>
<summary>Example request </summary>

```json
{
  ""orderDate"": ""$Today"",
  ""existingAccountNumber"": ""$AccountNum"",
  ""subscriptions"": [
    {
      ""orderActions"": [
        {
          ""type"": ""CreateSubscription"",
          ""triggerDates"": [
            {
              ""name"": ""ContractEffective"",
              ""triggerDate"": ""$Today""
            },
            {
              ""name"": ""ServiceActivation"",
              ""triggerDate"": ""$Today""
            },
            {
              ""name"": ""CustomerAcceptance"",
              ""triggerDate"": ""$Today""
            }
          ],
          ""createSubscription"": {
            ""terms"": {
              ""initialTerm"": {
                ""startDate"": ""$Today"",
                ""period"": 12,
                ""periodType"": ""Month"",
                ""termType"": ""TERMED""
              },
              ""renewalSetting"": ""RENEW_WITH_SPECIFIC_TERM"",
              ""renewalTerms"": [
                {
                  ""period"": 12,
                  ""periodType"": ""Month""
                }
              ]
            },
            ""subscribeToRatePlans"": [
              {
                ""productRatePlanId"": ""$ProductRPId""
              }
            ]
          }
        }
      ]
    }
  ],
  ""processingOptions"": {
    ""runBilling"": false,
    ""collectPayment"": false
  }
}

```
</details>

### Technical Implementation

1. Create `client` module in `lib/zuora`

2. Implement Orders class in the `client` module. Create and inherit `IronBank::Client::Base` base class (incorporate common features from [`IronBank::Actions`](https://github.com/zendesk/iron_bank/blob/5a6aae4bd75f74a0906b6256d0824c2e7412d282/lib/iron_bank/action.rb) base class.

3. Define `#create` method. It should invoke the Orders API with parameters required to create a subscription: `{ orderDate: orderDate, existingAccountNumber: existingAccountNumber, subscriptions: subscriptions, processingOptions: processingOptions }`

4. Define a method for each of the parameter mentioned in the above pt; e.g. `subscriptions` should return `subscriptions` object `IronBank::Object.new(args.fetch(:subscribes)).deep_camelize`. Alternatively, consider implementing dynamic methods instead of defining one for each. Ref: [subscribe action](https://github.com/zendesk/iron_bank/blob/5a6aae4bd75f74a0906b6256d0824c2e7412d282/lib/iron_bank/actions/subscribe.rb)


### Result

`IronBank::Actions::Order.create(params)` successfully creates an order on Zuora.

### Next steps (if any)

### How will we measure success?",2
108335586,2022-05-10 22:36:32.386,Configure bundle on CI to disallow any changes to Gemfile.lock,"This is a ~""corrective action"" of sirt-2266.

This project (https://gitlab.com/gitlab-org/customers-gitlab-com) uses `bundle` or `bundle install` in CI. Per the Rubygems.org advisory, we should use either the `frozen` or `deployment` options as defense-in-depth to mitigate supply chain attacks. Most of these projects currently do not use the `frozen` or `deployment` options.

## More background

See https://github.com/rubygems/rubygems.org/security/advisories/GHSA-hccv-rwq6-vh79:

> Using Bundler in --frozen or --deployment mode in CI and during deploys, as the Bundler team has always recommended, will guarantee that your application does not silently switch to versions created using this exploit.

Note that the `deployment` option installs gems to `vendor`, which we may not want. So `frozen` will usually be the smaller change.

Note that:

> \[DEPRECATED\] The `--frozen` flag is deprecated because it relies on being remembered across bundler invocations, which bundler will no longer do in future versions. Instead please use `bundle config set --local frozen 'true'`, and stop using this flag",2
108276295,2022-05-10 00:17:04.156,Update renewal link from GitLab for community program subscription,"The renewal link on group's billing page for community program subscription needs updating to redirect to community program renewal flow.

![Screen_Shot_2022-05-10_at_8.49.53_AM](/uploads/2e0090e85ebafbaac0182bc78ae71815/Screen_Shot_2022-05-10_at_8.49.53_AM.png)

The namespace renewal link (`/gitlab/namespaces/{namespace_id}/renew`) currently redirects to `/subscriptions`.

This should redirect to (`/subscriptions/community_program/{subscription_id}/renew`) instead.",1
108276292,2022-05-10 00:16:44.400,Mark coupon code as redeemed only for new CP subscription purchase and renewal,"# Bug

## Summary

Changing namespace for a community subscription logs an error message `The coupon code '' was used to check out but it was unable to be marked redeemed`. This should only happen for new community program subscription and its renewal since we don't need coupon code for changing namespace or addon purchase.

[Sentry issue](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/3291044)

## Steps to reproduce

* Change the linked namespace for an existing community program subscription with more than 1 seat in use or purchase an addon
* Check logs locally / on Slack for Staging for the above mentioned error message

## What is the current *bug* behavior?

An attempt to mark an empty coupon code is made.

## What is the expected *correct* behavior?

We shouldn't mark coupon as redeemed when changing namespace.

## Relevant logs and/or screenshots

[Sentry issue](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/3291044)

## Bug fix proposal

Add `renewing?` check when calling `mark_coupon_redeemed` in [`amend_subscription_service.rb`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/eb8385b30405922a26e613e43777a3cea3ee4a1c/app/services/amend_subscription_service.rb#L40)",1
108213948,2022-05-09 03:19:06.114,Frontend validation against emoji customers info during registration,"### Problem

Customers are able to set emoji in their names in CustomersDot accounts. When we try to make a subscription purchase, we take the `bill_to_contact` details from the Customer record in the CustomersDot app. This results [in the following error from Zuora:](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/3267234/events/76539035/)

```ruby
Body: [{""Success""=>false, ""Errors""=>[{""Code""=>""UNKNOWN_ERROR"", ""Message""=>""Operation failed due to an unknown error.""}]}]
```

<img src=""/uploads/97e77d6dcc65d008dc0e8d5144c528c4/CleanShot_2022-05-09_at_15.05.09.png"" width='500px' />

### Steps to reproduce

1. Create a new account on Gitlab
3. Navigate to CustomersDot and select `sign in with Gitlab`
4. Fill out the details to register for a customers dot account, and add an emoji to the first name
5. Create a group on GitLab and navigate to billing
6. Select a plan, fill out the details and submit the purchase
7. There is an `UNKNOWN_ERROR` message

<img src=""/uploads/5901d4353e4af31417b9a499a1a3d103/CleanShot_2022-05-09_at_14.54.59.png"" width='500px' />

#### Workaround

Once the emoji is removed from the name on the CustomersDot account, the purchase completes successfully.

### Proposal

For the [registration form](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/3096d7e4915b7e0f8450426fa0bcd352314a8677/app/frontend/javascripts/sessions/components/register_form.vue), it should be sufficient to use the `state` and `invalid-feedback` props for form/groups (see example [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/3096d7e4915b7e0f8450426fa0bcd352314a8677/app/frontend/javascripts/subscription/components/coupon_code_input.vue)).

The fields to validate against the presence of emoji are:

- first_name
- last_name
- city
- zip_code (postal_code)
- company

| Description | MR |
|-|-|
| Promote `emoji-regex` to a npm `dependency` | gitlab-org/customers-gitlab-com!4845 |
| Add validation to customer registration form (first and last name) | gitlab-org/customers-gitlab-com!4852 |
| Validate customer registration form (company and address fields) | gitlab-org/customers-gitlab-com!4887 |",3
108136139,2022-05-06 09:46:33.790,Flaky test: VCR::Errors::UnhandledHTTPRequestError,"### Problem

This spec, [introduced here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2599/diffs#bcb86af9495467f36c3dd1683988ef3798f91962_56_57), started to fail a bit more often (perhaps a coincidence):

```
rspec './spec/features/upgrade_subscriptions_spec.rb[1:3:2:1:2]' # upgrading subscriptions with eoa_starter_bronze disabled when ultimate plan selected behaves like an app without EoA banners does not show the alert about free upgrade
```

#### Example failures

- https://gitlab.com/gitlab-org/customers-gitlab-com/-/jobs/2409005037
- https://gitlab.com/gitlab-org/customers-gitlab-com/-/jobs/2406620513
- https://gitlab.com/gitlab-org/customers-gitlab-com/-/jobs/2304577351


### Proposal

Perhaps this investigation can be of some guidance in terms of resolving the flake: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/736#note_229553100.

### Result

### Next steps (if any)

### How will we measure success?",2
108089750,2022-05-05 15:01:22.054,"Follow-up from ""Add mailer for Offline Cloud License""","The following discussion from !4690 should be addressed:

- [ ] @fneill started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4690#note_935166630):  (+3 comments)

We want to update all the `or later` usages in our emails to refer to the GitLab version to be `and later` to be consistent with the [style guide](https://docs.gitlab.com/ee/development/documentation/styleguide/word_list.html#later)",1
108045994,2022-05-05 04:48:56.040,Add marketplace API to CDot openAPI doc,"As suggested in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4253#note_935114380.


> 1. Is there some documentation on the API endpoints for Disty that I can refer to?

I'm not aware of this documentation if it exists. @qzhaogitlab Perhaps we can add it to [openAPI docs for CDot](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/doc/api/openapi.yaml) (disclaimer: it's not a complete list of endpoints right now)? There's information about how to update the docs [here](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/main/doc/api/index.md).

### How will we measure success?",2
107899303,2022-05-03 04:29:45.241,Roll out of zuora_hpm_no_refresh,"<!-- Title suggestion: [Feature flag] Enable description of feature -->

# Summary

<!-- Short description of what the feature is about and link to relevant other issues. -->

This issue is to rollout [Static Zuora component](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4553) on CustomersDot production,
that is currently behind the [`zuora_hpm_no_refresh`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/126/edit) feature flag.

## Owners

- Team: ~""group::purchase"" 
- Most appropriate Slack channel to reach out to: [#g_purchase](https://gitlab.slack.com/archives/C01BPTAP599)
- Best individual to reach out to: @agulina or @lmeckley 
- PM: @tgolubeva 

## The Rollout Plan

- Partial Rollout with specific Customers on CustomersDot, [via Unleash](https://docs.gitlab.com/ee/operations/feature_flags.html#user-ids)
- Rollout on CustomersDot for a certain period (How long)
- Percentage Rollout on CustomersDot
- Rollout Feature for everyone as soon as it's ready

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? Sentry errors reports can also be useful to review -->

## Expectations

### What are we expecting to happen?

The payment forms in CDot should use the new Zuora component but functionally behave the same as the old implementation in the happy path. The only difference is that errors will not cause the iframe to re-render.

### What might happen if this goes wrong?

All CDot payment pages could be impacted and users could be preventing from making payments, renewing, etc. The iframe could also potentially not load. 

### What can we monitor to detect problems with this?

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? -->

## Rollout Steps

### Rollout on non-production environments

- [ ] Ensure that the feature MRs have been deployed to non-production environments, i.e. `customers-staging`.
- [ ] Consider announcing that the flag will be enabled to potentially impacted groups, e.g. `#s_fulfillment_engineering`
- [ ] Enable the feature globally on non-production environments by applying the appropriate environment, e.g. `customers-staging` and `customers-development`.
- [ ] Verify that the feature works as expected. Posting the QA result in this issue is preferable.

### Preparation before production rollout

- [ ] Ensure that the feature MRs have been deployed to production
- [ ] Check if the feature flag change needs to be accompanied with a
  [change management issue](https://about.gitlab.com/handbook/engineering/infrastructure/change-management/#feature-flags-and-the-change-management-process).
  Cross link the issue here if it does.
- [ ] Ensure that you or a representative in Fulfillment can be available for at least 2 hours after feature flag updates in production.
  If a different developer will be covering, or an exception is needed, please inform the Fulfillment team in #s_fulfillment_engineering
- [ ] Ensure any documentation has been updated
- [ ] Announce on [the feature issue](ISSUE LINK) an estimated time this will be enabled on production if applicable
- [ ] If the feature might impact the user experience, notify `#s_fulfillment` and potentially `#support_gitlab-com`, as well as your team channel ([more guidance when this is necessary in the dev docs](https://docs.gitlab.com/ee/development/feature_flags/controls.html#communicate-the-change)).

### Global rollout on CustomersDot production

- [ ] Confirm the feature flag is enabled on `staging` without incident
- [ ] Roll out the feature to targeted testing users first (if applicable)
- [ ] If applicable, [incrementally roll out](https://docs.gitlab.com/ee/operations/feature_flags.html#percent-rollout) the feature.
- [ ] Verify the change has the desired outcome with the limited rollout before enabling the feature globally on production.
- [ ] Enable the feature globally on production environment 
- [ ] Announce on [the feature issue](ISSUE LINK) that the feature has been globally enabled.
- [ ] Wait for [at least one day for the verification term](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release).

### Release the feature

After the feature has been [deemed stable](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release),
the clean up should be done as soon as possible to permanently enable the feature and reduce complexity in the codebase.

<!-- The checklist here is to help stakeholders keep track of the feature flag status -->
- [ ] Create a merge request to remove `<feature-flag-name>` feature flag
  - [ ] Remove all references to the feature flag from the codebase
- [ ] Ensure that the cleanup MR has been deployed to both staging and production
- [ ] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [ ] Ensure production environment is still working as expected
- [ ] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [ ] Close this rollout issue.

## Rollback Steps

- [ ] This feature can be disabled by performing the following actions:
  - [ ] Disable the Unleash flag on the [feature flag page](LINK TO THE FEATURE FLAG EDIT PAGE)",2
110296543,2022-05-02 19:48:54.303,[SaaS] Add messaging about user overage process to Renewal flow,"## Problem to solve

SaaS customers are being surprised and taken off-guard by Quarterly Subscription reconciliations. Because self-service SaaS customers have not historically been charged true-ups, the QSR process and the fact that they have to pay for overages is totally new. See tickets from customers [here](https://gitlab.com/gitlab-org/fulfillment-meta/-/issues/337).

## Intended users

**This issue is just for SaaS customers.**

* Group Owners who are **renewing a subscription** through our self-service renewal flow
* See exactly which use cases we're solving for in the [Epic description](https://gitlab.com/groups/gitlab-org/-/epics/7229#saas-customers).

## Proposal

When a user is **renewing** GitLab, make sure that they are aware of the overage process. Show a message to all customers using the self-service renewal flow that notifies them about the overage process.

[Purchase Design here](https://gitlab.com/gitlab-org/gitlab/-/issues/347267/designs/Option_2__Alert_during_checkout_informing_user_of_QSR.png), could we reuse for renewal flow?

Link for `How does billing work?`: `https://docs.gitlab.com/ee/subscriptions/quarterly_reconciliation.html` (shared [here](https://gitlab.com/gitlab-org/gitlab/-/issues/347267/designs/Option_2__Alert_during_checkout_informing_user_of_QSR.png#note_828638740))",2
107885691,2022-05-02 18:00:06.073,Remove Customer dependency from Subscription model,"### Problem

[The `Subscription` model](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/1d243289b208023d7437ce3d0fa363f8f38454b8/app/models/subscription.rb) is a wrapper model around a `Zuora::Subscription`.  A `Customer` object is required when instantiating a `Subscription` object ([see definition](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/1d243289b208023d7437ce3d0fa363f8f38454b8/app/models/subscription.rb#L68)).  In most places as it relates the model, the `Customer` object is used as a way to reference the `zuora_account_id`.  There are some exceptions to this rule though ([example1](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/1d243289b208023d7437ce3d0fa363f8f38454b8/app/models/subscription.rb#L265), [example2](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/1d243289b208023d7437ce3d0fa363f8f38454b8/app/models/subscription.rb#L384)).

We've seen where dependence on Customer records can be problematic (https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3837, https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2880).  We should look into removing this dependency in Subscription which will help to simplify logic in this model, and also hopefully resolve some data inconsistency problems.

### Proposal

Remove `Customer` as a dependency when initializing a `Subscription` object.",5
107866722,2022-05-02 11:05:15.552,customersDot: Use new logo in headerbar and rest of interface,"The new logo should be rolled out in header bar and sign-in buttons (and everywhere else in the UI)

Also update the favicon",1
107362867,2022-04-28 08:01:56.027,Rename Subscription#previous,"### Problem

Currently our Subscription#previous method is overriding IronBank::Subscription#previous method.

* `Subscription#previous`: find the latest older version with an earlier term start date
* `IronBank::Subscription#previous`: find the version before current version

This semantic differences can cause confusion, and can be a source of future bugs.

### Proposal

We should rename the former with a more comprehensive name.

### Result

No behavior change as this is a refactoring",2
107355608,2022-04-28 05:31:19.595,Update text on summary for invalid seat number,"The following discussion from !4554 should be addressed:

- [ ] @lmeckley started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4554#note_921532958):  (+3 comments)

    > **question (non-blocking, UX)**: Should we remove the text below `Price` in the `Purchase Summary` when the user has an invalid input? Otherwise we're showing a specific seat number that doesn't necessarily relate to what the user typed in.
    > 
    > ![Screen_Shot_2022-04-22_at_9.48.57_AM](/uploads/5cbafa197db858e0c0a37c49ccdbeeb4/Screen_Shot_2022-04-22_at_9.48.57_AM.png)

## Proposal

Remove the text entirely when the seats count is an invalid number",1
107138870,2022-04-25 13:19:16.571,Maintenance mode - quiet all Sidekiq queues except zuora_health_check,"## Problem to solve and proposal

When in maintenance mode, Sidekiq queues are still able to receive jobs. While this is unlikely to happen (as the CustomersDot app would not enqueue new jobs because of the maintenance mode), it would be still good practice to quiet all Sidekiq queues (except the `zuora_health_check` queue) upon having the maintenance mode on, and to have them to reaccept new jobs when the maintenance mode is off.

The `zuora_health_check` queue is the only queue not to quiet as it is tightly coupled to the app maintenance mode: it checks Zuora health periodically and gets the app into (or out of) maintenance mode depending on the Zuora health state.",2
107050151,2022-04-22 21:12:22.194,Gitlab.com Admin API token rotation,"
A new admin token was generated in https://gitlab.com/gitlab-com/team-member-epics/access-requests/-/issues/20979#note_1297201378

We need to:
- [x] [Update the secret to the new value in ansible](https://gitlab.com/gitlab-org/customersdot-ansible/-/blob/master/doc/readme.md#ansible-vaults-for-customersdot-secrets) before the old token expires (April 2023). Preferably with a couple weeks buffer.
- [x] Create a new issue with a due date some time period (1 month?) before this new token expires.
- [x] Create a new slack reminder with a link to the issue that is triggered before the due date and perhaps triggers multiple times?
- [x] Update docs detailing this process.
- [x] Handoff process to ~""group::fulfillment platform""",3
107013125,2022-04-22 07:32:13.638,Remove subscription name field from manually creating licenses form,"### Problem

When manually creating licenses in the Admin area of CustomersDot, there are fields for the subscription name and ID. These fields are optional when creating a legacy license. Hence, the backend logic that checks if the subscription exists in Zuora works when both fields are field or when just one of them are filled. When only the subscription name is filled in, a wrong subscription version can be linked to the license. Whereas the filled in subscription ID will result in linking the correct subscription version is linked to the license.

Gathering some feedback from Support (see [this comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4601#note_919402242) and [this one](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4601#note_920060764)) shows that they have access to SFDC and Zuora and therefore access to the subscription ID AND name. Given this information, asking both the subscription name and ID in the form is obsolete since the subscription ID will be sufficient.

### Proposal

Remove the subscription name field from the form when manually creating licenses. The information can be pulled from the subscription found with the ID and automatically set on license create.

### Result

Removing an obsolete field and ensuring that correct subscription version is linked to the created license.",2
106999089,2022-04-21 22:57:10.063,Only allow eligible community program subscriptions for renewal,"Add restrictions to only allow eligible community program plans (listed below) to be renewed:

```
ULTIMATE_SAAS_EDU_1_YEAR
ULTIMATE_SM_EDU_1_YEAR
ULTIMATE_SAAS_OSS_1_YEAR
ULTIMATE_SM_OSS_1_YEAR
```

Attempting to renew any other community program plan using URL (`/subscriptions/community-program/{subscription_id}/renew`) or by accessing renewal landing page (`/subscriptions/community-program/renew`) should redirect to home page.",1
109058282,2022-04-21 03:49:47.896,Up-to-the-minute license utilization data synced to Salesforce,"## Problem Statement
The current [License Utilization Salesforce app](https://about.gitlab.com/handbook/sales/field-operations/sales-systems/license-usage-app/) is a WONDERFUL improvement as we had nothing before. However, there are a few problems with it:
1. Infrequently updated. Problem: not sufficient for quoting a customer, requiring another system for accurate, updated data
2. Monthly trend data. Problem: monthly is not frequent enough to build trendlines for Q2C processes
3. Lack of predictability. Problem: no guidance on where the customer may be at their next renewal (see trendlines above)

### Desired Outcome
A world where the sales rep can, in one system and one flow, review their list of accounts for upcoming renewals and customer check-ins to see license Utilization of their customer subscriptions for under, at, and over their purchased licenses to be better informed with how to serve them. Intentions include a better quote-to-cash process, license utilization visibility, and more efficient rep flow.

**User stories:**
1. As a rep I want to know how much to quote the customer for their current renewal. This may mean I need a trendline to forecast what their usage will be in 30, 60, 90, 120, 150 days. I want month-over-month trends.
   1. More especially for larger, slower entities
2. As a rep I want to see daily/weekly trends of my customers deployment of licenses (is it going up, down, flat? If so, by how much?)
3. As Fulfillment, I want an established SLA for how long it takes for the customer to send data to it appearing in Salesforce for reps
4. As an SA/TAM/SDR/renewal rep, I have visibility daily/weekly (i.e., Cloud License) license utilization data to track and support my customers and monitor how many licenses they've deployed
5. BONUS: As a rep and to support Q2C, I have visibility into how many licenses are deployed (utilization) and are active (users who have logged in recently). 
   1. We've included the number of _active_ users in the last 28 days so I can contrast and compare how many licenses have been deployed vs. are in active use.



## Proposal

The proposed initial iteration for this work is in https://gitlab.com/gitlab-com/sales-team/field-operations/systems/-/issues/3324#proposed-solution.

### Reference 

1. Current code used to populate license utilization app in SFDC:

<details><summary>Click to expand</summary>

```
With prep as (
    SELECT DISTINCT DIM_SUBSCRIPTION_ID_ORIGINAL
                  ,max(DIM_SUBSCRIPTION_ID) AS dim_subscription_id
                  ,MAX(SUBSCRIPTION_STATUS) AS subscription_status
                  ,MAX(PING_CREATED_AT) AS ping_created_at
                  ,MAX(CLEANED_VERSION) AS gitlab_version
                  ,MAX(BILLABLE_USER_COUNT) AS billable_user_count
                  ,MAX(MAX_HISTORICAL_USER_COUNT) AS max_historical_user_count
                  ,CASE WHEN DIM_SUBSCRIPTION_ID_ORIGINAL IN ('2c92a00d6d714abc016d8424bc45583e', '2c92a0087468817001748c89205f0cf5') THEN SUM(LICENSE_USER_COUNT)
                      ELSE MAX(LICENSE_USER_COUNT) END AS license_user_count
                  ,MIN(DELIVERY_TYPE) AS delivery_type
    FROM COMMON_MART_PRODUCT.MART_PRODUCT_USAGE_PAID_USER_METRICS_MONTHLY
    where date_trunc('month',PING_CREATED_AT) = dateadd('month', -1, date_trunc('month', current_date))
        AND PING_CREATED_AT is not null
        AND INSTANCE_TYPE = 'Production'
    group by 1
    order by 1 desc
)
select delivery_type
    ,DIM_SUBSCRIPTION_ID_ORIGINAL
    ,dim_subscription_id
    ,subscription_status
    ,ping_created_at
    ,gitlab_version
    ,billable_user_count
    ,max_historical_user_count
    ,license_user_count
from prep
WHERE license_user_count > 0
```

</details>

2. License app HB page: https://about.gitlab.com/handbook/sales/field-operations/sales-systems/license-usage-app/",5
106856921,2022-04-19 19:44:11.242,Use HPM's own actions to adjust height,"The following discussion from !4553 should be addressed:

- [ ] @agulina started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4553#note_910290229): 

    > **question (non-blocking)**: would it be possible to leverage the iFrame's own action (example [here](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/84342/diffs#7f5d08a2fb96aaa436ea700da47c90a91d22b5d6_0_139))?
    > 
    > _Edit_: we can also have it for a follow-up.",2
106795040,2022-04-18 20:36:27.508,Evaluate zuora client_id and client_secret env variables in iron bank config,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

When [exporting schema](https://gitlab.com/gitlab-org/customers-gitlab-com#ironbank) from Zuora for a particular environment, the commands rely on the presence of zuora `client_id` and `client_secret` env variables in the [iron bank config](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/config/initializers/iron_bank.rb#L9).

The [config](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/config/initializers/iron_bank.rb#L9) however checks only for secrets.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Check for presence of zuora `client_id` and `client_secret` env variables in [iron bank config](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/config/initializers/iron_bank.rb#L9) before defaulting to secrets.

### Result

Zuora environment specific operations such as exporting schema will not require resetting secrets.",1
106757983,2022-04-18 06:25:53.800,Configure CustomersDot password requirements for customers,"### Problem

Right now the minimum password length and other requirements are fairly basic.

### Proposal

We should follow: https://about.gitlab.com/handbook/security/password-procedure.html#system-password-requirements 

and configure CustomersDot as GitLab.",3
106576015,2022-04-13 10:23:04.045,Always validate the presence of `expires_at` when creating license manually,"The following discussion from !4559 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4559#note_910451285):  (+1 comment)

    > **Question:** Now that this validation is being moved to a service that manages license creation only, I wonder if it makes sense to always validate the presence of `expires_at` now, for offline, legacy, or otherwise?  I know we have plenty of legacy licenses without `expires_at`, but didn't we talk about making sure that all new licenses had an expiration going forward?

## Proposal

Always validate the presence of `expires_at` when creating license manually (via the `RailsAdmin::CreateLicenseService`).",1
106538039,2022-04-12 15:53:57.421,Renewed subscriptions may not be receiving correct license notifications,"### Problem

As described in [this Slack thread](https://gitlab.slack.com/archives/C01BPM66KNE/p1649771693748099), a customer with a recently renewed subscription did not receive the license notification with activation code as expected.  Instead, the customer received the legacy license email.  Here's the original question posed in Slack:

>  It seems that this customer received a legacy email for the activation, not the new SCL Iteration 2 email (with just a cloud license activation code, no legacy license). Do we know what triggered them to get that legacy email with only a license file, and not the cloud activation code? 

- [Zuora Customer Account](https://www.zuora.com/apps/CustomerAccount.do?method=view&id=2c92a0fe5b42d2b0015b5d5229a65433)
- [Zuora Subscription](https://www.zuora.com/apps/Subscription.do?method=view&id=8a128b5f7ffe331f0180182e91f02d66)

On Customer Account page, we can see 4 Zuora callouts sent at 04/11/2022 03:32:33 PDT relating to this renewal.

I found the following statements in the logs (adjusted to remove the customer name) which point to the problem:
```
2022-04-11T10:32:31.736Z pid=3957127 tid=2hvbv class=ZuoraCallbackWorker jid=3bf1bddc773b0f81e865d7ad INFO: {""message""=>""ZuoraCallbackWorker: Sending license notification"", ""subscription_name""=>""xxxx Renewal Opportunity 2019-04-12""}
2022-04-11T10:32:31.900Z pid=3957127 tid=2fvvz class=ZuoraCallbackWorker jid=3fc57f0fcc89c9432cee98ad INFO: {""message""=>""ZuoraCallbackWorker: Successfully updated the Super Sonics aware field during Subscription Renewal"", ""customer_id""=>3371, ""subscription_name""=>""xxxx Renewal Opportunity 2019-04-12"", ""cloud_activation_id""=>4038, ""super_sonics_aware""=>true}
```

It looks like the license notification is sent before we update the `super_sonics_aware` field on the `CloudActivation`.  If that’s the case, the legacy license email would be [sent here](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/d3def14bb4d349b9877a7e141cf347f10639a2ef/app/services/license_notification_service.rb#L32) because the super sonics aware field is not set.

The fix isn’t as simple as just reordering logic in CDot.  This is likely a race condition problem because the super sonics aware field is [updated when processing the renewal amendment](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/8993c11361f2fd925f28c1049f24ae55176d7a49/app/workers/zuora_callback_worker.rb#L136) callout, whereas the license notification is sent when processing the last amendment callout (e.g. the callout for the “active” subscription) which in this case is [the RemoveProduct amendment](https://www.zuora.com/apps/Amendment.do?method=viewInfo&id=8a128b5f7ffe331f0180182e91772d0a).  It looks like the  super sonics aware field just happened to be updated a fraction of a second too late, after the license notification.

The good news is when we fully embrace Zuora Orders, this isn’t a possibility as we process one callout for all actions in an order so no race condition.  I think we may need to make one change in the callout code to ensure the SS aware field is updated earlier.

In the meantime, we need to rethink when the SS aware is set.  Right now we only set the field when processing the renewal amendment, but we need to  assume amendments won’t be processed in order.

### Proposal

CustomersDot could check if a subscription has been renewed since X date (pick a date from last fall) and update the `super_sonics_aware` field when processing any of the callouts (not just the renewal amendment [as is the case here](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/8993c11361f2fd925f28c1049f24ae55176d7a49/app/workers/zuora_callback_worker.rb#L137)).  This way we can be sure that the `super_sonics_field` is up-to-date before delivering the license.",3
106496431,2022-04-12 04:11:05.189,Incorrect term dates shown for community program subscription renewal,"## Summary

Subscription renewal term is showing today's date plus a year as the new term period. It should instead be from subscription's current term end date until a year from term end date

Both SaaS and SM renewal are affected by this, example below is of SM renewal

![Screen_Shot_2022-04-12_at_4.06.48_PM](/uploads/053093ad1236348358d45f71ef050dd0/Screen_Shot_2022-04-12_at_4.06.48_PM.png)

![Screen_Shot_2022-04-12_at_4.07.26_PM](/uploads/c1c35f1a39767afbb475ea57e2c8d0ba/Screen_Shot_2022-04-12_at_4.07.26_PM.png)

## Steps to reproduce

[Steps to setup community program subscription which is up for renewal](https://gitlab.com/groups/gitlab-org/-/epics/5711#steps-to-setup)

* Visit `/subscriptions/community_program/{subscription_id}/renew` 

## What is the current *bug* behavior?

Renewal term shown is from todays date until a year

## What is the expected *correct* behavior?

Renewal term should be from subscription's current term end date until a year from term end date


## Implementation notes

We can use [`renewal_term`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/c0e53a8b27eec8fce4b4c405cb0d22929f7f23fe/app/helpers/subscription_helper.rb#L14) helper to get the renewal period and wire it up to use from the components.",1
106286236,2022-04-07 23:29:00.974,"Create a plan for upgrading to Orders APIs, create issues","## Summary

We need to identify all of the code that utilizes Subscribe / Amend APIs, and create a plan for how we will move to Orders API.

### Documentation

Zuora has the following documentation to guide clients through the migration from Subscribe/Amend APIs to Orders API: https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Migration_Guidance#Orders_API_Migration_Guidance

Additional documentation can be found here https://gitlab.com/gitlab-org/fulfillment-meta/-/issues/462+

## Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

## Result

All issues are created, added to the [epic](https://gitlab.com/groups/gitlab-org/-/epics/6438), and are ~""workflow::ready for development"".

We should also be able to estimate how long the work will take, so that it can inform our progress towards completing project Matterhorn.

## Next steps (if any)

### How will we measure success?",3
106270766,2022-04-07 17:59:56.720,Update method name for to differentiate midterm and renewal upgrades,"### Description
For the MR here https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4563, we have introduced a new method `available_gitlab_renewal_upgrades` and renamed `available_gitlab_upgrades` to `available_gitlab_midterm_upgrades`

We check if the order belongs to Saas or EE before providing plans for renewal. If order belongs to Saas plans then `available_gitlab_com_renewal_upgrades` is called and `available_gitlab_ee_renewal_upgrades` if order belongs to SM.

During midterm upgrade we call `available_gitlab_midterm_upgrades` and depending on SaaS and SM order we make calls to `available_gitlab_com_upgrades` and `available_gitlab_ee_upgrades` respectively.


### Proposal

We can update the names `available_gitlab_com_upgrades` to `available_gitlab_com_midterm_upgrades` and update `available_gitlab_ee_upgrades` to `available_gitlab_ee_midterm_upgrades` to have a better nomenclature.",1
106225780,2022-04-07 08:08:56.448,CI rspec job consistently fails with payment method related errors,"### Problem

Our Ci pipelines rspec job consistently started to fail on `2022-04-01` with payment method related errors. This prevents us from merging merge requests or sending merge requests into review.

Errors from a pipeline:

<details>

```
1) purchase new cloud subscriptions without payment methods successfully purchase a GitLab.com subscription
     Failure/Error: objects = IronBank::Actions::Create.call(type: 'PaymentMethod', objects: [instance.remote])
     IronBank::BadRequestError:
       Body: [{""Success""=>false, ""Errors""=>[{""Code""=>""INVALID_VALUE"", ""Message""=>""Expiration date must be a future date.""}]}]
     # ./spec/factories/z/payment_methods.rb:20:in `block (3 levels) in <top (required)>'
     # ./spec/factories/z/accounts.rb:27:in `block (4 levels) in <top (required)>'
     # ./spec/factories/customers.rb:23:in `block (4 levels) in <top (required)>'
     # ./spec/features/new_gitlab_subscription_spec.rb:22:in `block (2 levels) in <top (required)>'
     # ./spec/features/new_gitlab_subscription_spec.rb:26:in `block (2 levels) in <top (required)>'
  2) Payment Methods with payment methods removes the payment method
     Failure/Error: objects = IronBank::Actions::Create.call(type: 'PaymentMethod', objects: [instance.remote])
     IronBank::BadRequestError:
       Body: [{""Success""=>false, ""Errors""=>[{""Code""=>""INVALID_VALUE"", ""Message""=>""Expiration date must be a future date.""}]}]
     # ./spec/factories/z/payment_methods.rb:20:in `block (3 levels) in <top (required)>'
     # ./spec/factories/z/accounts.rb:27:in `block (4 levels) in <top (required)>'
     # ./spec/factories/customers.rb:23:in `block (4 levels) in <top (required)>'
     # ./spec/features/payment_methods_spec.rb:89:in `block (3 levels) in <top (required)>'
     # ./spec/features/payment_methods_spec.rb:36:in `block (2 levels) in <top (required)>'
  3) purchase new EE Subscriptions when payment method does not exist successfully purchase an EE subscription
     Failure/Error: objects = IronBank::Actions::Create.call(type: 'PaymentMethod', objects: [instance.remote])
     IronBank::BadRequestError:
       Body: [{""Errors""=>[{""Message""=>""Expiration date must be a future date."", ""Code""=>""INVALID_VALUE""}], ""Success""=>false}]
     # ./spec/factories/z/payment_methods.rb:20:in `block (3 levels) in <top (required)>'
     # ./spec/factories/z/accounts.rb:27:in `block (4 levels) in <top (required)>'
     # ./spec/factories/customers.rb:23:in `block (4 levels) in <top (required)>'
     # ./spec/features/new_ee_subscription_spec.rb:6:in `block (2 levels) in <top (required)>'
     # ./spec/features/new_ee_subscription_spec.rb:11:in `block (2 levels) in <top (required)>'

6324 examples, 3 failures, 1 pending
Failed examples:
rspec ./spec/features/new_gitlab_subscription_spec.rb:57 # purchase new cloud subscriptions without payment methods successfully purchase a GitLab.com subscription
rspec ./spec/features/payment_methods_spec.rb:99 # Payment Methods with payment methods removes the payment method
rspec ./spec/features/new_ee_subscription_spec.rb:39 # purchase new EE Subscriptions when payment method does not exist successfully purchase an EE subscription
```

</details>

**Note:** This issue was created afterwards. Investigation happened in this [Slack thread](https://gitlab.slack.com/archives/C029YFPUA6M/p1648805872934929).

### Proposal

Investigate the root cause and work on a fix.

### Result

Fixed CI pipelines and unblock merge request merges and merge requests in general.

### Next steps (if any)

Investigate the failure.

### How will we measure success?

Green pipeline results for the `rspec` job",3
106142354,2022-04-06 05:51:31.044,CreateAccountWorker does not retry when SFDC credentials are wrong,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

While checking the logs for https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4154, we noticed that our [`Salesforce::CreateAccountWorker`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/app/workers/salesforce/create_account_worker.rb) didn't retry the jobs that failed while production was using the outdated credentials.

All the workers enqueued during that window encountered a `Restforce::AuthenticationError: invalid_grant: authentication failure (400)` which made them fail while attempting to create the account object for new customers. 

We have error handling code in [`Salesforce::CreateAccountWorker`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/46edc01d6ac41b279668c10a15f06a4aef6e5edc/app/workers/salesforce/create_account_worker.rb#L25-29) but because the error rescued by the worker (`Salesforce::AccountCreationError`) doesn't match any of the [rescuable codes](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/46edc01d6ac41b279668c10a15f06a4aef6e5edc/lib/errors.rb#L43-50), then it isn't re-raised to be retried later. We only see the error logged and the job is 'done'.

Ideally, these jobs could have been retried by Sidekiq the same way we have retries on opportunity creation so the accounts could be created when the integration user's credentials were updated in production.

**Why does the [`CreateOpportunityWorker`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/c14f55f61a1b7e58962cd046378e3c4f2cb3638d/app/workers/salesforce/create_opportunity_worker.rb) retry these errors?**
 
When there is an error during the `Salesforce::CreateOpportunityObjectsService` execution (in this case the invalid grant) there is a `Salesforce::OpportunityNotCreated` error [raised](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/c14f55f61a1b7e58962cd046378e3c4f2cb3638d/app/services/salesforce/create_opportunity_objects_service.rb#L134). Since [`Errors.rescuable_classes`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/c14f55f61a1b7e58962cd046378e3c4f2cb3638d/lib/errors.rb#L59-61) contains `Salesforce::OpportunityNotCreated`, this error is seen as [retryable](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/c14f55f61a1b7e58962cd046378e3c4f2cb3638d/app/workers/concerns/integration_worker.rb#L23).

On the other hand, the error raised by the `Salesforce::CreateAccountWorker` - [`Salesforce::AccountCreationError`](app/workers/salesforce/create_account_worker.rb) - is not seen as retryable.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Surface the errors rescued in services like [`CreateSalesforceAccountService`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/46edc01d6ac41b279668c10a15f06a4aef6e5edc/app/services/create_salesforce_account_service.rb#L15) and [`CreateSalesforceAccountWithPlaceholderEmailService`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/46edc01d6ac41b279668c10a15f06a4aef6e5edc/app/services/create_salesforce_account_with_placeholder_email_service.rb) through their response hash. 

If we send the error message of the error rescued along with `success: true|false` we could pass that information as the error message for the [`Salesforce::AccountCreationError`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/46edc01d6ac41b279668c10a15f06a4aef6e5edc/app/workers/salesforce/create_account_worker.rb#L48) in this example. This would give us more insight into the actual error that happened and also allow us to check that message against the list of rescuable codes. 

:pushpin: Even if we didn't want to retry `invalid_grant` issues, we could still use that information when encountering other rescuable  errors inside other services. With the current way we raise the `Salesforce::AccountCreationError` we don't pass any message so it really isn't matching the error codes anyway.

### Result

### Next steps (if any)

### How will we measure success?",3
106044484,2022-04-04 15:27:56.634,Fulfillment Orders UAT 3 (sales-engaged use cases missed from Orders UAT 2),"### Problem
Sales-engaged [end-to-end Orders UAT](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/intake/-/issues/554) is not yet completed for the estimated 2022.05 go-live. 

### Proposal

https://gitlab.com/groups/gitlab-com/business-technology/enterprise-apps/-/epics/80#note_887981775

- Fulfillment to define Fulfillment Purchasing and Licensing expected behavior (current state behavior) for the following sales-engaged use cases
- Fulfillment to observe sales-engaged use cases and provide approval for the deploy of Orders Harmonization to production

| TC #      | Business Line | Business Type | Type of Sale | Term        | Ramping  | Ramp Segment | License Type                       |
|-----------|---------------|---------------|--------------|-------------|----------|--------------|------------------------------------|
| TC-OH-F01 | Sales-Engaged | 1 - New       | Partner      | Standard 12 | Non-Ramp | N/A          | SaaS + Add On (Storage)            |
| TC-OH-F02 | Sales-Engaged | 1 - New       | Direct       | MY          | Ramp     | 1            | SaaS + Add On (CI Minutes) |
| TC-OH-F03 | Sales-Engaged | 1 - New       | Direct       | MY          | Ramp     | 2            | SaaS + Add On (CI Minutes) |
| TC-OH-F04 | Sales-Engaged | 1 - New       | Direct       | Standard 12 | Non-Ramp | N/A          | Add On (Professional Service)      |
| TC-OH-F05 | Sales-Engaged | 1 - New       | Direct       | Standard 12 | Non-Ramp | N/A          | Self-Managed |
| TC-OH-F06 | Sales-Engaged | 2 - Add On    | Partner      | Standard 12 | Non-Ramp | N/A          | SaaS + Add On (Storage) |
| TC-OH-F07 | Sales-Engaged | 2 - Add On    | Direct       | MY          | Ramp     | 1            | SaaS + Add On (CI Minutes) |
| TC-OH-F08 | Sales-Engaged | 2 - Add On    | Direct       | Standard 12 | Non-Ramp | N/A          | Self-Managed |
| TC-OH-F09 | Sales-Engaged | 3 - Renewal   | Partner      | MY          | Non-Ramp | N/A          | SaaS + Add On (TrueUp) |
| TC-OH-F10 | Sales-Engaged | 3 - Renewal   | Direct       | Standard 12 | Non-Ramp | N/A          | Self-Managed + Add On (TrueUp) |
| TC-OH-F11 | Sales-Engaged | 3 - Renewal   | Partner      | Standard 12 | Non-Ramp | N/A          | SaaS |

#### Test Case Steps

<details><summary>TC-OH-F01</summary>

| Step ID | Test Step   | Description | Expected Outcome | Testable? | Pass/Fail |
|---------|--------|----|----------|:---:|:---:|
| T-0     | Sales-assisted deal created | Ent Apps to create a new sales-assisted deal in the staging environment (Zuora Central Sandbox).  The subscription should have a SaaS product, plus a storage add-on. The Sold To Contact for the subscription will use an alias of @a_luna's email which you can reference in [this spreadsheet](https://docs.google.com/spreadsheets/d/1NDtGfwqOOpZN534RHJjG9vrAMxM9jfY8ilgMklr0FQ4/edit#gid=326551592).| The subscription and customer can be found in Zuora Central Sandbox.  Verify the Order callout was triggered and successful from the Customer Account page in Zuora. | Y | |
| T-1     | Receive namespace instructions email | The email address referenced in the UAT spreadsheet should have received an email from CustomersDot instructing the customer to link their new subscription with a GL.com namespace. | Verify the email was received with instructions to link the subscription with a namespace. | Y | |
| T-2     | Register a GL.com User | Navigate to https://staging.gitlab.com/ and register a new user with the testing email address.  Create a new group with this user.  This will be used later to link to the subscription. | The Billing page for this new Group shows a Group is able to be upgraded to Premium or Ultimate.  | Y | |
| T-3     | Complete the provision through Support | Since this is a subscription purchased from a reseller, the customer is not supposed to be able to log in to CustomersDot to link their subscription. The email instructs to contact Support so we should go through the steps detailed in the [Provisioning subscriptions for reseller customers](https://about.gitlab.com/handbook/support/license-and-renewals/workflows/saas/associate_subscription_and_namespace.html#provisioning-subscriptions-for-reseller-customers) guide. | Purchased subscription should be linked to the correct namespace | Y |
| T-4     | View Billing page | Navigate to Group's Billing page in staging.gitlab.com. | The Group should be shown as ""currently using the Premium SaaS Plan (Formerly Silver)"". The subscription details table should show  ""Seats in subscription"" as 1 (unless more were purchased in the order). | Y | |
| T-5     | View Storage on Usage Quotas page | Navigate to Group's Usage Quotas page in staging.gitlab.com, then click the Storage tab. | Verify the purchased storage synced and the amount shown is correct based on the order. | Y | |

</details>

<details><summary>TC-OH-F02</summary>

| Step ID | Test Step   | Description | Expected Outcome | Testable? | Pass/Fail |
|---------|--------|----|----------|:---:|:---:|
| T-0     | Sales-assisted deal created | Ent Apps to create a new sales-assisted deal in the staging environment (Zuora Central Sandbox).  The subscription should have a SaaS product, plus a CI Minutes add-on. The Sold To Contact for the subscription will use an alias of @a_luna's email which you can reference in [this spreadsheet](https://docs.google.com/spreadsheets/d/1NDtGfwqOOpZN534RHJjG9vrAMxM9jfY8ilgMklr0FQ4/edit#gid=326551592). This subscription will be setup as a sales-assisted ramps workaround, where this subscription represents the first ramp year. | The subscription and customer can be found in Zuora Central Sandbox.  Verify the Order callout was triggered and successful from the Customer Account page in Zuora. | Y | |
| T-1     | Receive welcome email | The email address referenced in the UAT spreadsheet should have received a welcome email from CustomersDot instructing the customer to reset their password. | Reset the password for this customer account and you should be able to login to CustomersDot.  | Y | |
| T-2     | Receive namespace instructions email | The email address referenced in the UAT spreadsheet should have received an email from CustomersDot instructing the customer to link their new subscription with a GL.com namespace. | Verify the email was received with instructions to link the subscription with a namespace. | Y | |
| T-3     | View the subscription | Login to CustomersDot after resetting your password.  You should see the subscription with valid information listed on the ""Manage Subscriptions"" page in CustomersDot.  There should be an option to link the subscription with a namespace. | The Manage Subscriptions page shows the subscription.  | Y | |
| T-4     | Register a GL.com User | Navigate to https://staging.gitlab.com/ and register a new user with the testing email address.  Create a new group with this user.  This will be used later to link to the subscription. | The Billing page for this new Group shows a Group is able to be upgraded to Premium or Ultimate.  | Y | |
| T-5     | Link the CustomersDot Customer with the GL.com User account | Back in CustomersDot, you should be able to link your CustomersDot Customer Account with your newly created GL.com User (staging).  Click the ""My Account"" button in the top nav bar, then click the ""Account details"" option.  Expand the ""Your GitLab.com account"" section and follow the steps for linking the account. | The CDot customer account should be linked with the GL.com user account. | Y | |
| T-6     | Link the Subscription with a namespace | Navigate to the ""Manage Subscription"" page in CustomersDot staging and find the subscription. Click the ""Change linked namespace"" button.  Select the group created on step T-4 and confirm the changes. | The subscription should now be linked to the group.  You should see the group name listed on the Manage Subscriptions page. | Y | |
| T-7     | View Billing page | Navigate to Group's Billing page in staging.gitlab.com. | The Group should be shown as ""currently using the Premium SaaS Plan (Formerly Silver)"". The subscription details table should show  ""Seats in subscription"" as 1 (unless more were purchased in the order). | Y | |
| T-8     | View Pipeline Minutes on Usage Quotas page | Navigate to Group's Usage Quotas page in staging.gitlab.com, then click the Pipelines tab. | Verify the purchased minutes synced and the amount shown is correct based on the order. | Y | |

</details>

<details><summary>TC-OH-F03</summary>

| Step ID | Test Step   | Description | Expected Outcome | Testable? | Pass/Fail |
|---------|--------|----|----------|:---:|:---:|
| T-0     | Sales-assisted deal created | Ent Apps to create a new sales-assisted deal in the staging environment (Zuora Central Sandbox).  The subscription should have a SaaS product, plus a CI Minutes add-on. The Sold To Contact for the subscription will use an alias of @a_luna's email which you can reference in [this spreadsheet](https://docs.google.com/spreadsheets/d/1NDtGfwqOOpZN534RHJjG9vrAMxM9jfY8ilgMklr0FQ4/edit#gid=326551592). This subscription will be setup as a sales-assisted ramps workaround, where this subscription represents the second ramp year. | The subscription and customer can be found in Zuora Central Sandbox.  Verify the Order callout was triggered and successful from the Customer Account page in Zuora. | Y | |
| T-1     | Receive welcome email | The email address referenced in the UAT spreadsheet should have received a welcome email from CustomersDot instructing the customer to reset their password. | Reset the password for this customer account and you should be able to login to CustomersDot.  | Y | |
| T-2     | Receive namespace instructions email | The email address referenced in the UAT spreadsheet should have received an email from CustomersDot instructing the customer to link their new subscription with a GL.com namespace. | Verify the email was received with instructions to link the subscription with a namespace. | Y | |
| T-3     | View the subscription | Login to CustomersDot after resetting your password.  You should see the subscription with valid information listed on the ""Manage Subscriptions"" page in CustomersDot.  There should be an option to link the subscription with a namespace. | The Manage Subscriptions page shows the subscription.  | Y | |
| T-4     | Register a GL.com User | Navigate to https://staging.gitlab.com/ and register a new user with the testing email address.  Create a new group with this user.  This will be used later to link to the subscription. | The Billing page for this new Group shows a Group is able to be upgraded to Premium or Ultimate.  | Y | |
| T-5     | Link the CustomersDot Customer with the GL.com User account | Back in CustomersDot, you should be able to link your CustomersDot Customer Account with your newly created GL.com User (staging).  Click the ""My Account"" button in the top nav bar, then click the ""Account details"" option.  Expand the ""Your GitLab.com account"" section and follow the steps for linking the account. | The CDot customer account should be linked with the GL.com user account. | Y | |
| T-6     | Link the Subscription with a namespace | Navigate to the ""Manage Subscription"" page in CustomersDot staging and find the subscription. Click the ""Change linked namespace"" button.  Select the group created on step T-4 and confirm the changes. | The subscription should now be linked to the group.  You should see the group name listed on the Manage Subscriptions page. | Y | |
| T-7     | View Billing page | Navigate to Group's Billing page in staging.gitlab.com. | The Group should be shown as ""currently using the Premium SaaS Plan (Formerly Silver)"". The subscription details table should show  ""Seats in subscription"" as 1 (unless more were purchased in the order). | Y | |
| T-8     | View Pipeline Minutes on Usage Quotas page | Navigate to Group's Usage Quotas page in staging.gitlab.com, then click the Pipelines tab. | Verify the purchased minutes synced and the amount shown is correct based on the order. | Y | |

</details>

<details><summary>TC-OH-F04</summary>

| Step ID | Test Step   | Description | Expected Outcome | Testable? | Pass/Fail |
|---------|--------|----|----------|:---:|:---:|
| T-0     | Sales-assisted deal created | Ent Apps to create a new sales-assisted deal in the staging environment (Zuora Central Sandbox).  The subscription should only have a profesional service add-on. The Sold To Contact for the subscription will use an alias of @a_luna's email which you can reference in [this spreadsheet](https://docs.google.com/spreadsheets/d/1NDtGfwqOOpZN534RHJjG9vrAMxM9jfY8ilgMklr0FQ4/edit#gid=326551592).| The subscription and customer can be found in Zuora Central Sandbox.  Verify the Order callout was triggered and successful from the Customer Account page in Zuora. | Y | |
| T-1     | Receive welcome email | The email address referenced in the UAT spreadsheet should have received a welcome email from CustomersDot instructing the customer to reset their password.  You should not receive any other emails from CDot related to this purchase. | Reset the password for this customer account and you should be able to login to CustomersDot.  | Y | |
| T-2     | View the subscription | Login to CustomersDot after resetting your password.  You should see the subscription with valid information listed on the ""Manage Subscriptions"" page in CustomersDot.  The subscription should not show an option for linking the subscription with a namespace since it is a professional service. | The Manage Subscriptions page shows the subscription.  | Y | |

</details>

<details><summary>TC-OH-F05</summary>

| Step ID | Test Step   | Description | Expected Outcome | Testable? | Pass/Fail |
|---------|--------|----|----------|:---:|:---:|
| T-0     | Sales-assisted deal created | Ent Apps to create a new sales-assisted deal in the staging environment (Zuora Central Sandbox).  The subscription should have a Self-Managed product. The Sold To Contact for the subscription will use an alias of @a_luna's email which you can reference in [this spreadsheet](https://docs.google.com/spreadsheets/d/1NDtGfwqOOpZN534RHJjG9vrAMxM9jfY8ilgMklr0FQ4/edit#gid=326551592). | The subscription and customer can be found in Zuora Central Sandbox.  Verify the Order callout was triggered and successful from the Customer Account page in Zuora. | Y | |
| T-1     | Receive welcome email | The email address referenced in the UAT spreadsheet should have received a welcome email from CustomersDot instructing the customer to reset their password. | Reset the password for this customer account and you should be able to login to CustomersDot.  | Y | |
| T-2     | Receive license email | The email address referenced in the UAT spreadsheet should have received an email from CustomersDot with activation instructions (e.g. activation code unless cloud licensing is disabled). | Verify the email was received with instructions on how to activate. | Y | |
| T-3     | View the subscription | Login to CustomersDot after resetting your password.  You should see the subscription with valid information listed on the ""Manage Subscriptions"" page in CustomersDot.  You should see the activation code (unless cloud licensing is disabled). | The Manage Subscriptions page shows the subscription with correct information and license activation code and/or license file. | Y | |

</details>

<details><summary>TC-OH-F06</summary>

| Step ID | Test Step   | Description | Expected Outcome | Testable? | Pass/Fail |
|---------|--------|----|----------|:---:|:---:|
| T-0     | Sales-assisted deal created | Ent Apps to create a sales-assisted deal in the staging environment (Zuora Central Sandbox).  The subscription should start with a SaaS product, and a storage add-on as well (confirm with Mark). The Sold To Contact for the subscription will use an alias of @a_luna's email which you can reference in [this spreadsheet](https://docs.google.com/spreadsheets/d/1NDtGfwqOOpZN534RHJjG9vrAMxM9jfY8ilgMklr0FQ4/edit#gid=326551592). | The subscription and customer can be found in Zuora Central Sandbox.  Verify the Order callout was triggered and successful from the Customer Account page in Zuora. | Y | |
| T-1     | Receive namespace instructions email | The email address referenced in the UAT spreadsheet should have received an email from CustomersDot instructing the customer to link their new subscription with a GL.com namespace. | Verify the email was received with instructions to link the subscription with a namespace. | Y | |
| T-2     | Register a GL.com User | Navigate to https://staging.gitlab.com/ and register a new user with the testing email address.  Create a new group with this user.  This will be used later to link to the subscription. | The Billing page for this new Group shows a Group is able to be upgraded to Premium or Ultimate.  | Y | |
| T-3     | Complete the provision through Support | Since this is a subscription purchased from a reseller, the customer is not supposed to be able to log in to CustomersDot to link their subscription. The email instructs to contact Support so we should go through the steps detailed in the [Provisioning subscriptions for reseller customers](https://about.gitlab.com/handbook/support/license-and-renewals/workflows/saas/associate_subscription_and_namespace.html#provisioning-subscriptions-for-reseller-customers) guide. | Purchased subscription should be linked to the correct namespace | Y |
| T-4     | View Billing page | Navigate to Group's Billing page in staging.gitlab.com. | The Group should be shown as ""currently using the Premium SaaS Plan (Formerly Silver)"". The subscription details table should show  ""Seats in subscription"" as 1 (unless more were purchased in the order). | Y | |
| T-5     | View Storage on Usage Quotas page | Navigate to Group's Usage Quotas page in staging.gitlab.com, then click the Storage tab. | Verify the purchased storage synced and the amount shown is correct based on the order. At this point, we should reach out to Ent Apps to inform them we are ready for the sales-assisted add-on order. | Y | |
| T-6     | Sales-assisted add-on deal created | Ent Apps to create a sales-assisted add-on deal to add seats to the subscription in the staging environment (Zuora Central Sandbox). | Verify the Order callout was triggered and successful from the Customer Account page in Zuora. | Y | |
| T-7    | View Billing page | Refresh the Group's Billing page in staging.gitlab.com. | The Group should still show ""currently using the Premium SaaS Plan (Formerly Silver)"" but with additional seats in the subscription. | Y | |

</details>

<details><summary>TC-OH-F07</summary>

| Step ID | Test Step   | Description | Expected Outcome | Testable? | Pass/Fail |
|---------|--------|----|----------|:---:|:---:|
| T-0     | Sales-assisted deal created | Ent Apps to create a sales-assisted deal in the staging environment (Zuora Central Sandbox).  The subscription should start with a SaaS product, and a CI Minutes add-on as well (confirm with Mark). The Sold To Contact for the subscription will use an alias of @a_luna's email which you can reference in [this spreadsheet](https://docs.google.com/spreadsheets/d/1NDtGfwqOOpZN534RHJjG9vrAMxM9jfY8ilgMklr0FQ4/edit#gid=326551592). This subscription will be setup as a sales-assisted ramps workaround, where this subscription represents the first ramp year. | The subscription and customer can be found in Zuora Central Sandbox.  Verify the Order callout was triggered and successful from the Customer Account page in Zuora. | Y | |
| T-1     | Receive welcome email | The email address referenced in the UAT spreadsheet should have received a welcome email from CustomersDot instructing the customer to reset their password. | Reset the password for this customer account and you should be able to login to CustomersDot.  | Y | |
| T-2     | Receive namespace instructions email | The email address referenced in the UAT spreadsheet should have received an email from CustomersDot instructing the customer to link their new subscription with a GL.com namespace. | Verify the email was received with instructions to link the subscription with a namespace. | Y | |
| T-3     | View the subscription | Login to CustomersDot after resetting your password.  You should see the subscription with valid information listed on the ""Manage Subscriptions"" page in CustomersDot.  There should be an option to link the subscription with a namespace. | The Manage Subscriptions page shows the subscription.  | Y | |
| T-4     | Register a GL.com User | Navigate to https://staging.gitlab.com/ and register a new user with the testing email address.  Create a new group with this user.  This will be used later to link to the subscription. | The Billing page for this new Group shows a Group is able to be upgraded to Premium or Ultimate.  | Y | |
| T-5     | Link the CustomersDot Customer with the GL.com User account | Back in CustomersDot, you should be able to link your CustomersDot Customer Account with your newly created GL.com User (staging).  Click the ""My Account"" button in the top nav bar, then click the ""Account details"" option.  Expand the ""Your GitLab.com account"" section and follow the steps for linking the account. | The CDot customer account should be linked with the GL.com user account. | Y | |
| T-6     | Link the Subscription with a namespace | Navigate to the ""Manage Subscription"" page in CustomersDot staging and find the subscription. Click the ""Change linked namespace"" button.  Select the group created on step T-4 and confirm the changes. | The subscription should now be linked to the group.  You should see the group name listed on the Manage Subscriptions page. | Y | |
| T-7     | View Billing page | Navigate to Group's Billing page in staging.gitlab.com. | The Group should be shown as ""currently using the Premium SaaS Plan (Formerly Silver)"". The subscription details table should show  ""Seats in subscription"" as 1 (unless more were purchased in the order). | Y | |
| T-8     | View Pipeline Minutes on Usage Quotas page | Navigate to Group's Usage Quotas page in staging.gitlab.com, then click the Pipelines tab. | Verify the purchased minutes synced and the amount shown is correct based on the order. At this point, we should reach out to Ent Apps to inform them we are ready for the sales-assisted add-on order. | Y | |
| T-9     | Sales-assisted add-on deal created | Ent Apps to create a sales-assisted add-on deal to add seats to the subscription in the staging environment (Zuora Central Sandbox). | Verify the Order callout was triggered and successful from the Customer Account page in Zuora. | Y | |
| T-10    | View the subscription | Refresh the ""Manage Purchases"" page in CDot.  You should see the subscription with valid product and quantity listed. | The Manage Subscriptions page shows the subscription with correct product and quantity.  | Y | |
| T-11    | View Billing page | Refresh the Group's Billing page in staging.gitlab.com. | The Group should still show ""currently using the Premium SaaS Plan (Formerly Silver)"" but with additional seats in the subscription. | Y | |

</details>

<details><summary>TC-OH-F08</summary>

| Step ID | Test Step   | Description | Expected Outcome | Testable? | Pass/Fail |
|---------|--------|----|----------|:---:|:---:|
| T-0     | Sales-assisted deal created | Ent Apps to create a new sales-assisted deal in the staging environment (Zuora Central Sandbox).  The subscription should have a Self-Managed product. The Sold To Contact for the subscription will use an alias of @a_luna's email which you can reference in [this spreadsheet](https://docs.google.com/spreadsheets/d/1NDtGfwqOOpZN534RHJjG9vrAMxM9jfY8ilgMklr0FQ4/edit#gid=326551592).| The subscription and customer can be found in Zuora Central Sandbox.  Verify the Order callout was triggered and successful from the Customer Account page in Zuora. | Y | |
| T-1     | Receive welcome email | The email address referenced in the UAT spreadsheet should have received a welcome email from CustomersDot instructing the customer to reset their password. | Reset the password for this customer account and you should be able to login to CustomersDot.  | Y | |
| T-2     | Receive license email | The email address referenced in the UAT spreadsheet should have received an email from CustomersDot with activation instructions (e.g. activation code unless cloud licensing is disabled). | Verify the email was received with instructions on how to activate. | Y | |
| T-3     | View the subscription | Login to CustomersDot after resetting your password.  You should see the subscription with valid information listed on the ""Manage Subscriptions"" page in CustomersDot.  You should see the activation code (unless cloud licensing is disabled). | The Manage Subscriptions page shows the subscription. At this point, we should reach out to Ent Apps to inform them we are ready for the sales-assisted add on order.  | Y | |
| T-4     | Sales-assisted add on created | Ent Apps to create a sales-assisted add on order to add seats to the subscription in the staging environment (Zuora Central Sandbox). | Verify the Order callout was triggered and successful from the Customer Account page in Zuora. | Y | |
| T-5    | View the subscription | Refresh the ""Manage Purchases"" page in CDot.  You should see the subscription with valid product information listed with correct quantity. | The Manage Subscriptions page shows the subscription with correct product and quantity. | Y | |

</details>

<details><summary>TC-OH-F09</summary>

| Step ID | Test Step   | Description | Expected Outcome | Testable? | Pass/Fail |
|---------|--------|----|----------|:---:|:---:|
| T-0     | Sales-assisted deal created | Ent Apps to create a new sales-assisted deal in the staging environment (Zuora Central Sandbox).  The subscription should have a SaaS product. The Sold To Contact for the subscription will use an alias of @a_luna's email which you can reference in [this spreadsheet](https://docs.google.com/spreadsheets/d/1NDtGfwqOOpZN534RHJjG9vrAMxM9jfY8ilgMklr0FQ4/edit#gid=326551592).| The subscription and customer can be found in Zuora Central Sandbox.  Verify the Order callout was triggered and successful from the Customer Account page in Zuora. | Y | |
| T-1     | Receive namespace instructions email | The email address referenced in the UAT spreadsheet should have received an email from CustomersDot instructing the customer to link their new subscription with a GL.com namespace. | Verify the email was received with instructions to link the subscription with a namespace. | Y | |
| T-2     | Register a GL.com User | Navigate to https://staging.gitlab.com/ and register a new user with the testing email address.  Create a new group with this user.  This will be used later to link to the subscription. | The Billing page for this new Group shows a Group is able to be upgraded to Premium or Ultimate.  | Y | |
| T-3     | Complete the provision through Support | Since this is a subscription purchased from a reseller, the customer is not able to log in to CustomersDot to link their subscription. The email instructs to contact Support so we should go through the steps detailed in the [Provisioning subscriptions for reseller customers](https://about.gitlab.com/handbook/support/license-and-renewals/workflows/saas/associate_subscription_and_namespace.html#provisioning-subscriptions-for-reseller-customers) guide. | Purchased subscription should be linked to the correct namespace | Y |
| T-4     | View Billing page | Navigate to Group's Billing page in staging.gitlab.com. | The Group should be shown as ""currently using the Premium SaaS Plan (Formerly Silver)"". The subscription details table should show  ""Seats in subscription"" as 1 (unless more were purchased in the order). At this point, we should reach out to Ent Apps to inform them we are ready for the sales-assisted renewal order. | Y | |
| T-5     | Sales-assisted renewal created | Ent Apps to create a sales-assisted renewal in the staging environment (Zuora Central Sandbox).  The subscription will now have renewed term along with a true up product. | Verify the Order callout was triggered and successful from the Customer Account page in Zuora. | Y | |
| T-6    | View Billing page | Navigate to Group's Billing page in staging.gitlab.com. | The Group should still show ""currently using the Premium SaaS Plan (Formerly Silver)"". Depending on when the renewed term starts, the subscription start and end date may not be updated yet.  If the renewal date is in the future, CDot would wait to sync this on the term start date. | Y | |

</details>

<details><summary>TC-OH-F10</summary>

| Step ID | Test Step   | Description | Expected Outcome | Testable? | Pass/Fail |
|---------|--------|----|----------|:---:|:---:|
| T-0     | Sales-assisted deal created | Ent Apps to create a new sales-assisted deal in the staging environment (Zuora Central Sandbox).  The subscription should have a Self-Managed product. The Sold To Contact for the subscription will use an alias of @a_luna's email which you can reference in [this spreadsheet](https://docs.google.com/spreadsheets/d/1NDtGfwqOOpZN534RHJjG9vrAMxM9jfY8ilgMklr0FQ4/edit#gid=326551592).| The subscription and customer can be found in Zuora Central Sandbox.  Verify the Order callout was triggered and successful from the Customer Account page in Zuora. | Y | |
| T-1     | Receive welcome email | The email address referenced in the UAT spreadsheet should have received a welcome email from CustomersDot instructing the customer to reset their password. | Reset the password for this customer account and you should be able to login to CustomersDot.  | Y | |
| T-2     | Receive license email | The email address referenced in the UAT spreadsheet should have received an email from CustomersDot with activation instructions (e.g. activation code unless cloud licensing is disabled). | Verify the email was received with instructions on how to activate. | Y | |
| T-3     | View the subscription | Login to CustomersDot after resetting your password.  You should see the subscription with valid information listed on the ""Manage Subscriptions"" page in CustomersDot.  You should see the activation code (unless cloud licensing is disabled). | The Manage Subscriptions page shows the subscription. At this point, we should reach out to Ent Apps to inform them we are ready for the sales-assisted renewal order.  | Y | |
| T-4     | Sales-assisted renewal created | Ent Apps to create a sales-assisted renewal in the staging environment (Zuora Central Sandbox).  The subscription will now have renewed term along with a true up product. | Verify the Order callout was triggered and successful from the Customer Account page in Zuora. | Y | |
| T-5    | View the subscription | Refresh the ""Manage Purchases"" page in CDot.  You should see the subscription with valid product information listed.  The term start and end dates should reflect the renewed term. | The Manage Subscriptions page shows the subscription with updated terms.  | Y | |

</details>

<details><summary>TC-OH-F11</summary>

| Step ID | Test Step   | Description | Expected Outcome | Testable? | Pass/Fail |
|---------|--------|----|----------|:---:|:---:|
| T-0     | Sales-assisted deal created | Ent Apps to create a new sales-assisted deal in the staging environment (Zuora Central Sandbox).  The subscription should have a SaaS product. The Sold To Contact for the subscription will use an alias of @a_luna's email which you can reference in [this spreadsheet](https://docs.google.com/spreadsheets/d/1NDtGfwqOOpZN534RHJjG9vrAMxM9jfY8ilgMklr0FQ4/edit#gid=326551592).| The subscription and customer can be found in Zuora Central Sandbox.  Verify the Order callout was triggered and successful from the Customer Account page in Zuora. | Y | |
| T-1     | Receive namespace instructions email | The email address referenced in the UAT spreadsheet should have received an email from CustomersDot instructing the customer to link their new subscription with a GL.com namespace. | Verify the email was received with instructions to link the subscription with a namespace. | Y | |
| T-2     | Register a GL.com User | Navigate to https://staging.gitlab.com/ and register a new user with the testing email address.  Create a new group with this user.  This will be used later to link to the subscription. | The Billing page for this new Group shows a Group is able to be upgraded to Premium or Ultimate.  | Y | |
| T-3     | Complete the provision through Support | Since this is a subscription purchased from a reseller, the customer is not supposed to be able to log in to CustomersDot to link their subscription. The email instructs to contact Support so we should go through the steps detailed in the [Provisioning subscriptions for reseller customers](https://about.gitlab.com/handbook/support/license-and-renewals/workflows/saas/associate_subscription_and_namespace.html#provisioning-subscriptions-for-reseller-customers) guide. | Purchased subscription should be linked to the correct namespace | Y |
| T-4     | View Billing page | Navigate to Group's Billing page in staging.gitlab.com. | The Group should be shown as ""currently using the Premium SaaS Plan (Formerly Silver)"". The subscription details table should show  ""Seats in subscription"" as 1 (unless more were purchased in the order). At this point, we should reach out to Ent Apps to inform them we are ready for the sales-assisted renewal order. | Y | |
| T-5     | Sales-assisted renewal created | Ent Apps to create a sales-assisted renewal in the staging environment (Zuora Central Sandbox).  The subscription will now have renewed term. | Verify the Order callout was triggered and successful from the Customer Account page in Zuora. | Y | |
| T-6    | View Billing page | Navigate to Group's Billing page in staging.gitlab.com. | The Group should still show ""currently using the Premium SaaS Plan (Formerly Silver)"". Depending on when the renewed term starts, the subscription start and end date may not be updated yet.  If the renewal date is in the future, CDot would wait to sync this on the term start date. | Y | |

</details>

### Testing Status

Update the table below with the testing status (see legend below) as you progress through your use cases.

| Use Case ID | Tester | Status | Test Results |                                                                                       
|-------------|--------------|-----|-----|
| TC-OH-F01 | `@a_luna` | :white_check_mark:  | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4157#note_916077786 | 
| TC-OH-F02 | `@a_luna` | :white_check_mark: | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4157#note_916112125 |
| TC-OH-F03 | `@a_luna` | :white_check_mark: | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4157#note_919077837 |
| TC-OH-F04 | `@a_luna` | :white_check_mark:| https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4157#note_917240828 |
| TC-OH-F05 | `@a_luna` | :white_check_mark: | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4157#note_917368701 |
| TC-OH-F06 | `@a_luna` | :x: | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4157#note_918876662 <br> Failure explained [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4157#note_923108372) and not related to OH specifically |
| TC-OH-F07 | `@a_luna` | :x: | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4157#note_918942014 <br> Failure explained [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4157#note_923108372) and not related to OH specifically |
| TC-OH-F08 | `@a_luna` | :white_check_mark: | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4157#note_919089342 |
| TC-OH-F09 | `@a_luna` | :white_check_mark: | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4157#note_919090475 |
| TC-OH-F10 | `@a_luna` | :white_check_mark: | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4157#note_921481406 |
| TC-OH-F11 | `@a_luna` | :white_check_mark:  | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4157#note_921511297 |

<details><summary>Testing Status Legend</summary>

| Emoji | Status |
| ------ | ------ |
| :white_check_mark: | Completed & Passed |
| :x: | Completed with some failures |
| :no_entry: | Blocked |
| :hourglass: | In progress |
| :white_large_square: | Not started |

</details>

### Documenting Testing Results

Each test case should have a single comment in this issue to document the results. 

- Create issues for anything noticed during testing.
- In the comment cell, add a link for each object created during the test (e.g. salesforce account, opportunity, subscription, group, etc.)

Utilize the following template for your comment:

| Step ID | Comments | Pass/Fail | Issues Created |
|---|---|---|---|
| T-7 | Followed steps as described | Fail | `#12345` <br> <br> `#98765` |",5
106020076,2022-04-04 09:57:08.608,Remove reconciliations feature flag,"### Problem

In https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4545#note_898092068, it came up that the [`reconciliations` feature flag](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/60/edit) is quite old and could probably be removed.

The feature flag has been enabled in production for a couple of months now (can't find a comment for a specific date). There are about 8 places in the code that are using the feature flag.

### Proposal

Remove the `reconciliations` feature flag and all related code places from the code. After removing it from the code, delete the feature flag config https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/60/edit.

### Result

Removing a feature flag and technical debt.

Once removed, we can update the feature flag cleanup epic: https://gitlab.com/groups/gitlab-org/-/epics/8672.",2
105852849,2022-04-01 03:19:09.881,User with Maintainer role can start trial for a Group,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you're about to submit isn't a duplicate.

Do not include confidential information!
--->

# Bug

## Summary

Normally, only group Owner should be able to start a trial for a group. There's a loophole that allow users with `Maintainer` role to take out a trial for the group without having access to Group Billing page.

## Steps to reproduce

1. User A create a new group ABC
1. User A invite User B as a member of group ABC with `Maintainer` role

As User B

1. Signed into GitLab.com in the browser
1. Navigate to https://about.gitlab.com/free-trial/
1. Click on the `Continue with SaaS` button
1. Fill in the form and click `Continue`
1. See the Ultimate trial provisioned for the group

## What is the current *bug* behavior?

Users with Maintainer role can take out trial for a group.

## What is the expected *correct* behavior?

Only group Owner should be able to take out trial. 

## Relevant logs and/or screenshots

(Paste any relevant logs - please use code blocks (```) to format console output,
logs, and code as it's tough to read otherwise.)

## Workarounds

(Ways to get around the issue)

## Reported examples

1. https://gitlab.zendesk.com/agent/tickets/279237
1.
1.

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",3
105836163,2022-03-31 18:04:23.020,All SFDC Quotes should be marked as Primary,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

The current Quote [attributes](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/6601a127323e7fb3826d1a906f369015ef12b814/app/services/salesforce/create_quote_service.rb#L59-75) we send to SFDC do not include the `zqu__Primary__c` field. 

This field is required for an automation to be able to mark Opportunities as `IS EDU / OSS` and since it's currently not set, the automation doesn't update that field for the expected opportunities.

More details in https://gitlab.com/gitlab-com/sales-team/field-operations/systems/-/issues/1976#note_896371050.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Add `zqu__Primary__c: true` to the Quote [attributes](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/6601a127323e7fb3826d1a906f369015ef12b814/app/services/salesforce/create_quote_service.rb#L59-75).

### Result

### Next steps (if any)

### How will we measure success?",2
105828851,2022-03-31 15:03:43.705,"Follow-up from ""Use customer object from order subscription name""","The following discussion from !4452 should be addressed:

- [ ] @ddavison started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4452#note_885897739):  (+7 comments)

    > Shortening this seems confusing to me. What do you think about using the full word `customer`? 
    > 
    > ```suggestion:-0+0
    >   def subscription(reload: false, customer: customer)
    > ```",2
105651226,2022-03-29 01:58:41.292,[Community Programs Renewal] API changes to renew community program subscriptions,"Update subscription API currently doesn't accept coupon codes, therefore can't renew community subscriptions

# Requirements

The API should:

   * Accept coupon code
   * Validate coupon code
       - Should be active
       - Should be one of the generated coupons (should exist in the database) 
       - Shouldn't have been already redeemed
   * Raise a validation error for invalid coupons
   * Renew a community program subscription with a coupon code
   * Mark the coupon code as redeemed once used

We need to make sure standard subscription renewal behaviour is unchanged since the code changes for standard and community program renewals are in the same area",2
105589181,2022-03-28 04:25:33.675,Seat overage notification cannot find subscription when account ID is missing,"### Problem

This is a follow up from https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4120+ and is likely dependent on https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4452+.

Currently, for some `Order` records, when we call `order.current_subscription` we get `nil` returned as the `account_id` is blank. 

Qingyu has already done an investigation of this here (https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4120#note_889020095):

> Yes this is a known data integrity issue:
> 
> * `order.customer.zuora_account_id` is `nil`, OR,
> * `order.customer.zuora_account_id` does not match `zuora_subscription.account_id`
>   * NOTE: `zuora_subscription` should purely calculated by `order.subscription_name/subscription_id`. Such as `Zuora::Subscription.find_by(name: order.subscription_name)`.
>   * BTW: We have `order.zuora_account_id` to speed up some queries in certain scenarios. But sadly, I've seen `order.zuora_account_id` is also not maintained correctly sometimes.
> 
> This is a subset of the issue https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1874+.
> 
> AFAIK, the first area we start to fix this problem is: in reconciliation https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3865+
> 
> * this is limited to reconciliation, and,
> * this is just the first iteration in the reconciliation area.
> 
> We believe we can detach `Order` and `Customer` in QSR. For other areas(outside of QSR), we still need to evaluate the impact > as part of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1874+.


### Proposal

https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4452+ is already being worked on to address this for reconciliation.

Once this is completed, we should be able to call `reconciliation.subscription` rather than [`order.current_subscription`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/3f4a30f72962aa0dbda3dd8f0eed05681262116d/app/services/reconciliations/send_seat_overage_notification_service.rb#L45) in the notification service and benefit from that work here too.",2
105489281,2022-03-25 10:30:54.098,Handle seat overage notification unable to find subscription,"See https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/3239505/?referrer=gitlab_plugin

## Summary

When seat overage notification is triggered, a small number of these causes error because subscription cannot be found.

Taking subscription `A-S00010110` as an example, due to its `order.customer.zuora_account_id` being nil, the `order.current_subscription` will also return nil. This caused the exception. (p.s. `order.zuora_account_id` is present though).

We will need to investigate

1. if this is a purely random data integrity
1. if this can be recovered, or should be properly ignored

This is currently not severe, because mailing operation is new and is stopped half-way through, therefore no customer is being affected.",2
105445692,2022-03-24 17:29:22.458,Create CloudActivation record immediately as part of web direct purchase,"### Problem

An activation code for SM subscriptions are found in the `CloudActivation` model with a matching `subscription_name`.  These records much be created in order for the activation code to be shown in CustomersDot for a cloud licensing capable SM subscription.  

Currently, the `CloudActivation` record is created [when processing the Zuora callout](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/16e4f22fab6a4dfddfcff6f318241c2e67281b8d/app/workers/zuora_callback_worker.rb#L24) after a purchase/update is processed in Zuora. We've found at times there is a noticeable delay between the time of purchase and the time the callout is processed.  This could be because of a delay in Zuora sending the callout or a delay in CustomersDot processing it.  

When this happens, the customer sees the license file as the only method for activating their subscription, until the callout can be processed.

### Proposal

It would be better to create the `CloudActivation` as part of the initial purchase in the `SubscriptionsController`, [similar to how an order is created](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/343aa1c9ae880946b2aff53ed8c3a71628d0318a/app/controllers/subscriptions_controller.rb#L260).  This will ensure the activation code is present immediately after purchase.",1
105383704,2022-03-23 23:26:20.908,Errors on Contact and OpportunityContactRole creation enqueue unnecessary retries of Opportunity creation,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Current logic in [`Salesforce::CreateOpportunityService`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/9ab555ef21be6742f2e58706db7037ee6e8dee52/app/services/salesforce/create_opportunity_service.rb) creates the [`OpportunityContactRole` object](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/9ab555ef21be6742f2e58706db7037ee6e8dee52/app/services/salesforce/create_opportunity_service.rb#L118) right after creating the opportunity. Additionally, when creating the `OpportunityContactRole`, a [new Contact is created](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/9ab555ef21be6742f2e58706db7037ee6e8dee52/app/services/salesforce/contact_finding.rb#L14) if there isn't an existing one. This approach works for the most part but creates problems when an error is raised _**after**_ the opportunity is already created.

When there's an error during the creation of the `Contact` or `OpportunityContactRole`, the error is [rescued](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/9ab555ef21be6742f2e58706db7037ee6e8dee52/app/services/salesforce/create_opportunity_service.rb#L26) and an unsuccessful response is returned to the `Salesforce::CreateOpportunityObjectsService`. This service then raises a [`Salesforce::OpportunityNotCreated`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/9ab555ef21be6742f2e58706db7037ee6e8dee52/app/services/salesforce/create_opportunity_objects_service.rb#L103) error and re-raises it so the job is retried. But since the creation of the opportunity is not failing, each retry of the job will then create **another opportunity**.

Another thing to note is that our opportunities are created in `Closed/Won` status [from the beginning](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/9ab555ef21be6742f2e58706db7037ee6e8dee52/app/services/salesforce/create_opportunity_objects_service.rb#L98),  which doesn't allow us to find them in a subsequent retry because we expect to find an opportunity object with the same data (account_id, amount, type) **that is not Closed** in this [query](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/9ab555ef21be6742f2e58706db7037ee6e8dee52/app/services/salesforce/create_opportunity_service.rb#L60-62). 

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

:pushpin: We should be able to retry the job **only** when the opportunity creation fails. 

Introduce a new `Salesforce::OpportunityContactRoleNotCreated` error and raise it if  [`Salesforce::CreateOpportunityService#create_opportunity_contact_role`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/9ab555ef21be6742f2e58706db7037ee6e8dee52/app/services/salesforce/create_opportunity_service.rb#L134) fails. With this we can surface the actual object causing the error and have better visibility on the causes. Then, the error could be [rescued in `Salesforce::CreateOpportunityObjectsService`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/9ab555ef21be6742f2e58706db7037ee6e8dee52/app/services/salesforce/create_opportunity_objects_service.rb#L63) and given it is not `Salesforce::OpportunityNotCreated`, no retry should happen. 

:pushpin: Other things to explore

- Could we create the opportunity in a non-closed stage so a retry we could find that opportunity and attempt to complete it? 
- Should we handle the `OpportunityContactRole` and `Contact` creation in a different service so the `CreateOpportunityService` only handles the creation of the opportunity?

### Result

### Next steps (if any)

### How will we measure success?

We'll have less reports",2
105122001,2022-03-19 07:07:47.029,Revise unified license voucher mailer,"## Ask
Update the [unified license voucher email](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/app/mailers/unified_license_voucher_mailer.rb) templates to match the designs outlined in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4388.",1
105103789,2022-03-18 19:29:35.028,Create new feature flag for Community Program Renewals,"Currently we use `community_program_coupons` for both new purchase and renewal flows for community program subscription.

With new flow going live on March 21st, we should create a new feature flag so we can make these 2 features go live independently.

We could create a flag called something like `community_program_renewals` for renewals flow.

[Feature flags](https://docs.gitlab.com/ee/operations/feature_flags.html)

We should also update the renewal routes to [check](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/app/controllers/subscriptions/community_program_controller.rb#L5) for this new feature flag instead. We should make sure we check for `community_program_coupons` for new flow as it is now.",1
104644978,2022-03-11 21:47:52.873,Customizations to SFDC services for E-Disty,"### Background

Provide the ability for GitLab authorized resellers to leverage Distribution e-marketplaces (like Arrowsphere) to purchase GitLab subscriptions in order to accelerate channel business and enable low/no touch orders.

This will be accomplished by building an automated end-to-end solution where a partner can purchase GitLab from our authorized distributors using an e-marketplace and receive the product “immediately” after submitting their order. In doing so, ensure data is captured and tracked accurately through all relevant GitLab systems/applications (Salesforce, Zuora, CustomersDot, Stripe, etc.).

Issues in this epic are focused on building the new API endpoint to support:
- Customer creation
- Zuora Subscription creation
- Creation of SFDC Account, Opportunity, etc
- License provisioning

References:
- [E-Disty: Data mapping spreadsheet](https://docs.google.com/spreadsheets/d/138UqGiYfGc8A4HyBin6JrsRelmjfGbqvg3UZ0nJaLTU/edit#gid=0)
- [Disty E-Marketplace: Field Mapping by Ent Apps](https://docs.google.com/spreadsheets/d/1Ay6uhAcOhnuhh8-RGjYKkq_ytSUWOV-c5wqdhgQWaR8/edit#gid=0)

### Proposal

In https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4079+, a new service was created that will create a customer (via `FindOrCreateCustomerService`) and a Zuora subscription (via `SubscriptionManagerService`).  These services must be customized to create these objects as desired for the E-Disty workflow.  For context, the `SubscriptionManagerService` is responsible for creating the SFDC account and other related objects [here](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/49d0aeae5ed9b8066078bc8ab2ae31fd629eefcf/app/services/subscription_manager_service.rb#L67) by using the `Salesforce::CreateAccountWorker`.

In this issue, the `Salesforce::CreateAccountWorker` and related classes, may need to be modified to support creating a customer from an E-Disty marketplace (Arrowsphere) order.  The existing classes were built with the web-direct scenario in mind, but these may need to be extended to support E-Disty marketplace.  

We are still working on the data mapping between Platypus payload and SFDC so the details of the changes to these classes isn't known just yet.  This mapping will be added to [the data mapping spreadsheet](https://docs.google.com/spreadsheets/d/138UqGiYfGc8A4HyBin6JrsRelmjfGbqvg3UZ0nJaLTU/edit#gid=0).

## Field Changes
### Update (Logic Changes)
| Object      | Field Name  | API Name        | Field Type     | Web Direct Value    | Disty Value |
| ----------- | ----------- | --------------- | ------------- | ----- |----|
| Opportunity |  [Opportunity Name](https://gitlab.lightning.force.com/lightning/setup/ObjectManager/Opportunity/FieldsAndRelationships/Name/view)    | Name      | Text | ""{customer.company} - Web Direct"" | ""{customer.company} - Channel Marketplace"" |
| Opportunity |  [Web Portal Purchase ](https://gitlab.lightning.force.com/lightning/setup/ObjectManager/Opportunity/FieldsAndRelationships/00N6100000HJmTK/view)     |  Web_Portal_Purchase__c      | Checkbox | TRUE | FALSE |
| Opportunity | [Initial Source](https://gitlab.lightning.force.com/lightning/setup/ObjectManager/Opportunity/FieldsAndRelationships/LeadSource/view)  | LeadSource  | Picklist | ""Web Direct"" | ""Channel Marketplace"" |
| Contact    | [Initial Source](https://gitlab.lightning.force.com/lightning/setup/ObjectManager/Contact/FieldsAndRelationships/LeadSource/view) | LeadSource  | Picklist |  ""Web Direct"" | ""Channel Marketplace"" |

### Add (Net New Fields)
| Object      | Field Name  | API Name        | Field Type     | Value    |
| ----------- | ----------- | --------------- | ------------- | ----- |
| zqu__Quote__c | [Resale Partner](https://gitlab.lightning.force.com/lightning/setup/ObjectManager/zqu__Quote__c/FieldsAndRelationships/00N4M00000IbAzf/view) | Fulfillment_Partner__c | Lookup(Account) | ['tradingPartnerId'] |
| zqu__Quote__c | [Distributor](https://gitlab.lightning.force.com/lightning/setup/ObjectManager/01I61000001QLnw/FieldsAndRelationships/00N4M00000Ib2eI/view) | Distributor__c |  Lookup(Account) | `a0u4M000006IZCl` |
| Opportunity |  | Fulfillment_Partner__c | Lookup(Account) | ['tradingPartnerId'] |
| Opportunity |  | Fulfillment_Distributor__c |  Lookup(Account) | `a0u4M000006IZCl` |

**Update**: per [this comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4083#note_1009463714) we need 4 fields:

```
Opportunity.Fulfillment_Partner__c = zqu__Quote__c.Fulfillment_Partner__c;
Opportunity.Fulfillment_Distributor__c = zqu__Quote__c.Distributor__c;
```


<details><summary>Details</summary>

##### Update (i.e. adjust current integration)
- [`Contact.leadsource`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/6ab621a3b33a3e6a6524aaf4c40a7df666561399/app/services/create_salesforce_account_service.rb#L75): Needs to be set as `""Channel Marketplace""`.  This is hardcoded as `""Web Direct""` currently.
- [`Opportunity.LeadSource`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/67dde2e92dae40c539fe25c8e99f4c0fc96c4a2e/app/services/salesforce/create_opportunity_service.rb#L106): Needs to be set as `""Channel Marketplace""`.  This is hardcoded as `""Web Direct""` currently.
- [`Opportunity.Name`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/e4d71682774ce95d9c565c4dd56f5f28ff2fd002/app/services/salesforce/create_opportunity_objects_service.rb#L97): Needs to be updated to `""#{customer.company} - Channel Marketplace""`. 
- `Opportunity.Web_Portal_Purchase__c` ([reference 1](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/67dde2e92dae40c539fe25c8e99f4c0fc96c4a2e/app/services/salesforce/create_opportunity_service.rb#L107) and [reference 2](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/869764e69d2e69119afa811632b7cbe81eb20027/app/services/salesforce/close_opportunity_service.rb#L52)): These references should likely be updated to set the value as `false` for the E-Disty context. 


##### Add (i.e. does not exist in current integration)
- `Opportunity.Fulfillment_Partner__c` and `zqu__Quote__c.Fulfillment_Partner__c`: These fields are not currently set for web direct, but is requested for E-Disty.  The value should be set as SFDC ID of the Reseller ($['tradingPartnerId'] in data mapping sheet.
- `Opportunity.Fulfillment_Distributor__c` and `zqu__Quote__c.Distributor__c`: These fields are not currently set for web direct, but is requested for E-Disty.  The value should be set as `~~a0u4M000006IZCl~~` which is the SFDC ID of the relevant Arrow account, who will be the distributor for all orders.
   - **2022.07.04 Update**: The ""standard Account"" should be used and not the Billing Account. So the value for `fulfillmentDistributor` should be `0014M00001pePen` for both Staging and Production

</details>",5
104644682,2022-03-11 21:34:49.572,Customizations to FindOrCreateCustomerService for E-Disty,"### Background

Provide the ability for GitLab authorized resellers to leverage Distribution e-marketplaces (like Arrowsphere) to purchase GitLab subscriptions in order to accelerate channel business and enable low/no touch orders.

This will be accomplished by building an automated end-to-end solution where a partner can purchase GitLab from our authorized distributors using an e-marketplace and receive the product “immediately” after submitting their order. In doing so, ensure data is captured and tracked accurately through all relevant GitLab systems/applications (Salesforce, Zuora, CustomersDot, Stripe, etc.).

Issues in this epic are focused on building the new API endpoint to support:
- Customer creation
- Zuora Subscription creation
- Creation of SFDC Account, Opportunity, etc
- License provisioning

References:
- [E-Disty: Data mapping spreadsheet](https://docs.google.com/spreadsheets/d/138UqGiYfGc8A4HyBin6JrsRelmjfGbqvg3UZ0nJaLTU/edit#gid=0)

### Proposal

In https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4079+, a new service was created that will create a customer (via `FindOrCreateCustomerService`) and a Zuora subscription (via `SubscriptionManagerService`).  These services must be customized to create these objects as desired for the E-Disty workflow.

In this issue, the `FindOrCreateCustomerService`, may need to be modified to support creating a customer from an E-Disty marketplace (Arrowsphere) order.  The existing classes were built with only the web-direct scenario in mind, but these will need to be extended to support E-Disty marketplace.  

For example, we know that customers created through this workflow do not need login access to CustomersDot and should not receive a welcome email.  This service created in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4079 should be able to call the `FindOrCreateCustomerService` such that it creates a customer with customer where `login_activated` and `billable` attributes are false.

Reference [the data mapping spreadsheet](https://docs.google.com/spreadsheets/d/138UqGiYfGc8A4HyBin6JrsRelmjfGbqvg3UZ0nJaLTU/edit#gid=0) to see the full list of fields from Platypus and how they should map to the Customer Model in CDot.",2
104644317,2022-03-11 21:24:13.960,Customizations to SubscriptionManagerService for E-Disty,"### Background

Provide the ability for GitLab authorized resellers to leverage Distribution e-marketplaces (like Arrowsphere) to purchase GitLab subscriptions in order to accelerate channel business and enable low/no touch orders.

This will be accomplished by building an automated end-to-end solution where a partner can purchase GitLab from our authorized distributors using an e-marketplace and receive the product “immediately” after submitting their order. In doing so, ensure data is captured and tracked accurately through all relevant GitLab systems/applications (Salesforce, Zuora, CustomersDot, Stripe, etc.).

Issues in this epic are focused on building the new API endpoint to support:
- Customer creation
- Zuora Subscription creation
- Creation of SFDC Account, Opportunity, etc
- License provisioning

References:
- [E-Disty: Data mapping spreadsheet](https://docs.google.com/spreadsheets/d/138UqGiYfGc8A4HyBin6JrsRelmjfGbqvg3UZ0nJaLTU/edit#gid=0)

### Proposal

In https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4079+, a new service was created that will create a customer (via `FindOrCreateCustomerService`) and a Zuora subscription (via `SubscriptionManagerService`).  These services must be customized to create these objects as desired for the E-Disty workflow.

In this issue, the `SubscriptionManagerService`, and related classes, will need to be modified to support creating a subscription from an E-Disty marketplace (Arrowsphere) order.  The existing classes were built with only the web-direct scenario in mind, but these will need to be extended to support E-Disty marketplace.  For example, the `SubscribeService` uses some constants that only apply to web-direct use cases like [`TERM_DURATION_IN_MONTHS`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/dd52c9e8d03de2d44cdf87725d3c7564f98c8625/app/services/subscribe_service.rb#L8) and [`DEFAULT_BILLING_BATCH`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/dd52c9e8d03de2d44cdf87725d3c7564f98c8625/app/services/subscribe_service.rb#L10).

Here are some of the other areas that will need to be modified:
  - External Order Source
  - External Order Id
  - Payment Term
  - Billing Batch
  - Subscribe Options -> Process Payments
  - Payment Method Id (not needed)
  - Subscription Custom Fields (Super Sonics fields)
  - Invoice Owner Id

Reference the [data mapping spreadsheet](https://docs.google.com/spreadsheets/d/138UqGiYfGc8A4HyBin6JrsRelmjfGbqvg3UZ0nJaLTU/edit#gid=0) to ensure we capture all the required customizations.",3
104643653,2022-03-11 20:59:31.186,Incorporate customer/subscription service into new API controller,"### Background

Provide the ability for GitLab authorized resellers to leverage Distribution e-marketplaces (like Arrowsphere) to purchase GitLab subscriptions in order to accelerate channel business and enable low/no touch orders.

This will be accomplished by building an automated end-to-end solution where a partner can purchase GitLab from our authorized distributors using an e-marketplace and receive the product “immediately” after submitting their order. In doing so, ensure data is captured and tracked accurately through all relevant GitLab systems/applications (Salesforce, Zuora, CustomersDot, Stripe, etc.).

Issues in this epic are focused on building the new API endpoint to support:
- Customer creation
- Zuora Subscription creation
- Creation of SFDC Account, Opportunity, etc
- License provisioning

References:
- [E-Disty: Data mapping spreadsheet](https://docs.google.com/spreadsheets/d/138UqGiYfGc8A4HyBin6JrsRelmjfGbqvg3UZ0nJaLTU/edit#gid=0)

### Proposal

Call the service that creates the customer and subscription (introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4079) from the new marketplace subscription create API endpoint (introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4078).  ~~This will likely involve transforming the request params in the action into the form that the service expects. Reference the data mapping spreadsheet to determine how parameters map to the CustomersDot data model and Zuora Subscribe API request.~~

We should confirm with Ent Apps what kind of response code and body are expected for both success and error.",3
104640289,2022-03-11 19:51:49.095,"Build service to invoke other services (create customer, subscription, and salesforce objects)","### Background

Provide the ability for GitLab authorized resellers to leverage Distribution e-marketplaces (like Arrowsphere) to purchase GitLab subscriptions in order to accelerate channel business and enable low/no touch orders.

This will be accomplished by building an automated end-to-end solution where a partner can purchase GitLab from our authorized distributors using an e-marketplace and receive the product “immediately” after submitting their order. In doing so, ensure data is captured and tracked accurately through all relevant GitLab systems/applications (Salesforce, Zuora, CustomersDot, Stripe, etc.).

Issues in this epic are focused on building the new API endpoint to support:
- Customer creation
- Zuora Subscription creation
- Creation of SFDC Account, Opportunity, etc
- License provisioning

References:
- [E-Disty: Data mapping spreadsheet](https://docs.google.com/spreadsheets/d/138UqGiYfGc8A4HyBin6JrsRelmjfGbqvg3UZ0nJaLTU/edit#gid=0)

### Proposal

Build a new service that is responsible for:
- Creating a customer record, likely utilizing [the existing `FindOrCreateCustomerService`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/0abb2c47962048af373ccec20cdf74b55252dce4/app/services/find_or_create_customer_service.rb#L3)
- Calling [the `SubscriptionManagerService`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/49d0aeae5ed9b8066078bc8ab2ae31fd629eefcf/app/services/subscription_manager_service.rb#L3) to create the Zuora subscription and SFDC objects

This issue can focus on a simple approach where the service accepts a quantity, plan_id, and other parameters that are already supported by the underlying Customer and Subscription services.  This issue should not cover the customizations which will be necessary for the full E-Disty workflow.  We can look at [the `SubscriptionsController#create` action](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/343aa1c9ae880946b2aff53ed8c3a71628d0318a/app/controllers/subscriptions_controller.rb#L80) for examples of the parameters that can be passed to the `SubscriptionManagerService` currently.  We should consider wrapping the elements of this new service into a transaction so that transactions can be atomic.

This service will eventually be called from the new API endpoint introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4078+.",3
104639445,2022-03-11 19:31:36.259,Build marketplace subscription creation API skeleton,"### Background

Provide the ability for GitLab authorized resellers to leverage Distribution e-marketplaces (like Arrowsphere) to purchase GitLab subscriptions in order to accelerate channel business and enable low/no touch orders.

This will be accomplished by building an automated end-to-end solution where a partner can purchase GitLab from our authorized distributors using an e-marketplace and receive the product “immediately” after submitting their order. In doing so, ensure data is captured and tracked accurately through all relevant GitLab systems/applications (Salesforce, Zuora, CustomersDot, Stripe, etc.).

Issues in this epic are focused on building the new API endpoint to support:
- Customer creation
- Zuora Subscription creation
- Creation of SFDC Account, Opportunity, etc
- License provisioning

References:
- [E-Disty: Data mapping spreadsheet](https://docs.google.com/spreadsheets/d/138UqGiYfGc8A4HyBin6JrsRelmjfGbqvg3UZ0nJaLTU/edit#gid=0)

### Proposal

Build the skeleton for the new, RESTful API endpoint that will eventually support creation of objects mentioned above.  This endpoint will be used by distribution e-marketplaces, the first example being Arrowsphere.  

We could build this new endpoint similar to existing controllers that use admin token authentication like [`Api::V1::LicensesController`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/11fe580936f339405a14254ea1fd4131f3fb6561/app/controllers/api/v1/licenses_controller.rb#L6) and [`Api::CustomersController`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/114b87e77e1529f7f6d25bea4b72096463e57f96/app/controllers/api/customers_controller.rb#L5).  Since this endpoint is intended to be consumed by e-marketplaces via Platypus, the controller could be named something like `Api::V1::Marketplace::SubscriptionsController` or `Api::V1::Platypus::SubscriptionsController`?

For this issue, we can focus on permitting the request params and returning an empty, successful response.",2
104573412,2022-03-10 19:47:23.893,Account in Orders Callout is the Invoice owner instead of the Subscription Owner,"### Problem

As [reported in the Orders UAT Issue](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/intake/-/issues/554#note_867674777), a change was discovered in Zuora callout behavior when the Invoice Owner of a Subscription is different from the Subscription Owner.  Orders callouts are triggered from `Subscription.InvoiceOwnerId` rather than `Subscription.AccountId` as is today’s current state with the Subscribe/Amend API.  A [Zuora support ticket](https://support.zuora.com/hc/en-us/requests/346080) has been opened to understand if there are any solutions that Zuora can provide.

Zuora is looking into adding an additional callout parameter so that both InvoiceOwnerId and AccountId are included in Orders callouts but we don't know an ETA on that at this point.  In the meantime, we should explore other solutions on our side. UPDATE: Zuora has responded that this behavior is the desired behavior and don't intend to change it in this case.  We will need to update our callout code to accommodate this new behavior.

/cc @gitlab-com/business-technology/enterprise-apps/zuora-architects

### Proposal

We understand that this behavior affects Orders callouts only.

This could be solved by adjusting [the `OrderProcessedWorker`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/f9743a3e2eb5fbfe183daa15c76406dc28fbc23d/app/workers/zuora_callout/order_processed_worker.rb) to pull the actual `account_id` directly from the Zuora Subscription instead of relying on the params from the callout body.  There is already a natural spot for this operation in the worker, before the worker enqueues the `ZuoraCallbackWorker` for each subscription in the Order in [the `process_order_subscription` method](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/f9743a3e2eb5fbfe183daa15c76406dc28fbc23d/app/workers/zuora_callout/order_processed_worker.rb#L67). This method already [prepares the worker attributes](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/f9743a3e2eb5fbfe183daa15c76406dc28fbc23d/app/workers/zuora_callout/order_processed_worker.rb#L71) by including the `subscription_id`, `subscription_status`, and `amendment_types`.  This logic could be updated to also set the `account_id` using `zuora_subscription.account_id`.  This would ensure the correct account is passed to the worker that processes the subscription.

_Note:_ We should check if any other attributes are negatively affected by this behavior change (e.g. `account_name`).

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

To account for this logic change, associated tests should also be updated.  If there are no tests, we should expect that an integration test between CustomersDot and Zuora exists to ensure that these fields remain in sync.",2
104504736,2022-03-09 19:40:11.454,Zuora Configuration for Arrowsphere orders,"### Summary

This issue will capture the configuration changes required to support Arrow orders. Once approved, the changes will be done by EntApps team.

### Proposed changes

> [Distributor e-Marketplace: FinSys Requests](https://gitlab.com/groups/gitlab-com/business-technology/enterprise-apps/financeops/-/epics/16) epic

- [x] Create custom fields on Zuora Subscription to track Arrow order ([FinSys issue](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/financeops/finance-systems/-/issues/628#note_911837751))
   - [x] ~~`External Order Source`~~
   - [x] ~~`External Order Id`~~
   - [x] `External Subscription Source`
   - [x] `External Subscription Id`
- [x] Create `Net 30 EOM` Payment Term ([FinSys Issue](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/financeops/finance-systems/-/issues/675))
- [x] New Billing Batch + Automated Bill Run for Arrowsphere Orders ([FinSys Issue](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/financeops/finance-systems/-/issues/676))
- [x] Create new Arrow invoice template ([FinSys issue](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/financeops/finance-systems/-/issues/774))
- [x] Send Arrow invoices in bulk ([FinSys issue](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/financeops/finance-systems/-/issues/777))
- [ ] New Arrow communication profile ([FinSys issue](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/financeops/finance-systems/-/issues/783))",0
104362015,2022-03-08 07:42:06.861,Move user count logic from haml template to helper,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->
### Current Status
Code was moved to a [presenter](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5840), but introduced a [bug with Renewals](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5245). Before merging the [follow up MR](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6015) that un-reverts [the initial MR](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5840), we need solid reproduction steps of the [500 bug](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5245) to validate that the bug is not reintroduced.

### Previous Description
> #### Problem
> As suggested in this [comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4372#note_865226482), it would be a good idea to move the logic block in `subscriptions/community_program/renew_subscription.html.haml` into a helper. With this we would get the additional advantage of being tested. The same helper could be used for `subscriptions/renew.html.haml`(https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/app/views/subscriptions/renew.html.haml#L1-17) too as it has similar logic.
>  
> #### Proposal
> Move the logic block as suggested in this [comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4372#note_865226482) in `subscriptions/community_program/renew_subscription.html.haml` to a helper. Use this helper for `subscriptions/renew.html.haml`(https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/app/views/subscriptions/renew.html.haml#L1-17) too as it has similar logic.
> 
> <!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->
> 
> ### Result
> 
> ### Next steps (if any)
> - Create helper.
> - Use helper in `subscriptions/community_program/renew_subscription.html.haml` and `subscriptions/renew.html.haml`(https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/app/views/subscriptions/renew.html.haml#L1-17).
> - Add relevant tests. 

### How will we measure success?
Users are able to successfully renew subscriptions",2
104335264,2022-03-07 20:59:51.935,Extend vue wrapper to have findByTestId helper,"Currently to be able to find an element using `data-testid` for assertions, we declare `findByTestId` helper in each spec file and use it in tests.

Created as a [follow up](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4414#note_864946955)

**Proposal**

We can extend the wrapper to have `findByTestId` similar to how we do it in [`gitlab`](https://gitlab.com/gitlab-org/gitlab/-/blob/master/spec/frontend/__helpers__/vue_test_utils_helper.js), make `shallowMountExtended` and `mountExtended` helpers that use the `extendedWrapper`. We can then replace all `findByTestId` declarations with `shallowMountExtended` or `mountExtended` or just `extendedWrapper` in spec files",2
104266812,2022-03-07 08:21:12.659,Add presence validation for activated_at in SelfManagedInstanceActivation,"### Problem

In https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4418#note_862077160, a discussion about the possibility of the `activated_at` timestamp for `SelfManagedInstanceActivation` being `nil`. Looking at the current code, the value will always be present (code when [creating](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/dded5fcb0654a9af94b78c3153b4acadb1e5e60d/app/services/cloud_activations/activate_service.rb#L43) and [updating](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/dded5fcb0654a9af94b78c3153b4acadb1e5e60d/app/services/cloud_activations/activate_service.rb#L19) the `SelfManagedInstanceActivation`). Despite of that, in https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4418#note_863466271, the suggestion was made to add a presence validation for `activated_at`.

### Proposal

Add a presence validation for `activated_at` in the `SelfManagedInstanceActivation` model to ensure the field always has a value.

### Result

Additional safety to ensure the field will always have a value.

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

Associated with this change, should be a model spec update of `self_managed_instance_activation_spec.rb` to accommodate the new presence validation.  (`it { is_expected.to validate_presence_of(:activated_at) }`)",1
104265783,2022-03-07 08:02:14.230,Spike: Evaluate clearer error messages when activating cloud license,"### Problem

Errors occurring during activation of a cloud license are not clear enough what the reason for the error is. In https://gitlab.com/gitlab-org/gitlab/-/issues/346461, a misleading message about a connectivity error showed up when trying to activate a cancelled subscription. The error was actually a no method error when the license was built (via the [SeatLinkCreateService](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/7d14b53ed8df3fe8f996a992ca3e060f0bc8b430/app/services/seat_link_create_service.rb#L181)) because the subscription couldn't be found. With the fix for this, the new error message will be the general ""an error occurred while activating your subscription"" error.

### Proposal

While [discussing](https://gitlab.com/gitlab-org/gitlab/-/issues/346461#note_863397425) the fix for the mentioned error with Support, it came up to improve the error reporting when activating a cloud license. Hence, this spike issue to take a closer look into how that might be possible. The errors will come from different code places (e.g. Zuora subscription, license creation, seat link creation, etc.) and have to be returned to the [ActivationService](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/dded5fcb0654a9af94b78c3153b4acadb1e5e60d/app/services/cloud_activations/activate_service.rb#L25-28) and its [graphql mutation](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/1b4516ee084d478c139cfd55bf3180ad9dc804dc/app/graphql/mutations/cloud_activations/activate.rb#L29).

### Result

A clearer error message on where something went wrong when activating a cloud license.

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

Tests should accompany this change to ensure that whatever error is received, is rendered properly on the frontend.",3
104068457,2022-03-03 21:03:48.844,Update outdated NPM packages to resolve outstanding vulnerabilities,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Currently, there are a number of long outstanding (300 days or greater) security issues that we need to resolve. Those issues outlined below require can resolved by updating NPM packages. These range from simple to potentially more complex like updating Webpack. 

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

- [ ] Update the packages shown below either incrementally or in bulk as needed or convenient to mitigate the associated CVEs. 

| AGE\_IN\_DAYS | GROUP\_NAME | STAGE       | URL                                                                                                                              | STATE | Notes                                       | Location | Package              |
| ------------- | ----------- | ----------- | -------------------------------------------------------------------------------------------------------------------------------- | ----- | ------------------------------------------- | -------- | -------------------- |
| 300           | license     | fulfillment | [https://gitlab.com/gitlab-org/customers-gitlab-com/issues/2989](https://gitlab.com/gitlab-org/customers-gitlab-com/issues/2989) | MR submitted: gitlab-org/customers-gitlab-com!4460  | Backlog; Requies updating a dependency      | NPM      | dot-prop             |
| 300           | license     | fulfillment | [https://gitlab.com/gitlab-org/customers-gitlab-com/issues/2988](https://gitlab.com/gitlab-org/customers-gitlab-com/issues/2988) | MR submitted: gitlab-org/customers-gitlab-com!4460  | Backlog; Requies updating a dependency      | NPM      | Elliptic             |
| 300           | license     | fulfillment | [https://gitlab.com/gitlab-org/customers-gitlab-com/issues/2983](https://gitlab.com/gitlab-org/customers-gitlab-com/issues/2983) | MR submitted: gitlab-org/customers-gitlab-com!4460  | Backlog; Requies updating a dependency      | NPM      | websocket-extensions |
| 300           | license     | fulfillment | [https://gitlab.com/gitlab-org/customers-gitlab-com/issues/2984](https://gitlab.com/gitlab-org/customers-gitlab-com/issues/2984) | MR submitted: gitlab-org/customers-gitlab-com!4460    | Backlog; Requies updating a dependency      | NPM      | serialize-javascript |
| 300           | license     | fulfillment | [https://gitlab.com/gitlab-org/customers-gitlab-com/issues/2990](https://gitlab.com/gitlab-org/customers-gitlab-com/issues/2990) | [MR submitted](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4427) | Backlog; Requies updating a dependency      | NPM      | URI.js / urljs       |
| 300           | license     | fulfillment | [https://gitlab.com/gitlab-org/customers-gitlab-com/issues/2979](https://gitlab.com/gitlab-org/customers-gitlab-com/issues/2979) | MR submitted: gitlab-org/customers-gitlab-com!4460 | Backlog; Requies updating a dependency      | NPM      | ini                  |
| 300           | license     | fulfillment | [https://gitlab.com/gitlab-org/customers-gitlab-com/issues/2980](https://gitlab.com/gitlab-org/customers-gitlab-com/issues/2980) | MR submitted: gitlab-org/customers-gitlab-com!4460  | Backlog; Requies updating a dependency      | NPM      | y18n                 |
| 300           | license     | fulfillment | [https://gitlab.com/gitlab-org/customers-gitlab-com/issues/2985](https://gitlab.com/gitlab-org/customers-gitlab-com/issues/2985) | Open  | Backlog; Requies updating many dependencies | NPM      | kind-of              |

### Result

Updated `yarn.lock`

### Next steps (if any)

Advise if there is a way that we can autogenerate MRs for package updates regularly or some other sensible process change to stay ahead of the NPM wave. 

### How will we measure success?

A `yarn audit` run will without reporting the following issues above. 

/cc @jeromezng @jameslopez @rhardarson",2
104035079,2022-03-03 13:29:52.034,Provide missing LicenseDot API at CustomersDot,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

[VersionsApp](https://gitlab.com/gitlab-services/version-gitlab-com) while processing received [ServicePing](https://docs.gitlab.com/ee/development/service_ping/) payload is reaching out to [LicenseDot](https://gitlab.com/gitlab-org/license-gitlab-com) in order to fetch details about reporting instance license. After deprecation of LicenseDot ServicePing reporting process start to raise errors https://sentry.gitlab.net/gitlab/versiongitlabcom/issues/3209409 This cause ServicePing payloads being recorded without linkage to zuora account, which limits their utility in business analysis. 

Corresponding issue on ~""group::product intelligence"" tracker https://gitlab.com/gitlab-org/gitlab/-/issues/354025

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

@cwiesner [suggested](https://gitlab.com/gitlab-org/gitlab/-/issues/354025#note_861527955) adding new API endpoint that would provide the missing features from LicenseDot [`LicenseController`](https://gitlab.com/gitlab-org/license-gitlab-com/-/blob/master/app/controllers/licenses_controller.rb)

Missing features:
- [x] Token authentication
- [x] Fetching license by MD5 hash (LicenseDot was returning matching licenses collection, but only [first](https://gitlab.com/gitlab-services/version-gitlab-com/-/blob/master/app/services/license_app_service.rb#L43) was used at VersionsApp)
- [x] Fetching license by id 

### Result

- [x] Missing API is provided
- [x] Auth token for VersionsApp is issued 

### Next steps (if any)

### How will we measure success?

Communication between VersionsApp and CustomersDot is restored.

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

If any code is borrowed from LicenseDot, additionally bring in any associated tests.  Once brought in, we should also consider writing an integration test to ensure the connection between the two applications.",2
103971182,2022-03-02 15:07:27.389,Add structured tracking events for sending of self-managed trial licenses,"## Problem

We do not currently have a structured tracking event available to understand when a trial license key has been sent to a user, which means we cannot understand the completion rates of the full end-to-end flow for self-managed trials. 

More information in this thread: https://gitlab.com/groups/gitlab-org/-/epics/7612#note_852942467

## Proposal

1. Add a structured tracking event for when the trial license is sent. 
1. Consider adding a separate structured tracking event for when a non-trial license is sent (if it doesn't exist)  

> So we'd just need some way to know that the license key email was sent and to whom (hashed email perhaps?).

> I'm not sure how the standard paid license key email is generated and sent (or if it is still even an option as we transition to Cloud Licensing), but if it is then I'd suspect the code is in a similar area and could probably be instrumented as part of a pay flow instrumentation. (This again assumes that there are still self-managed license key emails being created and sent and not exclusively cloud licensing).

## How will we measure success?

If we can understand in Sisense if a trial license has been sent.

## Potential Structure of Event


| Description | Category | Action | Label | Product Section | Product Group | Distributions | Tiers | Notes |
| ------ | ------ | ------ | ------ | ------ | ------ | ------ | ------ |  ------ |
| Backend Structured Event to record when the trial email for Self-Managed is sent to the User | `default` | `click_button`| `push_sm_trial_email` | `Dev` | `Devops:Growth` | ce, ee | trial |Please ensure a grain exists that we can join upon reliably. Ideally both `gsc_pseudonymized_user_id` and `instance_id` |",5
102996517,2022-02-24 14:26:54.981,[Change Management] Warning message about label misusage,"### Problem

Engineers may pick issues when the label ~""workflow::ready for development"" is not set, or any ~""UX Product Design"" is set so the UX is still worked on.

Related to https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1294

### Proposal

Given our [product workflow](https://about.gitlab.com/handbook/product-development-flow), make sure that when an MR is opened, the expected labels are set in the corresponding issue. If they are not, warn in Danger about it.

We should also warn, depending on the issue labels, whether a UX (or other type of) review is required.",5
102805901,2022-02-21 15:07:28.891,The ActivateService sets activated_at timestamp even if activation fails,"### Problem

@vshumilo [identified here](https://gitlab.slack.com/archives/CL7SX4N86/p1645454361851859?thread_ts=1645430143.560179&cid=CL7SX4N86) the `CloudActivations::ActivateService` still sets the `activated_at` timestamp even if the service ultimately fails which leads to misleading data.  The activation in this case ([Sentry error](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/3201934/?referrer=slack)) failed because the `current_subscription` was not found for the `cloud_activation` record ([code](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/dded5fcb0654a9af94b78c3153b4acadb1e5e60d/app/services/cloud_activations/activate_service.rb#L51)).  This was likely because the customer was attempting to activate a future-effective subscription that had no current term.  This specific case should be addressed by https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3980, however this is just an illustration for how an error in activation still leads to incorrectly marking the instance as being activation in the CustomersDot database.

This is likely not a big concern, at least right now, but it's also not great that the instance is marked as activated in the CustomersDot DB when the activation failed.  It's not a big impact because this value will get updated when they activate again later, but it would be better to have valid data.

### Proposal

The `CloudActivations::ActivateService` should probably be wrapped in a transaction to rollback changes if a failure occurs in the service.  This would mean the `activated_at` timestamp would not be saved if the activation failed for any reason.",3
102796585,2022-02-21 12:52:59.733,[Community Programs] Incorrect text for SaaS flow in purchase modal on checkout page,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

As mentioned in this [note](https://gitlab.com/gitlab-org/fulfillment-meta/-/issues/408#note_848542868), the copy in the purchase modal in Community programs checkout page is currently the ""self manged"" copy, there's [different copy for the SaaS modal](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2677/designs/User_flow.png).
| Current | Expected |
|---------|----------|
| ![Screen_Shot_2022-02-18_at_4.10.33_PM](https://gitlab.com/gitlab-org/fulfillment-meta/uploads/3be6a87bcd5c0e43c54e5f9cd1f82e5d/Screen_Shot_2022-02-18_at_4.10.33_PM.png) | ![Screen_Shot_2022-02-18_at_4.19.08_PM](https://gitlab.com/gitlab-org/fulfillment-meta/uploads/b4aeaea7bede1908a0606d0c90c263c9/Screen_Shot_2022-02-18_at_4.19.08_PM.png) |

### Proposal

Change copy as per [the copy for SaaS flow](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2677/designs/User_flow.png)
<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?

Related to https://gitlab.com/gitlab-org/fulfillment-meta/-/issues/408",2
102796086,2022-02-21 12:43:18.432,[Community Programs] SaaS - Incorrect text and extra space in checkout page,"Note that for self-managed this should still say **License**

As raised in this [note](https://gitlab.com/gitlab-org/fulfillment-meta/-/issues/408#note_848542868), 
1. Need to change the word ""license"" to ""subscription""
2. Remove extra space before period.

Refer to screenshot for details.

![image](/uploads/f0d25e27671192c21303c7b32007aff9/image.png)

Related to fulfillment-meta#408.",2
102714680,2022-02-19 00:36:23.992,Trueup shows validation error if set to 0,"## Summary

On SM renewal page the customer is asked to enter the ""Active users"" and also the True-up value for the old subscription. We are using the [purchase_subscription_details.vue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/master/app/frontend/javascripts/purchase/components/purchase_subscription_details.vue) to display the Active users and also the True-up information on the frontend. 

Due to the validation to not allow users to enter value less than 0 during the purchase/renewal of users the same validation also got invoked for True-up box. See the screenshot below. This does not allow the users to renew the subscription with 0 true up quantity. The True-up count box becomes red and an error is seen below it ""Users over license quantity is not a valid number""

## Steps to reproduce

1. Go to renew page of a SM subscription.
1. Update the trueup value to greater than 0
1. Now set the trueup value to 0
1. Error - ""Users over license quantity is not a valid number"" is displayed under the box

## What is the current *bug* behavior?

Validation error - ""Users over license quantity is not a valid number"" is displayed under the true up box if value is updated to 0

## What is the expected *correct* behavior?

It should allow customer to set value to 0

![Screenshot_2022-02-19_at_01.18.18](/uploads/b8ecedda285042ebe9908f843de7b8e4/Screenshot_2022-02-19_at_01.18.18.png)",2
102714523,2022-02-19 00:23:26.734,Trueup is negative if reconciliation user count is less than subscription quantity,"## Problem

If the reconciliation max users count value reported is less than the subscriptions total quantity then during renewal the trueup value is shown to be negative. 

On [renewal page](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/master/app/views/subscriptions/renew.html.haml) we do the following calculations

```ruby
user_count = reconciliation_active ? @subscription.latest_reconciliation&.user_count : @subscription.user_count
current_user_count = user_count || product.quantity
users_over_license = current_user_count - product.quantity
```

If the active users count of an SM license has always been less than the license subscriptions quantity then `users_over_license` is set as negative. 

EX :- A subscription was brought for 10 users

* SeatLinkData with 8 users were reported anytime during the whole year
* then user_count = 8
* current_user_count = 8
* users_over_license = 8 - 10 = -2

The users_over_license is used to setup the trueup quantity on the renew page. 

As seen in the screenshot below the trueup value is set as -2 

## Steps to reproduce

1. Buy a license with 10 users starting last year.
1. Create a reconciliation entry for the order with user_count as 8
1. Go to Manage Subscription and then press Renew for the subscription
1. The renew page will show the trueup value as -2

## What is the current *bug* behavior?

The trueup value shown is -2

## What is the expected *correct* behavior?

The trueup value should be shown as 0

## Relevant logs and/or screenshots

![Screenshot_2022-02-19_at_01.18.01](/uploads/68c56aa4e65258764886dd922fd60848/Screenshot_2022-02-19_at_01.18.01.png)",1
102694521,2022-02-18 15:30:55.272,"Follow-up from ""Camelize names of fields to nullify for update""","The following discussion from !4302 should be addressed:

- [ ] @lulalala started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4302#note_845788236):  (+1 comment)

    > **question:**
    > 
    > Why do we pass `type: ""Subscription""` here? It seems `type` is used to determine whether lower camelCase should be used or not.
    > 
    > Also does [IronBank's deep_camelise](https://github.com/zendesk/iron_bank/blob/ef39c2b58f618f202d02492b121a8f187c1ae55b/lib/iron_bank/actions/update.rb#L19) not cover this nested hash?",1
102664234,2022-02-18 06:02:49.563,Replace asdf-yarn with global installation via npm,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Right now we install yarn via `asdf-yarn` plugin but:

- this method is deprecated for Yarn 2/3. In order to make our transition to Yarn 2/2 more smooth we should migrate away from installing Yarn directly with `asdf` and reply on NPM.
- make impossible to install default global NPM packages with `.default-npm-packages`.
- `asdf-yarn` does not play well with globally installed packages via `yarn global add`.

### Proposal

Remove `asdf-yarn` in favor of `npm install -g yarn`.

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",1
102641733,2022-02-17 19:15:20.763,Support Amendment and Order callouts,"### Problem

Related to https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3926 and https://gitlab.com/gitlab-com/business-technology/enterprise-apps/financeops/finance-systems/-/issues/579 and https://gitlab.com/gitlab-com/business-technology/enterprise-apps/financeops/finance-systems/-/issues/590

With Orders Harmonization, both the Subscribe and Amend API (used by CDot) and the Orders API (utilized by Zuora CPQ and the Zuora UI) can be utilized concurrently. Previous to this latest release, however, both order and amendment notifications were triggered for any subscription creation or amendment created through the Subscribe and Amend APIs. As a result, as part of the Orders Harmonization project, we refactored CustomersDot to continue to utilize the Subscribe and Amend API when creating or modifying subscriptions, but to only receive an `Order Processed` callout. Once the `Order Processed` callout was received by CDot, we were able to query for the Order Details, such as Order Actions and associated Rate Plans / Rate Plan Charges.

With this release, Zuora has changed the default behavior, which is intended to prevent duplicate (Amend and Order) notifications from firing:

> We have now changed the default notification behavior in the tenants with Orders Harmonization enabled to the following:
>
> Only amendment notifications are triggered for amendments that are created through the Subscribe and Amend APIs. Only order notifications are triggered for order actions that are created through the “Create an order” operation. As of Zuora Release 2022.01.R3, any new customers onboard on Orders Harmonization will have the new default notification behavior in their tenants.

### Proposal

Rather than downgrading Zuora to get back to the previous callout behavior, we want to update CDot to accommodate the new behavior.  To do this, we must enable both Amendment and Order Notifications. This would allow CustomersDot to continue to utilize the Subscribe and Amend API when creating or amending subscriptions. 

The `ZuoraCalloutWorker` has [logic that was created to prevent processing duplicate callouts](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/1ea64ad9fda6231056b46518c5d3ef3393157295/app/workers/zuora_callback_worker.rb#L54).  We should remove this logic as now we shouldn't have to worry about duplicates (in Zuora Central Sandbox).  

**Notes** 
- @jesssalcido is enabling the amendment callouts in Zuora Central Sandbox now.
- We should upgrade Zuora API Sandbox to the same release version as Central Sandbox to avoid duplicates in this environment.  I think we can live with this discrepancy in development until this environment is updated.  @jesssalcido is working with Zuora now to get this upgraded.
- Until this issue is address, deploys to [CDot production will continue to be blocked](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3995) as this flow needs to be fixed for QA pipelines to pass.

/cc @gitlab-com/business-technology/enterprise-apps/zuora-architects",1
102551789,2022-02-16 14:47:35.532,"[SaaS, Introductory email] - send email to all group owners","## Description

As part of https://gitlab.com/groups/gitlab-org/-/epics/7229, we will be sending few mails 1 day after a subscription has been purchased or renewed.

In https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4000 we went with [de-scoped list of users to send to](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3998#note_841620195) but that doesn't [solve the problem](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3998#note_841620209)

We should send an email to **all group Owners** (not just the group Owner who purchased the subscription), because all group Owners should be aware of the overage behaviour. 

## Implementation plan

|  |  |
| ------ | ------ |
| create mailers | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3999 |
| MVC identify CustomersDot emails to send to | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4000 |
| send introductory email 1 day after purchase |https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4007 |
| send introductory email 1 day after renewal | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4008 | 
| query GitLab.com for group owners emails and send | :point_left: you are here |

## Tasks

Replace [MVC solution](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4000) of customers to send to with **group Owners of namespace**",5
102551355,2022-02-16 14:45:06.401,"[SaaS, Introductory email] - send email 1 day after renewal","## Description

As part of https://gitlab.com/groups/gitlab-org/-/epics/7229, we will be sending few mails 1 day after a subscription has been purchased or renewed.

Using the mailer introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3999 and the selector introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4000 to send an email 1 day after a subscription has been renewed to make them aware of how users are counted and how overages are handled.

## Implementation plan

|  |  |
| ------ | ------ |
| create mailers | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3999 |
| MVC identify CustomersDot emails to send to | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4000 |
| send introductory email 1 day after purchase |https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4007 |
| send introductory email 1 day after renewal | :point_left: you are here | 
| query GitLab.com for group owners emails and send | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4009 |

## Tasks

Queue [email](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3999) to send 1 day after renewal",2
102551004,2022-02-16 14:42:48.843,"[SaaS, Introductory email] - send email 1 day after purchase (namespace link)","## Description
As part of https://gitlab.com/groups/gitlab-org/-/epics/7229, we will be sending few mails 1 day after a GL.com subscription has been purchased or renewed.

Using the mailer introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3999 and the selector introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4000 to send an email 1 day after a subscription has been [linked to a namespace](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4005#note_843627137) (purchased) to make them aware of how users are counted and how overages are handled.

_PS - The mailer needs to be sent 1 day after the namespace_id has been set. The future requirements are to fetch [all the group owners](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4009) and that would be only possible if the namespace_id has been set._

## Implementation plan

|  |  |
| ------ | ------ |
| create mailers | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3999 |
| MVC identify CustomersDot emails to send to | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4000 |
| send introductory email 1 day after purchase |:point_left: you are here |
| send introductory email 1 day after renewal | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4008|
| query GitLab.com for group owners emails and send | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4009 |

## Background 

* https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4005#note_843627137
* https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4005#note_843627118",3
102433335,2022-02-14 18:16:39.967,[Introductory email] - MVC Identify CustomersDot emails to send to,"## Description

As part of https://gitlab.com/groups/gitlab-org/-/epics/7229, we will be sending few mails 1 day after a subscription has been purchased or renewed.

Currently, we [have a method](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/master/app/models/customer.rb#L89) within the customers model which fetches all the customers based on `zuora_account_id`. The method is a [instance method](http://www.cs.ecu.edu/karl/3200/fall15/Notes/Java/Class/method.html). 

We need a method which when called with parameter `zuora_account_id` and returns all customers matching the same `zuora_account_id`. 

## Implementation plan

|  |  |
| ------ | ------ |
| create mailers | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3999 |
| MVC identify CustomersDot emails to send to | :point_left: you are here |
| send introductory email 1 day after purchase |https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4007 |
| send introductory email 1 day after renewal | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4008 | 
| query GitLab.com for group owners emails and send | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4009 |


### Proposal

Create a [scope](https://www.rubyguides.com/2019/10/scopes-in-ruby-on-rails/) within Customer model which takes `zuora_account_id` and returns list of matching customers.",1
102431522,2022-02-14 17:34:39.717,"[SM, SaaS - Introductory email] - create mailers","## Description

As part of https://gitlab.com/groups/gitlab-org/-/epics/7229, we will be sending few mails 1 day after a subscription has been purchased or renewed.

We need to have a new mailer which can pick customers from a given order id and sends email to the list of customers matching order's `zuora_account_id`

We currently have few mailers already within CustomersDot. Having a new mailer would help us separate introduction emails from rest of the mailers already present. 

## Implementation plan

|  |  |
| ------ | ------ |
| create mailers | :point_left: you are here |
| MVC identify CustomersDot emails to send to | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4000 |
| send introductory email 1 day after purchase |https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4007 |
| send introductory email 1 day after renewal | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4008 | 
| query GitLab.com for group owners emails and send | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4009 |

## Proposal 

### Design for new purchase

[Design here](https://gitlab.com/gitlab-org/gitlab/-/issues/347267/designs/Email_to_group_Owners_1_day_after_purchase_with_info_about_QSR.png)

### Email copy for new purchase

#### Email copy

> Subject line: Managing users in your subscription
>
> Dear \[customer\],
>
> Thank you for purchasing a GitLab.com subscription! As you get started, we want to make sure you understand some important billing information.
>
> Your subscription cost is based on the maximum number of users enabled during the billing period. If you reach the maximum number of users in your subscription, you can continue to add users and GitLab bills you for the overage. These bills occur every quarter.
>
> Read more about quarterly reconciliation in [our product documentation](https://docs.gitlab.com/ee/subscriptions/quarterly_reconciliation.html).
>
> If you have any questions about this process, [please reach out](https://support.gitlab.com/hc/en-us/requests/new?ticket_form_id=360000071293). We are happy to assist.
>
> Thank you again for your purchase!
>
> GitLab Billing Team

### Design for renewal

[Design here](https://gitlab.com/gitlab-org/gitlab/-/issues/347267/designs/Email_to_group_Owners_1_day_after_purchase_with_info_about_QSR.png)

### Email copy for renewal

> Subject line: Managing users in your subscription
>
> Dear \[customer\],
>
> Thank you for renewing your GitLab.com subscription! As you get started, we want to make sure you understand some important billing information.
>
> Your subscription cost is based on the maximum number of users enabled during the billing period. If you reach the maximum number of users in your subscription, you can continue to add users and GitLab bills you for the overage. These bills occur every quarter.
>
> Read more about quarterly reconciliation in [our product documentation](https://docs.gitlab.com/ee/subscriptions/quarterly_reconciliation.html).
>
> If you have any questions about this process, [please reach out](https://support.gitlab.com/hc/en-us/requests/new?ticket_form_id=360000071293). We are happy to assist.
>
> Thank you for your business!
>
> GitLab Billing Team

### Implementation

1. Using `rails generate` command to create introduction mailer 
1. Add `default_to` to the new mailer.",2
102218132,2022-02-10 16:04:08.062,500 error when purchasing CI minutes,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you're about to submit isn't a duplicate.

Do not include confidential information!
--->

# Bug

## Summary

Customers are reporting 500 Error when purchasing CI minutes from GitLab. 

An example of the Sentry error event is:

- https://sentry.gitlab.net/gitlab/gitlabcom-clientside/issues/3188813/events/67125403/
- ""HTTP status code: 500""
- Time: Feb 10, 2022 1:49:06 PM UTC

## Steps to reproduce

(How one can reproduce the issue - this is very important)

## What is the current *bug* behavior?

(What actually happens)

## What is the expected *correct* behavior?

(What you should see instead)

## Relevant logs and/or screenshots



## Workarounds

(Ways to get around the issue)

## Reported examples

1. https://gitlab.zendesk.com/agent/tickets/267889 - https://sentry.gitlab.net/gitlab/gitlabcom-clientside/issues/3188813/events/67128388/
1. https://gitlab.zendesk.com/agent/tickets/267771 - https://sentry.gitlab.net/gitlab/gitlabcom-clientside/issues/3188813/events/67125403/
1. https://gitlab.zendesk.com/agent/tickets/268022 - https://sentry.gitlab.net/gitlab/gitlabcom-clientside/issues/3188813/events/67130149/

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",1
102113753,2022-02-09 05:50:46.274,Resume / cancel subscription buttons from home page are non-functional,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you're about to submit isn't a duplicate.

Do not include confidential information!
--->

# Bug

## Summary

Renewing and cancelling from Customers Portal home page doesn't resume / cancel a subscription.

**Cause**: [`SubscriptionCards`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/3855-unify-root-and-subscription-pages/app/assets/javascripts/dispatcher.js#L13) which makes the call to update the subscription is only executed for `/subscriptions` and `/subscriptions/<subscription-id>` pages but not from home page.

## Steps to reproduce

1. Visit Customers Portal with an account that has subscriptions
1. Click on `Resume subscription` or `Cancel subscription` for a subscription

## What is the current *bug* behavior?

The subscription is not resumed / cancelled and no corresponding API calls.

## What is the expected *correct* behavior?

The subscription should be resumed / cancelled as per the customers action.

## Relevant logs and/or screenshots

![Screen_Shot_2022-02-09_at_10.25.51_PM](/uploads/ad37c0a873d645892b63d661a35a8f87/Screen_Shot_2022-02-09_at_10.25.51_PM.png)

## Workarounds

Customer can still resume or cancel a subscription by going into `/subscriptions` page.

## Reported examples


<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",1
102071975,2022-02-08 15:08:27.745,QTC Systems Current State Field Mapping,"## Proposal

Build a field mapping of the current state for the 3 Quote-to-Cash data models (CustomersDot, GitLab and Zuora).

## Spreadsheet

Given the limitations of MermaidJS in GitLab and the sheer size of the combined diagram, we decided to document this in a spreadsheet as a field mapping between the 3 systems.  When it's finalized, we will memorialize it in the handbook.

[QTC System Field Mapping Spreadsheet](https://docs.google.com/spreadsheets/d/1D159Osv6JvQtlHm2Bpekn8ADOWUfgcdszf_pewERBy0/edit#gid=769890791)",1
102022253,2022-02-07 20:49:26.260,GitLab Current State ERD (CustomersDot-related),"## Proposal

Build an Entity Relationship Diagram (ERD) representing the current state of the GitLab data model that relates to the CustomersDot application.

## ERD

```mermaid
erDiagram
    ci_minutes_additional_packs {
        bigint id
        timestampwithtimezone created_at
        timestampwithtimezone updated_at
        bigint namespace_id
        date expires_at
        integer number_of_minutes
        text purchase_xid
    }

    gitlab_subscriptions {
        bigint id
        timestampwithtimezone created_at
        timestampwithtimezone updated_at
        date start_date
        date end_date
        date trial_ends_on
        integer namespace_id
        integer hosted_plan_id
        integer max_seats_used
        integer seats
        boolean trial
        date trial_starts_on
        boolean auto_renew
        integer seats_in_use
        integer seats_owed
        smallint trial_extension_type
    }

    historical_data {
        integer id
        date date
        integer active_user_count
        timestampwithouttimezone created_at
        timestampwithouttimezone updated_at
        timestampwithtimezone recorded_at
    }

    licenses {
        integer id
        text data
        timestampwithouttimezone created_at
        timestampwithouttimezone updated_at
        boolean cloud
        timestampwithtimezone last_synced_at
    }

    members {
        integer id
        integer access_level
        integer source_id
        charactervarying source_type
        integer user_id
        integer notification_level
        charactervarying type
        timestampwithouttimezone created_at
        timestampwithouttimezone updated_at
        bigint member_namespace_id
    }

    namespace_limits {
        bigint additional_purchased_storage_size
        date additional_purchased_storage_ends_on
        integer namespace_id
        date temporary_storage_increase_ends_on
    }

    namespaces {
        integer id
        charactervarying name
        charactervarying path
        integer owner_id
        timestampwithouttimezone created_at
        timestampwithouttimezone updated_at
        charactervarying type
        charactervarying description
        charactervarying avatar
        integer parent_id
        integer shared_runners_minutes_limit
        bigint repository_size_limit
        integer extra_shared_runners_minutes_limit
        timestampwithtimezone last_ci_minutes_notification_at
        integer last_ci_minutes_usage_notification_level
        boolean shared_runners_enabled
    }

    personal_access_tokens {
        integer id
        integer user_id
        charactervarying name
        boolean revoked
        date expires_at
        timestampwithouttimezone created_at
        timestampwithouttimezone updated_at
        charactervarying scopes
        boolean impersonation
        charactervarying token_digest
        boolean expire_notification_delivered
        timestampwithtimezone last_used_at
        boolean after_expiry_notification_delivered
    }

    plan_limits {
        bigint id
        bigint plan_id
        integer storage_size_limit
    }

    plans {
        integer id
        timestampwithouttimezone created_at
        timestampwithouttimezone updated_at
        charactervarying name
        charactervarying title
    }

    upcoming_reconciliations {
        bigint id
        bigint namespace_id
        date next_reconciliation_date
        date display_alert_from
        timestampwithtimezone created_at
        timestampwithtimezone updated_at
    }

    user_credit_card_validations {
        bigint user_id
        timestampwithtimezone credit_card_validated_at
        date expiration_date
        smallint last_digits
        text holder_name
        text network
    }

    users {
        integer id
        charactervarying email
        charactervarying name
        boolean admin
        integer projects_limit
        charactervarying username
        charactervarying state
        charactervarying first_name
        charactervarying last_name
        smallint user_type
    }

    gitlab_subscriptions |o--|| namespaces : """"
    gitlab_subscriptions }o--|| plans : """"
    members }o--|| namespaces : """"
    members }o--|| users : """"
    namespace_limits |o--|| namespaces : """"
    namespaces }o--|| namespaces : """"
    upcoming_reconciliations }o--|| namespaces : """"
    users }o--|| namespaces : """"
    personal_access_tokens }o--|| users : """"
    plan_limits }o--|| plans : """"
    user_credit_card_validations |o--|| users : """"

```",1
102019653,2022-02-07 19:48:05.108,CustomersDot Current State ERD,"## Proposal

Build an Entity Relationship Diagram (ERD) representing the current state of the CustomersDot data model.

## ERD

```mermaid
erDiagram
    cloud_activations {
        bigint id
        timestampwithouttimezone created_at
        timestampwithouttimezone updated_at
        bigint customer_id
        charactervarying activation_code
        charactervarying subscription_name
        boolean super_sonics_aware
    }

    coupons {
        bigint id
        charactervarying batch_id
        charactervarying code
        smallint status
    }

    customers {
        integer id
        charactervarying first_name
        charactervarying last_name
        timestampwithouttimezone created_at
        timestampwithouttimezone updated_at
        charactervarying email
        charactervarying encrypted_password
        charactervarying reset_password_token
        timestampwithouttimezone reset_password_sent_at
        timestampwithouttimezone remember_created_at
        integer sign_in_count
        timestampwithouttimezone current_sign_in_at
        timestampwithouttimezone last_sign_in_at
        inet current_sign_in_ip
        inet last_sign_in_ip
        charactervarying provider
        charactervarying uid
        charactervarying zuora_account_id
        charactervarying country
        charactervarying state
        charactervarying city
        charactervarying zip_code
        charactervarying vat_code
        charactervarying company
        charactervarying salesforce_account_id
        boolean billable
        charactervarying access_token
        charactervarying confirmation_token
        timestampwithouttimezone confirmed_at
        timestampwithouttimezone confirmation_sent_at
        charactervarying unconfirmed_email
        charactervarying address_1
        charactervarying address_2
        charactervarying company_size
        charactervarying authentication_token
        charactervarying phone_number
        boolean login_activated
    }

    instance_review_settings {
        integer id
        integer users_count_threshold
        timestampwithouttimezone created_at
        timestampwithouttimezone updated_at
    }

    instance_reviews {
        integer id
        charactervarying email
        charactervarying first_name
        charactervarying last_name
        charactervarying company
        charactervarying address
        charactervarying phone
        charactervarying version
        integer users_count
        integer groups_count
        integer projects_count
        integer issues_count
        integer merge_requests_count
        integer internal_pipelines_count
        integer external_pipelines_count
        integer labels_count
        integer milestones_count
        integer notes_count
        integer snippets_count
        charactervarying country
        charactervarying state
        charactervarying employee_range
        boolean communication_opted_in
    }

    admins {
        integer id
        charactervarying email
        charactervarying encrypted_password
        charactervarying reset_password_token
        timestampwithouttimezone reset_password_sent_at
        timestampwithouttimezone remember_created_at
        integer sign_in_count
        timestampwithouttimezone current_sign_in_at
        timestampwithouttimezone last_sign_in_at
        inet current_sign_in_ip
        inet last_sign_in_ip
        timestampwithouttimezone created_at
        timestampwithouttimezone updated_at
        charactervarying authentication_token
        boolean manage_admin
        charactervarying provider
        charactervarying uid
        smallint customer_access_level
        smallint license_access_level
    }

    licenses {
        bigint id
        uuid license_file_md5
        bigint customer_id
        bigint creator_id
        timestampwithtimezone created_at
        timestampwithtimezone updated_at
        timestampwithtimezone last_synced_at
        timestampwithtimezone next_sync_at
        integer users_count
        integer previous_users_count
        integer trueup_quantity
        date expires_at
        date starts_at
        date trueup_from
        date trueup_to
        boolean trial
        boolean cloud_licensing_enabled
        charactervarying plan_code
        charactervarying plan_name
        charactervarying zuora_subscription_id
        charactervarying email
        charactervarying name
        charactervarying company
        charactervarying zuora_subscription_name
        text notes
        text license_file
        timestampwithtimezone activated_at
        boolean auto_renew_enabled
        boolean seat_reconciliation_enabled
        boolean operational_metrics_enabled
        boolean reconciliation_completed
        boolean offline_cloud_licensing_enabled
    }

    local_records {
        bigint id
        timestampwithouttimezone created_at
        timestampwithouttimezone updated_at
        charactervarying name
        text csv
    }

    orders {
        integer id
        integer customer_id
        charactervarying product_rate_plan_id
        charactervarying subscription_id
        charactervarying subscription_name
        date start_date
        date end_date
        integer quantity
        timestampwithouttimezone created_at
        timestampwithouttimezone updated_at
        charactervarying gl_namespace_id
        charactervarying gl_namespace_name
        charactervarying amendment_type
        boolean trial
        timestampwithouttimezone last_extra_ci_minutes_sync_at
        charactervarying zuora_account_id
        timestampwithouttimezone increased_billing_rate_notified_at
        boolean reconciliation_accepted
        timestampwithouttimezone billing_rate_adjusted_at
        charactervarying billing_rate_last_action
        smallint trial_extension_type
        charactervarying source
    }

    trial_histories {
        integer id
        charactervarying gl_namespace_id
        date start_date
        date expired_on
        timestampwithouttimezone created_at
        timestampwithouttimezone updated_at
        charactervarying glm_source
        charactervarying glm_content
        charactervarying trial_entity
    }

    zuora_user_with_hosts {
        integer id
        charactervarying zuora_user_id
        charactervarying host
        timestampwithouttimezone created_at
        timestampwithouttimezone updated_at
    }

    self_managed_instance_activations {
        bigint id
        timestampwithouttimezone created_at
        timestampwithouttimezone updated_at
        timestampwithouttimezone activated_at
        bigint self_managed_instance_id
        bigint cloud_activation_id
    }

    self_managed_instances {
        bigint id
        timestampwithouttimezone created_at
        timestampwithouttimezone updated_at
        charactervarying instance_identifier
    }

    license_seat_links {
        bigint id
        timestampwithouttimezone created_at
        timestampwithouttimezone updated_at
        bigint order_id
        integer active_user_count
        integer max_historical_user_count
        integer license_user_count
        date license_starts_on
        charactervarying zuora_subscription_name
        charactervarying zuora_subscription_id
        timestampwithtimezone report_timestamp
        bigint license_id
        bigint self_managed_instance_activation_id
        charactervarying gitlab_version
        charactervarying hostname
        charactervarying instance_identifier
        uuid license_md5
    }

    reconciliations {
        bigint id
        integer order_id
        integer user_count
        timestampwithouttimezone reconcile_done_at
        timestampwithouttimezone created_at
        timestampwithouttimezone updated_at
        text error_message
        date reconcile_on
        smallint skip_reason
        timestampwithtimezone upcoming_email_sent_at
        timestampwithtimezone completed_email_sent_at
        numeric quoted_invoice_amount
        timestampwithtimezone quoted_invoice_at
    }

    leads {
        bigint id
        timestampwithtimezone created_at
        timestampwithtimezone updated_at
        date trial_start_date
        bigint namespace_id
        bigint user_id
        boolean opt_in
        boolean currently_in_trial
        boolean is_for_business_use
        charactervarying first_name
        charactervarying last_name
        charactervarying email
        charactervarying phone
        charactervarying company_name
        charactervarying employees_bucket
        charactervarying country
        charactervarying state
        charactervarying product_interaction
        charactervarying provider
        text comment_capture
        charactervarying glm_content
        charactervarying glm_source
        timestampwithtimezone sent_at
    }

    cloud_activations }o--|| customers : """"
    self_managed_instance_activations }o--|| cloud_activations : """"
    licenses }o--|| customers : """"
    orders }o--|| customers : """"
    licenses }o--|| admins : """"
    license_seat_links }o--|| licenses : """"
    license_seat_links }o--|| orders : """"
    reconciliations }o--|| orders : """"
    license_seat_links }o--|| self_managed_instance_activations : """"
    self_managed_instance_activations }o--|| self_managed_instances : """"

```",1
101905622,2022-02-04 16:22:15.133,[SM] Provision Ramped subscription (automated),"# Feature Request

## Summary
The rollout of Zuora Ramps (https://gitlab.com/groups/gitlab-com/business-technology/enterprise-apps/-/epics/85+) will result in a change to the current structure of a ramp deal. Instead of creating a separate opportunity, quote and subscription for each ramp interval, a single subscription will now include all intervals over multiple years. For MVC launch of Ramps, provisioning of each year (after the first) will be manual. 

However, given the ease of use of Zuora Ramps, there is expected to be a significant increase in the number of Ramp deals in FY23, will result in a burden on the Support team manually issuing licenses. This issue addresses the need to automate licensing for Self-Managed Ramp subscriptions.

Discovery work being completed in [this issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3754) informed what data is received from a Zuora Ramp deal by CustomersDot which is required to know how provisioning could handled for each ramp interval. You can find the results of a 3 year Ramp test for SM [here in the issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3754#note_807607785). As you can see, the resulting license was generated for the correct initial time period (the 1st year of the ramp), but the quantity was incorrect. The quantity was for the active/final ramp of the subscription (e.g. 30) instead of the initial ramp (e.g. 10).

### Problem Statement
Only one callout goes out for the new subscription, and includes all of the subscription / ramp terms. The license is created for only 1 year. There are no callouts for successive intervals.


## Proposal
### Start of Subscription
* At the current state, provisioning works partially for the first ramp year of a subscription.  Provisioning will be adjusted in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3968+ to address the problems with determining quantity and end date correctly.  We will assume this work is completed before starting this issue.

### Successive Subscription Intervals
* Update the user's subscription license count to the correct value at the beginning of each ramp period
  * This will require a custom workflow in Zuora that will send a callout to CustomersDot to update the subscription's license in subsequent years when the ramp interval changes as this does not currently exist. EntApps work issue here: https://gitlab.com/gitlab-com/business-technology/enterprise-apps/financeops/finance-systems/-/issues/698
    * The decision on whether a custom workflow callout can be used for this purpose was discussed in https://gitlab.com/gitlab-com/business-technology/enterprise-apps/bsa/business-systems-analysts/-/issues/145.  It was decided we will use a Zuora custom workflow for this trigger.


### License End Date Logic Update
Our logic for determining license end date ([defined here in CDot](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/3e8889422f9bc05f57cb205fb025364b28ccdcef/app/models/concerns/license_creation.rb#L7)) is conditional. The license end date is set using subscription term end date if the subscription is a monthly sub OR is cloud licensing enabled (`TurnOnCloudLicensing__c` is `Yes` or `Offline`) and reconciliations are enabled (`TurnOnSeatReconciliation__c` is `Yes`). Otherwise, the license end date will be set to term start date + 1 year.

Based on the default [defined in this issue](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/intake/-/issues/527#super-sonics-fields-and-standard-exemptions), it looks like ramps subscriptions will not have `TurnOnSeatReconciliation__c` enabled, so the license start date will fallback to term start date + 1 year. 

**Requirement:** Add another condition to check if cloud licensing is enabled and subscription is ramp enabled, then use term end date. The logic might look like the below:

```ruby
    if monthly? || (cloud_license_enabled? && (perform_reconciliations? || ramp_enabled?))
      term_end_date
    else
      term_start_date.advance(years: 1)
    end
```",3
101905637,2022-02-04 16:21:55.907,[SaaS] Provision Ramped subscription (automated),"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication.

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

# Feature Request

## Problem

The rollout of Zuora Ramps (https://gitlab.com/groups/gitlab-com/business-technology/enterprise-apps/-/epics/85+) will result in a change to the current structure of a ramp deal. Instead of creating a separate opportunity, quote and subscription for each ramp interval, a single subscription will now include all intervals over multiple years. For MVC launch of Ramps, provisioning of each year (after the first) will be manual. 

However, given the ease of use of Zuora Ramps, there is expected to be a significant increase in the number of Ramp deals in FY23, will result in a burden on the Support team manually addressing provisioning problems. This issue addresses the need to automate provisioning for SaaS Ramp subscriptions.

Discovery work being completed in [this issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3754) informs what data is received from a Zuora Ramp deal by CustomersDot which is required to know how provisioning could handled for each ramp interval. You can find the results of a 3 year Ramp test for SaaS [here in this issue thread](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3754#note_804427524).  As you can see, the subscription was provisioned in GL.com for the correct time period and quantity.  However, what's shown on the Manage Subscriptions page in CDot might be misleading as it shows the final state of the subscription (quantity 30).  That problem should be handled in a separate issue though as this should focus on provisioning only

## Proposal

### Start of Subscription
* No change to current process - Given the current state, provisioning should work automatically for the first ramp year as it syncs the quantity for the first ramp from Zuora to CustomersDot for the full subscription term.

### Successive Subscription Intervals
* Update the user's subscription license count to the correct value at the beginning of each ramp period
  * This will require a custom Zuora workflow that sends a callout to CustomersDot to update the .com subscription in subsequent years when the ramp interval changes as this does not currently exist.
  * The decision on whether a custom workflow callout can be used for this purpose was discussed in https://gitlab.com/gitlab-com/business-technology/enterprise-apps/bsa/business-systems-analysts/-/issues/145.  It was decided we will use a Zuora custom workflow for this trigger.
  * The custom workflow/callout is being tested as part of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4295.  In this issue, we can just verify the SaaS flow is working as expected once https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4295 is complete.",3
101898918,2022-02-04 16:21:07.985,[SM] Provision Ramped subscription (manual),"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication.

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

# Feature Request

## Problem
The rollout of Zuora Ramps will result in a change to the current structure of a ramp deal. Instead of creating a separate opportunity, quote and subscription for each ramp interval, a single subscription will now include all intervals over multiple years. For deals that ramp in quantity over each interval, additional licenses need to be provisioned at the beginning of the interval. This issue addresses how to provision these ramp licenses for Self-Managed Subscriptions.

Discovery work being completed in [this issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3754) will inform what data is received from a Zuora Ramp deal by CustomersDot which is required to know how provisioning could handled for each ramp interval. You can find the results of a 3 year Ramp test for SM [here in the issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3754#note_807607785).  As you can see, the resulting license was generated for the correct initial time period (the 1st year of the ramp), but the quantity was incorrect.  The quantity was for the active/final ramp of the subscription (e.g. 30) instead of the initial ramp (e.g. 10).

## Proposal
### Start of Subscription
* For MVC Zuora Ramps launch (expected May 2022), follow current process of automated provisioning and send the customer both a cloud activation code and an offline cloud license file for year one of a multi-interval ramp deal
  * Ramp deals currently follow the [default Cloud Licensing behavior](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/intake/-/issues/527#super-sonics-fields-and-standard-exemptions), with the customer receiving both license types
  * With the launch of [Strict Cloud Licensing](https://gitlab.com/groups/gitlab-com/business-technology/enterprise-apps/-/epics/379), [Ramp deals will be no longer be an exemption and will be set to Yes](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/intake/-/issues/526#post-update-state-of-cloud-licensing), with all Ramp customers receiving Cloud Licensing.
* Ensure the start date, end date, and quantity of the license generated for ramps is correct for both types of licenses, cloud and offline cloud.
  * Cloud: Make sure the licenses generated at activation and in subsequent seat link have the correct information based on the current subscription, and not the latest (active) data in Zuora.
  * Offline Cloud: Ensure the license generated by the `LicenseNotificationService` triggered by the callout uses the correct start date, end date, and quantity for the current subscription (e.g. first ramp year).

### Successive Subscription Intervals
For [MVC Zuora Ramps](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/intake/-/issues/433#update-20211103), Sales will only be able to create annual ramp intervals. However, there may be rare instances created by Sales Ops for specific customers will a subscription could ramp semi-annually, quarterly or monthly.
* For Self-Managed licenses, provision as follows:
  * For annual ramps: support team to provision license(s) immediately at start of subscription year. This will follow their [existing process](https://about.gitlab.com/handbook/support/license-and-renewals/workflows/self-managed/handling_multi-years_subscription.html).
  * For more granular ramp intervals: support team to provision license(s) immediately at start of interval based on service effective dates. This will follow their [existing process](https://about.gitlab.com/handbook/support/license-and-renewals/workflows/self-managed/handling_multi-years_subscription.html).

NOTE: Ramp deals that increase in price only each interval will not require any manual licensing.


## Next steps (if any)
* Evaluate/implement automated provisioning of successive Ramp intervals to remove Support burden of manual provisioning. Work being tracked in [this epic](https://gitlab.com/groups/gitlab-org/-/epics/7192).

## References:

- This is a sample subscription which is ramp enabled Tyler has used for testing: https://apisandbox.zuora.com/apps/Subscription.do?method=view&id=8ad08e01802632c4018029ad428155fb",5
101758395,2022-02-02 18:07:41.988,Add JSON formatter for Puma logs,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Port the GitLab JSON formatter for Puma log messages to get them into fluentd and ELK.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",2
102396578,2022-01-31 21:21:41.721,[SaaS] Send introductory email about user overages after renewal,"## Problem to solve

SaaS customers are being surprised and taken off-guard by Quarterly Subscription reconciliations. Because self-service SaaS customers have not historically been charged true-ups, the QSR process and the fact that they have to pay for overages is totally new. See tickets from customers [here](https://gitlab.com/gitlab-org/fulfillment-meta/-/issues/337).

## Intended users

This issue is just for SaaS customers.

* Group Owners of a group who have just renewed (manually or auto-renewed) a subscription
* Only groups enrolled in quarterly subscription reconciliation. See exactly which use cases we're solving for in the [Epic description](https://gitlab.com/groups/gitlab-org/-/epics/7229#saas-customers).

## Proposal

After a subscription has been **renewed (manually or auto-renewed)** for a group in GitLab, send an email to **all** group Owners 1 day after a subscription has been renewed to make them aware of how users are counted and how overages are handled.

We should send an email to all group Owners (not just the group Owner who purchased the subscription), because all group Owners should be aware of the overage behavior.

### Design

[Design here](https://gitlab.com/gitlab-org/gitlab/-/issues/347267/designs/Email_to_group_Owners_1_day_after_purchase_with_info_about_QSR.png)

### Email copy

>>>

Subject line: Managing users in your subscription

Dear [customer],

Thank you for renewing your GitLab.com subscription! As you get started, we want to make sure you understand some important billing information.

Your subscription cost is based on the maximum number of seats you use during the billing period. If you reach the number of seats in your subscription, you can continue to add users, but GitLab bills you for the overage. These bills occur every quarter.

Read more about quarterly reconciliation in [our product documentation](https://docs.gitlab.com/ee/subscriptions/quarterly_reconciliation.html).

If you have any questions about this process, [please reach out](https://support.gitlab.com/hc/en-us/requests/new?ticket_form_id=360000071293). We are happy to assist.

Thank you for your business!

GitLab Billing Team

>>>

## Implementation Plan

| Issue | Issue link |
|-------|------------|
| Create mailers | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3999 |
| MVC identify CustomersDot emails to send to | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4000 |
| Send introductory email 1 day after purchase | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4007 |
| Send introductory email 1 day after renewal | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4008 |
| Query GitLab.com for group owners emails and send | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4009 |",0
101297214,2022-01-26 15:19:13.151,Spike: New Subscriptions API endpoint to support E-Disty,"# Purpose

Related to the discussions in the [Purchasing Reliability WG](https://docs.google.com/document/d/1m6sozlyvEIEKcEIPF2_nujrYTOV3IPpx_jaPXD1hPpU/edit), the purpose of this issue is to research what changes need to be made in CustomersDot to support requests from Platypus to create customers and subscriptions that originate from orders in Arrowsphere.  

The original purpose of this issue was to evaluate how far a request from Platypus could get using the existing APIs in CDot.  My finding can be [found below](#original-exercise).  Now that we have those results, we are officially starting the planning and design phase of the MVC build.  The outcomes of this issue will be an epics with issues outlining the CustomersDot development work related to supporting a new API for E-Disty.

## Original Exercise

We were tasked with seeing how far a Platypus request could get using [this sample payload from Platypus](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/integrations/platypus/-/snippets/2235036) to create a subscription in CustomersDot using the existing `/subscriptions` API endpoint. 

After looking at the payload, we found some issues that had to be addressed before we could attempt the CDot request. 
 See the notes below for more details.

TLDR: The main blocker is that the current CDot endpoint expects a logged-in customer to make the request.  We would likely need to make changes to both the payload from platypus and to our API endpoint. Let's discuss how we might be able to solve for these problems.

<details><summary>Notes</summary>

## CDot subscriptions/create endpoint using Platypus Payload

This document describes how this sample request payload from Platypus could be used to feed into the subscriptions/create endpoint in CDot.  I've added a mapping below to help illustrate.

## Summary

In short, the payload cannot be simply fed into the CDot endpoint without some adjustments.

- The payload from Platypus would need to be transformed into a request body structure that CDot expects.
- The endpoint requires a logged in CDot Customer (but doesn't have to have a Zuora account yet).  This customer data is used to build the subscribe API request body.
  - The Platypus payload seems to contain the data required to create a Customer.
  - We don't receive a VAT code in Platypus but it doesn't seem like this is required in Zuora.
- A `payment_method_id` is require unless the plan is a community plan and a `coupon_code` param is included.

## Mapping CDot create params to Platypus payload

### Mapped params

```ruby
params['plan_id'] => payload['orderLines'][0]['productId']
params['products']['main']['quantity'] => payload['orderLines'][0]['quantity']
```

### Required CDot params that are missing from Platypus payload

```ruby
params['payment_method_id']
```

### Optional CDot params

```ruby
params['payment_method'], # CC if not set.  Could be set to `wire_transfer`
params['customer_email'], # Not sure if this is used
params['customer_token'], # Not sure if this is used
params['order_total'], # Possibly for display purposes only
params['total_without_taxes'], # Possibly for display purposes only
params['order_status'], # Possibly for display purposes only
params['source'], # Possibly for display purposes only; set on the Order record in CDot (e.g. upgrade or new)
params['gl_namespace_id'], # Set on the Order record in CDot for SaaS
params['gl_namespace_name'], # Set on the Order record in CDot for SaaS
params['preview'], # Boolean for previewing order before purchase
params['subscription_id'], # Used for adding a new product to an existing subscription
```

## Detailed breakdown of how the Subscribe API payload is constructed

The request body is made up of 6 main elements, listed in more detail below: `account`, `bill_to_contact`, `payment_method`, `subscribe_options`, `subscription_data`, `preview_options`.

### account (for new Zuora customer)

```ruby
{
  name: customer.company,
  communication_profile_id: APP_CONFIG.zuora.default_profile_id,
  currency: 'USD',
  bill_cycle_day: Date.current.day,
  payment_term: 'Due Upon Receipt',
  batch: batch,
  auto_pay: enable_auto_pay?,
  vat_id: customer.vat_code
}
```

#### OR (for existing Zuora customer)

```ruby
{
  id: customer.zuora_account_id,
  batch: batch
}
```

### bill_to_contact (only for new Zuora customers)

```ruby
{
  first_name: customer.first_name,
  last_name: customer.last_name,
  country: customer.country,
  city: customer.city,
  address1: customer.address_1,
  address2: customer.address_2,
  state: customer.state,
  postal_code: customer.zip_code,
  work_email: customer.email
}
```

### payment_method

```ruby
{ id: params[:payment_method_id] } # if params[:payment_method_id] is present
```

### subscribe_options

```ruby
attrs = {
  generate_invoice: true,
  process_payments: process_payments?
  subscribe_invoice_processing_options: {
    invoice_date: Date.current,
    invoice_processing_scope: 'Subscription',
    invoice_target_date: Date.current
  }
}
attrs[:external_payment_options] = { payment_method_id: PaymentMethod::WIRE_TRANSFER_ID } # if payment_method is `wire_transfer`
```

### subscription_data

```ruby
{
  rate_plan_data: rate_plans, # array of amendment options using the plan and quantity
  subscription: {
    contract_effective_date: Date.current,
    service_activation_date: Date.current,
    initial_term: TERM_DURATION_IN_MONTHS, # 12
    renewal_term: TERM_DURATION_IN_MONTHS  # 12
  }.merge(subscription_custom_fields) # Includes values for custom fields on Subscription for Super Sonics
}
```

### preview_options

```ruby
{ enable_preview_mode: true } # if preview param is true
```

</details>

## Data Mapping

The team has collaborated on a data mapping exercise between Platypus, CDot, Zuora Billing, and SFDC (TBD).  The following spreadsheet shows how the data will flow from Arrow via Platypus payload into the CDot data model and ultimately into Zuora Billing via a Zuora Subscribe API request:

[E-Disty: Data mapping spreadsheet](https://docs.google.com/spreadsheets/d/138UqGiYfGc8A4HyBin6JrsRelmjfGbqvg3UZ0nJaLTU/edit#gid=0)",3
101294143,2022-01-26 14:43:34.888,Fix the IronBank schema export,"### Problem

As [described in the README](https://gitlab.com/gitlab-org/customers-gitlab-com#ironbank), we should be able to update the IronBank schema files using the command `IronBank::Schema.export` in a rails console.  However, when working on https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4279, it was noticed that this command stalls.  

When the schema is being exported via IronBank, [the Zuora `describe` API endpoint is used](https://github.com/zendesk/iron_bank/blob/main/lib/iron_bank/describe/object.rb#L20) for [each object name](https://github.com/zendesk/iron_bank/blob/main/lib/iron_bank/describe/tenant.rb#L46) returned by [the top level describe API request](https://github.com/zendesk/iron_bank/blob/main/lib/iron_bank/describe/tenant.rb#L15).  In development (which uses Zuora API sandbox), this process stalls when the describe endpoint is called for certain object names (like `ApplicationGroup`).

CustomerDot has overridden the `object_names` method [here](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/266480162afe740fa1cbc9049dabd600c537110e/lib/zuora/describe/tenant.rb#L17) (from https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/669) to be pulled from a hard-coded set of object names [in `config/zuora/rest_objects.yml`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/6b8978605499bc74aa3d3cdee8b1afaf5d10858f/config/zuora/rest_objects.yml#L1).  From https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/669, it's not exactly clear why it's necessary to use a hard-coded list of object names instead of pulling the available set from Zuora like IronBank does by default.  Using the default logic, allows the schema export to work again.

It's not clear when this export stopped working, but I'm thinking it might be after the latest update to our Zuora tenant for API Sandbox.

### Proposal

Determine why the hard-coded list of object names is necessary.  If it is, trim the list to those needed for CDot that are still relevant.  It might be necessary to make environment specific `rest_objects.yml` files.

### Result

A working IronBank schema export.",5
88018151,2021-06-01 07:50:29.751,Remove UpgradeSubscriptionTransaction component,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

While working on https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3086 it was identified that the component `upgrade_subscription_transaction.vue` seems not to be used anywhere, but rather all we are only using `upgrade_subscription_app.vue` instead. 

### Proposal

It should be safe to delete this component but let's investigate if it's indeed not used anywhere

### Result

Deletion of `upgrade_subscription_app.vue`

### Next steps (if any)

### How will we measure success?",2
87938957,2021-05-30 22:14:50.421,Set correct Terms of Service on Community program subscriptions,"### Problem

Users that redeem a subscription through the community program self checkout will need to have different fields set on their subscription. We should update the purchase logic to handle this.

Reminder, this is only applicable to FREE subscriptions handled via https://gitlab.com/groups/gitlab-org/-/epics/5712

Additional context here:
- https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3017#note_586712903
- https://gitlab.com/groups/gitlab-org/-/epics/5068#note_569095826
- https://gitlab.com/gitlab-com/marketing/strategic-marketing/product-marketing/-/issues/5149#note_568946170

**NOTE: this is only applicable after Cloud Licensing goes live**

### Update fields according to this logic

### For SaaS

- `ContractAutoRenew__c` = No
- `TurnOnAutoRenew__c` = No
- `ContractSeatReconciliation__c` = No
- `TurnOnSeatReconciliation__c` = No
- `TurnOnCloudLicensing__c` = _NULL_
- `ContractOperationalMetrics__c` = _NULL_
- `TurnOnOperationalMetrics__c` = _NULL_

### For SM

- `ContractAutoRenew__c` = No
- `TurnOnAutoRenew__c` = No
- `ContractSeatReconciliation__c` = No
- `TurnOnSeatReconciliation__c` = No
- `TurnOnCloudLicensing__c` = No
- `ContractOperationalMetrics__c` = No
- `TurnOnOperationalMetrics__c` = No",3
87841561,2021-05-27 21:59:54.736,Use `self_managed_instance_activation` to find or create a seat link record,"### Problem

As reported in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3163, the `SeatLinkCreateService` should create unique `LicenseSeatLink` records for each `self_managed_instance_activation` but this isn't happening at this time.  [The logic that finds or initializes a `LicenseSeatLink` record](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/d2a3c2aed8894dd660eed62cdcc323d2427205ec/app/services/seat_link_create_service.rb#L46) only uses `report_timestamp|date` and `zuora_subscription_name`.

### Proposal

Update [the `SeatLinkCreateService`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/d2a3c2aed8894dd660eed62cdcc323d2427205ec/app/services/seat_link_create_service.rb#L46) to find or create `LicenseSeatLink` records using `self_managed_instance_activation`, in addition to the existing fields (`report_timestamp|date` and `zuora_subscription_name`).",2
87747523,2021-05-26 12:25:32.166,"Follow-up from ""Fix documentation link for Zuora Objects""","The following discussion from !3300 should be addressed:

- [ ] @vij started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3300#note_584510863):  (+7 comments)

> Yes, that does the trick :tada: Still weird why it works without the leading `/` in GitLab but not here :shrug_tone1:

> We should create a (follow-up) issue to fix other broken links to our docs within our docs but also to track the work (weight of 1). Looks like there aren't too many (just looked for `doc/` in the `doc` folder returned 9 results). Do you want to take care of them too? It'll be a quick win.",1
87652621,2021-05-25 06:24:59.883,Simplify mergeUrlParams function,"### Proposal

We would like to simplify the implementation of `mergeUrlParams` function defined in [`url_utility.js`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/d031f6b64d0a27db2c902cc3b657ba66814e4ac2/app/frontend/javascripts/lib/url_utility.js).

As a part of this issue please consider iterating on detect-unsafe-regex warning that is silenced now for the `const re = /^([^?#]*)(\?[^#]*)?(.*)/;`

Please also update the GitLab `mergeUrlParams` utility https://gitlab.com/gitlab-org/gitlab/-/blob/master/app/assets/javascripts/lib/utils/url_utility.js#L122

Suggested by @agulina in https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3281#note_584027216",2
87642132,2021-05-24 22:33:18.354,Use class `has-tooltip` when creating a bootstrap tooltip,"## Follow-up from ""Add ability to resend the activation code""

The following discussion from !3261 should be addressed:

- [ ] @pslaughter started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3261#note_583778633):  (+4 comments)

    > **question (ux,non-blocking):** Does the `title` automatically generate a tooltip for this icon?
    > 
    > I'm wanting to make sure that it's obvious to admins what this link does. If it's not obvious, it could be misused and cause a bad experience for our customers :thinking:

This is mainly a follow-up of [this comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3261#note_583878232).

## Problem

The tooltip implementation does not look like a bon-a-fide Bootstrap tooltip, but rather, it looks like the native browser dependent implementation which sometimes works with `title`

Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title

There's some significant downsides to this browser implementation, most importantly that it doesn't do anything on focus (only sometimes on mouse hover).  The `rails_admin` gem comes baked in with some bootstrap scripts, including the tooltip one, but it's only applied to table headers.

Ref: https://github.com/sferik/rails_admin/blob/97ccc28940d65fee53b30c409c49032fbb0885db/app/assets/javascripts/rails_admin/ui.js#L97


## Proposal

In the main GitLab project, there is a class `has-tooltip` which is used to programmatically create a Bootstrap tooltip for a thing:

https://gitlab.com/gitlab-org/gitlab/blob/6e953772a9ab09c897d0f4b38f06b4db528b3924/app/assets/javascripts/main.js#L119",2
87622362,2021-05-24 14:55:01.760,Add documentation for how we propagate dependency updates to production,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
It's not clear how we propagate dependency updates to production

### Proposal

Add such documentation on project's README",1
87620908,2021-05-24 14:29:59.487,Update references to bundler version according to Gemfile.lock,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Some places don't have the same bundler version as the `Gemfile.lock` identifies.

### Proposal

Update references to bundler version according to Gemfile.lock


#### What we have on `Gemfile.lock`:

```
BUNDLED WITH
   2.2.15
```",3
87517947,2021-05-21 15:28:06.622,Manual license sync doesn't work after initial sync for a day,"### Problem

Once a license has been synced (through manual or automation) on a given day, no additional manual syncing works until the next report day.  This happens because the seat link sync request from the SM instance is [sent with a timestamp using the current time](https://gitlab.com/gitlab-org/gitlab/blob/63ef05526c260a0e8679a7acc9589e83a144f22e/ee/app/models/gitlab/seat_link_data.rb#L16).  In other words, each sync request will have a unique `timestamp` in the request.  A `date` param is also included in the payload which is derived from the date of the `timestamp` [here](https://gitlab.com/gitlab-org/gitlab/blob/63ef05526c260a0e8679a7acc9589e83a144f22e/ee/app/models/gitlab/seat_link_data.rb#L54).

In CustomersDot, [the `SeatLinkCreateService`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/d2a3c2aed8894dd660eed62cdcc323d2427205ec/app/services/seat_link_create_service.rb) is responsible for processing the sync request.  It is supposed to [look up an existing `LicenseSeatLink` record using `timestamp`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/d2a3c2aed8894dd660eed62cdcc323d2427205ec/app/services/seat_link_create_service.rb#L36) if present (which it would be on newer versions of EE), otherwise it uses the `date` param.  However, since the timestamp is different from the earlier sync, instead of finding/using the existing `LicenseSeatLink` record for that report date, the service initializes a new one.  When it attempts to save the record, it fails due to the [validation on `report_date`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/7cf930e839e6324c784ebd6e9319805eca2ca034/app/models/license_seat_link.rb#L8) which verifies uniqueness scoped to `order_id` and `self_managed_instance_activation_id`.

[Sample Sentry Error](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2600316/events/6143dd6af3364209a21d85299b023d3f/)

### Proposal

This service should be updated to allow multiple syncs in a report day.  After discussing options with the team, we've agreed to the following plan as [mentioned here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3163#note_585143061).

1. [x] Update the `SeatLinkCreateService` to find or create `LicenseSeatLink` records using `self_managed_instance_activation`, in addition to the existing fields (`report_timestamp|date` and `zuora_subscription_name`)
   * Created separate issue for this: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3184
   * MR: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3344 (Verified)
1. [x] Update the `CreateReconciliationService` to only update an existing reconciliation record if the new `user_count` is greater than the previous `user_count` ([code reference](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/42318b047ab9c347277f9a9416e1ec0624187d3d/app/services/create_reconciliation_service.rb#L40)).
   * MR: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3352 (Verified)
1. [x] When a new seat link record is received, if the `report_timestamp` is not included in the request, set it to `report_date 03:00 UTC`.
   * MR: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3356 (Verified)
1. [x] Populate all existing rows where `report_timestamp is NULL` to set `report_timestamp` to `report_date 03:00 UTC`. Set DB constraint for `report_timestamp` to `null: false`.  Remove `report_timestamp` method from `LicenseSeatLink` model.
   * https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3360 (Verified)
1. [x] Modify the 2 unique indices to use `report_timestamp` instead of `report_date`.
   * https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3363 (Verified)

In https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3240, we will look at removing `report_date` from `license_seat_links` as it should no longer be needed.",5
87464536,2021-05-20 21:24:09.723,[UX] Remove the CustomersDot plans page and direct users to the marketing pricing page,This is the UX issue for https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3151,2
87464465,2021-05-20 21:23:17.027,Remove the CustomersDot plans page and direct users to the marketing pricing page,"## Problem to solve

* The Customers Dot plans page https://customers.gitlab.com/plans is hard to maintain and update the pricing information to match the marketing site
* We are in the process of moving all SaaS purchase flows into GitLab (Subscriptions + addon products). Once we have completed that work, the `customersDot/pricing` page will become redundant for the purpose of addon products.
* The CustomersDot plans page is not best entry point for SM customers to start their purchasing journey. The marketing site does a much better of job of displaying the tiers with additional information. Not to mention on `customersDot/pricing` we link back to the marketing site for more information.

## Proposal

Remove the CustomersDot plans page.

- For a user who is not logged in, the home page of `customers.gitlab.com` should be the login page
- For a user who is logged in, the Manage purchases page will be the home page
     - Create an empty state for the Manage purchases page (The manage purchases page currently redirects to the plans page if there are no purchases, so this behavior will need to change)
     - The `Buy new subscription` button will link to the [pricing page on the marketing website](https://about.gitlab.com/pricing/)

#### Design

- See design section
- [See Figma for specs](https://www.figma.com/file/cAKBLLR5KluMCux2byl68x/Remove-the-CustomersDot-plans-page?node-id=3%3A1503)


### Documentation

We will need to update all references to the CustomersDot plans page in the docs. 

Is there a way to search the docs for all instances of links to `customers.gitlab.com/plans`? I found a couple and listed them below, but I am sure there are more.

- [Handling CI minutes](https://about.gitlab.com/handbook/support/license-and-renewals/workflows/saas/ci_minutes.html)
- [Purchase additional CI minutes](https://docs.gitlab.com/ee/subscriptions/gitlab_com/#purchase-additional-ci-minutes)

### Development plan

| Task | MR |
| ------ | ------ |
| Add `redirect_plans_page` FF and use to update root controller to<br>- remove redirect to /plans page<br>- show sign_in page to not logged in users<br>- show subscription list to logged in users | xxx |
| For the plans controller redirect /plans to root / (behind Feature Toggle!) | xxx |
| Create and use a component for empty state ""Manage subscriptions"" page (behind Feature Toggle!)<br>Update link on the ""Buy new subscription"" button | xxx |
| Update docs | xxx |

After the FF is switched on and stable -> cleanup for FF and obsolete code https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3637",3
87441262,2021-05-20 13:37:47.725,Create Annual/Quarterly True Up Products By GitLab Tier,"# SKU Request Summary

<!---
Provide a brief description of what this SKU will be used for.
--->



## SKU Requirements

In order to expedite your request, please complete all of the following information.
Any questions about this template or this request can be directed to @amandarueda in the comments of this issue.

* [X] SKU Name:
   - True-Up (Quarterly) - Self-Managed - Ultimate
   - True-Up (Annually) - Self-Managed - Ultimate
   - True-Up (Quarterly) - Self-Managed - Premium
   - True-Up (Annually) - Self-Managed - Premium
   - True-Up (Quarterly) - SaaS - Ultimate
   - True-Up (Annually) - SaaS - Ultimate
   - True-Up (Quarterly) - SaaS - Premium
   - True-Up (Annually) - SaaS - Premium
   - True-Up (Quarterly) - Starter: $12/seat/quarter
   - True-Up (Annually) - Starter: $48/seat/year
   - True-Up (Quarterly) - Bronze: $12/seat/quarter
   - True-Up (Annually) - Bronze: $48/seat/year
* [x] SKU Code/ID:  [Annual and Quarterly True Up Products By GitLab Tier 2021.06.09](https://docs.google.com/spreadsheets/d/1u9Mo9corVyiysMjfgFqblCrs0GJRh0IcYSVI4FyJsPk/edit?usp=sharing)
* [x] Zuora Plan Name: [Annual and Quarterly True Up Products By GitLab Tier 2021.06.09](https://docs.google.com/spreadsheets/d/1u9Mo9corVyiysMjfgFqblCrs0GJRh0IcYSVI4FyJsPk/edit?usp=sharing)
* [x] Zuora Plan ID: [Annual and Quarterly True Up Products By GitLab Tier 2021.06.09](https://docs.google.com/spreadsheets/d/1u9Mo9corVyiysMjfgFqblCrs0GJRh0IcYSVI4FyJsPk/edit?usp=sharing)
* [X] Service type: `add-on`
* [X] Does this need to be purchase-able via CustomersDot? `No`
* [X] Does this service renew? `No`
     * [ ] If yes, what is the renewal cadence? `monthly | annually | other`
* [X] Should an email be sent indicating the subscription is coming to an end?: `No`
* [X] Is there a unit of measure, if so what? `Yes`  `Users`
* [X] Does this service provision anything? ``
     * [ ] If yes, please describe in detail what should be provisioned including the systems affected:
* [X] How soon do you need this SKU ? Timeline:  2021.07.01 go live of [Zuora Revenue SSP Refactor](https://gitlab.com/groups/gitlab-com/business-technology/enterprise-apps/-/epics/158) project
* [X] Who in Sales-Ops approved this request: @andrew_murray @jrabbits 
* [X] Link to originating Finance issue:  https://gitlab.com/gitlab-com/Finance-Division/finance/-/issues/4156
* [ ] Apply the appropriate `BTG Priority` label to this issue.

The Finance SKU Issue equivalent is still pending approval.  Zuora Product Catalog changes are typically configured only after all approvals have been satisfied.  EntApps will be moving forward with creating the proposed 8 new SKUs in Zuora Central Sandbox and Zuora API Sandbox 1 as part of the [Zuora Revenue SSP Refactor](https://gitlab.com/groups/gitlab-com/business-technology/enterprise-apps/-/epics/158) project.  In order to make the 2021.07.01 go-live date of the project, Fulfillment and EntApps have agreed to create this Issue in advance of completion of the Finance SKU Issue equivalent to earmark Fulfillment resources in June'21 to ensure these SKUs can go live on 2021.07.01.",2
87417148,2021-05-20 08:51:42.732,Send actual plans only to gitlab.com,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Right now we send too many data and plans to gitlab.com, like `deprecated`, `hide_card` attributes. 

### Proposal

I believe they are redundant and should not be send at all. I propose to do all the logic on the CustomersDot side and send only relevant information otherwise we are spreading our logic across two applications which leads to issues like https://gitlab.com/gitlab-org/gitlab/-/merge_requests/61990

In addition, changing available plans will require changes in **both** repositories and that increases the delivery time of a feature.

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

An integration test should be added with a real or mocked GitLab instance.  When the data is transferred from CustomersDot, validate the appropriate data is sent.",3
87416174,2021-05-20 08:40:15.442,Inline all email styles,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Gmail and probably some other email services too strips everything from head and does not accept remote styles.

![image](/uploads/3d4b494fbba11322ddec3593f93840d7/image.png)

### Proposal

We must inline all styles to make them working in Gmail. In order to do that
we need to go over email templates and get the list of all used classes. Then copy&paste them into `mailer.scss` pack.
Add the `premailer-rails` to inline it into a template.

### How will we measure success?",3
87316263,2021-05-18 23:19:35.835,"Follow-up from ""Add ability to resend the activation code""","The following discussion from !3261 should be addressed:

- [x] @rdavila started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3261#note_577702467):  (+1 comment)

    > I'm not using the `LicenseNotificationService` since it also try to send an email to the reseller and I don't think we want to do that in this scenario.",2
87273445,2021-05-18 10:17:42.133,Trial plans available options in purchase flow on GitLab.com,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

As part of https://gitlab.com/gitlab-org/gitlab/-/issues/322043 Trials were created as their own plan.

These plans are there so we can discern which users are on a trial vs. not on a trial.

Users **should not** be able to choose these options in the purchase flow. That's what this issue is about :)

![image](/uploads/6ee5ca0422d73a284e6cdd4a5dc8dc2c/image.png)

This can be seen when hitting https://gitlab.com/-/subscriptions/new?plan_id=2c92a0ff76f0d5250176f2f8c86f305a&test=capabilities",2
87087435,2021-05-14 13:11:26.006,Create new subscription for CI Minutes if customer doesn't have an active subscription,"Created by @doniquesmit 

## :reminder_ribbon:  &nbsp; Note to the engineer working on this issue

Additional context and customer cases can be found in this related issue https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1485

## Description

- Customer tries to make a purchase for a CI minute pack, but the purchase fails with error: ""Body: {""results""=>[{""Success""=>false, ""Errors""=>[{""Code""=>""INVALID_VALUE"", ""Message""=>""The Contract effective date should not be later than the term end date of the basic subscription.""}]}]}""
- Customer does have previous CI minute purchase showing as subscription widget
- Namespace is linked to the previous CI minute purchase
- SE tried to clear namespace linked with CI minute purchase, but this fails

## Customer info

- [Zuora account](https://www.zuora.com/apps/CustomerAccount.do?method=view&id=2c92a00e6f1e0d65016f31c3b0ea6b2b)
- [Customers portal](https://customers.gitlab.com/admin/customer/141666/edit)
- [ZD ticket](https://gitlab.zendesk.com/agent/tickets/212579)

## Sentry error

https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2550053/?referrer=gitlab_plugin

```
Stacktrace (most recent call first):

  lib/gitlab/logger_helpers.rb:24:in `public_send'
    Gitlab::Logger.public_send(log_level, object, options) # rubocop:disable GitlabSecurity/PublicSend
  lib/gitlab/logger_helpers.rb:24:in `log'
    Gitlab::Logger.public_send(log_level, object, options) # rubocop:disable GitlabSecurity/PublicSend
  lib/gitlab/logger_helpers.rb:13:in `log_error'
    log(:error, error, extra: extra)
  app/jobs/zuora/actions/amend.rb:11:in `rescue in perform'
    log_error(
  app/jobs/zuora/actions/amend.rb:6:in `perform'
    def perform(requests)
  lib/zuora/subscription.rb:33:in `amend'
    Zuora::Actions::Amend.perform_now(requests)
  app/services/amendment_base_service.rb:138:in `send_zuora_amendment_request'
    sort_amend_result(format_amend_result(Zuora::Subscription.amend([options])))
  app/services/amendment_base_service.rb:33:in `amend!'
    send_zuora_amendment_request(options)
  app/services/amend_subscription_service.rb:31:in `execute'
    result = amend!
  app/controllers/subscriptions_controller.rb:63:in `update'
    result = AmendSubscriptionService.new(@subscription, permitted_params_for_update).execute
...
(114 additional frame(s) were not displayed)

[IronBank] Failed to amend record
```",2
87082041,2021-05-14 11:11:23.945,Update Subscription Story with new manage action,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Situation

We recently introduced a new UI element in the Subscription Component to make it possible for customers to copy an `Activation Code` (gitlab-org/customers-gitlab-com#3006). See example here:

||
|-|
|![](https://gitlab.com/gitlab-org/customers-gitlab-com/uploads/06008e55d9154849ffe5ddb36442c7da/Screenshot_2021-04-27_at_07.28.59.png)|

(There's also have a `Copy license file` action and the 2 actions are mutually exclusive).

### Complication

The Subscription story does not contain a case for this meaning the smoke tests are not taking this scenario into account.

### Proposal

Given we added storyshots for smoke tests (gitlab-org/customers-gitlab-com#932), let's add this scenario to the Subscription stories.

### Result

Besides having the new scenario covered, we would expect a (slight) increase in coverage.",2
87029306,2021-05-13 11:41:15.501,Expired subscriptions - failing to retrieve one subscription stops the entire downgrade task,"### Summary

When running the expired subscription downgrade task in production, the following error can be triggered:

```text
rake aborted!
Faraday::ConnectionFailed: execution expired
/home/gitlab-customers/customers-gitlab-com/vendor/bundle/ruby/2.6.0/gems/faraday-0.17.3/lib/faraday/adapter/net_http.rb:87:in `perform_request'
[...]
/home/gitlab-customers/customers-gitlab-com/vendor/bundle/ruby/2.6.0/gems/iron_bank-4.4.1/lib/iron_bank/cacheable.rb:41:in `where'
/home/gitlab-customers/customers-gitlab-com/app/models/customer.rb:120:in `block in raw_subscriptions'
/home/gitlab-customers/customers-gitlab-com/lib/utils/strong_memoize.rb:27:in `strong_memoize'
/home/gitlab-customers/customers-gitlab-com/app/models/customer.rb:119:in `raw_subscriptions'
/home/gitlab-customers/customers-gitlab-com/app/finders/subscriptions_finder.rb:69:in `subscriptions'
/home/gitlab-customers/customers-gitlab-com/app/finders/subscriptions_finder.rb:22:in `by_id_or_name'
/home/gitlab-customers/customers-gitlab-com/app/models/customer.rb:96:in `find_subscription'
/home/gitlab-customers/customers-gitlab-com/app/models/order.rb:131:in `subscription'
/home/gitlab-customers/customers-gitlab-com/app/services/check_order_in_sync_service.rb:69:in `zuora_subscription'
/home/gitlab-customers/customers-gitlab-com/app/services/check_order_in_sync_service.rb:34:in `end_date_in_sync_with_zuora?'
/home/gitlab-customers/customers-gitlab-com/app/services/check_order_in_sync_service.rb:11:in `execute'
/home/gitlab-customers/customers-gitlab-com/app/services/check_order_in_sync_service.rb:5:in `execute'
/home/gitlab-customers/customers-gitlab-com/app/jobs/expire_order_job.rb:16:in `perform'
[...]
```

(This error on [Sentry](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2626906/))

This error, which can happen randomly, means that we didn't manage to retrieve a subscription for a given order from Zuora.

### Steps to reproduce

run the `orders:downgrade_expired_subscriptions` task in production.

### What is the current *bug* behavior?

Error triggers and rake task stops.

### What is the expected *correct* behavior?

The fact that we get this error when retrieving a subscription for one order should not be a reason to stop the rake task, we should carry on in processing the remaining orders.",2
86980460,2021-05-12 20:40:43.804,Prevent HTTP Requests When No VCR Cassette Is Loaded,"### Problem

We appear to allow HTTP requests to be made by the test suite when VCR does not have any cassettes loaded:  https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/34e3aa33adfd643f98d6ce3277a8fc449393d893/spec/support/vcr.rb#L6

This makes it too easy to accidentally write a test that makes real HTTP requests every time it runs.

Here's one example of how this can happen:  https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3209#note_570376985

In short, if we use `let_it_be` with a factory that makes HTTP requests, then this will bypass VCR and always make real HTTP requests.  This makes it very easy to accidentally slip real HTTP requests into the test suite.  And there may be other ways this can happen.

Here's another place we're we've discussed this being an issue:  https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2565#note_558470717

I [made an MR to experiment with changing this](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3217) within the scope of ~""Stuff that should Just Work"".  In doing so, I discovered that we have a few tests that seem to make HTTP requests every test run.  Here is one such instance caused by using `let_it_be`: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3217/diffs#808512b32fff3a0a4332697e4a370a042f91ae1a_748_748

One easy way to verify that the test suite is bypassing VCR and attempting to make real HTTP requests is to disconnect from the network (disable your wifi, unplug your ethernet cable, etc) and then run the following spec: https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/34e3aa33adfd643f98d6ce3277a8fc449393d893/spec/controllers/subscriptions_controller_spec.rb#L747

It will generate errors like the following:

```
Faraday::ConnectionFailed:
  Failed to open TCP connection to rest.apisandbox.zuora.com:443 (getaddrinfo: nodename nor servname provided, or not known)
```

In contrast, it passes locally if the network is enabled.

#### Notes

Here are just a few further notes from code spelunking this:

This appears to be the magic that lets us use `:vcr` in our specs to get VCR to automatically find and load cassettes:  https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/98e48709688a0478ec245b0e2155b545c5986940/spec/support/vcr.rb#L9

That function is here in VCR:  https://github.com/vcr/vcr/blob/5c0ded824dd8b1f9d50ab5d48a53be065b94ece8/lib/vcr/configuration.rb#L420

Which uses RSpec’s `config.before(:each)` to load cassettes:  https://github.com/vcr/vcr/blob/5c0ded824dd8b1f9d50ab5d48a53be065b94ece8/lib/vcr/test_frameworks/rspec.rb#L35

Which seems to run after `before(:all)` (see the Order section):  https://rubydoc.info/github/rspec/rspec-core/RSpec/Core/Hooks

`let_it_be` seems to be equivalent to using `before_all`:  https://test-prof.evilmartians.io/#/recipes/let_it_be?id=modifiers

Which I think ultimately uses `before(:all)` under the hood: https://github.com/test-prof/test-prof/blob/7d8effe48fa65418b0ee9a77d932d86fed240b51/lib/test_prof/recipes/rspec/before_all.rb

I’m not sure I’m tracing through all that 100% correctly, but it’s in the ballpark.

### Proposal

Let's [change this line](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/34e3aa33adfd643f98d6ce3277a8fc449393d893/spec/support/vcr.rb#L6) to `c.allow_http_connections_when_no_cassette = false` so that HTTP requests are always denied in the test suite unless we specifically allow them for a particular test.

Unfortunately, I haven't found a clear way to disable VCR and allow http requests for specific tests, which may be why we currently have `allow_http_connections_when_no_cassette` set to `true`.

But perhaps something like the following may work:

```ruby
WebMock.allow_net_connect!
VCR.turn_off!
```

Followed by the following to re-enable VCR and prevent HTTP connections:

```ruby
WebMock.disable_net_connect!
VCR.turn_on!
```

Or maybe tests that require HTTP connections should be moved to the QA test suite?

Maybe there are other ways to solve this?

### Result

Our test suite will stop leaking HTTP requests.

It will be harder to accidentally make HTTP requests from the test suite.  VCR / WebMock will always block the requests unless clearly disabled for a particular spec.

### Next steps (if any)

### How will we measure success?",5
86891968,2021-05-11 20:15:44.710,Follow up: Notification on unlinked subscriptions execution,"### Problem

:warning: We don't expect any code to be delivered as part of this effort, this issue is to consistently track any unexpected event in the first executions of `OrphanedComSubscriptionEmailCronJob`

https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1887 introduced a cron job to notify customers about paid .com subscriptions that are not linked to a GitLab namespace.

This job will run weekly on Mondays:
- For the first Monday of the month it will notify all active + paid + .com + unlinked subscriptions
- For any other monday it will refine this sets to subscriptions created in the last 36 days

We want to follow up on the first executions and validate there are no unexpected failures:
- [x] Monday, May 17th 
- [x] Monday, May 24th
- [x] Monday, May 31st
- [x] Monday, May 7th (Bigger run without the `last 36 days restriction`

### Proposal

For the provided dates:
- Check Sentry and the sidekiq queues for any unexpected behavior.
- Update this issue.",1
86785692,2021-05-10 13:19:52.760,Use metadata to set feature tag for feature specs,"The following discussion from !3209 should be addressed:

- [ ] @ddavison started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3209#note_570157634): 

    > _Nonblocker comment_ It's odd we don't derive this metadata from the `spec/features/*` directory.  Maybe we should consider doing this later:
    > 
    > ```ruby
    > #=> spec_helper.rb pseudo
    > RSpec.configure do |config|
    >   config.define_derived_metadata(path: %r{/spec/feature}) do |meta|
    >     meta[:feature] = true
    >   end
    > end
    > ```
    > 
    > That way we could omit the adding the arguably superfluous `:feature` tag.",1
86760810,2021-05-10 07:20:18.406,Remove individual usages of aggregate_failures,"## Problem

In https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3214#note_571133280 `aggregate_failures` was used within an individual test case. Although `aggregate_failures` is enabled for the [whole test suite](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/a17ae042dae80ec4803a36bb983b3a2bc6c8b372/spec/spec_helper.rb#L46). Looking through the code showed that there are a few places where this setting is explicitly set for individual test cases or spec files.

## Proposal

Clean those places up to fall back to the global setting of `aggregate_failures`.

## Result

No mixed usage of `aggregate_failures` throughout the test suite.",1
86569430,2021-05-06 07:52:19.468,Include product title in success modal,"### Proposal

In `app/frontend/javascripts/purchase/components/purchase_success_modal.vue`, 

When a subscription is purchased, we want to show the product title in the success confirmation modal below the title, as show in the screenshot:

<img src=""/uploads/012feedf63b840568c06e8044c9f64da/Screen_Shot_2021-05-06_at_10.47.21.png"" width=""800""/>

### Details 

We've 2 places where new subscription purchases could happen:

- `new_ee_subscription.vue` for self-managed subscriptions
- `new_gitlab_subscription.vue` for GitLab.com subscriptions

We could leverage Vue [slots](https://vuejs.org/v2/guide/components-slots.html) or find a better solution.",2
86389935,2021-05-03 13:45:42.388,Replace clipboard.js usage with ClipboardAPI,"## Problem

For copying text to clipboard we’re using `clipboard.js` that use `document.execCommand('copy')`.

MDN says using the mention method above [is discouraged](https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand), alternatively we can use [Clipboard API](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Interact_with_the_clipboard#using_the_clipboard_api).

`clipboard.js` has a [stale closed issue](https://github.com/zenorocha/clipboard.js/issues/683) about using the Clipboard API, but no maintainer has dropped by.

Clipboard API is [supported](https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API#browser_compatibility) by the browsers that [GitLab supports](https://docs.gitlab.com/ee/install/requirements.html#supported-web-browsers).

## Proposal

Replace `clipboard.js` usage with the new Clipboard API.

Example of using the Clipboard API: https://gitlab.com/atlas-italia/atlas-sdmx/-/blob/main/src/components/SmdXplorer/index.ts#L57

- [x] Remove `no-enforce-focus` property [`purchase_success_modal.vue`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/00c5a795850c266bc37d5e7e4415f1781cd4127a/app/frontend/javascripts/purchase/components/purchase_success_modal.vue#L58-60) if !3182 is merged before this one.",2
86384646,2021-05-03 12:20:38.168,Onboard new team member,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

We've got a new engineer joining the Fulfillment FE Purchase team - yay!

This issue captures the time allocation our onboarding buddy will need to be a good onboarding buddy :)

### TODO

- https://gitlab.com/gitlab-org/fulfillment-meta/-/issues/215
- https://gitlab.com/gitlab-org/frontend/onboarding/-/issues/14
- https://gitlab.com/gitlab-com/team-member-epics/employment/-/issues/2740",3
86217062,2021-04-29 12:23:33.682,Remove unused VCR cassettes and fix prefix for detection,"### Problem

While working on https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2748, an investigated VCR cassette didn't have a corresponding spec. While digging further into this it turned out that it isn't used at all. After running the test suite to detect unused cassettes with a command (`VCR_REPORT_UNUSED_CASSETTES=true bundle exec rspec`) from the my local reverse search in the terminal, nothing turned up. Looking into to the definition of the prefix, it turned out that only `1` is accepted as a value. Previously `true` was also working but that was changed in https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2579.

It also turns out that the CI/CD variable for `VCR_REPORT_UNUSED_CASSETTES` for the pipelines is set to `true`.

### Proposal

- [x] Remove all unused VCR cassettes
- [x] ~~Change value for CI/CD variable to `1`~~ A better suggestion came up [in Slack](https://gitlab.slack.com/archives/CMJ8JR0RH/p1619767112159100?thread_ts=1619700985.141000&cid=CMJ8JR0RH) about removing the CI/CD variable the value is already set via the [.gitlab-ci.yml](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/3f5f471ba8dadc29f3f1e5b4914be59c0e8d72ae/.gitlab-ci.yml#L42).

### Result

- Removal of unused VCR cassettes from the code.
- RSpec job in CI pipeline detects unused VCR cassettes again",1
86191201,2021-04-29 07:28:26.298,Add test coverage for EoaStarterBronze::AutoRenewService,"# Problem
While working on !3160 and renaming `EoaAutoRenewService` to `EoaStarterBronze::AutoRenewService`, no test coverage for the class or the rake task (`lib/tasks/iron_bank.rake`) that uses it was found.

# Proposal

Add test coverage for at least the service class.",1
86099272,2021-04-28 07:08:29.450,Use named subject in RSpec tests,"## What

Use named subject, [doc excerpt](https://docs.gitlab.com/ee/development/testing_guide/best_practices.html#subject-and-let-variables):

> Avoid referencing subject in examples. Use a named subject subject(:name), or a let variable instead, so the variable has a contextual name.

## Steps

1. Enable Rubocop rule and exclude existing offenses - https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3388
1. Fix all other [places](#existing-offenses-to-fix)

### Existing offenses to fix
- [x] qa/spec/unit/helper/zuora_client_spec.rb
- [x] spec/controllers/api/countries_controller_spec.rb
- [x] spec/controllers/api/customers_controller_spec.rb
- [x] spec/controllers/concerns/simple_encryption_spec.rb
- [x] spec/controllers/eula_requests_controller_spec.rb
- [x] spec/controllers/instance_review_controller_spec.rb
- [x] spec/controllers/instance_review_settings_controller_spec.rb
- [x] spec/controllers/invoices_controller_spec.rb
- [x] spec/controllers/orders_controller_spec.rb
- [x] spec/controllers/payment_methods_controller_spec.rb
- [x] spec/controllers/zuora_callbacks_controller_spec.rb
- [x] spec/features/rails_admin/list_gitlab_namespaces_spec.rb
- [x] spec/finders/invoices_finder_spec.rb
- [ ] spec/finders/license_finder_spec.rb (the class doesn't seem to be used anymore)  - !4161
- [x] spec/finders/order_finder_spec.rb
- [x] spec/finders/subscriptions_finders_spec.rb
- [x] spec/graphql/mutations/cloud_activations/activate_spec.rb
- [x] spec/graphql/types/plan_tag_type_spec.rb
- [x] spec/graphql/types/subscription_type_spec.rb
- [x] spec/helpers/registrations_helper_spec.rb
- [x] spec/helpers/subscription_upgrades_helper_spec.rb
- [x] spec/jobs/application_job_spec.rb
- [x] spec/jobs/billing_rate_update_cron_job_spec.rb
- [x] spec/jobs/billing_rate_update_job_spec.rb
- [x] spec/jobs/expire_trial_cron_job_spec.rb
- [x] spec/jobs/gitlab/sync_order_job_spec.rb
- [x] spec/jobs/send_upcoming_reconciliation_email_job_spec.rb
- [x] spec/jobs/zuora/actions/amend_spec.rb
- [x] spec/jobs/zuora/actions/delete_spec.rb
- [x] spec/jobs/zuora/actions/subscribe_spec.rb
- [x] spec/jobs/zuora/actions/update_spec.rb
- [x] spec/lib/admin_builder_spec.rb - !4088
- [x] spec/lib/client/license_app/license_data_spec.rb - !4051 
- [x] spec/lib/client/license_app_spec.rb - !4088
- [x] spec/lib/country_spec.rb - !4088
- [x] spec/lib/errors_spec.rb - !4088
- [x] spec/lib/gem_extensions/iron_bank/local_spec.rb - !4088
- [x] spec/lib/gitlab/http_spec.rb - !4088
- [x] spec/lib/gitlab/tracking_spec.rb - !4088
- [x] spec/lib/gitlab_danger_spec.rb - !4088
- [x] spec/lib/health_check/custom_spec.rb - !4088
- [x] spec/lib/middleware/health_check/health_check_responder_spec.rb - !4088
- [x] spec/lib/middleware/zuora_proxy_spec.rb - !4088
- [x] spec/lib/salesforce/attribute_builder_spec.rb - !4088
- [x] spec/lib/salesforce/object_type_mapper_spec.rb - !4088
- [x] spec/lib/subscription_current_version_finder_spec.rb - !4088
- [x] spec/lib/subscription_params_generator_spec.rb - !4088
- [x] spec/lib/utils/escape_spec.rb - !4088
- [x] spec/lib/utils/strong_memoize_spec.rb - !4088
- [x] spec/lib/validators/subscription_validator_spec.rb - !4088
- [x] spec/lib/world_spec.rb - !4088
- [x] spec/lib/zuora/associations_spec.rb - !3867
- [x] spec/lib/zuora/digital_signature_spec.rb - !3867
- [x] spec/lib/zuora/fields_spec.rb - !3867
- [x] spec/lib/zuora/query_builder_extension_spec.rb - !3867
- [x] spec/lib/zuora/resource_spec.rb - !3867
- [x] spec/lib/zuora/subscription_spec.rb - !3867
- [x] spec/mailers/admin_mailer_spec.rb - !3866
- [x] spec/mailers/custom_devise_mailer_spec.rb - !3866
- [x] spec/mailers/customer_mailer_spec.rb - !3866
- [x] spec/mailers/gitlab_internal_mailer_spec.rb - !3866
- [x] spec/models/amendment_spec.rb - !4080
- [x] spec/models/customer_spec.rb - !4080
- [x] spec/models/instance_review_setting_spec.rb - !4080
- [x] spec/models/instance_review_spec.rb - !4080
- [x] spec/models/license_seat_link_spec.rb - !4080
- [x] spec/models/order_spec.rb - !4080
- [x] spec/models/plan_spec.rb - !4080
- [x] spec/models/plans_finder_spec.rb - !4080
- [x] spec/models/reconciliation_spec.rb - !4080
- [x] spec/models/subscription_spec.rb - !4080
- [x] spec/models/trial_user_spec.rb - !4080
- [x] spec/presenters/customer_presenter_spec.rb - !4020
- [x] spec/presenters/order_renewal_presenter_spec.rb - !4020
- [x] spec/presenters/payment_method_presenter_spec.rb - !4020
- [x] spec/presenters/payment_methods_collection_presenter_spec.rb - !4020
- [x] spec/presenters/plan_upgrade_presenter_spec.rb - !4020
- [x] spec/presenters/product_presenter_spec.rb - !4020
- [x] spec/presenters/subscription_license_presenter_spec.rb - !4020
- [x] spec/requests/marketo_request_spec.rb - !3866
- [x] spec/serializers/gitlab_plan_serializer_spec.rb - !3867
- [x] spec/serializers/subscription_serializer_spec.rb - !3867
- [x] spec/serializers/upgrade_amendment_response_serializer_spec.rb - !3867
- [ ] spec/services/amendment_base_service_spec.rb - !4161
- [ ] spec/services/compliance_check_service_spec.rb - !4161
- [ ] spec/services/coupons/export_service_spec.rb - !4161
- [ ] spec/services/create_order_service_spec.rb - !4161
- [ ] spec/services/eoa_starter_bronze/calculate_next_price_service_spec.rb - !4161
- [ ] spec/services/eoa_starter_bronze/offer_renewals_count_service_spec.rb - !4161
- [ ] spec/services/find_or_create_customer_service_spec.rb - !4161
- [ ] spec/services/fix_cancelled_subscription_for_order_service_spec.rb - !4161
- [ ] spec/services/gitlab/admin/get_namespace_service_spec.rb - !4161
- [ ] spec/services/gitlab/base_trial_service_spec.rb - !4161
- [ ] spec/services/gitlab/hosted_plans/create_trial_service_spec.rb - !4161
- [ ] spec/services/gitlab/hosted_plans/extend_reactivate_trial_base_service_spec.rb - !4161
- [ ] spec/services/gitlab/hosted_plans/extend_trial_service_spec.rb - !4161
- [ ] spec/services/gitlab/hosted_plans/purchased_add_ons/ci_minutes_service_spec.rb - !4161
- [ ] spec/services/gitlab/hosted_plans/reactivate_trial_service_spec.rb - !4161
- [ ] spec/services/gitlab/namespaces/get_service_spec.rb - !4161
- [ ] spec/services/gitlab/namespaces/list_service_spec.rb - !4161
- [ ] spec/services/gitlab/namespaces/update_service_spec.rb - !4161
- [ ] spec/services/gitlab/self_hosted_plans/create_trial_service_spec.rb - !4161
- [ ] spec/services/gitlab/subscription/update_service_spec.rb - !4161
- [ ] spec/services/instance_review_create_service_spec.rb - !4161
- [ ] spec/services/license_notification_service_spec.rb - !4161
- [ ] spec/services/reconciliation_eligibility_service_spec.rb - !4161
- [ ] spec/services/reconciliation_service_spec.rb - !4161
- [ ] spec/services/reseller_notification_service_spec.rb - !4161
- [ ] spec/services/subscription_manager_service_spec.rb - !4161
- [ ] spec/services/update_contact_service_spec.rb - !4161
- [ ] spec/services/zuora_callbacks/credit_card_validation_service_spec.rb - !4161
- [x] spec/tasks/cleanup_customer_xss_payload_spec.rb - !4020
- [x] spec/viewers/transaction_viewer_spec.rb - !4020
- [x] spec/views/layouts/_impersonate_alert.html.haml_spec.rb - !4020
- [x] spec/workers/create_amendment_worker_spec.rb - !3866
- [x] spec/workers/salesforce/create_account_worker_spec.rb - !3866
- [x] spec/workers/salesforce/create_opportunity_worker_spec.rb - !3866
- [x] spec/workers/update_subscription_eoa_starter_bronze_offer_worker_spec.rb - !3866",3
85838013,2021-04-23 17:12:52.705,"Effective Price should use Invoice Item - Unit Price, not Invoice Item - Charge Amount.","<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

@a_luna @amandarueda looking at the data coming over to salesforce, it looks like we had a bad mapping for what we are sending to Effective Price: https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/services/salesforce/create_opportunity_objects_service.rb#L310

That line should be using the Invoice Item Unit Price field and not the Charge Amount. I see that this object is created by Zuora::InvoiceItem, and want to make sure that this might be an additional field it needs instead of a complete change at that level as I do not know what else is using the Charge Amount.

### Proposal

The `effective_price` value sent to the [`CreateRatePlanChargeService`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/9f0fd64a397a5fc3ff3ea3a5e9131ac7fd3f30c9/app/services/salesforce/create_quote_rate_plan_charge_service.rb) should map to `InvoiceItem->Unit Price` instead of `InvoiceItem->Charge Amount`.

[This line](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/services/salesforce/create_opportunity_objects_service.rb#L310) needs to change to `effective_price: invoice_item.unit_price`

### Result

### Next steps (if any)

### How will we measure success?",2
85790188,2021-04-23 06:20:03.873,AutoRenewJob fails for no credit_card_expiration_year,"### Problem

When fetching the default payment for a customer, the default payment returns as a 'Credit Card' and it do exists within Zuora but some of the fetched Credit Cards payments has the `credit_card_expiration_year` and `credit_card_expiration_month` as nil.

Due to which the [check here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/services/auto_renew_service.rb#L40) results in throwing an exception `TypeError: no implicit conversion from nil to integer` 

### Proposal

Check for the presence of `credit_card_expiration_year` and `credit_card_expiration_month` before checking whether the credit card date is valid 

https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2586755/?query=is%3Aunresolved

https://customers.gitlab.com/sidekiq/retries",1
85782790,2021-04-23 01:34:45.411,Additional indexes on license_seat_link,"### Problem
Nearly every day customers.gitlab.com suffers degraded performance between 00:00 and 01:00 UTC, for a few minutes at least, often paging the SRE on-call because our blackbox probes are failing.  For the latest example, see https://gitlab.com/gitlab-com/gl-infra/production/-/issues/4314

### Proposal
Add two indexes to license_seat_link, on `report_timestamp` and `zuora_subscription_name`, to make the queries more efficient than having to perform a full sequential scan of the entire table.

### Result

Hopefully better uptime/performance and fewer pages for the on-call SRE

### Next steps (if any)

### How will we measure success?

Number of pages for the on-call SRE",1
85731902,2021-04-22 10:11:56.414,BE: Create CI Minutes architecture proposal,"### Summary

As part of https://gitlab.com/groups/gitlab-org/-/epics/5715, we need to draft an initial proposal of how CI provisioning can be implemented.

At a high level, this should include:

- Storing CI minute purchases
- Syncing/Updating GitLab.com with CI minute purchases
- Retrieving current CI minute usage statistics
- more tbc.

Further information and a summary can be found here: https://gitlab.com/groups/gitlab-org/-/epics/4331#note_529739414",2
85699411,2021-04-21 22:03:36.391,Remove batch_id and headers from coupon generator csv,"Based on conversation [here](https://gitlab.com/gitlab-com/marketing/community-relations/community-operations/community-operations/-/issues/75#note_557366613) two things need to happen:

* Remove `.csv` `batch_id` column
* Remove `.csv` headers

https://gitlab.com/gitlab-org/customers-gitlab-com/blob/4a1d1c718f408ee3c5edaaaf6e107341c7b3944e/app/services/coupons/export_service.rb#L3
 

### Problem

### Proposal

### Result

### Next steps (if any)

### How will we measure success?",1
85312809,2021-04-16 12:09:29.965,Community Programs Self-Checkout - Controllers/views/routes for Community Programs,"As part of https://gitlab.com/groups/gitlab-org/-/epics/5712 users will be guided to CustomersDot to claim their subscription/license

### TODO

Create controllers/views/routes to support:

* [SaaS or Self-Managed landing page](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3010)
  ```bash
  customers.gitlab.com/subscriptions/community_program/new?coupon_code=<COUPON>&product=<PRODUCT>
    # renders: /subscriptions/community_program/new.html.haml
  ```
* Community program SaaS purchase route
  ```bash
  customers.gitlab.com/subscriptions/community_program/new?coupon_code=<COUPON>&product=<PRODUCT>&edition=saas
    # renders: /subscriptions/community_program/new_saas.html.haml
  ```
* Community program self-managed purchase route
  ```bash
  customers.gitlab.com/subscriptions/community_program/new?coupon_code=<COUPON>&product=<PRODUCT>&edition=self_managed
    # renders: /subscriptions/community_program/new_self_managed.html.haml
  ```

`<COUPON>` = coupon code (ie 123456)
`<PRODUCT>` = one of `['oss', 'edu', 'startup']` (case insensitive)

If the user is not authenticated the action will redirect to sign-in/register first.
If the FF is disabled, or the requested product cannot be found, the action will redirect to the plans page.",5
85312465,2021-04-16 12:01:44.549,SaaS - Community Programs Self-Checkout - Coupon code input,"As part of https://gitlab.com/groups/gitlab-org/-/epics/5068 users will be guided to CustomersDot need input the coupon code they've received.

[Designs](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2677/designs/Community_programs_checkout___Invalid_coupon_code_error.png)


![image](/uploads/196f6cc2c92d5541d007507af9f48688/image.png)


### TODO

1. Add input field for coupon code
1. Pass coupon code to API payload when purchasing subscription following https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2362
1. Render error message inline if code is consumed `This code has already been used.` or not valid `This code is not valid. Try re-entering the code from your email`

### How to see the pages

- Make sure you've the [`community_program_coupons`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/91/edit) enabled for your setup.
- Login to your CustomersDot
- Navigate to any of:
  - `/subscriptions/community_program/new?edition=self_managed&coupon_code=coupon_test&product=oss`
  - `/subscriptions/community_program/new?edition=saas&coupon_code=coupon_test&product=oss`",2
85311863,2021-04-16 11:49:09.655,Community Programs Self-Checkout - namespace-select,"As part of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2363#note_551260268 users will be guided to CustomersDot to apply their SaaS subscription. If they do not have groups created or correct ownership they need to address this problem in GitLab.com

[Designs](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2677/designs/SaaS_-_Community_programs_checkout___No_group_error_state.png)


![image](/uploads/1edd41d1ebc902d1086478219db38bc6/image.png)


### TODO

1. Modify `namespace-select` to have [clarifying information  on  Owner permission](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2677/designs/SaaS_-_Community_programs_checkout___No_group_error_state.png#note_547892789)
1. Modify `namespace-select` to give danger alert and a link to GL.com [if no groups are detected](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2677/designs/SaaS_-_Community_programs_checkout___No_group_error_state.png#note_543289696)",3
85311390,2021-04-16 11:42:03.172,Community Programs Self-Checkout - subscription-details component,"As part of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2363#note_551260268

[Designs](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2677/designs/SaaS_-_Community_programs_checkout.png)


![image](/uploads/1b55105d3393b825ae68481c4a6c64ca/image.png)


### TODO

When creating this component, it needs a flag to hide prices for community program

1. Extract component from existing purchase flows
1. Consume component in Self-Managed community program self-checkout

### How to see the pages

- Make sure you've the [`community_program_coupons`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/91/edit) enabled for your setup.
- Login to your CustomersDot

- Navigate to any of:
  - [/subscriptions/community_program/new?product=edu&edition=self_managed](http://localhost:5000/subscriptions/community_program/new?product=edu&edition=self_managed)
  - [/subscriptions/community_program/new?coupon_code=coupon_test&product=oss&edition=self_managed](http://localhost:5000/subscriptions/community_program/new?coupon_code=coupon_test&product=oss&edition=self_managed)
  - [/subscriptions/community_program/new?product=startup&edition=self_managed](http://localhost:5000/subscriptions/community_program/new?product=startup&edition=self_managed)",5
85311175,2021-04-16 11:38:12.957,Community Programs Self-Checkout - purchase-confirmation-card allow for no CC,"As part of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2363#note_551260268 users will be able to complete the checkout flow of community programs without giving a credit card.

![image](/uploads/6fdc044bc30c8b210daf5353aa61270e/image.png)


### TODO

1. control showing payment methods and make `paymentMethods` prop optional
1. IMPORTANT it should be explicitly opt-in to not enter a credit card. In the majority of our flows the user has to give a credit card, this should be the default.",2
85310707,2021-04-16 11:34:06.165,Community Programs Self-Checkout - Skeleton apps,"As part of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2363#note_547510966 we'll have two purchase flows. SaaS and Self-Managed. This issue covers creating skeleton apps we can iterate on.


### TODO

* Pass variables from HAML and query string to Vue app
* ""Claim subscription"" title
* dynamic subtitle
* form placeholder
* identify if this is EDU | Start-up | OSS",2
85309464,2021-04-16 11:28:52.407,Community Programs Self-Checkout - heading-and-description component,"As part of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2363#note_551260268 we need a `heading-and-description` (or whichever name makes sense) in multiple components

[Designs](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2677/designs/SaaS_-_Community_programs_checkout.png)


![image](/uploads/a3ac0614c2b3f2239c2e6da5f91469a1/image.png)


### TODO

1. Create component and consume in existing flows
1. Add to Community Programs Self-Checkout SaaS and Self-Managed",2
85308370,2021-04-16 11:21:32.177,Community Programs Self-Checkout - SaaS or Self-Managed landing page,"As part of https://gitlab.com/groups/gitlab-org/-/epics/5068 users will be guided to CustomersDot where they choose Self-Managed or SaaS to redeem their code.

[User flow](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2677/designs/User_flow.png)


![image](/uploads/1ae0f0a8de2b44a87260bb55052ee08b/image.png)


### TODO

1. Extract [the HAML code on the current Plans](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/d06a549e3c8bd20fc78403ed5317f85ba169776d/app/views/plans/index.html.haml#L16-17) landing page to a shared HAML partial.
1. Ensure ""Claim"" buttons link to correct purchase flows",2
85289647,2021-04-16 05:43:56.243,SyntaxError: JSON.parse: unexpected character at line 1 column 1 of the JSON data,"https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2508642/?referrer=gitlab_plugin

```
SyntaxError: JSON.parse: unexpected character at line 1 column 1 of the JSON data
  at tryJsonParse (./app/frontend/javascripts/lib/try_json_parse.js:13:17)
  at apply (./app/frontend/javascripts/sessions/init_auth.js:20:23)
```",2
85277261,2021-04-15 22:13:48.279,EdCast Settlement Revenue SKU,"# SKU Request Summary

<!---
Provide a brief description of what this SKU will be used for.
--->



## SKU Requirements

In order to expedite your request, please complete all of the following information.
Any questions about this template or this request can be directed to @amandarueda in the comments of this issue.

* [x] SKU Name: EdCast Settlement Revenue
* [x] SKU Code/ID: [EdCast Settlement Revenue](https://docs.google.com/spreadsheets/d/1QQ_9WmgvvrIaNPzGiODojUd2QJzLeV46JxNqHgZWTOU/edit?usp=sharing)
* [x] Zuora Plan Name: [EdCast Settlement Revenue](https://docs.google.com/spreadsheets/d/1QQ_9WmgvvrIaNPzGiODojUd2QJzLeV46JxNqHgZWTOU/edit?usp=sharing)
* [x] Zuora Plan ID: [EdCast Settlement Revenue](https://docs.google.com/spreadsheets/d/1QQ_9WmgvvrIaNPzGiODojUd2QJzLeV46JxNqHgZWTOU/edit?usp=sharing)
* [ ] Service type: add-on
* [x] Does this need to be purchase-able via CustomersDot? No
* [x] Does this service renew? No
     * [ ] If yes, what is the renewal cadence? `monthly | annually | other`
* [ ] Should an email be sent indicating the subscription is coming to an end? No 
* [ ] Is there a unit of measure, if so what? Yes Education Service
* [ ] Does this service provision anything? other
     * [ ] If yes, please describe in detail what should be provisioned including the systems affected:
* [ ] How soon do you need this SKU ? 2021-04-30
* [x] Who in Sales-Ops approved this request: @dhong cc: @Jesse @james_harrison 
* [ ] Link to originating Finance issue: https://gitlab.com/gitlab-com/Finance-Division/finance/-/issues/3924
* [ ] Apply the appropriate `BTG Priority` label to this issue.",2
85273221,2021-04-15 19:55:34.275,Investigate orders without corresponding subscription object in production,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

While running the rake task to update subscriptions in Zuora with their namespace data (https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2962), some orders came through with a subscription name but there was no corresponding subscription object when trying to access `order.subscription` (relevant [method](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/b1bb01424444a4f020dd58458e9679eb3ce970fa/app/models/order.rb#L117-135)). Because of this we didn't update the subscription in Zuora because `order.subscription&.z_subscription` was `nil`.

Not really sure if this really is a problem, but just wanted to flag it and check since there were some active SAAS non-trial orders like this.

#### Examples

I grabbed these from the task output (there were many more)

```
order1 = Order.find 114699
=> #<Order id: 114699, REDACTED >
order1.subscription_name
=> ""A-S00033377""
order1.subscription
=> nil

order2 = Order.find 115401
=> #<Order id: 115401, REDACTED >
order2.subscription_name
=> ""A-S00033654""
order2.subscription
=> nil
```

### Proposal

- Generate a report with all orders that do not have a subscription object.
- Trace origin of the order.
- Determine possible cause.
- Based on determination above, plan for remediation such that the order becomes correctly formed or properly cancelled.

### Result

### Next steps (if any)

### How will we measure success?",5
85210766,2021-04-14 23:08:11.603,Some Auto-Renewals in CustomersDot are throwing errors and not renewing,"### Problem

**Based on the data found in Zuora for Subscriptions with `Enter a number of active users greater than or equal to your current` ERROR recorded in the Subscription Notes field, the first occurrence was on February 19, 2021.**

**Summary:**
There seems to be an issue with the CustomersDot Auto-Renewal flow that is sometimes causing only the upgrade portion (UpdateProduct amendment) of a customer's renewal to be recorded in Zuora and then terminate with out an actual renewal. In some cases no UpdateProduct amendment is done and an error is recorded instead. There is also no copy of this, even the upgrade part, being sent to SFDC.

The only other explanation I can think of is that a customer made it to the True-up flow and then decided to walk away and not move forward, but CustomersDot still sent Zuora the upgrade portion.

**Possible Impacts and Effects:**
1. I am not sure of the experience these customers receive, if the flow seems to work or they receive an error.
1. Licenses might not be being sent out to the customer.
1. Invoices might not be being generated for these transactions.
1. Despite the customer taking action in the web store (by the presence of the seat increase) we are effectively letting their subscription run out on them.
1. These upgrade/renewals are not being sent to Salesforce, lowering our Net ARR attainment as it looks like there were going to upgrade.
1. In fact we are churning many of these renewals in Salesforce because of the lack of renewal. We have taken **~125k of Churn (-$125k Net ARR)** related to these subs so far this year that might have to be reversed.

**Findings**:
The Sales team raised some good examples of strange Net ARR data on some of march's churned opportunities and we dug into their Zuora Subscription data and found examples of subscriptions ending with an additional seats purchase but then no extension of their term (renewal). 

Both examples below have this in their Notes field, which looks like there was an issue with the the True up behavior in the renewal flow: `RENEWAL_ERROR: ${:code=>“RENEWAL_ERROR”, :message=>“Enter a number of active users greater than or equal to your current number of active users (10)“}$` which originates from: https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/services/amend_subscription_service.rb#L243

- Example 1: https://www.zuora.com/apps/Subscription.do?method=view&id=2c92a00d77fc14ea017809fc0a27731e
- Example 2: https://www.zuora.com/apps/Subscription.do?method=view&id=2c92a00777f8d0860177fa8912370fce (Note: Billing actually finds this one and is confused about the lack of Invoice or Web Direct, and then Ammends the customer back to their old seat count: https://gitlab.my.salesforce.com/5004M00000j6rRg)

**Further Analysis:**
- Using the `RENEWAL_ERROR` in the Notes field as a marker, I was able to find 264 Subscriptions with an error. All but 1 of the subscriptions was created since 2/19/2021.
- Doing a cross reference using our Customer Subscription system in Salesforce, I was able to find 56 Renewals that have been Closed Lost since 2/19/2021 totaling ~-$150k Net ARR. These were closed lost as part of standard Sales Ops clean up of expired subscriptions. If these churns were in error that loss of Net ARR should be reversed and any additional users would be positive Net ARR. I have attached a scrubbed csv for anyone else who wants to review.

cc @james_harrison @lschoenfeld @tav_scott this is the end findings of the Opps that you all raised today. Please watch this issue for any developments as Fulfillment investigates.

### Proposal

Look into the use cases mentioned and why renewals amendments aren't being created. Specifically:

1. Subscriptions renewing for less quantity than the previous term #2837 
   1. Currently in this case, only the error gets recorded and no Amendments made.
   1. Example: https://www.zuora.com/apps/Subscription.do?method=view&id=2c92a00d77b9842f0177b99ba8c403c9
1. Subscriptions renewing for more quantity than the previous term
   1. Example: This subscription had UpdateProduct amendment, but then an Error and no auto-renewal. https://www.zuora.com/apps/Subscription.do?method=view&id=2c92a00c77bf60da0177c1e313380c06


### Result

Auto-renewals will happen for all subscriptions that are either increasing or decreasing Users.

### Next steps (if any)

### How will we measure success?

[SubscriptionsWithRenewalError.csv](/uploads/73c0d56120163fdd7be036ca072b11f8/SubscriptionsWithRenewalError.csv)",3
85209050,2021-04-14 21:46:26.872,[BE] GraphQL: Secure gitlab.com to customers-dot proxy,"The current gitlab.com to customers-dot graphql proxy works fine for unauthenticated resources but we need a way to securely access customer-dot resources from gitlab.com. I can think of two possible solutions:

### Reuse email and token?

Can we use the customer email and token like we do [here](https://gitlab.com/gitlab-org/gitlab/blob/7854f0e68d6f90c98410eb4b346630dd88c1188d/ee/lib/gitlab/subscription_portal/clients/rest.rb#L23)? We might be able to just attach the headers to the payload [here](https://gitlab.com/gitlab-org/gitlab/blob/be78ccd832fd40315c5e63bb48ee1596ae146f56/app/controllers/customers_dot/proxy_controller.rb#L12)?

### Don't reauth

Since we control both gitlab.com and customers-dot and the user is presumably already authed on gitlab.com we shouldn't need to reauth on customers-dot. Can we just attach the current logged in gitlab.com user id at the gitlab.com proxy controller level and secure the api between them via SSL? Whitelist? Can we just reuse [the admin token](https://gitlab.com/gitlab-org/gitlab/blob/169404d6992f4a87910277dde16b1828bf9863e5/ee/lib/gitlab/subscription_portal/client.rb#L24)?",3
84952742,2021-04-09 19:45:01.061,Merge SaaS trial plans back,"In https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3072 we reverted new trial plans because
they were visible on the Billing page on the gitlab.com.

This issue is about adding them back once https://gitlab.com/gitlab-org/gitlab/-/issues/327374 will be resolved.",1
84947197,2021-04-09 17:20:07.441,Handle retries if there are SFDC errors while creating opportunity and related objects,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Sometimes we hit a locked row in SFDC when trying to create or update opportunity objects. When this happens, we get some `RestForce` errors but the transaction is left without its corresponding object in SFDC (like the opportunity or the quote).

This example from production shows two errors, first there's a [`Restforce::ErrorCode::UnableToLockRow`](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2465506/events/40134490/) which causes a  [`Salesforce::OpportunityNotCreated`](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2448958/events/40134492/) in `Salesforce::CreateOpportunityWorker`.

With the `create_opportunity_objects` feature flag in staging, the error appears when creating the quote. [Restforce::ErrorCode::CannotInsertUpdateActivateEntity](https://sentry.gitlab.net/gitlab/customersstggitlabcom/issues/2448888/) prevents the creation of the quote and all its related objects.

### Challenges

:balloon: The error appears to be random

:balloon: Since it's apparently random, the error is not very easy to reproduce locally

### Proposal

Rescue these Restforce errors and retry the creation of opportunity objects (`Quote`, `Quote Amendment`, `Rate Plan` and `Rate Plan Charge`) while avoiding re-creating already created ones.

### Result

We avoid having transactions missing their opportunity or quote record in SFDC.

### Next steps (if any)

### How will we measure success?",2
84944739,2021-04-09 16:21:47.331,"Follow-up from ""Update the info for the orphaned subs email""","The following discussion from !3062 should be addressed:

- [ ] @cwiesner started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3062#note_548297479): 

    > **question:** I was wondering what would happen if the dates would be the same value - which isn't the case here. While taking a closer look into this I noticed that the expectation for `include(subscription.name)` probably matches on the customer's name instead of the actual subscription name:
    > 
    > ```
    > (byebug) customer.full_name
    > ""FirstName LastName""
    > (byebug) subscription.name
    > ""Name""
    > ```
    > 
    > So what do you think about testing these values with the label like
    > 
    > ```
    > expect(body).to have_content(""Starts #{order.start_date.strftime('%Y-%m-%d')}"", normalize_ws: true)
    > ```
    > ?",1
84940960,2021-04-09 15:10:42.783,Introduce n__ function to help with pluralization,"### Problem

This is a follow-up to https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3019#note_548563215.

We've at least one instance where we hack a solution for pluralizing a word.

### Proposal

Introduce `n__` helper function as implemented in [GitLab's codebase](https://gitlab.com/gitlab-org/gitlab/-/blob/3205f3c62750db60eb94792920d2fc7c4dcb45b4/app/assets/javascripts/locale/index.js#L82) and use it in instances when we want pluralization.

### Next steps (if any)

### How will we measure success?",2
84937437,2021-04-09 14:08:44.392,Extract usage of $ as a currency to a constant,"This is a follow-up from https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3019#note_548207997.

We're using the `$` symbol directly in the strings, we should create a constant to hold the USD symbol and use that constant instead of embedding the symbol within strings.

Instances of using `$` (as of 2021-04-09):

```
app/frontend/javascripts/subscription/components/dotcom_subscription_renew_form.vue
114:            ${this.discountedPlanName} at $${this.currentDiscountPrice} and receive
139:      return `Upgrade to ${this.discountedPlanName} at $${this.currentDiscountPrice}`;
216:      const discountPrices = discounts.map((discount) => formatMoney(discount, '$', 0));

app/frontend/javascripts/subscription/components/upgrade_subscription_app.vue
204:      return `Upgrade to ${this.discountedPlanName} at $${this.currentDiscountedPrice}`;
284:      const discountPrices = discounts.map((discount) => formatMoney(discount, '$', 0));
308:          'To get a new license with the correct number of users, you need to enter the current number of users over license or larger if you think you’ll need more in the future. You’ll be charged for these additional seats at a special discounted price of $6 per user per month.',
314:          'Add additional seats at a special discounted price of $6 per user per month.',

app/frontend/javascripts/subscription/components/subscription_renew_form.vue
152:            ${this.discountedPlanName} at $${this.currentDiscountPrice} and receive
177:      return `Upgrade to ${this.discountedPlanName} at $${this.currentDiscountPrice}`;
264:      const discountPrices = discounts.map((discount) => formatMoney(discount, '$', 0));

app/frontend/javascripts/purchase/components/purchase_summary_card.vue
82:      return formatMoney(this.pricePerUnit, '$', '', '', '', 0, 0);
```

To get the list I used [ripgrep](https://github.com/BurntSushi/ripgrep):

```bash
rg '(?!\.)\$(?![\.|\(|\{|emit|options|attrs| |:])' -g '*.vue' --pcre2
```",1
84848103,2021-04-08 09:01:36.480,Allow seat link to have not record counts,"Related to https://gitlab.com/gitlab-org/gitlab/-/issues/326931

### Problem

We want to seat link even when the instance does not have data on active user counts. This is because the other goal of seat link, which is syncing the license, is equally important.

### Proposal

Mark `license_seat_links` table's `active_user_count` and `max_histoical_user_count` columns to be nullable.

### Result

Allow seat link to occur even when no counts information is present

### Next steps (if any)

https://gitlab.com/gitlab-org/gitlab/-/issues/326931",1
84814007,2021-04-07 17:18:26.486,Test new ProductRatePlan for the Education Enterprise Subscription (staging only),"### Summary

This came up in https://gitlab.com/gitlab-com/Finance-Division/finance/-/issues/3487#note_546727243

The Edu PnP creates a new ""**Enterprise Education Subscription**"" for qualifying educational institutions that allows institutions to purchase our top-tier subscriptions, at a discount, in bulk, for the entire institution without use case or seat limitations. The price point is based on the size of the institution, of which there are four size classes. Institutions may request any number of seats per one of the SKUs up to the size of their total enrollment.

The product rate plan needs to be set up as a FlatFee and therefore a Quantity of 1. The expectation is that it should provision a specific number of seats (greater than 1).  Because our current provisioning process is reliant on the quantity to be passed, it was suggested to figure out a way to have Zuora product rate plan also pass the quantity, while keeping the FlatFee charge.

For additional information about how this Zuora setup idea came about, please see [agenda notes](https://docs.google.com/document/d/1IBUJTh2qLn17OwT79kHrJ1IWY0cifRVqdNtAZx3KSFY/edit#heading=h.w1i69kcg4lck). 

### Proposal

Perform testing in Zuora Sandbox / CustomersDot Stage for the proposed new Product Rate Plan.

@mquitevis has created a test Product Rate Plan with 2 Product Rate Plan Charges under [`SaaS - Ultimate` product](https://apisandbox.zuora.com/apps/Product.do?method=view&id=2c92c0f97700a4f701770609612c2395). 
 
![image](/uploads/be88b6a0658e73eaa2fa1badb3c0e41f/image.png)

ProductRatePlanId = `2c92c0f978ac50700178ac9e4af64cdc`

We now need to add it to our configuration, and then test provisioning in stage.",2
84803748,2021-04-07 14:42:11.163,"Licence or subscription  email notifications to SALs, AEs, TAM and/or SA","<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

When a deal sales process finishes for new or renewals, the customer gets an email with instructions to use their purchase. The customer's account team doesn't receive this email notification. 

In some or most cases in my experience, the customer asks support to activate their licenses or subscription to their account team; then the account team needs:
  - Figure out if the email was or wasn't sent.
  - If so, check who was supposed to receive the email.
  - In case the primary contact is wrong,  start an internal support process to solve it, guide the customer to open a support ticket to change the primary contact, and support the customer to activate their purchase.

### Proposal

- [x] Include  the account team in copy to the subscription/licence notifications email. 
  - [ ] Define who should receive this notification in CC.
     - [ ] SAL/AE only
     - [ ] SAL/AE + SDR
     - [ ] SA/AE + SDR + SA
     - [x] SA/AE + SDR + SA + TAM (if apply) 


### Result

As soon as we close a deal, the account team knows whether the email was sent to the correct contact or no.
If the customer asks for help, the account team has all the information to forward the email to the right persona without opening other internal processes.
In this email, the account team can guide the customer on changing the customer portal's administrator if they need it by opening a support ticket. 

### Next steps (if any)

TBD

### How will we measure success?

The account team receive in copy the email notification we usually send to our customers after we close a deal.",2
84780226,2021-04-07 10:02:40.550,Upgrade rails_admin to 2.2.0,"Follow up from https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3048

We should remove that code and get the fix from upstream - https://github.com/sferik/rails_admin/commit/97ccc28940d65fee53b30c409c49032fbb0885db

We have to wait until the new gem version gets released first",0
84743027,2021-04-06 21:32:01.614,Make Salesforce::FindOrCreateLeadService work through a background job,"### Problem

Part of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2112

Currently the `Salesforce::FindOrCreateLeadService` service is triggering an inline API call to Salesforce in order to find or create a Lead.

The service is used in the following sections:

- `CreateSalesforceLeadFromCustomerService`
  - Used in `Api::CustomersController#create`
  - Used in `RegistrationsController#create`
- `Gitlab::BaseTrialService`
  - Ingerited by `Gitlab::HostedPlans::CreateTrialService`
  - Inherited by `Gitlab::SelfHostedPlans::CreateTrialService`
  - Both services are used in `TrialsController#create`

As we can see, if there is an error with the API call, the customer registration or trial generation can be broken.

### Proposal

Perform the API call through a background job.

### Result

Performance and reliability of those endpoints will no longer be affected by an external service.

### Next steps (if any)

### How will we measure success?

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

The new Job (assuming we'll be using ActiveJob) should be accompanied by a job specification to ensure the job performs the appropriate task(s)",3
84738723,2021-04-06 19:47:37.607,Make Salesforce::CreateLeadService work through a background job,"### Problem

Part of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2112

Currently the `Salesforce::CreateLeadService` service is triggering an inline API call through [`InstanceReviewCreateService`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/c4c6bf1d2e400456526fa92cb473a8f27c8e1d46/app/services/instance_review_create_service.rb#L36-36) -> [`InstanceReviewController#create`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/c4c6bf1d2e400456526fa92cb473a8f27c8e1d46/app/controllers/instance_review_controller.rb#L9-9). This operation is slowing down the mentioned endpoint and can break the application in case an unhandled exception from the Salesforce API is found.

### Proposal

Perform the API call through a background job.

### Result

Performance and reliability of that endpoint will no longer be affected by an external service.

### Next steps (if any)

### How will we measure success?",2
84738450,2021-04-06 19:39:29.175,CI Minutes provisioning - Trigger Purchase Identifiers syncs from CustomersDot to GitLab Minutes API,"### Establish CI Minute Purchase Identifiers on CustomersDot

The following outlines requirements from the architecture proposal as defined in !3142, we've split up the tasks into separate issues along system boundaries. 

**Base components: CustomersDot**

- [x] Add a mechanism to return an object/data structure that represents 1+ minute packs purchases with a unique identifier (e.g. `RatePlanCharge ID` from Zuora) with an `expiry_date`, minutes purchased, and the namespace. 
- [x] Create a trigger for CI minutes purchases to sync/callback to GitLab CI Minutes API endpoint with Purchase Identifier data
- [x] Trigger CI Minute purchase sync/callback to GitLab minutes API with a successful purchase. 

**UI Components: CustomersDot**

- [ ] ~~Update Admin UI with a component that can trigger a callback to GitLab to sync CI Minute Purchase Data~~ Edit: moved to https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3451


<details> 
<summary markdown=""span"">Previous Summary</summary>
## Summary

1. [ ] Create an API that we can fetch usage CI minutes statistics for a given namespace
1. [ ] Adapt UpdateGitlabPlanInfoWorker (UpdatePlanInfoService) or create wholly new a mechanism that can send CI Minute purchase information over to GItLab from CustomersDot.
</details>

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

In addition to any unit specs, we also should write integration tests between the the GitLab Minutes API and CustomersDot.  These integration tests can use mock APIs.

Additionally, an end-to-end test would also be recommended for executing the flow of provisioning more CI minutes and being reflected in both CustomersDot and GitLab.",5
84738372,2021-04-06 19:37:55.553,CI Minutes provisioning - New mechanism for storing CI Minutes purchases on GitLab,"### Establish CI Minute Purchase Identifiers on GitLab

The following outlines requirements from the architecture proposal as defined in !3142, we've split up the tasks into separate issues along system boundaries. 

**Base components**

- [x] Add a table in the GitLab DB to store the array of purchase identifier data structures from CustomersDot.

**API (re-)Sync components**

- [x] Create a new endpoint that accepts a POST/PATCH of CI minute purchases from CustomersDot following the unique Purchase Identifier
- [x] Reuse of the same endpoint for re-syncing purchases from CustomersDot is preferable as the sync action should be idempotent

**Support Namespace Changes**

- [x] Trigger an update of the namespace ID in the Purchase Identifier table from the current to the new namespace ID. 



<details>
<summary markdown=""span"">Previous Summary</summary>
## Summary

Create a mechanism for receiving and storing Additional CI Minutes purchases in GitLab core. Possibly in a `new table that tracks purchased buckets of minutes` the details of which are unknown at this time. Possibly include the expiry date (other payload ideas are above)
</details>

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

See https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2925",5
84717481,2021-04-06 14:32:56.736,Remove zuora_callback_async_processing feature flag,"### Background

The [`zuora_callback_async_processing` feature flag](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/70/edit) has been on in staging and production for quite some time.  It was introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2078 about 6 months ago.

### Proposal

Update the `ZuoraCallbacksController` to use the `zuora_callback_async_processing` feature flagged code and remove the legacy code.  Once merged and deployed to production, delete the [feature flag from Unleash](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/70/edit).",1
84714778,2021-04-06 13:57:44.310,Documentation: SaaS Deprovisioning Processes,"## Summary

In https://gitlab.com/groups/gitlab-org/-/epics/4627 there was quite a bit of investigation and work done to ensure we are properly moving SaaS subscriptions to the Free plan after the expiration date of the subscription (plus 14 day buffer) is reached.

The outcome of this issue is to document the technical processes and knowledge gained related to this topic in the CustomersDot repo for future reference.",1
84664066,2021-04-05 20:19:32.052,Use new Trial plan in reactivate trial service,"Address the following non-blocking suggestions from https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3034

- Update [`Gitlab::HostedPlans::ReactivateTrialService#update_order_attrs`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/1b7fff46aa9ef908e33311e26999c8fb41d6c873/app/services/gitlab/hosted_plans/reactivate_trial_service.rb#L32) to use the new trial plan `::Plan::ULTIMATE_SAAS_TRIAL_PLAN`
- As noted in https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3034#note_544333441, add a comment to explain why `Plan::ULTIMATE_SAAS_1_YEAR_PLAN` is used for checking [`TrialController#require_gl_com_authentication`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/1b7fff46aa9ef908e33311e26999c8fb41d6c873/app/controllers/trials_controller.rb#L96)

The following discussion from !3034 should be addressed:

- [ ] @asubramanian1 started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3034#note_543952701):  (+2 comments)

    > **question:**  Should we also update [`TrialController#require_gl_com_authentication`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/1b7fff46aa9ef908e33311e26999c8fb41d6c873/app/controllers/trials_controller.rb#L96) and in [`Gitlab::HostedPlans::ReactivateTrialService#update_order_attrs`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/1b7fff46aa9ef908e33311e26999c8fb41d6c873/app/services/gitlab/hosted_plans/reactivate_trial_service.rb#L32)?",2
82200729,2021-04-02 14:31:21.199,Group name showing on GitLab checkout page,"<!---
The issue should have the following:

- The relative path of the failing spec file in the title, e.g. if the login
  test fails, include `qa/specs/ui/login/log_in_spec.rb` in the title.
  This is required so that existing issues can easily be found by searching for the spec file.
- If the issue is about multiple test failures, include the path for each failing spec file in the description.
- A link to the failing job.
- The stack trace from the job's logs in the ""Stack trace"" section below.
- A screenshot (if available), and HTML capture (if available), in the ""Screenshot / HTML page"" section below.
--->

### Summary

As per https://gitlab.com/gitlab-org/customers-gitlab-com/-/jobs/1149404630

Numerous failures on the Customers E2E Saas tests

```
Failed examples:
rspec ./spec/ui/namespace/change_namespace_spec.rb:126 # User changes plan namespace when from group to person transfers subscription
rspec ./spec/ui/purchase/purchase_group_plan_spec.rb:7 # User purchase plan for group from GitLab checkout page when upgrade from free to premium behaves like purchase plan within GitLab shows correct plan info on GitLab and CustomersDots
rspec ./spec/ui/purchase/purchase_group_plan_spec.rb:12 # User purchase plan for group from GitLab checkout page when upgrade from free to ultimate behaves like purchase plan within GitLab shows correct plan info on GitLab and CustomersDots
rspec ./spec/ui/purchase/purchase_group_plan_spec.rb:17 # User purchase plan for group from GitLab checkout page when upgrade from free with different quantity behaves like purchase plan within GitLab shows correct plan info on GitLab and CustomersDots
rspec ./spec/ui/purchase/purchase_group_plan_spec.rb:38 # User purchase plan for group from GitLab checkout page when upgrade with invalid quantity does not allow user to proceed to billing
```

### Stack trace

```
Failures:
  2) User purchase plan for group from GitLab checkout page when upgrade from free to premium behaves like purchase plan within GitLab shows correct plan info on GitLab and CustomersDots
     Failure/Error: expect(checkout).to have_subscription_details(plan, group, quantity)
       expected #has_subscription_details?({:ci_minutes=>10000, :legacy_name=>""silver"", :name=>""premium"", :plan_id=>""2c92c0f876e0f4cc0176e176a08f1b70"", :price=>19, :rate_charge_id=>""2c92c0f876e0f4cc0176e1794ef72eea"", :yearly_price=>228}, #<QA::Vendor::GitLab::Resource::Group:0x000055f5b49d9ba8 @name=""test-group-fe37e7923d26"", @path=""test...TDOUT>>, @binmode=false, @mon_data=#<Monitor:0x000055f5b4d8fd88>, @mon_data_owner_object_id=58420>>>, 1) to return true, got false
     Shared Example Group: ""purchase plan within GitLab"" called from ./spec/ui/purchase/purchase_group_plan_spec.rb:7
     # ./spec/shared_examples/purchase_plan.rb:86:in `block (3 levels) in <module:QA>'
     # ./page/base.rb:62:in `initialize'
     # ./spec/shared_examples/purchase_plan.rb:83:in `new'
     # ./spec/shared_examples/purchase_plan.rb:83:in `block (2 levels) in <module:QA>'
     # /usr/local/bundle/gems/rspec-retry-0.6.2/lib/rspec/retry.rb:124:in `block in run'
     # /usr/local/bundle/gems/rspec-retry-0.6.2/lib/rspec/retry.rb:110:in `loop'
     # /usr/local/bundle/gems/rspec-retry-0.6.2/lib/rspec/retry.rb:110:in `run'
     # /usr/local/bundle/gems/rspec-retry-0.6.2/lib/rspec_ext/rspec_ext.rb:12:in `run_with_retry'
     # /usr/local/bundle/gems/rspec-retry-0.6.2/lib/rspec/retry.rb:37:in `block (2 levels) in setup'
  3) User purchase plan for group from GitLab checkout page when upgrade from free to ultimate behaves like purchase plan within GitLab shows correct plan info on GitLab and CustomersDots
     Failure/Error: expect(checkout).to have_subscription_details(plan, group, quantity)
       expected #has_subscription_details?({:ci_minutes=>50000, :legacy_name=>""gold"", :name=>""ultimate"", :plan_id=>""2c92c0f97700a4f70177060963d923c8"", :price=>99, :rate_charge_id=>""2c92c0f97700a4f701770609640623cc"", :yearly_price=>1188}, #<QA::Vendor::GitLab::Resource::Group:0x000055f5b56d4268 @name=""test-group-2be9ffa2ebf5"", @path=""test...TDOUT>>, @binmode=false, @mon_data=#<Monitor:0x000055f5b588fb20>, @mon_data_owner_object_id=58780>>>, 1) to return true, got false
     Shared Example Group: ""purchase plan within GitLab"" called from ./spec/ui/purchase/purchase_group_plan_spec.rb:12
     # ./spec/shared_examples/purchase_plan.rb:86:in `block (3 levels) in <module:QA>'
     # ./page/base.rb:62:in `initialize'
     # ./spec/shared_examples/purchase_plan.rb:83:in `new'
     # ./spec/shared_examples/purchase_plan.rb:83:in `block (2 levels) in <module:QA>'
     # /usr/local/bundle/gems/rspec-retry-0.6.2/lib/rspec/retry.rb:124:in `block in run'
     # /usr/local/bundle/gems/rspec-retry-0.6.2/lib/rspec/retry.rb:110:in `loop'
     # /usr/local/bundle/gems/rspec-retry-0.6.2/lib/rspec/retry.rb:110:in `run'
     # /usr/local/bundle/gems/rspec-retry-0.6.2/lib/rspec_ext/rspec_ext.rb:12:in `run_with_retry'
     # /usr/local/bundle/gems/rspec-retry-0.6.2/lib/rspec/retry.rb:37:in `block (2 levels) in setup'
  4) User purchase plan for group from GitLab checkout page when upgrade from free with different quantity behaves like purchase plan within GitLab shows correct plan info on GitLab and CustomersDots
     Failure/Error: expect(checkout).to have_subscription_details(plan, group, quantity)
       expected #has_subscription_details?({:ci_minutes=>50000, :legacy_name=>""gold"", :name=>""ultimate"", :plan_id=>""2c92c0f97700a4f70177060963d923c8"", :price=>99, :rate_charge_id=>""2c92c0f97700a4f701770609640623cc"", :yearly_price=>1188}, #<QA::Vendor::GitLab::Resource::Group:0x000055f5b5aa3e98 @name=""test-group-8592103ee741"", @path=""test...TDOUT>>, @binmode=false, @mon_data=#<Monitor:0x000055f5b5c21310>, @mon_data_owner_object_id=59140>>>, 20) to return true, got false
     Shared Example Group: ""purchase plan within GitLab"" called from ./spec/ui/purchase/purchase_group_plan_spec.rb:17
     # ./spec/shared_examples/purchase_plan.rb:86:in `block (3 levels) in <module:QA>'
     # ./page/base.rb:62:in `initialize'
     # ./spec/shared_examples/purchase_plan.rb:83:in `new'
     # ./spec/shared_examples/purchase_plan.rb:83:in `block (2 levels) in <module:QA>'
     # /usr/local/bundle/gems/rspec-retry-0.6.2/lib/rspec/retry.rb:124:in `block in run'
     # /usr/local/bundle/gems/rspec-retry-0.6.2/lib/rspec/retry.rb:110:in `loop'
     # /usr/local/bundle/gems/rspec-retry-0.6.2/lib/rspec/retry.rb:110:in `run'
     # /usr/local/bundle/gems/rspec-retry-0.6.2/lib/rspec_ext/rspec_ext.rb:12:in `run_with_retry'
     # /usr/local/bundle/gems/rspec-retry-0.6.2/lib/rspec/retry.rb:37:in `block (2 levels) in setup'
  5) User purchase plan for group from GitLab checkout page when upgrade with invalid quantity does not allow user to proceed to billing
     Failure/Error: expect(checkout.continue_to_billing_element.disabled?).to be true
       expected true
            got false
     # ./spec/ui/purchase/purchase_group_plan_spec.rb:44:in `block (4 levels) in <module:QA>'
     # ./page/base.rb:62:in `initialize'
     # ./spec/ui/purchase/purchase_group_plan_spec.rb:39:in `new'
     # ./spec/ui/purchase/purchase_group_plan_spec.rb:39:in `block (3 levels) in <module:QA>'
     # /usr/local/bundle/gems/rspec-retry-0.6.2/lib/rspec/retry.rb:124:in `block in run'
     # /usr/local/bundle/gems/rspec-retry-0.6.2/lib/rspec/retry.rb:110:in `loop'
     # /usr/local/bundle/gems/rspec-retry-0.6.2/lib/rspec/retry.rb:110:in `run'
     # /usr/local/bundle/gems/rspec-retry-0.6.2/lib/rspec_ext/rspec_ext.rb:12:in `run_with_retry'
     # /usr/local/bundle/gems/rspec-retry-0.6.2/lib/rspec/retry.rb:37:in `block (2 levels) in setup'
```

### Screenshot / HTML page

<!--
Attach the screenshot and HTML snapshot of the page from the job's artifacts:
1. Download the job's artifacts and unarchive them.
1. Open the `qa/tmp` folder.
1. Select the `.png` and `.html` files that appears in the job logs (look for `HTML screenshot: /path/to/html/page.html` / `Image screenshot: `/path/to/html/page.png`).
1. Drag and drop them here.

Note: You don't need to include a screenshot if the information it contains can be included as text. Include the text instead.
E.g., error 500/404, ""Retry later"" errors, etc.

If you include multiple screenshots it can be helpful to hide all but the first in a details/summary element, to avoid excessive scrolling:

<details><summary>Expand for screenshot</summary>
  drag and drop the screenshot here
</details>
-->

### Possible fixes


<!-- Base labels. -->",2
82148074,2021-04-02 00:17:13.096,Unable to Purchase,"## Summary

Users are reporting an error, during attempting self-service purchases. This has been seen with both attempting to purchase CI minutes and paid plan subscriptions. No commonality has been found yet amongst the reported examples.  

Looking at the browser breakdown in [the sentry error](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2485235/events/540e9ec18f3945d49ad1ee257ae1f80f/) we've got the majority on FF but chrome is 40% of the reports.

```
Request failed with status code 401
```

Assumption: The problem seems to have started on April 1 (see https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2909#note_550142037)

https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2485235/?referrer=gitlab_plugin

![Screenshot_2021-03-31_Buy_more_GitLab_CI_minutes](/uploads/b229dac3ac5e841e2f32f7a250602aee/Screenshot_2021-03-31_Buy_more_GitLab_CI_minutes.png)

### Reported Examples

1. https://gitlab.zendesk.com/agent/tickets/202870
1. https://gitlab.zendesk.com/agent/tickets/203323
1. https://gitlab.zendesk.com/agent/tickets/202265
1. https://gitlab.zendesk.com/agent/tickets/205085
1. https://gitlab.zendesk.com/agent/tickets/204891
1. https://gitlab.zendesk.com/agent/tickets/205470 (switch from Firefox to Chrome worked)
1. https://gitlab.zendesk.com/agent/tickets/206922 (switch from FF to Chromium worked)
1. https://gitlab.zendesk.com/agent/tickets/203510 (""It perfectly worked using chrome"")
1. https://gitlab.zendesk.com/agent/tickets/207326
1. https://gitlab.zendesk.com/agent/tickets/207330
1. https://gitlab.zendesk.com/agent/tickets/207940
1. https://gitlab.zendesk.com/agent/tickets/208544
1. https://gitlab.zendesk.com/agent/tickets/209573
1. https://gitlab.zendesk.com/agent/tickets/208479
1. https://gitlab.zendesk.com/agent/tickets/210765",2
81962387,2021-03-30 23:08:56.919,Keep the gl_namespace_name in sync with the namespace name in GitLab.com,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

When a user changes the name of their namespace in GitLab.com, the subscription object in CustomersDot gets out of sync because there's no notice of that change. In CustomersDot the customer still sees the outdated name of the namespace in their subscriptions page.

It's only after a change in the linked namespace for the subscription that the subscription object gets the updated `gl_namespace_name`.

### Proposal

Make a call to CustomersDot when the namespace name changes in GitLab.com to update the `gl_namespace_name` of the subscription.

### Result

Both `gl_namespace_name` and `gl_namespace_id` are kept up to date in GitLab.com, CustomersDot and Zuora (through the functionality implemented in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1989)

## Delivery plan

This logic is part of a bigger picture :frame_photo: 
- [x] CustomersDot: Add endpoint that receives a namespace(id, name) and updates the namespace name for all the orders associated to this namespace: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3797
- [x] GitLab: Add sync capabilities every time the name for a namespace with an associated subscription is updated **behind a feature flag**: https://gitlab.com/gitlab-org/gitlab/-/merge_requests/69896
- [x] Create the enable feature flag issue: https://gitlab.com/gitlab-org/gitlab/-/issues/341056

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

If possible, we should create a test to mock the related APIs and test the data sent to the APIs.  Let's test the synchronicity between these fields and ensure that they stay in sync.",3
81829871,2021-03-29 09:35:23.896,Remove mimemagic shim,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Due to the mimemagic gem being yanked, we had to shim a fake version into CustomersDot in order to prevent any issues  (https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2994)

With https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2890, the Rails version is being upgraded which includes the change to remove the dependency on mimemagic, which means we can remove the shim :tada: 

### Proposal

Remove the vendor shim once the upgrade has been merged

### Result

The shim which is no longer neccessary, is removed from the codebase",1
81817339,2021-03-29 06:52:05.470,Update Rails to the latest version (6.1.3.1),"Update Rails to the latest version. This will update Rails' (or more Active Storage's) dependency to `Marcel` to version `10.0` ([release notes](https://weblog.rubyonrails.org/2021/3/26/marcel-upgrade-releases/)):

> Before 1.0.0, Marcel—which is distributed under the terms of the MIT License, like Rails—indirectly depended on MIME type data released under the incompatible GNU General Public License. Marcel 1.0.0 instead directly packages MIME type data adapted from Apache Tika, released under the permissive and compatible Apache License 2.0.

**Note:** With this upgrade we should be able to remove the created shim for mimemagic again.",1
81730721,2021-03-26 15:33:14.570,"Follow-up from ""Add initial params to pass to frontend""","The following discussion from !2936 should be addressed:

- [x] @jhyson started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2936#note_535900220): 

    > **suggestion:** would it be better to actually call this service here? I wonder if accessing this constant like this is leaking domain logic that should stay in this service? WDYT?

### SUMMARY

We want to validate this and replace it with an actual call to the Service.

We want to also account for a similar usage here: https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/0eff285f7cc84361d092c7134937ad090c5a681f/app/services/amendment_base_service.rb#L165",2
81697915,2021-03-26 09:09:31.585,"Investigate Salesforce Account inconsistencies in CustomersDot, Salesforce and Zuora","### Problem
In https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2671 it was noticed that while the CustomersDot's customer stores a Salesforce Account Id its associated record in Salesforce could not be found (more info [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2671#note_532386353)). This resulted in a raised error due to relying on always finding a record which was fixed in the mentioned issue.

Now the issue is that the a [presence validation exception](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2542134/?referrer=slack) will be raised when the Salesforce Account is empty and an Opportunity is supposed to be created. This is because since it needs the information of an `OwnerId`. That field belongs to the Salesforce Account. More info regarding this can be found in [this issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2883).

### Proposal
Investigate the inconsistency around the Salesforce Account in CustomersDot, Salesforce and Zuora. As suggested by @jbrennan1 in this [comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2671#note_537873407) a walkthrough/demo with him through the standard Account/Contact creation flow is the first step of this investigation.

The actual fix for the exception will be handled in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2883.

### Result
Finding a solution on how to address a fix for the presence validation exception.

#### Recap of errors investigated as part of this issue

:mag: [Owner ID: owner cannot be blank](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2884#note_810168556)

:mag: [Required fields are missing: [ContactId]](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2884#note_810172823)

### Next steps (if any)
Coordinate a call with @jbrennan1 to do a walkthrough/demo.",3
81697277,2021-03-26 09:00:21.802,Salesforce Account can't be blank or it results in a validation error,"### Problem
Original mention of this issue: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2671#note_534741081

While working on https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2671 a fix was implemented to not raise an exception when the Salesforce Account can't be found and instead proceed with the remaining logic. While the remaining code accounted for the Salesforce Account to be blank all along, it never reached that code with an empty Salesforce Account before due to the mentioned exception. Which is why we are now seeing a [presence validation exception](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2542134/?referrer=slack) that the `OwnerId` for a new `Opportunity` can't be blank. That field comes from the Salesforce Account ([code](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/a888a4e0d82447d17986bcdf46d6c15104de59ea/app/services/salesforce/create_opportunity_service.rb#L70)).

### Proposal

After the investigation in [this issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2884#note_813196718), we want to:

* Revisit change attempted in https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4074, if possible
* Unify the methods used to get a Salesforce account id in `CreateSalesforceAccountService` and `Salesforce::BaseOpportunityService`
* [Create an Account if absent during Opportunity creation](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4793#note_955228314)

### Result
Resolve exception and create Opportunities for these cases again.

### Next steps (if any)

### How will we measure success?",5
81651791,2021-03-25 15:01:05.397,Avoid using customer relationship for subscription methods on the Order model,"## Purpose

There are many cases where Orders in CDot production have a `zuora_account_id` value but the Customer of the Order does not have a `zuora_account_id`.  This can be a problem when getting the [`subscription`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/1b7fff46aa9ef908e33311e26999c8fb41d6c873/app/models/order.rb#L117) or [`current_subscription`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/1b7fff46aa9ef908e33311e26999c8fb41d6c873/app/models/order.rb#L137) for an order.  These methods use the `order.customer.zuora_account_id` instead of `order.zuora_account_id`.  The subscription won't be found for those orders when it actually exists in Zuora.  

We should consider updating these subscription methods or if there are any negative consequences.  Some changes were made in https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4551, as part of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3837.  

There may be other changes necessary to make as we are still seeing reports where provisioning fails due to the relationship of the Customer on the Order. As recently as April 28 2022, [this was reported as a problem](https://gitlab.zendesk.com/agent/tickets/286138) (originally raised in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2118#note_928465165).

## Follow-up

The following discussion is from !2985.",2
81650767,2021-03-25 14:47:08.909,Investigate why some orders and customers do not have a zuora_account_id,"## Purpose

It was discovered that some orders in CustomersDot production do not have a `zuora_account`.  This is expected for some orders like trials and orders that revert to the free plan.  After filtering those out, there are still some orders (around 22 at the time of writing this) where `zuora_account_id` is nil.

Similarly, there are some customers attached to orders that do not have a `zuora_account_id` either.  There are even more customers without `zuora_account_id` than orders mentioned above.  

Please see the detailed comment referenced below for more info.  It would be good to figure out why this has happened, whether it is a problem, and if so, provide a solution.

## Follow-up

The following discussion is from !2985:

- [ ] @tyleramos made the [comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2985#note_537877774):

    > @lulalala Thanks for raising this as a concern! This will indeed be a problem.
    > 
    > I've done some investigation into our production data and there are many orders where `zuora_account_id` is nil. However, for `Order#current_subscription`, it's actually the `customer.zuora_account_id` that needs to be present. It looks like [this method](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/6e353a98934a4878a07843e08605a1fdfcb8c9b2/app/models/subscription.rb#L37) doesn't actually use the `zuora_account_id` on the order itself. The same concern exists thought that `customer.zuora_acocunt_id` could be `nil`. In fact, I think the situation is actually a little worse because we use `customer.zuora_account_id`, but more on that in a bit.
    > 
    > Let's breakdown the orders where `order.zuora_account_id` is nil a bit:
    > 
    > ```
    > irb(main):001:0> Order.count
    > => 156049
    > irb(main):002:0> Order.where(zuora_account_id: nil).count
    > => 111447
    > ```
    > 
    > Out of 156049 total orders, 111447 do not have `zuora_account_id` so that seems bad. But once we filter out trials, and trials that reverted back to the free plan, it looks much better.
    > 
    > ```
    > irb(main):034:0> Order.where(zuora_account_id: nil).where(trial: false).where.not(product_rate_plan_id: 'free-plan-id').count
    > => 22
    > ```
    > 
    > So really only 22 orders that could be a problem. I didn't dig into these too much but it seems like they could be trials that didn't transition to non-trials correctly. Either way, this is a much smaller, manageable number. I might open an issue to determine if these need to be addressed.
    > 
    > Circling back to the fact that `order.current_subscription`, and `order.subscription` for that matter, use `customer.zuora_account_id`. There are even more orders that aren't trial or free plan where the `customer.zuora_account_id` is nil.
    > 
    > ```
    > irb(main):054:0> Order.left_outer_joins(:customer).where(customers: { zuora_account_id: nil }, trial: false).where.not(product_rate_plan_id: 'free-plan-id').count
    > => 265
    > ```
    > 
    > Of these 265 orders, 48 of them are managed by resellers because the `login_activated` attr is false.
    > 
    > ```
    > irb(main):060:0> Order.left_outer_joins(:customer).where(customers: { zuora_account_id: nil, login_activated: false }, trial: false).where.not(product_rate_plan_id: 'free-plan-id').count
    > => 48
    > ```
    > 
    > The remaining 217 orders are still mysterious. After spot checking the papertrail for a few, it looks like the customer.zuora_account_id was set but previously, but removed by gitlab admins. It would be good to understand why this is done. The bigger question though is should update the subscription methods in Order to use `order.zuora_account_id` instead of `customer.zuora_account_id` as this might be less error prone?
    > 
    > **TLDR:** I'm fine with your approach in this MR to add an early return. I'm also wondering if it's worth logging the event that we don't create the cloud license for this reason. At least to begin with we could log it as an error. If it turns out, it's really common and acceptable, then we can update it to log as info. I'll open up follow-up issues for the other problems identified. :sweat_smile:",2
81594328,2021-03-24 21:43:31.196,Taxes are displayed incorrectly and line items don't add up to order total,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you're about to submit isn't a duplicate.

Do not include confidential information!
--->

### Summary

When purchasing a product that is taxed, the ""Price"" line item number incorrectly includes the tax.

### Steps to reproduce

In production, begin a purchase of CI Minutes with your address set to Denver, CO 80223.

### What is the current *bug* behavior?

When purchasing a product that is taxed, the ""Price"" line item number incorrectly includes the tax.

Note that the order total is correct and the customer is not getting overcharged. This is just an issue with how the numbers are displaying.

### What is the expected *correct* behavior?

The ""Price"" line item should only be the price of the product itself without any taxes. The taxes should only appear in the ""Estimated taxes"" line item. In the example below, ""Price"" should be $40.

### Relevant logs and/or screenshots

![Screen_Shot_2021-03-24_at_4.23.18_PM](/uploads/a45f9b5b3f763c017ee5d971904de4ba/Screen_Shot_2021-03-24_at_4.23.18_PM.png)


<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",1
81522330,2021-03-23 21:26:37.467,Update webpacker to 6 after Rails 6 update,"The following discussion from !2890 should be addressed:

- [ ] @asubramanian1 started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2890#note_535311824):  (+1 comment)

    > **question:** Should we update `webpacker` to  `5.0` based on http://railsdiff.org/6.0.3.5/6.1.3?

Webpacker 6 will be released soon so we could try to update to that version instead of 5.",1
81411426,2021-03-22 13:37:06.597,Create DOC explaining the trial flow,"### Proposal

Write a document in a markdown format explaining on how the trial workflow works and also explain the process happening around CustomersDot, License and Gitlab.com",2
81182936,2021-03-18 13:09:00.905,Graduate feature flag for `create_opportunity_objects`,"### Problem
The feature flag for [create_opportunity_objects](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/42/edit) was introduced with https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1379 to add additional object creations along with an Salesforce Opportunity. The development issue (https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1379) was closed in August 2020 but the parent issue (https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/911) from the Sales team is still open.

### Proposal
- Check with the Sales team when the feature flag can be removed
- Remove the feature flag from the code

### Result
- Cleaned up code that was needed for the feature flag
- One less feature flag to maintain.

### Next steps (if any)
Check with Sales team if the feature flag can be removed.",1
81125975,2021-03-17 17:40:55.805,Reduce repetition of similar parts in subs components,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

At the moment the New Subscription Components for GitLab and EE are sharing quite a good amount of logic, therefore demanding every update to be ported in many places. Increasing the risk of inconsistencies and the time for maintenance.

### Proposal

Consider:

- `app/frontend/javascripts/subscription/components/new_gitlab_subscription_form.vue`
- `app/frontend/javascripts/subscription/components/new_ee_subscription_form.vue`

We have 2 viable strategies (not necessarily mutually excluding):
1. individuate the parts that can be easily extracted into new/shared components and move them there OR
1. generalize the component and add props customize the parts that are different
1. moving the duplicate values into constants and referencing those instead

Finally, update the tests where applicable.

### Result

Reduction of code and decreased maintenance time in the future.

### How will we measure success?

Removed code should be more than added one (excluding additional tests)",2
81029777,2021-03-16 14:44:52.060,Allow renewals of subscriptions for less quantity than the previous term,"This issue is the remaining work on https://gitlab.com/gitlab-org/growth/product/-/issues/1577

## Summary

When a subscription renews, and the active seat count is less than the original purchased amount, it tries to renew at the active (lower) seat count than the previous term, which produces an error and subscription doesn't renew.  This applies to both Self-Managed and SaaS.

## Steps to reproduce

1. Create a SaaS subscription which will expire next date for 3 users
1. Set the subscription to autorenew (utilizing custom_autorenew setting in Zuora or by selecting from frontend Customers Portal)
1. Associate the subscription with a GitLab group
1. Ensure the GitLab group has 2 or less users
1. When the subscription attempts to renew, it will error

![Screen_Shot_2021-03-12_at_10.02.56_a.m.](/uploads/70d0bf8a01c0a8f6454dfe81bf0052e4/Screen_Shot_2021-03-12_at_10.02.56_a.m..png)",5
80968684,2021-03-15 22:12:35.623,Add fields to SFDC opportunity objects mapping,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

After testing the changes added in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2097 the team decided that more data is needed for the `QuoteRatePlanCharge` object to be complete and usable in SFDC.

| Data Name               | SFDC Quote Rate Plan Charge Field | Zuora Field                                        | Type              |
|-------------------------|-----------------------------------|----------------------------------------------------|-------------------|
| Amendment Type          |          Webstore_Zuora_Type__c                         | InvoiceItem:Amendment->Type                        | String            |
| Quantity                |           Webstore_Zuora_Quantity__c                        | InvoiceItem->Quantity                              | Number(13, 5)     |
| Effect Price            |         Webstore_Zuora_Effective_Price__c                          | InvoiceItem->Charge Amount                         | Currency          |
| DTCV                    |             Webstore_Zuora_DTCV__c                      | InvoiceItem:Rate Plan Charge->DTCV                 | Currency          |
| DMRC                    |             Webstore_Zuora_DMRC__c                      | InvoiceItem:Rate Plan Charge->DMRC                 | Currency          |
| MRR                     |        Webstore_Zuora_MRR__c                           | InvoiceItem:Rate Plan Charge->MRR                  | Currency          |
| Service End Date        |             Webstore_Zuora_Service_End_Date__c                      | InvoiceItem->Service End Date                      | Date (YYYY-MM-DD) |
| Service Start Date      |             Webstore_Zuora_Service_Start_Date__c                      | InvoiceItem->Service Start Date                    | Date (YYYY-MM-DD) |
| Description             |             Webstore_Zuora_Description__c                      | InvoiceItem:Amendment->Description                 | String            |
| Amendment ID                      |         Webstore_Zuora_Amendment_ID__c                          | InvoiceItem:Amendment->ID                          | String            |
| Name                    |            Webstore_Zuora_Name__c                       | InvoiceItem:Amendment->Name                        | String            |
| Invoice ID                      |      Webstore_Zuora_Invoice_ID__c                             | InvoiceItem:Invoice->ID                            | String            |
| Invoice Number          |            Webstore_Zuora_Invoice_Number__c                       | InvoiceItem:Invoice->Invoice Number                | String            |
| Rate Plan ID                    |           Webstore_Zuora_Rate_Plan_ID__c                        | InvoiceItem:Rate Plan->ID                          | String            |
| Effective End Date      |            Webstore_Zuora_Effective_End_Date__c                       | InvoiceItem:Rate Plan Charge->Effective End Date   | Date (YYYY-MM-DD) |
| Effective Start Date    |        Webstore_Zuora_Effective_Start_Date__c                           | InvoiceItem:Rate Plan Charge->Effective Start Date | Date (YYYY-MM-DD) |
| TCV                     |             Webstore_Zuora_TCV__c                      | InvoiceItem:Rate Plan Charge->TCV                  | Currency          |
| Subscription ID                      |        Webstore_Zuora_Subscription_ID__c                           | InvoiceItem:Subscription->ID                       | String            |
| Original Subscription ID             |         Webstore_Zuora_Original_Subscription_ID__c                          | InvoiceItem:Subscription->Original ID              | String            |
| Subscription End Date   |         Webstore_Zuora_Subscription_End_Date__c                          | InvoiceItem:Subscription->Subscription End Date    | Date (YYYY-MM-DD) |
| Subscription Start Date |     Webstore_Zuora_Subscription_Start_Date__c                              | InvoiceItem:Subscription->Subscription Start Date  | Date (YYYY-MM-DD) |

### Proposal

We need to update `Salesforce::CreateOpportunityObjectsService` and `Salesforce::CreateQuoteRatePlanChargeService` to send all this data over to SFDC.

### Result

Raw data that can be used to make all the calculations needed in SFDC side.

### Next steps (if any)

### How will we measure success?",2
80951169,2021-03-15 16:58:53.135,Exclude unnecessary fields from IronBank Schema files,"### Problem

In https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2825, we found out that it can be problematic when custom fields are renamed or removed from Zuora, if those fields are listed in the IronBank Schema ([sandbox files](https://gitlab.com/gitlab-org/customers-gitlab-com/-/tree/staging/config/zuora/sandbox/schema), [prod files](https://gitlab.com/gitlab-org/customers-gitlab-com/-/tree/staging/config/zuora/production/schema)).  Since the schema files are used when IronBank builds queries to pull data from Zuora resources, changes to the fields in Zuora without being reflected in the Schema results in `IronBank::BadRequestError` errors.

### Proposal

To help avoid these types of errors, we probably should exclude any fields in queries which are not needed directly by CustomersDot.  This could be done by adding these fields to [`excluded_files.yml`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/6b8978605499bc74aa3d3cdee8b1afaf5d10858f/config/zuora/sandbox/excluded_fields.yml).  This should prevent these fields from being included in the Zuora queries ([ref from IronBank](https://github.com/zendesk/iron_bank/blob/main/lib/iron_bank/metadata.rb#L31)).  If that approach doesn't work, we could simply remove the fields from the schema altogether.

This might be the best course of action:
- Update all the schema files to get the lastest by exporting: `IronBank::Schema.export`.
- Audit each field for each Resource and add any fields not used by CustomersDot to the `excluded_files.yml`
- This will likely cause specs to fail because the Zuora requests are different. VCR cassettes will need to be re-recorded.

The above could be done for Sandbox first, then later for Production.",5
80939414,2021-03-15 14:33:27.318,PlansFinder should search for plans in Zuora if not found within eager loaded plans,"### Problem

If a product rate plan is not in the [list of preloaded plan ids](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/aa13252af0a6e69a58c8ac2bc645afaf36d7b12c/app/models/plans_finder.rb#L11) in `PlansFinder` and this plan id is used in [`PlansFinder.find`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/aa13252af0a6e69a58c8ac2bc645afaf36d7b12c/app/models/plans_finder.rb#L49), the result is `nil`, even if the product rate plan exists in Zuora.  This can lead to errors when a subscription is created or updated which uses a product rate plan not listed in the PlansFinder.  The results in the Zuora worker failing to process the callout which means no Order record is created for the subscription.

I noticed this when testing an MR where we were adding a new SKU to CustomersDot.  See [this discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2925#note_526657938) for more info.  This happens quite often as can be seen by these Sentry errors:

- https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2446974
- https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2458737
- https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2465402
- https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2474979
- https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2069046
- https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2374919

### Proposal

One way to fix this issue would be to update [the `PlansFinder.find` method](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/aa13252af0a6e69a58c8ac2bc645afaf36d7b12c/app/models/plans_finder.rb#L49) to fallback to searching Zuora if the product rate plan isn't found within the seat of `eager_loaded_plans`.  Since the product catalog is cached locally anyway, this wouldn't be a very expensive operation as it would have been when this eager loading was originally introduced.

In fact, this eager loading is probably not necessary at all, and we have [an issue to investigate removing it](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2680).  While that would be a better longer term solution, this could be a nice, quick short term solution for this problem. If https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2680 get's prioritized first, we can close this issue.

### Result

No more errors like the ones shown above.  We could resolve those in Sentry when this is finished.",2
80900916,2021-03-15 04:19:31.685,Replace local danger files with gitlab-dangerfiles gem,"### Problem

GitLab's Dangerfiles has been extracted to its own gem at https://gitlab.com/gitlab-org/ruby/gems/gitlab-dangerfiles.

### Proposal

Evaluate and implement (if applicable) removing our local dangerfiles in favor of using the official gem file while keeping our needed customization.

### Result

Up-to-date dangerfiles and less code to maintain.

### Next steps (if any)

Schedule

### How will we measure success?",2
80828836,2021-03-12 20:21:27.817,Resolve IronBank::BadRequestError errors from change in sandbox schema,"### Problem

We're [seeing a bunch of errors](https://sentry.gitlab.net/gitlab/customersstggitlabcom/?query=is%3Aunresolved+end_customer_details__c) like `IronBank::BadRequestError` related to a malformed query like [this one](https://sentry.gitlab.net/gitlab/customersstggitlabcom/issues/2527191/?environment=stg&referrer=alert_email):

```
Body: {""detail""=>{""MalformedQueryFault""=>{""FaultMessage""=>""invalid field for query: Subscription.end_customer_details__c"", ""FaultCode""=>""INVALID_FIELD""}}, ""faultcode""=>""fns:INVALID_FIELD"", ""faultstring""=>""invalid field for query: Subscription.end_customer_details__c""}
```

The majority of the `IronBank::BadRequestError` errors we've seen are related to above, but there is [one other error](https://sentry.gitlab.net/gitlab/customersstggitlabcom/issues/2527106/?query=is%3Aunresolved%20invalid%20field%20for%20query) we've seen related to another field `Invoice.currencyexchangerate__c`:

```
IronBank::BadRequestError: Body: {""detail""=>{""MalformedQueryFault""=>{""FaultMessage""=>""invalid field for query: Invoice.currencyexchangerate__c"", ""FaultCode""=>""INVALID_FIELD""}}, ""faultcode""=>""fns:INVALID_FIELD"", ""faultstring""=>""invalid field for query: Invoice.currencyexchangerate__c""}
```

### Proposal

Fix the schema for Zuora Sandbox.  It looks like the custom field was renamed in Zuora Sandbox but we have to match that in our schema.  If we don't use that field in our codebase, then the better fix might be to remove it from our schema in case it changes again.

### Result

This should fix many errors we're seeing in stg at the moment.

### Next steps (if any)

Long term it would be good to notify the Fulfillment team before  custom field changes are made in Zuora production or sandbox.",2
80788724,2021-03-12 11:19:13.765,EoA: Subscription did not renew with the new product name,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Customer renewed their Silver subscription, but the name of the subscription did not change to the new product name. 

### Proposal

All renewals after Jan 26 should renew with the new product names.

### Reported examples

1. https://gitlab.zendesk.com/agent/tickets/198984
1. https://gitlab.zendesk.com/agent/tickets/200391 (note: I had to do a [force associate](https://gitlab.com/gitlab-com/support/internal-requests/-/issues/5182) for this one)

### Once completed...

- [x] @tgolubeva to follow up in https://gitlab.com/gitlab-com/business-ops/enterprise-apps/intake/-/issues/160#note_530913862",3
80756619,2021-03-11 21:37:41.719,Assign appropriate Zuora batch for self-service Community subscriptions,"## Summary

In https://gitlab.com/groups/gitlab-org/-/epics/5068 we are introducing the ability for community program participants to self checkout. Under the current manual bookings process, the billing team is manually assigning community subscriptions to `Batch50` in Zuora. Since we are automating the booking process, we need to automate this batch assignment as well.


## Proposal

As per [this comment](https://gitlab.com/gitlab-com/marketing/community-relations/community-operations/community-operations/-/issues/63#note_527588922) from our billing manager, we need to make sure that subscription created during this process as assigned to `Batch50` in Zuora.",2
80752554,2021-03-11 19:54:50.409,"Follow-up from ""Remove gitlab sync from subscriptions#update""","The following discussion from !2886 should be addressed:

- [ ] @cwiesner started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2886#note_527348783):  (+2 comments)

    > **suggestion (non-blocking):** A nice follow-up could be using a named subject throughout this file. Although I keep seeing the use of `subject` within controller specs in GitLab as well. Am I maybe missing something and we're not supposed to use in in them? :thinking: :shrug_tone1:",1
80711997,2021-03-11 11:21:16.260,"Follow-up from ""Implement additional logging when expiring orders""","<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
In !2915 a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2915#note_526425953) (+2 comments) about why there is a `#to_param` and `#to_i` being called on a parameter ([here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/4809f88aef0442d6f5e79f6b0b407167ba14d541/app/jobs/expire_order_job.rb#L9)) that is only passed in as an Integer ([here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/4809f88aef0442d6f5e79f6b0b407167ba14d541/app/jobs/expire_order_cron_job.rb#L18)). It turned out that this was recently changed in https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2303#note_467690097 to meet Sidekiq's best practices. Any remaining jobs during the deploy had to be supported then and therefore this was still needed.

### Proposal
Since there is only one usage where an Integer is being passed in and all jobs the `ExpireOrderJob` class are processed (no retires left as well), we can remove the `#to_param` and `#to_i`. The `#to_i` is also not needed since `.find_by_id` handles this anyway:

```
[2] pry(main)> Order.find_by_id(1)
Order Load (0.4ms)  SELECT  ""orders"".* FROM ""orders"" WHERE ""orders"".""id"" = $1 LIMIT $2  [[""id"", 1], [""LIMIT"", 1]]
[3] pry(main)> Order.find_by_id(nil)
Order Load (0.3ms)  SELECT  ""orders"".* FROM ""orders"" WHERE ""orders"".""id"" IS NULL LIMIT $1  [[""LIMIT"", 1]]
[4] pry(main)> Order.find_by_id("""")
Order Load (0.4ms)  SELECT  ""orders"".* FROM ""orders"" WHERE ""orders"".""id"" = $1 LIMIT $2  [[""id"", nil], [""LIMIT"", 1]]
[5] pry(main)> Order.find_by_id(""a-string"")
Order Load (0.4ms)  SELECT  ""orders"".* FROM ""orders"" WHERE ""orders"".""id"" = $1 LIMIT $2  [[""id"", 0], [""LIMIT"", 1]]
[6] pry(main)> Order.find_by_id(""1"")
Order Load (0.4ms)  SELECT  ""orders"".* FROM ""orders"" WHERE ""orders"".""id"" = $1 LIMIT $2  [[""id"", 1], [""LIMIT"", 1]]
```

### Result
Remove unnecessary method calls and therefore clean up the code and avoid possible confusion.",1
80664252,2021-03-10 18:43:04.363,Cloud License: Skip user limit validation when saving cloud licenses,"### Problem

As mentioned in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2801, between the time a customer purchases a new SM subscription and the customer activates the license in the SM instance, there is potential for the number of active users in the SM instance to increase.

Currently, when (legacy) licenses are applied to new SM instances (e.g. instances without historical user data), if the instance tries to apply a license for `X` number of users, but the instance has more than `X * 1.1` (where the user overage exceeds 10%), then the license can’t be applied. 10% is the allowed user overage for new/non-renewal subscriptions (defined [here](https://gitlab.com/gitlab-org/gitlab/blob/25536b04c0c42e250a9d4319eeff7b1d892d47a5/ee/app/models/license.rb#L616)).

This will be a problem for cloud license activation. Let's say a cloud license is purchased for 10 users, but when the customer gets around to activating the license with the code they received in an email, the number active users on their instance is 15. This would exceed the 10% overage allowance and the license would [fail validation](https://gitlab.com/gitlab-org/gitlab/blob/25536b04c0c42e250a9d4319eeff7b1d892d47a5/ee/app/models/license.rb#L619).

### Proposal

The simplest solution to this problem is to skip the user limit validation for cloud licenses and save them regardless of whether the instance is over the user overage allowance for the license. The customer would pay for the increased users at the quarterly reconciliation.  

This also solves the problem for on-going license updates along the lifespan of the cloud license.  Because we will be applying new licenses records during the license sync workflow (even after activation), this will allow the license to be applied even if the license count is lower than the current active user count.",2
80592442,2021-03-09 22:39:59.432,Drop :sync_plan_to_gitlab_from_controller feature flag,"### SUMMARY

We want to remove GitLab plan syncs from the subscriptions `create` and `update` controller actions.

This removal will be behind a feature flag that will be off by default:

```ruby
if Unleash.enabled?(:sync_plan_to_gitlab_from_controller)
  # Code we want to remove that handles syncing the plan to gitlab
  Gitlab::Namespaces::UpdatePlanInfoService.new(order, force_sync: true).execute_async
end
```

This feature flag will be disabled by default and only there as a safety net in case we want to ""recover"" the code.

It is our expectations that we never have to turn on this flag and that given a reasonable amount of time (TBD) we consider it is safe to entirely remove the code and the flag. This issue is to track this.",1
80560012,2021-03-09 14:21:21.208,User can't reenter new card information if card has insufficient funds,"### Summary

When the entered card has insufficient funds, the user can't reenter another card information without refreshing the page.

### Steps to reproduce

1. Go to a purchase page (e.g. buy more CI minutes)
1. Enter a card that will produce insufficient funds error (e.g. `4000000000009995`)
1. Notice the error is shown at the top of the page
1. Notice adding a new card iframe isn't refreshed to allow the user to enter a new card


**Note:** the error is not being sent as other errors like ""enter a card with a future date"".

### What is the current *bug* behavior?

New a card iframe doesn't refresh and stays on

### What is the expected *correct* behavior?

The new card iframe should be refreshed allowing the user to enter a new card.

### Relevant logs and/or screenshots

![Screen_Shot_2021-03-09_at_17.19.55](/uploads/bc7f784279d895b137334e45b9f3b11d/Screen_Shot_2021-03-09_at_17.19.55.png)

### Workarounds

Refresh the page",2
80556872,2021-03-09 13:42:49.997,Allow to retry submitting in upgrade/renew page when there's a payment error,"### Summary

On the upgrade page, if the user entered an invalid/expired card the submit button will remain disabled preventing the user from updating the card details and submitting again.

### Steps to reproduce

1. Go to subscription upgrade/renew page
2. Choose add a new card
3. Enter card details with an expired date (e.g. 01/01/2021)
4. Hit submit
5. Notice the error at the top of the page
6. Notice the submit button is still disabled, the user can't adjust the card details and need to refresh the page to proceed with the upgrade.

### What is the current *bug* behavior?

After submitting an invalid credit card the submit button is disabled, not allowing the user to retry.

### What is the expected *correct* behavior?

When there's an error in the payment methods, the submit button should be enabled to allow retrying.

### Relevant logs and/or screenshots

![Screen_Shot_2021-03-09_at_16.37.58](/uploads/c519994c4ba750d273586a51fa86e156/Screen_Shot_2021-03-09_at_16.37.58.png)

### Workarounds

Refreshing the page.

# TODO

- Remove the [`!this.errorMessage`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2591/diffs#995e8151c13e03c9af3ab9e2d2cbe613b2d96ee0_126_126) block that prevents the submit button from being enabled in Upgrade and Renew",1
80519404,2021-03-09 00:59:59.575,Order total and price not correctly updated after quantity entered,"### Summary

There's a [race condition](https://en.wikipedia.org/wiki/Race_condition) occurring in purchase pages (e.g. CI minutes and storage), the problem is happening mostly on our e2e tests but it could happen to our users.

### Proposal

In purchase pages, debounce HTTP requests that are triggered by user input (e.g. change seats count).

Introducing the debounce might increase our bundle size a bit (or a few bytes) but it will prevent the race condition from happening, which help with:

1. Our tests will fail less often
1. Our users won't encounter strange UX behavior in the total price changing unexpectedly

**Note:** since the problem is happening on multiple pages, we want to implement a holistic solution for all pages.

### Details

Here's an example of order total and price not correctly updated after quantity entered: 

![image](/uploads/cb9f15d649ee7076a6677728b3ed7a8e/image.png)

### Steps to reproduce

Seems to be intermittently failure in pipeline. More investigation needed.

### Reported examples

1. https://gitlab.com/gitlab-org/customers-gitlab-com/-/jobs/1080777644
1. https://gitlab.com/gitlab-org/customers-gitlab-com/-/jobs/1084970324
1.

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",2
80456382,2021-03-08 10:04:03.418,Create documentation explaining custom auto renew,"As part of the [Custom Auto Renew](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2081), create a document explaining the reason and the process behind the Custom Auto Renew. 

It should explain the use, how the implementation and also the fallback strategy behind the Custom Auto Renew.",1
80287858,2021-03-04 23:30:16.614,ProServ Training Per-Seat Add-on SKU,"# SKU Request Summary

<!---
Provide a brief description of what this SKU will be used for.
--->



## SKU Requirements

In order to expedite your request, please complete all of the following information.
Any questions about this template or this request can be directed to @amandarueda in the comments of this issue.

* [x] SKU Name: ProServ Training Per-Seat Add-on
* [x] SKU Code/ID: [ProServ Training Per-Seat Add-on](https://docs.google.com/spreadsheets/d/1tOGWs86qtiT7p_21qBI_sJCTWWKJKVmj7pIV9lmr6H4/edit?usp=sharing)
* [x] Zuora Plan Name: [ProServ Training Per-Seat Add-on](https://docs.google.com/spreadsheets/d/1tOGWs86qtiT7p_21qBI_sJCTWWKJKVmj7pIV9lmr6H4/edit?usp=sharing)
* [x] Zuora Plan ID: [ProServ Training Per-Seat Add-on](https://docs.google.com/spreadsheets/d/1tOGWs86qtiT7p_21qBI_sJCTWWKJKVmj7pIV9lmr6H4/edit?usp=sharing)
* [ ] Service type: `add-on`
* [x] Does this need to be purchase-able via CustomersDot? `No`
* [x] Does this service renew? `No`
     * [ ] If yes, what is the renewal cadence? `monthly | annually | other`
* [x] Should an email be sent indicating the subscription is coming to an end?: `No`
* [x] Is there a unit of measure, if so what? ` Yes`  `Education Service`
* [x] Does this service provision anything? `other`
     * [ ] If yes, please describe in detail what should be provisioned including the systems affected:
* [x] How soon do you need this SKU ? Timeline: As soon as possible
* [x] Who in Sales-Ops approved this request: @c.yoshida 
* [x] Link to originating Finance issue: https://gitlab.com/gitlab-com/Finance-Division/finance/-/issues/3676
* [ ] Apply the appropriate `BTG Priority` label to this issue.",2
80233355,2021-03-04 09:25:34.081,Cleanup old trials controller and views,"### Problem

I noticed we have some views related to `trials` not being used.

- `app/views/trials/new.html.haml`
- `app/views/trials/_simple_gitlab_com_trial_form.html.haml`

### Proposal

Confirm it's not being used and delete related code (e.g. controller, routes, views, etc.)

### Next steps (if any)",3
80225356,2021-03-04 08:04:19.919,Remove font awesome icons and replace them with gitlab-ui SVGs,"## Description

At the moment **we're loading the Font Awesome CSS for only one icon** in the invoices view:

| Screenshot | Description|
| --- | --- |
| ![Screenshot_2021-03-06_at_05.49.40](/uploads/37be0b3b691beb3975aba38810ba85f2/Screenshot_2021-03-06_at_05.49.40.png) | Empty state of invoices view (there are no invoices to display) |

This is a `6.5kB` http request to a 3rd party URL that we can avoid:

![Screenshot_2021-03-04_at_10.03.34](/uploads/b14597ea1b55ffd85537de54b21290f5/Screenshot_2021-03-04_at_10.03.34.png)

## Suggested optimization

We should replace this icon with [the info SVG we already have](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/cbded25ee79e137cd795ce3d88b5394c4092e083/app/views/shared/svg/_information_o.svg). 

## font-awesome usage in the customers-gitlab-com project

| Type | RegEx used | Place(s) used |
| --- | --- | --- |
| Library CSS import | | https://gitlab.com/gitlab-org/customers-gitlab-com/blob/1cf439b58cbd13466d270baa23aa6ee01e790709/app/views/layouts/application.html.haml#L12 |
| HAML usage | `[ ""\.]fa[ ""\.]` | https://gitlab.com/gitlab-org/customers-gitlab-com/blob/7cb5d6b61a25194be52c5a7416bf2225412b1c12/app/views/invoices/index.html.haml#L27 |
| SCSS usage | `\.fa[-\.]+` | https://gitlab.com/gitlab-org/customers-gitlab-com/blob/1593ae6ea0837ecf2236e6df4c097542b81df84e/app/assets/stylesheets/main.scss#L183 |",1
80174659,2021-03-03 13:26:03.565,Upgrade subscription not showing payment method errors,"### Problem

When upgrading a subscription (new upgrade app), if an invalid credit card is entered and the page is submitted, the error received from the backend is not shown properly on the frontend.

![Screen_Shot_2021-03-03_at_16.22.17](/uploads/4b329a6d06232f780dcd85c267031235/Screen_Shot_2021-03-03_at_16.22.17.png)

In the example above I submitted the page without entering the credit card data (the same happened when entering an expired credit card).

I tested the same scenario on the renew subscription page and the error doesn't exist there, it was showing the backend error correctly.",2
80143679,2021-03-03 07:36:19.227,Self-instance with a valid premium license is using the free plan name,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you're about to submit isn't a duplicate.

Do not include confidential information!
--->

### Summary

Self-managed instance with a license shows `free` as their `actual_plan` object, instead of the `default` plan object.

### Steps to reproduce

Unknown currently. I'm only aware [that the customer that has been affected](https://gitlab.zendesk.com/agent/tickets/196781) (internal link) has had the instance for a very long time (~2+ years).

### What is the current *bug* behavior?

Performing any changes to the `default` plan object does not work when raising application limits.

### What is the expected *correct* behavior?

Performing changes to the `default` plan object should work when raising application limits.

### Relevant logs and/or screenshots

```
irb(main):001:0> project = Project.find_by_full_path(""group/project"")
=> #<Project id:1234 group/project>>
irb(main):002:0> pp project.actual_plan_name
""free""
```

The `free` plan is returned for all projects and groups, newly created, or existing ones. Expected was the `default` plan.

```
irb(main):003:0> pp Gitlab.com? 
false 
```

### Workarounds

(Ways to get around the issue)

Application limits can be updated on the `free` plan object instead of the `default` one.

### Reported examples

1. https://gitlab.zendesk.com/agent/tickets/196781 (internal link)

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",3
80122544,2021-03-02 20:44:13.984,[FE] Breakdown: Improve provisioning and onboarding of new sales-assisted GitLab.com subscribers,"This ~frontend issue (for https://gitlab.com/groups/gitlab-org/-/epics/5012) will be used to track breakdown work. As a result, new FE issues will be created.  

## Design

[See UX issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2040/)",3
47864128,2020-06-18 11:35:01.148,Check if param can be omitted from subscriptions#update request,"While testing something with subscriptions, I noticed that a param called `subscription` is sent with the `subscriptions#update` request. That parameter is being logged as unpermitted and I don't see any usage of it. So we should omit it from the request if it's not used.

First investigations can't point to an exact place where this param gets set though. So this needs further investigation.

**Rails log example:**

```
Started PUT ""/subscriptions/A-S00038066"" for 95.88.20.212 at 2020-06-18 13:25:06 +0200
 Parameters: {""subscription_id""=>""A-S00038066"", ""gl_namespace_name""=>""Kesha Heller"", ""gl_namespace_id""=>2, ""preview""=>false, ""payment_method_id""=>""2c92c0f9725046a0017256792f035e2f"", ""new_product_id""=>""2c92c0f8725e55d70172613f547f0b59"", ""new_product_quantity""=>1, ""id""=>""A-S00038066"", ""subscription""=>{""subscription_id""=>""A-S00038066"", ""gl_namespace_name""=>""Kesha Heller"", ""gl_namespace_id""=>2, ""preview""=>false, ""payment_method_id""=>""2c92c0f9725046a0017256792f035e2f"", ""new_product_id""=>""2c92c0f8725e55d70172613f547f0b59"", ""new_product_quantity""=>1}}
  Customer Load (0.3ms)  SELECT  ""customers"".* FROM ""customers"" WHERE ""customers"".""id"" = $1 ORDER BY ""customers"".""id"" ASC LIMIT $2  [[""id"", 1], [""LIMIT"", 1]]
  ↳ app/controllers/concerns/unleash_helper.rb:33
  Feature::FlipperGate Load (0.4ms)  SELECT ""feature_gates"".* FROM ""feature_gates"" WHERE ""feature_gates"".""feature_key"" = $1  [[""feature_key"", ""compliance_check""]]
  ↳ lib/feature.rb:52
Unpermitted parameter: :subscription
```",2
43993175,2020-06-15 17:23:27.572,Hard-Coded Secrets in Application Source Code - NCC Group finding,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

The following issue was identified during a contracted pentest by the NCC Group. The test was held June 1-11, 2020.

### Problem

There has been a long history of source code disclosure vulnerabilities in web and application servers. Any of these in conjunction with hard-coded secrets in an application’s source could result in their compromise. Additionally, improper server configuration could result in these files being readable by external users. Finally, code is often stored in code repositories with loose access controls, creating another point of potential compromise.

Here is a redacted snippet of hard-coded secrets:
```ruby
request:
    method: post
    uri: https://test.salesforce.com/services/oauth2/token
    body:
      string: grant_type=password&client_id=[REDACTED]&client_secret=[REDACTED]&u
    sername=[REDACTED]&password=[REDACTED]
    ...
  response:
...
string: '{""access_token"":""<ACCESS_TOKEN>"",""instance_url"":""https://cs63.sale sforce.com"",""id"":""https://test.salesforce.com/id/00D6C0000004d0KUAQ/005610000 024BDwAAM"",""token_type"":""Bearer"",""issued_at"":""1589895566673"",""signature"":""[RE DACTED]""}'
```

It appears that these secrets are used mostly in development or staging environments, thus lowering the severity.

The following file locations are affected:
* README.md:78
* README.md:148
* config/secrets.yml.example:59
* db/seeds.rb:18
* spec/fixtures/vcr_cassettes/Change_namespace_of_existing_subscription/change_group_of_active_subscription/successfully_change_namespace_for_subscription.yml:600
* spec/fixtures/vcr_cassettes/zuora_ee_plan_fetch.yml:88

### Proposal

Sensitive data should not be stored directly in source, but should instead be referenced from configuration files that exist outside of the application’s root. When checking code into a repository, use example files or stubs which are overwritten when the application is deployed.

All secrets that have been checked into the source code repositories should be considered compromised, and changed.

### Result

### Next steps (if any)

### How will we measure success?",2
43758760,2020-06-15 13:12:58.957,"Do not render ""Change linked namespace"" for CI only subscriptions","<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

Rather lengthy discussion here: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1470#note_358179305

This button is functionally broken (not provisioning) when used for CI minutes purchases. So let's not push our users to do this.",2
41406838,2020-06-10 19:03:21.031,Graduate Payment Methods page from feature flag,"### Problem

The [`pajamas_payment_methods`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/3/edit) feature flag has been turn on for production for more than 2 months.

I discovered that the style of `.btn-link` class is overriding what it should like in Pajama's design system, and the only place it's being used in is the old payment methods page.


### Proposal

Graduating payment methods from feature flags.

### Steps

- [x] Remove instances of `pajamas_payment_methods`
- [x] Remove old HAML implementation of payment methods pages 
- [x] Remove old HAML specific styles (most notably `.btn-link` in `components.scss`)
- [x] Remove specs that test payment methods pages without feature flag
- [x] Delete `pajamas_payment_methods` feature flag in https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags
- [x] Clean up `paymentCallback` in `app/assets/javascripts/payment_methods.js`
- [x] Replace `payment_methods/*` partials with `pajamas/payment_methods/*` 

### Result

Consistent styles with Pajama's and less deprecated code to worry about.

### Next steps (if any)

Schedule the issue to be worked on.",3
41267465,2020-06-10 17:49:29.124,Sales-assisted .com deals sold for less seats than the current active user count shouldn't disassociate the subscription and downgrade the namespace to free,"### Problem
An issue was reported on 2020-06-10 by Sales that a .com customer who had purchased a renewal for a user count less than the currently active user count was inadvertently downgraded to free. 

Based on the investigation, it appears that since the new subscription was for less than the currently active user count, the portal did not know what to do and it caused the namespace to become unlinked from both the previous and new subscription and downgraded them to free. 


### Proposal
Determine the best way to handle this scenario - some options: 

- Allow the namespace to be associated to the new subscription, although they are already over their user count. Co-terms will ultimately capture this lost revenue 
- Charge/invoice the card/customer for the difference 
- Provide some kind of messaging to the Salesperson associated with the renewal so they can take action 


### Result
Happy customers, less errors 


### Next steps (if any)

### How will we measure success?",5
38772639,2020-06-09 22:52:38.725,Cannot change plan on trial via admin,"When trying to change trial for the group, threw the error below: https://customers.gitlab.com/admin/customer/178872/list_gitlab_namespaces

From bronze to silver

Sentry Issue: [CUSTOMERSGITLABCOM-3G6](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1632227/?referrer=gitlab_integration)

```
RuntimeError: Error updating namespace 8011668 with params {:plan=>""silver"", :shared_runners_minutes_limit=>10000, :trial_ends_on=>Thu, 25 Jun 2020}: ""{\""message\"":\""500 Internal Server Error\""}""
  app/services/gitlab/namespace/update_service.rb:35:in `update_namespace'
    raise ""Error updating namespace #{@namespace_id} with params #{@attrs.inspect}: #{response.body.inspect}""
  app/services/gitlab/namespace/update_service.rb:16:in `execute'
    { success: true } if update_namespace
  lib/rails_admin/update_gitlab_namespace_plan.rb:60:in `update_plan'
    result = Gitlab::Namespace::UpdateService.new(params[:gitlab_namespace_id], gitlab_params).execute
  lib/rails_admin/update_gitlab_namespace_plan.rb:89:in `block (2 levels) in <class:UpdateGitlabNamespacePlan>'
    result = update_plan
  app/middleware/basic_health_check.rb:20:in `call'
    return @app.call(env) unless env['PATH_INFO'] == HEALTH_PATH
...
(88 additional frame(s) were not displayed)

RuntimeError: Error updating namespace 8011668 with params {:plan=>""silver"", :shared_runners_minutes_limit=>10000, :trial_ends_on=>Thu, 25 Jun 2020}: ""{\""message\"":\""500 Internal Server Error\""}""
```",2
36533382,2020-06-08 22:49:24.930,Add generator template for migrations,"The following discussion from !1498 should be addressed:

- [ ] @vshumilo started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1498#note_357377160):  (+1 comment)

    > @dstull would you please review these changes from the DB perspective when you have the opportunity?",2
36338853,2020-06-08 20:12:21.148,Investigate and fix intermittent failures in renewal spec,"Job [#586387342](https://gitlab.com/gitlab-org/customers-gitlab-com/-/jobs/586387342) failed for 4e4b442fb5061725e43bce28d9b24c6dd38450ce:


We're seeing the feature spec `./spec/features/existing_customers/renewal_spec.rb` fail every once in a while.

After the fact it's pretty difficult to figure out what went wrong.

We need to identify what's the cause of this flakiness.

* Race condition in spec?
* Non-deterministic behaviour?
* Is the spec correct but the `AmendSubscriptionService` is flaky?
* Is VCR not matching HTTP requests?

### Proposal

Maybe it makes sense to put in a number of log statements in the `AmendSubscriptionService` to get a better idea of where in the flow this breaks.
We can start by adding a logger(""Amend Start"") at the beginning and logger(""Amend Ended Successfully"")  to see if it’s the feature spec or the service that’s failing.",1
35410234,2020-06-04 02:52:04.293,Adding more user in subscription does not generate a working license,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the “bug” label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you’re about to submit isn’t a duplicate.

Do not include confidential information! 
--->

### Summary

When customer add more users in subscription in customer portal, a new license is generated. Customer portal will generate a working license the for the updated license. However, if customer add more users later on during the same license period, all the new license will have the `Previous users count` of the `Users count` at the beginning of license term and `True-up` of the first Add more users of the license.

### Steps to reproduce

1. Purchase License term: 2020-05-01 - 2021-05-01 and upload to the system. 
    - Users count originally purchase: `50`


2. Add more user `7` to the license for the first time 2020-05-30 and upload to the system:
   - New Users count: `57`
   - Previous users count: `50`
   - True-up: `7` 


3. Add more user `10` to the license for the second time 2020-06-02 and upload to the system:
   - New `Users count`: `67`
   - Previous users count: `50`
   - True-up: `7`


4. Add more user `20` to the license for the third time 2020-06-05 and upload to the system:
   - New `Users count`: `87`
   - Previous users count: `50`
   - True-up: `7`

This would cause error when uploading `#3` and `#4` because they are not referencing the license currently on the system.

### What is the current *bug* behavior?

New license after adding more users to license multiple time keep referencing the license at the beginning of the license term.

### What is the expected *correct* behavior?

Add more users to license multiple time should correctly referencing the latest license on the system.

### Workarounds

Manually generate a working license

### Reported examples

1. https://gitlab.zendesk.com/agent/tickets/159073
1. https://gitlab.zendesk.com/agent/tickets/160766
1. 

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",2
35408070,2020-06-04 00:50:29.017,NoMethodError/sidekiq undefined method `match' for #<Rack::Session::SessionId:0x000000000b50f5e0>,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Admins are unable to access Sidekiq's [admin panel](https://customers.gitlab.com/sidekiq)

[Link to Sentry error](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1639321/?query=is%3Aunresolved)

### Proposal

Investigate the root of the issue and fix it.

As a side note, looks like the ability to create an issue from Sentry is not properly configured (It used to work).

### Result

We will be able to see some unexpected errors raised by Sidekiq.

### Next steps (if any)

### How will we measure success?",1
35370932,2020-06-03 08:53:05.241,"Follow-up from ""Introduce service to close salesforce opportunity""","The following discussion from !1463 should be addressed:

- [ ] @jameslopez started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1463#note_354153731): 

    > hmm we should probably grab `strong_memoize` from GitLab :thinking:

Since we are already adding something new from GitLab, we can also add a cop to encourage its usage as suggestion in [this comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1490#note_355475434).",1
35298856,2020-06-02 05:57:37.884,Customers cannot create account by Signing in from GitLab.com,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you're about to submit isn't a duplicate.

Do not include confidential information! 
--->

### Summary

Sign in via GitLab.com to register is not working on [customers portal](https://customers.gitlab.com/customers/sign_in) if customer click on `Buy more CI minutes` on GitLab.com through either group or personal `Usage quotas` page. 

### Steps to reproduce

1. Have a new account on GitLab.com
1. Go to a group/personal `Usage quotas` page
1. Click on `Buy more CI minutes` → you'll be redirected to https://customers.gitlab.com/buy_pipeline_minutes
1. Click on `Sign in to GitLab.com` → presented with `Please complete the required fields.` message without a registration form (see screenshot below)

### What is the current *bug* behavior?

Users cannot register on [customers portal](https://customers.gitlab.com/customers/sign_in) when redirected from the `Buy more CI minutes` button on `Usage quotas` page

### What is the expected *correct* behavior?

Users is presented with a form to register on [customers portal](https://customers.gitlab.com/customers/sign_in). 

Clicking through `Manage` or `Upgrade` in billing page works normally. 

### Relevant logs and/or screenshots

![image](/uploads/791db4316edca23cba35598639ba3acd/image.png)

### Workarounds

One of the following:

- Register and Sign into [customers portal](https://customers.gitlab.com/customers/sign_in) and [change linked account](https://docs.gitlab.com/ee/subscriptions/#change-the-linked-account) afterward
- Click on `Manage` button in the billing page instead
  - Group namespace → Settings → Billing
  - Personal namespace → Profile icon at the top right → Settings → Billing

### Reported examples

1. https://gitlab.zendesk.com/agent/tickets/158273
1. https://forum.gitlab.com/t/cant-purchase-additional-ci-minutes-please-complete-the-required-fields-but-there-are-no-fields/35161
1. https://gitlab.zendesk.com/agent/tickets/162646
1. https://gitlab.zendesk.com/agent/tickets/162733

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",2
35254388,2020-06-01 08:40:03.857,Possibilty to purchase Ultimate - 1 Year (EDU or OSS),"**[HackerOne report #882848](https://hackerone.com/reports/882848)** by `steppe` on 2020-05-26, assigned to @cmaxim:

Hi,

Any user can purchase Ultimate - 1 Year (EDU or OSS) which is for educational institutions or open source projects.I have found here https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/860 list of Gitlab plan id and found  Ultimate - 1 Year which is  free and purchased.

Steps to reproduce:

Login in to your account https://customers.gitlab.com/  
And go to  https://customers.gitlab.com/subscriptions/new?plan_id=2c92a0fd63afe3fd0163d87aecee230a&transaction=create_subscription

Best,  
[@]steppe

## Impact

Attacker can bypass GitLab for Education Program Requirements.",2
35200498,2020-05-29 19:54:36.318,Faraday::Error::ClientErrorSidekiq/CreateSalesforceOpportunityWorker,"REF: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1475#note_352103341

### Problem

Sentry details: https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1626298/?query=is%3Aunresolved

Possible reasons from SFDC forums: https://developer.salesforce.com/forums/?id=906F00000008m69IAA

### Proposal

Retry the Opp creation in case it is not automatically created by SFDC.

### Result

Opp will not be missing.

### Next steps (if any)

### How will we measure success?",2
35167890,2020-05-29 11:41:16.101,"Pajamas Update: Self-Managed ""New Subscription"" Page","It's being managed under [`pajamas_new_subscription`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/43/edit) feature flag.

### Problem

In order to match Pajama's design that we follow we should migrate the `New Self-Managed Subscription` page.

#### 1st step

| EE | GL.com  |
| ------ | ------ |
| ![image](/uploads/81e845f91a0c42b809503f711265b6b4/image.png) | ![image](/uploads/e913c0a8de21ebe4c12c20509fc65955/image.png)

#### 2nd (and final) step

| EE | GL.com |
| ------ | ------ |
| ![image](/uploads/4f1d6e5fcf799b62a90a52ec0be209df/image.png) | ![image](/uploads/58cdedd73d6ddc5ca6b0050768131cd1/image.png) |

### Proposal

![](/uploads/8fd9712e79f7b9b890863495f101ee55/GitLab.com_-_Buy_subscription__1_.png)

This will give us unified UX when the customer sits on a single page to complete the checkout process across the application.",5
35153781,2020-05-29 06:24:23.263,Update Ruby to 2.6.6,"## Proposal
The main repo [will update Ruby](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/33253) from 2.6.5 to 2.6.6 soon.

To be in sync we should update it too.

[Ruby 2.6.6 includes two security fixes.](https://www.ruby-lang.org/en/news/2020/03/31/ruby-2-6-6-released/) This is a safe update.

### Related [cookbook-customers-gitlab-com](https://gitlab.com/gitlab-cookbooks/cookbook-customers-gitlab-com) MRs:
* [Bump customers.stg ruby version to 2.6.6](https://gitlab.com/gitlab-cookbooks/cookbook-customers-gitlab-com/-/merge_requests/98)
* [Bump customers (prod) ruby version to 2.6.6](https://gitlab.com/gitlab-cookbooks/cookbook-customers-gitlab-com/-/merge_requests/99)",2
35140141,2020-05-28 20:15:56.534,Block portal access for existing reseller customers,"### Problem
With #1373, Customers created via reseller subscriptions will be blocked from portal access.  However, we still need to block existing reseller customers.

### Proposal
Create a temporary rake task to set `login_activated = false` for all existing reseller customers.

### Result
Once the `block_reseller_customer` feature goes live, we can run this rake task in production.",1
35139555,2020-05-28 19:53:26.804,Remove the `block_reseller_customer` feature flag,"### Problem
Once the `block_reseller_customer` feature flag has been on for a while and the features are stable, the legacy will need to be removed.

### Proposal
Once we've vetted the feature, we should remove `block_reseller_customer` feature flag checks from the code and remove the legacy code.  Also, remove the temporary rake task, `reseller_customers:deactivate_login`, introduced in !1464.

After the MR merges and deployed into production, we can safely remove the feature flag from https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags.

### Result
A cleaner code base.",1
35139348,2020-05-28 19:46:08.243,Clean-up: Pajamas Change Namespace page,"We enabled the feature flag in #1406, this is a scheduled issue to clean up the old code that's related to change namespace page if there're no issues reported.

I'll schedule this after 6 weeks rather than 3 weeks since it's not a common page to be used by our customers, 6 weeks would be a more suitable time to get any report or feedback about it.",2
35139112,2020-05-28 19:37:31.784,"When CI Minutes are purchased in tandem with a plan, the CI minutes should be provisioned","## Summary

When a sales-assisted order is booked which includes a SaaS plan (Bronze, Silver, Gold) and additional CI minutes, when the subscription is associated with the namespace, we are not associating the related CI minutes to the namespace at the same time.",2
35015153,2020-05-26 12:32:01.666,Username is capitalized unnecessary on the account details page,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

@gtsiolis reported that it might be unnecessary to capitalize the username on the account details page.

![image](/uploads/c0889103dbf7c2f1c122df680f322495/image.png)",1
34984191,2020-05-25 16:43:44.183,Add banner to Customers Portal for admin viewing a blocked customer,"## Summary

We need a more obvious notification for internal customers portal admins to know when a customers is blocked (as per https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1373). 

Let's create a banner displayed to admins when impersonating a customer who is blocked in the customers portal.

The banner should read: ""This is a blocked customer account which was sold by a reseller. The user cannot have access to this account.""",2
34863156,2020-05-21 21:49:34.898,Research GitLab.com provisioning retry process,"Identify the current retry process and optimize for multiple retries. The API should be Idempotent.

* We identify how the provisioning process works in the case of partial failure
* Also if for some reason the provisioning is retried after it has been completed successfully, what happens?",2
34848329,2020-05-21 13:52:39.044,Extract logic from the SeatLinksController into services,"### Problem
The `SeatLinksController` has some complex logic now for creating `LicenseSeatLink` and `Reconciliation` records.

### Proposal
It would might be nice to extract into a service or their own services to simplify the logic in the controller.  This could make testing easier/cleaner as well.  It would also be nice to wrap the `LicenseSeatLink` and `Reconciliation` record saves in a transaction to ensure the Reconciliation is created/updated if the LicenseSeatLink is created.

### Result
A cleaner and reliable `SeatLinksController`.",2
34796169,2020-05-20 09:44:54.844,"Make ""Manage Purchases"" more mobile friendly","<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

With dynamic content we're seeing some of our tables span quite a bit of width. This makes for a very unfortunate look on mobile screens.

![Screenshot_2020-05-20_at_09.42.03](/uploads/d6884e342b714ab80134f0657754b060/Screenshot_2020-05-20_at_09.42.03.png)


### Proposal

1. Add `gl-overflow-x-auto` to GitLab-UI
1. Use `gl-overflow-x-auto` [in Subscription Product details](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/frontend/javascripts/subscription/components/subscription_product_details.vue#L101)",2
34773943,2020-05-19 20:10:58.873,Remove temporary rake task for backfilling zuora_subscription_id,"### Problem
In https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1422, we introduced a rake task for backfilling the `zuora_subscription_id` on the `license_seat_links` table.  After this task is run in staging and production, we should be able to safely remove it from the codebase.

### Proposal
Remove the [rake task](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/5f1e585c5ea2cd96f74cca70f9f9f7017268a78b/lib/tasks/seat_link.rake).",0
34771909,2020-05-19 19:12:37.556,Add SET to Danger Bot for customer app,"### Summary

We use Danger Bot significantly in gitlab.com to understand code changes and ensure DRIs have reviewed the corresponding changes. Granted we dont want to only rely on Danger Bot, it definitely is a good automated process to ensure quality.

Tasks:

* [ ] Add SET to significant changes to ensure an SET reviews the MR.
* [ ] Documentation",1
34751975,2020-05-19 15:28:01.109,Backfill zuora_subscription_id in license_seat_links table,"The following discussion from !1401 should be addressed:

- [ ] @asubramanian1 started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1401#note_344593969):  (+2 comments)

    > Should we also backfill existing data?
    > 
    > The column may not be usable to query if only part of records have values.",1
34717227,2020-05-19 04:19:31.975,Add ability to run Sidekiq inline for testing,"### Problem

For some areas of the app, mainly during feature tests we might want to validate the job's execution,
to accomplish this we want to enable the sidekiq inline testing mode on demand for some blocks of code 
but we don't have the configuration in place today to do so.

### Proposal

To improve end to end testing we want to allow the jobs to run inline when executing some tests.
To do this we want to configure sidekiq for testing in the same way it is configured for Gitlab
to be able to use blocks:

```ruby
Sidekiq::Testing.inline! do
...
end
```
to wrap the test parts where we don't want the execution to wait for the job to be done.

Reference: https://github.com/mperham/sidekiq/wiki/Testing

### Result

### Next steps (if any)

### How will we measure success?",2
34712724,2020-05-18 23:22:42.798,Identify Sentry errors related to customers portal failing to update GitLab.com,"### Problem

In order to resolve support requests for .com customers, and to ensure messaging (banners etc) on .com accounts are correct we need to first identify the existing errors where the `customers portal` has failed to update GitLab.com accounts. 

As a follow up, a decision on what to do with these errors can be made. 

### Proposal

Review Sentry errors for the `customers portal`, identify all specific and generic (Runtime) errors that relate to the portal not updating GitLab.com accounts, and provide instructions on how to access these in Sentry (a link, or a list of error types / messages).

### Result

1. PMs and Engineers can find related errors in Sentry
1. PMs can decide on next steps (email, slack integration, etc)
1. Engineers can make recommendations to add error classes to handle any related Runtime errors, or other code changes to assist with initial triage of support requests.

Sentry link: https://sentry.gitlab.net/gitlab/customersgitlabcom/?query=is%3Aunresolved+Error+updating+subscription",1
34700742,2020-05-18 18:59:45.287,Handle blocking .com Customers in reseller deals,"### Problem
In #1373, Logic was added to prevent customers created via reseller subscriptions from logging into the Customers Portal.  In addition, the welcome/new customers email is also skipped for these blocked customers (where `customer.login_activated == false`).  However, for .com customers there is [an additional email](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/6820453fb6eae264dd4b3c91c3f44bb4700729ee/app/views/customer_mailer/gl_com_purchase_from_sf.html.haml) delivered to instruct the customer to login to the Portal and apply the new subscription to a namespace.

### Proposal
This issue was brought up in [this coversation](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1373#note_343474790).  @amandarueda and I decided to handle this in a separate issue but we still need to determine how to handle these.  It could possibly be a different email but we need to figure out how the namespace will be applied.

The feature flag for this issue, `:block_reseller_customer`, cannot be enabled until we either handle this use case, or skip blocking these types of customers.",2
34683675,2020-05-18 11:49:04.473,Follow-up: Verify change namespace page in staging,"
This is a follow-up to #956, while the development work is done and merged, we need to verify the changes on staging before we enable the feature flag.

The change will be under [`pajamas_purchase_change_group`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/11/edit) feature flag.

### Next Steps

- [x] Verify the change on staging
- [x] Send the issue to Amanda and Tim for approval
- [x] Enable the feature flag for production
- [x] Create a follow-up issue to clean up the change namespace page after 6 weeks #1466",3
34599092,2020-05-15 10:21:46.098,Add curly: all to eslint config,"### Problem

### Proposal

Adopt [`curly: all`](https://eslint.org/docs/rules/curly#all) in our eslint config to enhance code readability.

The rule can fix its errors automatically with `--fix` or using `yarn run eslint-fix`, no overhead on the engineer.

The implementation could be done on two steps:

- Add the rule to `.eslintrc.yml`
- Fix any violation with `--fix`

### Result

Happy engineers where they can have more readability over the code :smile: 

### Next steps (if any)

Schedule it for development

### How will we measure success?",2
34574754,2020-05-14 20:18:38.162,Include zuora_subscription_id when saving license seat link data,"### Problem
As @derekatwood mentioned [here](https://gitlab.com/gitlab-data/analytics/-/issues/4709#note_342810124), `zuora_subscription_id` is commonly used in the data warehouse.  We aren't currently tracking this in the `license_seat_links` table.

### Proposal
Add the column `zuora_subscription_id` to the `license_seat_links` table.  Persist this data when the receiving a seat link API request.

### Result
Better data for data warehouse reporting.",1
34557638,2020-05-14 13:31:48.292,"Follow-up: remove bootstrap-switch from js, scss and dependencies","Original discussion https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1357#note_342431497

With https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1357 merged we're no longer using the HAML implementation to render purchased subscriptions.

We've got some JS to handle client side interactivity that has been deprecated; downloading license, cancelling/resuming subscriptions. We should remove this.

Looking at [`dispatcher.js`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/assets/javascripts/dispatcher.js#L41-45)

```
import LicenseFinder from './license_finder';
import SubscriptionCards from './subscription_cards';
...
    case 'subscriptions:show':
    case 'subscriptions:index':
      SubscriptionCards();
      LicenseFinder();
      break;
```

Bootstrap-switch should also be removable at this point.",2
34533352,2020-05-14 04:26:05.617,Make the VAT field in customer account detail alphanumeric,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Some country requires VAT ID and from time to time the VAT ID requires an alphabetical prefix like DEXXXXXXXX or DE-XXXXXXX.

### Proposal

Allow other characters in the VAT fields so that customer can enter their VAT ID correctly. 



This is affecting: https://gitlab.zendesk.com/agent/tickets/156724",1
34531770,2020-05-14 02:14:30.750,BE: Allow users to manually renew subscription up to 30 days post expiration,"## Summary

When the subscription expiration date is reached, we remove purchase event buttons (upgrade, add-on, renew, autorenew) from the subscription card. We specifically removed the `Renew` button because the system wasn't processing the renewal properly upon selection. 

## Proposal
As per the Sales/Finance [policy](https://gitlab.com/gitlab-com/sales-team/field-operations/sales-operations/-/issues/1653#note_422409896) of updating customer subscriptions to cancelled and closing the respective Renewal opportunity 30 days after subscription term end date, we should allow the customer to renew their expired subscription within customers.gitlab.com with a 30 day grace period as well.

## Success Criteria

1. This applies to both GitLab.com and Self-Managed subscriptions
1. This change does not extend the paid entitlement (SM license/GitLab.com paid features), nor the period in which the customer is entitled to paid support 
1. In customers.gitlab.com, when the expiration date is reached, all action buttons (upgrade, add seats, autorenew) should be removed except `Renew`
1. The user should be able to select the `Renew` button for a period of 30 days post the expiration date
1. Customers.gitlab.com should present the standard Renewal purchase flow to the customer and accept payment during checkout
     1. If payment fails, the transaction should not be processed and no change should be sent to Zuora
     1. If payment is successful, customers.gitlab.com should send a renewal amendment to Zuora with the subscription details

## Testing & Availability
1. `Renew` button is available on CustomersDot manage plan page if plan's expiration date is within last 30 days
1. For SaaS user, `Renew` button is also available on personal/group billing page
1. Hide `renew` button if the subscription expired more than 30 days ago
1. Upon clicking `renew` button, user enters the normal upgrade + renew flow.


## Reported examples

1. https://gitlab.zendesk.com/agent/tickets/156267
1. https://gitlab.zendesk.com/agent/tickets/157817
1. https://gitlab.zendesk.com/agent/tickets/162428
1.",3
34525639,2020-05-13 20:29:23.110,Add GitLab::Database::MigrationHelpers to Customers Portal,"### Problem
In the GitLab codebase, it is recommended to use [database helpers](https://gitlab.com/gitlab-org/gitlab/blob/44d881b91a0ed366a7aec019481840da001cbf5c/lib/gitlab/database/migration_helpers.rb) like `add_column_with_defaults`.  In the Customers portal code, we have some database helpers [defined here](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/d08fb068c42c73a857947302c26863020db74edc/lib/database/migrations_helper.rb) but it's not the full set of helpers like GitLab.

### Proposal
The ideal solution would be to move these database helpers in GitLab to a library or gem so it can be easily shared and updated in other applications like Customers.  The easier but less elegant solution could be to simply copy the library over to Customers.

### Result
Access to more migration helpers making migrations safer and follow standards recommended in the development docs.

-------

@vshumilo added:

**First...**

There had to make the choice between copying `Gitlab::Database::MigrationHelpers` and its tests
to the customers app or creating a gem.
After a short analysis it was decided to move with the easiest (less time consuming) approach
of copying the file because:
- It solved the immediate need to have the migration helpers available
- It was less time consuming as it required much less process (we had a time budget in mind)
- Creating the gem then required Gitlab to be updated to reference and use it as part of the same
issue otherwise those logics will diverge (again, we had a time budget in mind)
- Gitlab migration helpers are quite tangled with other modules, lasses and helpers which added challenge to extract all that code
- :keycap_asterisk: There is already at attempt to [move the helpers into a gem](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/27307/diffs) in progress so feels like doubling a lot of effors 

------------------------------------------------------------------------------------------
**Then...**

The original intention of moving the entire `Gitlab::Database::MigrationHelpers`
resulted to be an effort bigger than the budget in time and the needs we present at the moment.
- A lot of the helpers at the `Gitlab` end are very specific. Ex: `backfill_iids`
- A lot of the helpers at the `Gitlab` end rely on other modules that need to be moved along if we want to move the helpers

As a result [a half way migration of the helpers into costumers](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1433) was resulting in ~4000 new lines of code and a lot of work pending related to fixing the specs by copying the missing dependencies, updating references (some other magnitud of thousands lines). 

This ""size"" overflows the current appetite for this change.

------------------------------------------------------------------------------------------
**Now...**

As a result the agreement was to pick 10 methods and move them along as a first iteration.

:exclamation: Try to make sure the methods we pick are methods we might end up needing.

This is a list of the current methods on the Gitlab end and highlighten are
those that count with a counterpart on our end created by copying and adjusting the
original method's logic:


- def add_timestamps_with_timezone(table_name, options = {})
- def remove_timestamps(table_name, options = {})
- **def add_concurrent_index(table_name, column_name, options = {})**
- **def remove_concurrent_index(table_name, column_name, options = {})**
- def remove_concurrent_index_by_name(table_name, index_name, options = {})
- **def add_concurrent_foreign_key(source, target, column:, on_delete: :cascade, name: nil, validate: true)**
- def validate_foreign_key(source, column, name: nil)
- **def foreign_key_exists?(source, target = nil, options)**
- **def concurrent_foreign_key_name(table, column, prefix: 'fk_')**
- **def disable_statement_timeout**
- def with_lock_retries(**args, &block)
- def true_value
- def false_value
- def update_column_in_batches(table, column, value, batch_size: nil, batch_column_name: :id)
- def add_column_with_default(table, column, type, default:, limit: nil, allow_null: false)
- def rename_column_concurrently(table, old, new, type: nil, batch_column_name: :id)
- def undo_rename_column_concurrently(table, old, new)
- def install_rename_triggers(table, old_column, new_column)
- def change_column_type_concurrently(table, column, new_type)
- def cleanup_concurrent_column_type_change(table, column)
- def cleanup_concurrent_column_rename(table, old, new)
- def undo_cleanup_concurrent_column_rename(table, old, new, type: nil, batch_column_name: :id)
- def change_column_type_using_background_migration(
- def rename_column_using_background_migration(
- def perform_background_migration_inline?
- def install_rename_triggers_for_postgresql(trigger, table, old, new)
- def remove_rename_triggers_for_postgresql(table, trigger)
- def rename_trigger_name(table, old, new)
- def indexes_for(table, column)
- def foreign_keys_for(table, column)
- def copy_indexes(table, old, new)
- def copy_foreign_keys(table, old, new)
- def column_for(table, name)
- def replace_sql(column, pattern, replacement)
- def remove_foreign_key_if_exists(*args)
- **def remove_foreign_key_without_error(*args)**
- def sidekiq_queue_migrate(queue_from, to:)
- def sidekiq_queue_length(queue_name)
- def check_trigger_permissions!(table)
- def bulk_queue_background_migration_jobs_by_range(model_class, job_class_name, batch_size: BACKGROUND_MIGRATION_BATCH_SIZE)
- def queue_background_migration_jobs_by_range_at_intervals(model_class, job_class_name, delay_interval, batch_size: BACKGROUND_MIGRATION_BATCH_SIZE, other_job_arguments: [], initial_delay: 0)
- def index_exists_by_name?(table, index)
- def postgres_exists_by_name?(table, name)
- def create_or_update_plan_limit(limit_name, plan_name, limit_value)
- def backfill_iids(table)
- def migrate_async(*args)
- def migrate_in(*args)
- def bulk_migrate_in(*args)
- def bulk_migrate_async(*args)
- def check_constraint_name(table, column, type)
- def check_constraint_exists?(table, constraint_name)
- def add_check_constraint(table, check, constraint_name, validate: true)
- def validate_check_constraint(table, constraint_name)
- def remove_check_constraint(table, constraint_name)
- def add_text_limit(table, column, limit, constraint_name: nil, validate: true)
- def validate_text_limit(table, column, constraint_name: nil)
- def remove_text_limit(table, column, constraint_name: nil)
- def check_text_limit_exists?(table, column, constraint_name: nil)
- def add_not_null_constraint(table, column, constraint_name: nil, validate: true)
- def validate_not_null_constraint(table, column, constraint_name: nil)
- def remove_not_null_constraint(table, column, constraint_name: nil)
- def check_not_null_constraint_exists?(table, column, constraint_name: nil)
- def statement_timeout_disabled?
- def column_is_nullable?(table, column)
- def text_limit_name(table, column, name: nil)
- def not_null_constraint_name(table, column, name: nil)
- def missing_schema_object_message(table, type, name)
- def tables_match?(target_table, foreign_key_table)
- def options_match?(foreign_key_options, options)
- def on_delete_statement(on_delete)
- def create_column_from(table, old, new, type: nil, batch_column_name: :id)
- def validate_timestamp_column_name!(column_name)
- def validate_not_in_transaction!(method_name, modifier = nil)
- def with_migration_context(&block)

------------------------------------------------------------------------------------------

Out of the 74 methods availabe in Gitlab we have moved 7 and adjusted those to our current needs.

I will take on the quest to action on 10 more.

Resulting:

**Existing Methods:**

- def add_concurrent_foreign_key(source, target, column:, on_delete: :cascade)
- def foreign_key_exists?(source, target = nil, column: nil)
- def concurrent_foreign_key_name(table, column)
- def disable_statement_timeout
- def remove_foreign_key_without_error(*args)
- def add_concurrent_index(table_name, column_name, options = {})
- def remove_concurrent_index(table_name, column_name, options = {})

#### **New Additions:**
- :white_check_mark: def add_timestamps_with_timezone
- :white_check_mark: def remove_timestamps
- :x: def index_exists_by_name? **DEPRECATED** :lion_face: 
- :white_check_mark: def remove_concurrent_index_by_name
- :white_check_mark: def true_value
- :white_check_mark: def false_value
- :white_check_mark: def update_column_in_batches
- :x: def add_column_with_default **DEPRECATED** :whale: 
- :white_check_mark: def add_column_with_default
- :white_check_mark: def validate_timestamp_column_name

Disclaimer: Some methods might require to move some small helper methods along

:warning: Important: Moved in a MR per method, or very closed couple of methods to facilitate review and in aims of iteration

### References
:lion_face: `remove_concurrent_index_by_name` within `Gitlab::Database::MigrationHelpers` is using a [custom implementation](https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/database/migration_helpers.rb#L1084) to check if an index exists by name for the provided table.
It is and old implementation and was based on the lack of Rails support to check this AND had a note to be updated as soon as the app was upgraded to Rails > 5.1.7 which introduces [index_name_exists?](https://apidock.com/rails/v5.2.3/ActiveRecord/ConnectionAdapters/SchemaStatements/index_name_exists%3F)

Created a [tech-debt issue](https://gitlab.com/gitlab-org/gitlab/-/issues/219285) in the Gitlab context as a reminder so this can be updated on that end too.


:whale: Since PostgreSQL 11, adding columns with a default does not lead to a table rewrite anymore. As such, this method is not needed anymore and the default `add_column` helper should be used.",2
34519335,2020-05-13 16:48:28.015,Graduate Auto Renew cancel experiment from feature flag,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

The auto renew cancellation experiment has been running at 100% for a while.

We can safely say it the results are a success and we should graduate this out of the feature flag stage.

* Remove mentions of `auto_renew_cancellation` in code
* Remove specs covering this
* Remove [feature flag](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/1/edit)",2
34504417,2020-05-13 11:36:01.925,Send additional data to Salesforce on Opportunity creation/update,"This is part of the research issue https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1252.

Step after https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1379.

Use the prepared additional data to send more information to Salesforce when an Opportunity is created/updated.",1
34504334,2020-05-13 11:33:24.844,Send additional data to Salesforce with Opportunity creation,"This is part of the research issue https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1252.

Additional data has to be sent when a Salesforce Opportunity is created/update to create more object. This should happen whenever the service `CreateSalesforceOpportunityService` is invoked. The additional data will create a `Quote`, `Quote Amendment`, `Quote Rate Plan` and `Quote Rate Plan Charge` in Salesforce along with the `Opportunity`. We will need a service for each of those object creations.

The following data as originally described in [this comment](https://gitlab.com/gitlab-com/sales-team/field-operations/systems/-/issues/717#note_339304188) is needed to create the objects:

**Quote (zqu__Quote__c)**

| Field Name | Field API Name | Value |
|------------|----------------|-------|
| Opportunity | zqu__Opportunity__c | id of the Opportunity |
| Start Date | zqu__StartDate__c | today's date |
| Initial Term | zqu__initialTerm__c | 12 |
| Renewal Term | zqu__renewalTerm__c | 12 |
| Bill To Contact | zqu__BillToContact__c | id of the contact used for the Opportunity or a new one |
| Sold To Contact | zqu__SoldToContact__c | id as the Bill To |
| Currency | zqu__Currency__c | 'USD' |
| Name | name | any string |

**Quote Amendment (zqu__QuoteAmendment__c)**

| Field Name | Field API Name | Value |
|------------|----------------|-------|
| Quote | zqu__Quote__c | id of the Quote you created above |
| Type | zqu__Type__c | 'NewProduct' |

**Quote Rate Plan (zqu__QuoteRatePlan__c)**

| Field Name | Field API Name | Value |
|------------|----------------|-------|
| Quote | zqu__Quote__c | id of the Quote you created above |
| Quote Amendment | zqu__QuoteAmendment__c | id of the Quote Amendment you created above |
| Product Rate Plan | zqu__ProductRatePlan__c | the id of the Product Rate Plan returned from this query: `[SELECT id, zqu__ZuoraId__c FROM zqu__ProductRatePlan__c WHERE zqu__ZuoraId__c = '2c92c0f86716796f01671a8e683821f2' LIMIT 1]` |
| Product Rate Plan Zuora Id | zqu__ProductRatePlanZuoraId__c | the zqu__ZuoraId__c of the Product Rate Plan returned from the query to find the Product Rate Plan id |
| Amendment Type | zqu__AmendmentType__c | 'NewProduct' |

**Quote Rate Plan Charge (zqu__QuoteRatePlanCharge__c)** (Effective Price is optional, but it can determine MRR)

| Field Name | Field API Name | Value |
|------------|----------------|-------|
| Quote Rate Plan | zqu__QuoteRatePlan__c | id of the Quote Rate Plan created above |
| Quote | Quote__c | id of the Quote created above |
| Product Rate Plan Charge | zqu__ProductRatePlanCharge__c | the id of the Product Rate Plan Charge returned from this query: `[SELECT id, zqu__ZuoraId__c FROM zqu__ProductRatePlanCharge__c WHERE zqu__ZuoraId__c = '2c92c0f86716796f01671a8e685321f4' LIMIT 1]` |
| Quantity | zqu__Quantity__c | 1 |
| Product Rate Plan Charge Zuora Id | zqu__ProductRatePlanChargeZuoraId__c | the zqu__ZuoraId__c of the Product Rate Plan Charge returned in the query for the Product Rate Plan |
| Currency | zqu__Currency__c | 'USD' |
| Effective Price | zqu__EffectivePrice__c | this is optional, but it's a decimal of size 11,7 |",2
34471257,2020-05-12 20:23:24.017,No Portal access for customers in reseller deals,"### Problem
In #1169, we've identified new workflows necessary to better facilitate reseller deals.  However, those new workflows, like allowing resellers access to the Customers Portal, could have big implications for the app and implementing those features could take significant effort.

### Proposal
As an MVC, we want to block all users from reseller deals from gaining access to the Customers Portal.  The Customers Portal should still create Customer records, necessary for keep existing features working like subscription creation and license management, but simply do not allow those Customers to sign in.  In addition, these Customers should not receive welcome emails from the Portal.  They should however, still receive emails for EULA acceptance and license delivery.

### Result
The end user in reseller deals can't login to the Customers Portal for reseller deals.

/cc @amandarueda",3
34445905,2020-05-12 10:27:30.027,Change ENV key for Zuora CC Page ID for test env,At the moment the ENV key for `zuora_cc_payment_page_id` is the same for all environments. But there is a specific Page ID for `CI Pipelines` that has to be used for the test environment to allow Capybara's app host url. Therefore we should make clear that there's a different in the keys and rename the one that's used for the test env.,1
34380820,2020-05-11 06:51:43.388,Allow customers to turn off auto-renew feature for EE subscriptions if EE instance does not send seat link data,"This is a follow-up issue from #1264.

We disallow the customer with a EE subscription to turn on `auto-renew` if they don't have seat link data (this is covered by the current implementation). But if the customer has a EE subscription with `auto-renew` toggle on then we **should** allow to turn it off but if they don't send seat link data they can't turn it back on.",1
34305950,2020-05-08 09:37:37.043,Introduce URL builder,"Our [client side api](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/frontend/javascripts/api.js) is growing a bit.

Maybe it's time to adopt a [buildUrl helper](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1343#note_338722780) similar to the one in the [gitlab repo](https://gitlab.com/gitlab-org/gitlab/-/blob/master/app/assets/javascripts/api.js#L543)

Probably makes sense to have an interface similar to

```
urlBuilder(PREVIEW_UPGRADE_SUBSCRIPTION_URL, {
  subscription_name: subscriptionName
})
```


### Pros

* Clear way of how to build urls
* Central place for existing urls (makes discovery easier)

### Cons

* It's more code to maintain",3
34116308,2020-05-04 15:25:40.623,Update change namespace portal design,"### Problem

Thanks to @aalakkad we have a new `Change namespace` flow https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/860. I think that we can refine the experience and make it even easier for users to change the namespace associated with a subscription.

### Proposal

| Design | Info |
| ------ | ------ |
| ![GitLab.com_-_Change_subscription_namespace](/uploads/3adc9bdf1b7eaeb5cafeda1afb2495be/GitLab.com_-_Change_subscription_namespace.png) | **Select namespace**<br>[**Design Specs**](https://www.figma.com/file/yjusTZF6Qgr4DzXkvE5bK2/Customers-Portal-Templates?node-id=264%3A397)<br><br>Namespace details section now occupies the white space to the right. |
| ![GitLab.com_-_Change_subscription_namespace_-_No_charge](/uploads/db2abdf38e2cd0648941db7848f5dda4/GitLab.com_-_Change_subscription_namespace_-_No_charge.png) | **Select namespace - No charge**<br>[**Design Specs**](https://www.figma.com/file/yjusTZF6Qgr4DzXkvE5bK2/Customers-Portal-Templates?node-id=261%3A3946)<br><br>If no additional charges apply the confirm button is activated. | 
| ![GitLab.com_-_Change_subscription_namespace_-_Additional_charge](/uploads/d92145bbe715fcd62ceb740300f08090/GitLab.com_-_Change_subscription_namespace_-_Additional_charge.png) | **Select namespace - Additional charges**<br>[**Design Specs**](https://www.figma.com/file/yjusTZF6Qgr4DzXkvE5bK2/Customers-Portal-Templates?node-id=264%3A204)<br><br>If additional charges apply the left details section expands with details on charge and rebate with final total sum calculated. | 

### Result

*  Better use of space
*  Clearer breakdown when additional charges apply",3
34005291,2020-04-30 15:34:56.306,Create a helper for accessing or setting up the Unleash context in models,"The following discussion from !1247 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1247#note_334529405):  (+4 comments)

    > I was thinking that all new feature flags would use [Unleash](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/README.md#feature-flags-unleash).  I think it might be good to switch this (and the others below) if it's easy.  WDYT?",2
33967092,2020-04-29 19:25:08.048,Create a concern for sharing methods between Order and Subscription,"The following discussion from !1247 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1247#note_333945666):  (+1 comment)

    > **Suggestion:**  I realize now that this is on the order, we might be able to use the `product_rate_plan_id` on the order to determine if this is a dot com plan, rather than querying the subscription. Actually, going a bit further, there are a lot of methods on subscription that could apply to the order as well (`belongs_to_gitlab_ee_plan?`, `legacy_plan?`, etc).  Basically anything that refers to the plan could be shared.  It's a minor point as this way works too, but it would be more efficient to avoid the call to Zuora.  I'm happy to tackle this in a followup issue though as we could move multiple methods to a concern shared between order and subscription.",2
33947952,2020-04-29 11:57:55.242,Consider changing VAT field to be optional,"### Problem

When a customer is registering through the customers portal from EU country, we show a required VAT field.

Maybe if the customer registering for a personal account they don't want to add the VAT field, but they are forced to do it in order to complete the registration form.

### Proposal

When a customer is registering from an EU country, we show the VAT field but without it being required.

### Result


### Next steps (if any)

- Validate the proposal
- Schedule

### How will we measure success?",1
33903938,2020-04-28 13:24:22.338,Do not print error messages from Salesforce worker in development,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Running any test in development prints the following message: `2020-04-28T13:09:08.251Z 8114 TID-ow1fn9te8 ERROR: {""message""=>""Error creating Salesforce Account"", ""customer_id""=>5, ""subscription_name""=>""A-S00000000"", ""invoice_id""=>""""}`
This message is a bit annoying because it breaks the output:

```
AmendSubscriptionService
  #execute
    on renewal
      with renew only
2020-04-28T13:07:45.837Z 8114 TID-ow1fn9te8 ERROR: {""message""=>""Error creating Salesforce Account"", ""customer_id""=>1, ""subscription_name""=>""A-S00000000"", ""invoice_id""=>""""}
        renews the subscription
        when passed quantity (1) less than actual (3)
2020-04-28T13:08:02.859Z 8114 TID-ow1fn9te8 ERROR: {""message""=>""Error creating Salesforce Account"", ""customer_id""=>2, ""subscription_name""=>""A-S00000000"", ""invoice_id""=>""""}
          generates amendment with the actual quantity
      with a trueup
2020-04-28T13:08:25.442Z 8114 TID-ow1fn9te8 ERROR: {""message""=>""Error creating Salesforce Account"", ""customer_id""=>3, ""subscription_name""=>""A-S00000000"", ""invoice_id""=>""""}
        generates two amendments
    when updating quantity
2020-04-28T13:08:46.702Z 8114 TID-ow1fn9te8 ERROR: {""message""=>""Error creating Salesforce Account"", ""customer_id""=>4, ""subscription_name""=>""A-S00000000"", ""invoice_id""=>""""}
      updates the quantity
2020-04-28T13:09:08.251Z 8114 TID-ow1fn9te8 ERROR: {""message""=>""Error creating Salesforce Account"", ""customer_id""=>5, ""subscription_name""=>""A-S00000000"", ""invoice_id""=>""""}
      doesnt explode
```

These messages are also visible in CI env.

### Proposal

**1st Option:** Remove or silence these messages.

**2nd Option:** Disable `CreateSalesforceAccountWorker` in `test` environment.

### Result

Clean and nice output without error messages.

### Next steps (if any)

### How will we measure success?",2
33901569,2020-04-28 12:29:10.412,Update Zuora iFrame CSS styles to match recently updated colors in @gitlab/ui,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Color variables were [changed](https://gitlab.com/gitlab-org/gitlab-ui/-/merge_requests/1099) in `@gitlab/ui` that commit introduced differences between current colors in `@gitlab/ui` and colors in `zuora.scss`.

For example, mismatched background color:

![image](/uploads/885b24367211a4fc1615ee68fadcab8d/image.png)

### Proposal

Update color variables in `zuora.scss` to match current.

### Result

### Next steps (if any)

### How will we measure success?",3
33889713,2020-04-28 08:19:08.447,Extract logic into a helper for _subscription_form partial,"The following discussion from !1247 should be addressed:

- [ ] @nicolasdular started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1247#note_332262894):  (+1 comment)

    > What do you think about moving this logic to a helper class?",3
33846719,2020-04-27 11:08:07.144,"Graduate Pajamas Update: ""Manage Purchases"" from feature flag (cleanup)","<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->
Pajamas Update: ""Manage Purchases"" has been live for 3 weeks at the time of writing.

We should clean up after ourselves :)

* Remove instances of `pajamas_subscriptions`
* Remove old HAML implementation of Manage Purchases
* Remove old HAML specific styles
* Remove specs that test Manage Purchases page without feature flag
* Remove feature flag from https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags
### How will we measure success?",3
33832830,2020-04-27 06:02:00.025,Can not delete payment method,"### Summary

When I try to delete one of my two payment methods, I get redirected to a 404 page.

### Steps to reproduce

- Log in to customers.gitlab.com
- Go to payment methods
- Make sure to have at least two Payment methods
- For the non-default payment method click on ""edit""
- On the details page for that payment method hit ""Delete""
- Accept the confirmation dialog

### What is the current *bug* behavior?

- I'm getting redirected to this address: `https://customers.gitlab.com/payment_methods/%23%3CZuora::PaymentMethod:0x000000000[***]%3E` (the `[***]`-part is my replacement) which shows a 404 page.
- When I go back to the payment methods, the deleted payment method is still there.

### What is the expected *correct* behavior?

- I should get back to the list of payment methods.
- The deleted Item should be gone.

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",1
33754044,2020-04-24 13:27:50.536,Ensure button UI consistency with the move to `gl-new-button`,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

We've adopted `gl-new-button` (named `gl-button`) which follows the Pajamas style guide.

This means that the HAML buttons which do not follow the Pajamas style guide are visibly different.

This is especially noticeable [on pages that have HAML and Vue buttons](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1309#note_330940880).

### Proposal

Update CSS so buttons look the same.

| Before | After |
| ------ | ------ |
| ![image](/uploads/62cff3bcd6826b59af3f7d5d5d69ea55/image.png) | ![image](/uploads/3a390c44b2b02048bba1076a76f3b3f0/image.png) |",2
33745914,2020-04-24 10:55:18.042,Follow-up - Have visual indicator of disabled items in namespace-select,"The following discussion from !860 should be addressed:

Original [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/860#note_330810109).

We should have a better indicator for the user to know which item is disabled visually. previously the user had to move the mouse over an item to see what's the shape of the cursor will be (pointer for clickable items and normal for disabled).

## Suggestion

| before | after |
| ------ | ------ |
| ![Screen_Shot_2020-04-24_at_13.53.22](/uploads/2080a648bf33ffa6b890419a9b9bda50/Screen_Shot_2020-04-24_at_13.53.22.png) | ![Screen_Shot_2020-04-24_at_13.53.26](/uploads/3b700710ccbc4283cf5df3a9055d2b1e/Screen_Shot_2020-04-24_at_13.53.26.png) |",1
33637250,2020-04-22 16:41:50.787,"Some Web directs not creating an opportunity, only subscription","This is a follow-on issue from: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1091#note_328894575

[New examples](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1091#note_328894575) provided:

FYI: Invoice #[INV00064014](https://gitlab.my.salesforce.com/0064M00000XYlDM?srPos=0&srKp=006) and[INV00064013](https://gitlab.my.salesforce.com/0064M00000XYlDH?srPos=0&srKp=006) didn’t create an account or opportunity, and it’s for starter and bronze plan respectively. Thanks!

/cc @rdavila @kdsouza2",2
33598445,2020-04-21 21:53:31.769,Fix Salesforce Bug: Do not open closed lost Opps,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
*  [Related Sales Systems Issue](https://gitlab.com/gitlab-com/sales-team/field-operations/systems/-/issues/645)
*  The portal has a bug in it where it may potentially update an opportunity that was closed in a previous month and then closing it in the current month. This can lead to issues with reporting on historical where we may have reported a churned/Lost opportunity but now the opportunity no longer represents that. 


### Proposal
*  Once an Opportunity is closed (Won/Lost) in a previous month it should never be changed or reopened and closed
*  [WIP/Example MR for this](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1295)

### Result

### Next steps (if any)
*  Fix to either be merged into Portal or have an improved MR in place of the prepared MR 

### How will we measure success?
*  The portal should not be able to update previously closed opportunities - this will lead to fewer headaches for the Deal Desk team",1
33583292,2020-04-21 17:06:57.768,Default rest_client as true in all stubs,"The following discussion from !1280 should be addressed:

- [ ] @asubramanian1 started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1280#note_328320714): 

    > Probably not within the scope of this MR: could we default the value for `rest_client` as `true` in all [stubs](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/spec/support/stub_zuora_calls.rb)? Given `rest` is the default behavior.",2
33527313,2020-04-20 16:58:59.350,Update Zuora Objects documentation,"## Problem
The [customers-gitlab-com](https://gitlab.com/gitlab-org/customers-gitlab-com) Readme [references](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/README.md#L13) the [Zuora Objects](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/doc/zuora_objects.md) doc. 

This documentation uses the deprecated `Z::` classes.

## Proposal
We need to update the [Zuora Objects](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/doc/zuora_objects.md) documentation to reference the new Zuora REST API usage, classes.",1
33505550,2020-04-20 09:11:15.607,[Change Management] Add missing business stakeholders review to Danger,"### Problem

For notifying changes and requesting a review from business stakeholders, at the moment we have checklists in the MRs such as:

* [ ] Ping `@jbrennan1` for review if the issue has the ~""Affects Salesforce"" label
* [ ] Ping `@gitlab-com/business-technology/enterprise-apps/zuora-architects` for review if the MR involves Zuora business logic

While we have other reviews such as backend, frontend (review + maintainer review) and Database reviews all in Danger, where it makes it more difficult to miss.

### Proposal

We could automate this perhaps based on monitoring files/namespaces and incorporate it to Danger so this is no longer easily missed.

We should make sure this process is lightweight enough so it doesn't impact delivery times. For example, this may mean that we could get up to **7 different reviews** per MR (initial review, maintainer review, database review, database maintainer review, security review, EntApps review, Sales review)",2
33498419,2020-04-20 05:57:12.837,Send the phone number to SFDC for new trials,"### Problem

Phone number is not recorded

https://gitlab.com/gitlab-org/gitlab/-/issues/214849#note_326520387

### Proposal

It should be end to SFDC as stated https://gitlab.com/gitlab-org/gitlab/-/issues/214849

### Related

>  just talked to Sam and we figured it out. the API names on the form are incorrect and don’t match SFDC, so they aren’t captured.
> in SFDC, the API names are NumberOfEmployees and Phone
> here’s a sheet that should be helpful https://docs.google.com/spreadsheets/d/1kIKnHqjYE7GdCqxIKKjJGDzw086lB6FRyE7N-BZUqi4/edit#gid=0

",3
33498298,2020-04-20 05:52:08.460,Store the phone number for gitlab.com trials,"### Problem

As discovered in the main issue ""trial form"" phone number field isn't stored anywhere
https://gitlab.com/gitlab-org/gitlab/-/issues/214849


### Proposal

Store the phone number in the `customers` table",3
33437752,2020-04-17 19:13:29.455,Make the trial phone number optional,This is part of the experiment https://gitlab.com/gitlab-org/gitlab/-/issues/196799 to make the phone number optional on customers application,2
33293747,2020-04-15 01:34:08.774,UX: Notify self-managed admin as they approach the user limit in their subscription,NOTE: This is the UX Design issue for https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1210,2
33220937,2020-04-13 16:12:54.174,Spike: Namespaces can be removed in gitlab but we still have references to their subscription,"### Problem
Research: We have a lot of order records with subscriptions that reference missing ""groups"" in gitlab. This can probably happen when users/or namespaces are removed from the system.

This is a discovery issue to see what parts of the code may be affected by the changes and come up with a fix.

### Proposal
Let's discuss it.

### Result

### Next steps (if any)

### How will we measure success?",1
33216710,2020-04-13 14:38:37.842,Clarify params used for gitlab_support_url helper method,"The following discussion from !1169 should be addressed:

- [ ] @oswaldo started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1169#note_322136203):  (+1 comment)

    > I'm not sure if I follow this number, should that be extracted to some constant, or YAML config?

## Problem
Currently, [the `gitlab_support_url` helper method](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/dbb3aa0a13505f6514b43bd43b23f2a1379c9de1/app/helpers/application_helper.rb#L24) accepts an optional param for `ticket_form_id`.  This is used throughout the views with param values like `360000071293` and `334447`.  It's not clear what these values mean.

## Proposal
Instead of using these numbers directly when calling the helper method, it would be preferable to set these as constants or set them in application.yml.  Referencing them in one place will make it easier to update in the future and make it clearer when seeing the reference in code.  For example, this `gitlab_support_url(LICENSING_AND_RENEWAL_PROBLEMS)` is clearer than `gitlab_support_url(360000071293)`.",1
33108074,2020-04-09 15:43:10.584,Convert account details page to Vue.js,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Page `Account details` was migrated to Pajamas styles but not to Vue.js components.

What do we have on it:

4 separated sections (all screenshots were taken from Pajamas version):

<details>
<summary>Personal details</summary>
![image](/uploads/e0f5c1cb7982394deb31194726c9d143/image.png)
</details>

<details>
<summary>Company details</summary>
![image](/uploads/aa9da89cf9b39cc219d1b8cae4b86bdf/image.png)
</details>

<details>
<summary>Change password</summary>
![image](/uploads/772c062f9f2abd35b00377470841077e/image.png)
</details>

<details>
<summary>Link GitLab account</summary>
![image](/uploads/d93515fe274ef1717e60cf69cab700f5/image.png)
</details>

### Proposal

In order to complete our Pajamas update, we should update this page too. 
We already have a feature flag for that page - `pajamas_account_page` so I suggest the following plan:

* We implement a Vue.js component for each section without integrating it.

### Result

Vue.js based page for account details with more control over extensibility (VAT field visibility depends on selected country). Removed legacy `select2` selects for country and state.

### Next steps (if any)

The 4 new components:

* [x] `Personal Details`
* [x] `Company Details`
* [x] `Change Password`
* [x] `Link GitLab Account`

All have been merged now, and they are behind feature flags.

* [x] Integrate all these components to a Vue.js app 

* Move information about linked GitLab account to `CustomerPresenter`.
* Replace all 4 Vue.js applications with a single Vue.js app.
* Optional: Show all errors in the root Vue.js application for better UX (or keep them for now in their components but just scroll to an errored component and expand it).

* [ ] Enable all 4 flags in production

### How will we measure success?

### Other information

* Original issue https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/678
* Feature flag `pajamas_account_page` has been running in production since %""12.8""",5
33025131,2020-04-08 07:53:56.498,Verify polyfills presence in bundles,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Special ~""production::blocker"" issue for https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1215 to block production deployment until we verify polyfill existence in bundles.

### Proposal

### Result

### Next steps (if any)

### How will we measure success?",1
33004512,2020-04-07 16:51:50.707,Create model Reconciliations to save reconciliation log,"### Summary

When the seat link data from a self hosted instance arrives to the customers application, a look up for the particular order takes place and is saved in license `license_seat_links` table. 

As and when an order has to be reconciled, this entry is saved in the `reconciliations` table. This table acts as the audit and also helps in avoiding fetching the active users count from the `license_seat_links` table.


| Column Name | Column Type |
| ------ | ------ |
| Id | Primary key |
| order_id | References |
| active_users | Integer | 
| last_reconciled_at | DateTime | 
| reconciled_done_at | DateTime | 
| created_at | DateTime | 
| updated_at | DateTime |",2
32947924,2020-04-06 15:09:44.092,Research: Web Direct Opportunities Need Quote and Product Data,"### Issue Summary

Looking at the data in SFDC we receive from the portal, we are only receiving shell Opportunities and Subscriptions. We are not receiving data for Zuora Quotes, Zuora Rate Plans, or Zuora Subscription Charges, all of which are critical for surfacing the current entitlements and metrics for our customers. This effects any customer who uses the portal, even partially.

We need to update the customers.gitlab.com to send us additional data when a Zuora transaction is triggered.


This is an engineering research issue to:

1. investigate the proposal
1. identify implementation
1. break out the tasks into the smallest available parts and create issues if needed

### Proposal

For every transaction in Zuora, we need a:

* Zuora Quotes
* Zuora Rate Plans
* Zuora Subscription Charges

* Quote Object (similar to the wrapper you send the Opp in)
* All Related `Amendments`
* All Related `Quote Rate Plans`
* All Related `Quote Rate Plan Charges`
* All Related `Quote Charge Summaries`
* All Related `Quote Charge Details`

We would also need to double check that post transaction the following objects are inserted / updated on the Account:

* All Related `Subscriptions`
* All Related `Subscription Product & Charges`",2
32933729,2020-04-06 11:14:28.311,Verify ES6 Zuora code on staging,"This is a ~""production::blocker"" issue for verifying that ES6 version of Zuora operates normally.",1
32792824,2020-04-02 16:17:14.449,Graduate gitlab_com_plan_upgrades from feature flag,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

`gitlab_com_plan_upgrades` has been live for ~9 months now. And it's living behind a feature flag, meaning developers need to enable this locally to see the page.

This leads to oversights like https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1241

### Proposal

Given the feature has been stable for a long time; remove the feature flag from the code.",1
32756068,2020-04-01 21:10:38.175,UX: UI Issues in the Upgrade flow in Customers Portal,"NOTE: This is the UX Design issue for https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1241

---
### MVC Proposal to fix spacing and alignment issues.

**[Design Specs](https://sketch.cloud/s/eMypz/v/aMML7r/a/GaeydO#Inspector)**

![Manage_Purchases_9__MVC__2x](/uploads/3e9d78b483827b19ca13f5b8593a2855/Manage_Purchases_9__MVC__2x.png)

@chris_baus @amandarueda @mkarampalas This is all Frontend work to help fix the current page. Font sizes, spacing and alignment. Let me know if you need anything else.",1
32755862,2020-04-01 21:05:13.814,UI Issues in the Upgrade flow in Customers Portal,"### Problem
The upgrade flow that is available for .com subscriptions in the Customers Portal has a number of UI issues: 

![image](/uploads/1d3b7d2bec341c7be31f890ce7be075c/image.png)


1. The top padding appears to be too small 
1. The font size for the box that displays the current subscription info is very large and throws off the entire page layout 
1. The box for the current subscription seems artificially small and creates a large white space area to the right that is wasted space  

### Proposal
1. TBD based on UX recommendations but I imagine there will be font and layout changes required 


### Result

1. A better upgrade flow 

### Next steps (if any)

### How will we measure success?",2
32675397,2020-03-31 11:24:08.346,Adopt `namespace:` over `group:` in UI,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Surfaced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1186#note_312872175

We're currently rendering `group: Group Name` and `GitLab group: Group name` when showing the namespace in the UI.

[Namespaces can also refer to personal accounts](https://docs.gitlab.com/ee/user/group/#namespaces), so `group: *` isn't always applicable.

![Screenshot_2020-03-31_at_11.21.20](/uploads/885201f396da47c2bfb9047854263fa2/Screenshot_2020-03-31_at_11.21.20.png)

### Proposal

* Always use `Namespace: *`

**or**

* Use `Namespace: *` as default, and `Group: *` when we **know** we're showing a group",1
32668728,2020-03-31 08:54:53.699,Do not render renew CTA for addon products only subscriptions,"The following discussion from !1182 should be addressed:

- [ ] @rhardarson started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1182#note_313977257):  (+3 comments)

    > @timnoah can you perform a ~UX review here?
    > 
    > I can help you setup one of these GitLab training products locally if you want.


We're rendering a ""Cancel subscription"" CTA for subscriptions that only have CI minute purchases.
The CTA doesn't do anything, so we should not render it, to avoid confusion.

![Screenshot_2020-03-30_at_14.19.00](/uploads/2cad51db9799d26d122fb1ca31bf5542/Screenshot_2020-03-30_at_14.19.00.png)",1
32627576,2020-03-30 11:37:50.801,Add billing state to salesforce when the customers are created,"### Problem

As part of saving the billing state to the salesforce and Zuora, this issue covers addition of the state to the lead service of sales force.

When a new customer is registered in the customer application, then the customer's data is send to Salesforce as part of lead generation.
https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/controllers/registrations_controller.rb#L12

[This data](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/services/create_salesforce_lead_from_customer_service.rb#L5) does not include `state` information captured when registering the user. 

### Proposal

Add `state` information when sending customers information during lead generation. Please not that the **state** param should not be sent when the country is different than USA or Canada, otherwise the validation on SFDC will fail the the SFDC account will not be created.

### Result

Salesforce is provided with the state information of the customer.",1
32615870,2020-03-30 08:01:37.339,"When at least one credit card is on file, there should always be a default record","<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

The default payment method check-box is not enforced/required for a payment method, so the customer can have no default payment method. This shows up in the customers portal, where there is no `default` label on the `Payment methods` page:

![Payment_methods_no_default](/uploads/566dc9407bc20e8ec61f87655c72b1b3/Payment_methods_no_default.png)

There is also no indication that the check-box for default payment method is required on the edit screen:

![edit_cc_default_box](/uploads/8dd82e68600f9a37d11f88ce24ec9103/edit_cc_default_box.png)

Having no default payment method results in the following error message when the customer tries to make a payment:

![no-default-error-msg](/uploads/3be0ac4f2e58d4b3ed8b00e5f7f195fc/no-default-error-msg.png)

Examples of customers experiencing this issue:
1. https://gitlab.zendesk.com/agent/tickets/150464
1. https://gitlab.zendesk.com/agent/tickets/150933
1. https://gitlab.zendesk.com/agent/tickets/162460
1. https://gitlab.zendesk.com/agent/tickets/168829

### Proposal

Make it required to have one payment method to be set as default.

### Result

A default payment method will prevent customers from seeing the error message

### Next steps (if any)

### How will we measure success?",2
32552907,2020-03-27 19:00:33.603,Change linked group button should not be available for CI Minute Subscriptions,"### Summary

Thinking through CI minutes purchases, these should never change namespaces after original purchase:

1. They are provisioned on GitLab.com and we don't have a mechanism to deprovision them.
1. You cannot purchase CI minutes without indicating a namespace.
1. They are not transferable. ([docs](https://docs.gitlab.com/ee/subscriptions/#purchasing-additional-ci-minutes)) 

![Screen_Shot_2020-03-26_at_20.38.16](https://gitlab.com/gitlab-org/customers-gitlab-com/uploads/1afb7d3247e67737e72ef319e021e4a1/Screen_Shot_2020-03-26_at_20.38.16.png)

### Proposal
Remove the button from CI Minute Subscription widgets",1
32541806,2020-03-27 14:30:19.224,total_quantity causes errors in some contexts,"User attempt to purchase CI minutes and gets an error, `We have found the following error while processing your subscription: Please enter a valid quantity.`
In spite of the error, a subscription is generated, an invoice is generated, the card is charged
The minutes are not applied to the GitLab.com group.

### Problem

### Proposal

### Result

### Next steps (if any)

### How will we measure success?",2
32504259,2020-03-26 18:12:49.341,Research: Record Billing State when account is defined,"### Issue Summary

When we define the account we do not define `Billing State` and therefore we do not pass data to Zuora and SFDC, we do not pass `Billing State`.


This is an engineering research issue to:

1. investigate the proposed solution
1. break out the tasks into the smallest available parts and create issues if needed

### Proposal

* Use the `Billing State` as per: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1135#note_297404665
* When the account is defined in the rails object also record the `Billing State`
* Ensure this state is passed to Zuora and SFDC",2
32491260,2020-03-26 14:06:42.011,Add-on amendments with a discount different than the original subscription are creating new subscriptions,"
### Problem
When a sales-assisted add-on user amendment is created with a discount different than the original subscription, the amendment is treated like a new subscription rather than an update to the existing subscription.


### Proposal
When a sales-assted add-on user amendment is created, 

1. the add-on users should be appended to the original subscription
1. a new subscription should not be created
1. the user count on the original subscription should be updated with the additional users
1. for self-managed, a new license should be issued with the updated user count
1. for gitlab.com, the additional users should be passed to the total user count in gitlab.com

### Example Screenshot
![Screen_Shot_2020-03-26_at_8.07.28](/uploads/2181a59ee8b762b77fe761938e4947e3/Screen_Shot_2020-03-26_at_8.07.28.png)

### Reported examples
1. https://gitlab.com/gitlab-com/support/dotcom/dotcom-internal/-/issues/1833
1. https://gitlab.zendesk.com/agent/tickets/150162
1.
1.",3
32468329,2020-03-26 00:14:10.635,Submit button is missing on Add new payment method page,"### Problem

When the user attempts to add a new payment method, the Submit button is missing. When I perform the same action while impersonating the user, I can see the submit button.

#### Steps
1. From customer account which already has a subscription, navigate to My Account > Payment methods
1. Select `Add new payment method` button
1. Fill in details, cc number starting with `51` (to trigger mastercard)
1. Fill in remaining details
1. Observe `Submit` button

#### Information from the user

```
* I am using the latest Chrome on Mac and the screen was 100% without any scroll.
* It works normally when using a private window
* And same result as before (no button) outside of incognito mode

I did some digging because I was curious:
1) The button is there, just not visible because of the height of the surrounding iframe (no scrollbar)
2) If I manually increase the height of the iframe to 412px (the height in the incognito mode), the button appears

So weirdly enough, the iframe is not correctly sized outside of incognito mode.
```

#### Screenshot from user
![Screen_Shot_2020-03-25_at_18.01.48](/uploads/4416a2661d6c10f9b2d9358837f7941d/Screen_Shot_2020-03-25_at_18.01.48.png)

#### Screenshot when I impersonate the user.
![Screen_Shot_2020-03-25_at_18.00.15](/uploads/477b38bbaf3bf731d92f9482f3d5ec73/Screen_Shot_2020-03-25_at_18.00.15.png)

#### Reported examples

1. https://gitlab.zendesk.com/agent/tickets/151238
1.
1.
1.",3
32405744,2020-03-24 20:23:57.688,ActionView::Template::Error: undefined local variable or method `pending_eula' for #<SubscriptionPresenter:0x000000000a699330>,"https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1381753/?referrer=gitlab_plugin

```
NameError: undefined local variable or method `pending_eula' for #<SubscriptionPresenter:0x000000000a699330>
  app/presenters/subscription_presenter.rb:59:in `eula_request_path'
    @subscription.pending_eula_request ? eula_request_url(pending_eula.token) : nil
  app/presenters/subscription_presenter.rb:47:in `path_attributes'
    eulaRequestPath: eula_request_path,
  app/presenters/subscription_presenter.rb:12:in `present'
    subscription_attributes.merge(path_attributes)
  app/helpers/subscription_helper.rb:5:in `block in subscriptions_data_attributes'
    subscriptions.map{ |subscription| SubscriptionPresenter.new(subscription, current_customer).present }
  app/helpers/subscription_helper.rb:5:in `map'
    subscriptions.map{ |subscription| SubscriptionPresenter.new(subscription, current_customer).present }
...
(115 additional frame(s) were not displayed)

ActionView::Template::Error: undefined local variable or method `pending_eula' for #<SubscriptionPresenter:0x000000000a699330>

ActionView::Template::Error: undefined local variable or method `pending_eula' for #<SubscriptionPresenter:0x000000000a699330>
```",1
32405698,2020-03-24 20:22:20.761,Notify self-managed admin as they approach the user limit in their subscription,"### Problem

Self-managed admins don't get any alerts when they are approaching their user limit. This can cause surprises for customers at renewal, and when they are contacted or charged for overages.

### Proposal

We should provide alerting to the admin potentially via the following modes:

1. In-instance banner displayed to the admin, on all pages.
1. Email to admin
1. Thoughts about a notification bubble on the admin wrench to call attention? (maybe overkill given the first step)

I'd like to get feedback on cadence of these alerts. Example, this happen when x% of the seats are used?",3
32367172,2020-03-24 08:43:51.392,"Graduate Pajamas Update: Portal ""Manage Purchases/Buy more CI minutes"" Page from feature flag","<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

- [x] Remove instances of `pajamas_buy_ci_minutes`
- [x] Remove HAML implementation of CI minutes
- [x] Remove HAML specific styles
- [x] Remove specs that test `pajamas_buy_ci_minutes` on/off (since it'll always be on)
- [x] Remove feature flag from https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags",1
32365208,2020-03-24 07:52:58.531,Adopt `gl-new-dropdown`,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

https://gitlab.com/gitlab-org/gitlab-ui/-/issues/673

`gl-dropdown` is being deprecated in favor of `gl-new-dropdown`.

The `gl-new-dropdown` is prime-time ready, where it gets tricky is replacing the name and API of the old `gl-dropdown`.

It is recommended to use `gl-new-dropdown` going forward, and then rename `gl-new-dropdown` -> `gl-dropdown` once `gitlab-ui` has renamed the component.",1
32365008,2020-03-24 07:46:42.212,Adopt `gl-new-button`,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->


https://gitlab.com/gitlab-org/gitlab-ui/-/issues/608

`gl-button` is being deprecated in favor of `gl-new-button`.

The `gl-new-button` is prime-time ready, where it gets tricky is replacing the name and API of the old `gl-button`.

When using `gl-button` we get this warning:

> Note: This component is being introduced to replace the <gl-button> component as it doesn’t conform to the design specs. Please use <gl-new-button> going forward. You can read more about the migration here.

It is recommended to use `gl-new-button` going forward, and then rename `gl-new-button` -> `gl-button` once `gitlab-ui` has renamed the component.",1
32205455,2020-03-19 22:58:11.332,UX: Remove autorenew functionality from EDU/OSS subscriptions,"NOTE: This is the UX Design issue for https://gitlab.com/gitlab-org/customers-gitlab-com/issues/1026

---",2
32191330,2020-03-19 15:16:12.796,Update subscription API to handle subscription upgrades,"Prior to implementing this issue: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/958, the subscription API needs to be update to allow for upgrades.",3
32076758,2020-03-17 11:33:46.385,Modify `gitlab_info_per_namespace` to be more easily consumed by the frontend,"The following discussion from !1116 should be addressed:

- [ ] @rhardarson started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1116#note_304455945):  (+4 comments)

    > Same concerns here as https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1116/diffs#note_304454658
    > 
    > I don't like doing this in the entrypoint; but the data conversion needs to happen _somewhere_


We're bending over backwards to consume the current `gitlab_plans_helper` helpers.

We should update these helpers to be more easily consumed by the frontend.

Importantly we need to make doubly sure that old usages of these helpers do not break.",1
32060363,2020-03-17 01:23:55.050,UX: SKUS for Open Virtual Classroom ILTs,"NOTE: This is the UX Design issue for https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1041

---
",3
32028960,2020-03-16 10:19:30.752,Filter Bearer token from VCR cassettes,"The following discussion from !1116 should be addressed:

- [ ] @vitallium started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1116#note_304753527):  (+3 comments)

    > :thinking: is it a valid token or not?",1
31956948,2020-03-13 11:11:07.705,"Follow-up from ""Render CI Transaction behind a feature flag""","The following discussion from !1116 should be addressed:

- [ ] @vitallium started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1116#note_303698688):  (+4 comments)

    > PSA: there is a [MR](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1111) that introduces `PaymentMethodPresenter` for pulling required attributes only.",1
31953122,2020-03-13 09:28:26.191,Registration form when signing in with GitLab for the first time is not prefilled,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Discovered during: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1166#note_302990067

> When `pajamas_login_register` feature flag is off and the user gets redirected to `customers/sign_up` to fill in the rest of the details, the form is being populated by the user's information the user already filled in GitLab.

Filling in the same information is extra work for the user, and runs the risk of mismatched information.

### Proposal

Ensure prefill of form when being redirected from `gitlab.com/users/sign_in` 

### Result

Less work for users signing up.

### Additional Information

From [Slack conversation](https://gitlab.slack.com/archives/CMJ8JR0RH/p1601281385072400) -

>There’s a UX gap where if the user tries to sign up with “Sign in with GitLab.com” and hits the registration page where they enter a bad email, their account get’s locked to the bad email.
We got around this by deleting the Account on Customers.",2
31949436,2020-03-13 07:21:40.254,Switch to Cuprite for Feature Specs,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

Prior work:

* https://gitlab.com/gitlab-org/gitlab/-/issues/26235
* https://gitlab.com/gitlab-org/gitlab/-/merge_requests/25727
* https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1072

Cuprite uses [ChromeDevTools protocol](https://github.com/ChromeDevTools/devtools-protocol/) to power interactions, while Selenium uses WebDriver.

There's speed and stability to gain from adopting Cuprite: less time waiting on pipelines and less flakiness is something worth testing (:wink: ) out.",2
31861304,2020-03-11 09:32:09.258,"Graduate Pajamas Update: Portal ""Plan"" Page from feature flag (cleanup)","<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->
Pajamas Update: Portal ""Plan"" Page has been live for a while without incident.

We should clean up after ourselves :)

* Remove instances of `pajamas_plan_page`
* Remove old HAML implementation of Plan Page
* Remove old HAML specific styles
* Remove specs that test Plan page without feature flag
* Remove feature flag from https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags",1
31838382,2020-03-10 16:07:00.961,Users get redirected to JSON countries file on new register,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

1. User navigates to customers.gitlab.com
1. User clicks Sign in with GitLab
1. User registers new account on gitlab.com
1. User is redirected to fill in additional details on customers.gitlab.com
1. User fills in form
1. User is redirected to JSON file

### Proposal

Investigate if this is related to changes in https://gitlab.com/gitlab-org/customers-gitlab-com/issues/682",2
31777376,2020-03-09 08:09:09.939,Missing- View Invoice Details-Tab,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem- 

There used to be an view invoice tab in the account details option at the customers.gitlab.com. This helped sales team to understand the payment methods used for past purchases and the entire purchase history of customers. Many times when a customer want to change the card associated with account, they reach to sales team. Sales re needs to find the card associated, this option used to help in finding the card used for past purchases.

Additionally, self- serving customers also could download the invoice from there and use it for filing reimbursement. 
 
With latest changes this information is not available.

New layout- 
![Screenshot_2020-03-07_at_11.23.35_AM](/uploads/32db1b9efaee23cd850de7c75c2f984c/Screenshot_2020-03-07_at_11.23.35_AM.png)
Old Layout - 
![Screenshot_2020-03-03_at_7.45.06_PM](/uploads/28bf4cfe60e9ef651e57e52b4cc0aaa5/Screenshot_2020-03-03_at_7.45.06_PM.png)
This screenshot shows the old layout for a client who made different purchases.
### Proposal- 
Kindly add this tab again

### Result- 
It will help sales rep to resolve these queries at earliest and also avoid few Zendesk tickets by customers.

### Next steps (if any)

### How will we measure success?",2
70640502,2020-09-02 15:16:16.204,Throw an error if :new_episodes record_mode used,"The following discussion from !1746 should be addressed:

- [ ] @vitallium started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1746#note_406076340):  (+4 comments)

    > @tyleramos, continuing our discussion here because I renamed the class `ZuoraIntegration` to `ZuoraTimeTraveller`. `ZuoraIntegration` was a bad name.
    > 
    > So. I think it's fine to use original datetime for VCR in `new_episodes` mode. And we do the same for `once` and `none` modes. For `all` we use the current datetime.

## Problem

With the new `ZuoraTimeTraveler` class, we will make the specs that use VCR and Zuora less flakey by using Timecop to freeze time using the datetime from the VCR cassette recording.  This approach however makes the record mode `:new_episodes` unusable because the entire cassette must be created at one time.

## Proposal

Raise an error if `:new_episodes` is used with a message of why it can't be used.  It's possible that it could be used for a subset of specs as long as those specs don't use the `:zuora` rspec metadata tag ([introduced here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1746)).  Not sure if it's possible or worth it to make that distinction.",1
70594782,2020-09-01 18:38:10.865,Setting up customer portal on local machine throws database does not exist error,"### Summary
Setting up a customer portal on local machine (fresh install) fails on `bundle exec rake db:setup` step with the below error. The steps I'm referring to is from the [doc/installation_steps.md#final-steps-for-customers-application](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/master/doc/installation_steps.md#final-steps-for-customers-application)

```shell
ActiveRecord::NoDatabaseError: FATAL: database ""payment_app_development"" does not exist
```

### Steps to reproduce

1. Checkout the latest master/staging of customer portal https://gitlab.com/gitlab-org/customers-gitlab-com
1. Follow the instructions in the [doc/installation_steps.md#final-steps-for-customers-application](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/master/doc/installation_steps.md#final-steps-for-customers-application)

### What is the current *bug* behavior?
`bundle exec rake db:setup` throws error if the database doesn't exist instead of creating a new one.

### What is the expected *correct* behavior?

`bundle exec rake db:setup` should create the database if it doesn't exist.

### Relevant logs and/or screenshots

```shell
ActiveRecord::NoDatabaseError: FATAL: database ""payment_app_development"" does not exist
```

### Workarounds
1. Log into the client and create the database manually with the following steps

```shell
> psql
> CREATE DATABASE payment_app_development;
> quit;
```

2. Run `bundle exec rake db:setup` to see the rest of the process working.",2
70591748,2020-09-01 17:06:50.220,Patch the IronBank gem to make error codes more accessible,"The following discussion from !1856 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1856#note_405535241):  (+1 comment)

    > It's disappointing that IronBank doesn't make the codes easily accessible, forcing us to search for the code in this way.  :slight_frown:
    > 
    > This totally works though and I'm fine with it in the short term.  What do you think about opening a follow-up issue to patch IronBank to make these codes easily accessible by adding an instance method to [the error class](https://github.com/zendesk/iron_bank/blob/main/lib/iron_bank/error.rb)?  I've submitted a PR to that repo before and the maintainers seems to be very responsive.  It's not something we have to act on immediately but might be nice to work on it at some point in the future.  Thoughts?

## Problem

We can't directly access error codes for an `IronBank::Error` as [discussed here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1856#note_405535241).  It's contained inside the message of the error object which contains an unparsed json string.  This makes for a less-than-elegant solution when determining the exact error class returned from Zuora.

## Proposal

Submit a PR to the IronBank repo to make an `error_code` instance method available on [the Error class](https://github.com/zendesk/iron_bank/blob/main/lib/iron_bank/error.rb).  Once this is accepted and the gem is updated, we can use this updated gem in the portal, replacing the [code here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1856/diffs#52d3703e65dee7027b3ef5af4fd34791dfe83d1c_19_16) with something a bit more concrete (e.g. `Zuora::ErrorCodes.rescuable_codes.include?(e.error_code)`).",2
70502235,2020-08-31 12:19:57.607,Add timezone information to the reviewer roulette,"We should keep our files up to date with GitLab's codebase to avoid future incompatibility.

Based on gitlab-org/customers-gitlab-com!1622

This change would add the timezone of the suggested reviewer(s) beside their names.

### Next steps (if any)

Schedule or pick up (it's a tiny change)",1
70484389,2020-08-31 06:18:33.812,Replace Timecop with ActiveSupport::Testing::TimeHelpers,"### Problem
With https://gitlab.com/gitlab-org/gitlab/-/issues/214432 GitLab moves away from `Timecop` to replace it with `ActiveSupport::Testing::TimeHelpers`.

### Proposal
Align with GitLab and replace `Timecop` with `ActiveSupport::Testing::TimeHelpers` as everything can be easily replaced:

| Timecop | ActiveSUpport::Testing::TimeHelpers |
|---------|-------------------------------------|
| Timecop.freeze(&block) | freeze_time(&block) |
| Timecop.travel(time, &block) | travel_to(time, &block) |

### Result
Remove unmaintained `Timecop` gem and use Rails core feature `ActiveSupport::Testing::TimeHelpers`.

### Next steps (if any)
* [ ] Add Cop on Timecop.freeze to use `freeze_time` - https://gitlab.com/gitlab-org/gitlab/-/merge_requests/39656#note_399654010
* [ ] Add Cop on Timecop.travel to use `travel_to`
* [ ] Enable cops and address existing violations",2
70414272,2020-08-28 10:39:06.478,Document sales-assisted subscription creation workflow,"### Problem
A [possible bug](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1881) turned out not to be a bug but an issue in the workflow how sales-assisted subscriptions are created.

### Proposal
Create documentation for the correct workflow for sales-assisted subscription creation. The correct way is described in [this comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1881#note_403799485).

### Result
Have documentation about the correct way to create sales-assisted subscriptions.",1
70402402,2020-08-28 05:43:15.364,Create log_warn method in Gitlab::LoggerHelpers,"There was a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1862#note_403237068) in !1862 where it was discussed if we should change `log_error` into `log(:error` or define the missing `log_warn` method instead of using `log(:warn`.

After a brief discussion with some other team members, it was decided to define the missing `log_warn` in [Gitlab::LoggerHelpers](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/lib/gitlab/logger_helpers.rb) method for consistency.

Other log levels that are defined in https://gitlab.com/gitlab-org/customers-gitlab-com/blob/staging/lib/gitlab/logger.rb#L9 and do not have a helper method yet, will be created when they are needed.",1
70392358,2020-08-27 21:11:04.192,"Follow-up from ""Resolve ""Stop sending EULA requests for new purchases""""","The following discussion from !1855 should be addressed:

- [ ] @vshumilo started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1855#note_402727249):  (+3 comments)

    > @tyleramos the `send_license_key` will execute for EE plans or `Plan::TRUE_UP_PLAN`. Just wanted to double check this one is left out in the `else` un purpose

## Purpose

Update [the `send_license_key` method](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/523c93bf52dc03a0b509bac3e96429a5b1d038ea/app/controllers/zuora_callbacks_controller.rb#L139-146) in `ZuoraCallbacksController` to remove the plan checks.  As [discussed here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1855#note_403443583), we decided these do not add much value given we already [do plan checks earlier in the action](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/523c93bf52dc03a0b509bac3e96429a5b1d038ea/app/controllers/zuora_callbacks_controller.rb#L26).",1
70382480,2020-08-27 16:00:56.047,Remove :stop_eula_requests feature flag,"Once the [new EULA process](https://gitlab.com/gitlab-org/gitlab/-/issues/224712) is live and [the `:stop_eula_requests` feature flag](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/63/edit) is turned on in production, we should be free to remove the flag and the associated EULA requests code.  The flag was simply created in order to more easily time the roll out in conjunction with the new EULA process.  I think once the flag has been enabled for a day or so it should be safe to remove.

For reference, the feature flag was introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1855.  Additional code related to this feature flag was introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1857.

We will also need to remove the following related code as well:
  - https://gitlab.com/gitlab-org/customers-gitlab-com/blob/0d06456d94f06cc46671776e0f9df622cefc3a02/lib/rails_admin/resend_eula.rb#L6
  - https://gitlab.com/gitlab-org/customers-gitlab-com/blob/154152723d1f0a9af846573222eda73082368ffb/config/initializers/rails_admin.rb#L4
  - https://gitlab.com/gitlab-org/customers-gitlab-com/blob/62170a0d134d3758c307f2803c8c3dac663c1796/config/locales/en.yml#L25

Also, there are references to files to be removed as part of this issue in .rubocop_todo.yml that will no longer be needed (e.g. https://gitlab.com/gitlab-org/customers-gitlab-com/blob/154152723d1f0a9af846573222eda73082368ffb/.rubocop_todo.yml#L727).",1
70363044,2020-08-27 09:09:21.578,Cleanup for subscriptions with deleted group/namespace,"Original issue: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1273

This should be done after the work for https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1879 is completed.

### Problem
Subscriptions that are linked to deleted GitLab groups/namespaces cause errors in the Customers Portal due to the a fetch request to GitLab for that group/namespace.

### Proposal
With the work in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1879 this scenario is being prevented. So after the work for https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1879  is completed, the existing inconsistencies because of that problem should be resolved. 

These are two possible solutions:
- update existing subscriptions that are linked to deleted groups/namespaces to set the attributes `gl_namespace_id` and `gl_namespace_name` to nil
- make Customers Portal's code fail-safe by not trying to fetch data when the group/namespace can't be found (e.g. in `GitLab::Namespace::UpdatePlanInfoService` which gets called on namespace change)

### Result
No errors due to inconsistencies that were caused by subscriptions linked to deleted groups/namespaces.

### Next steps (if any)


### How will we measure success?
No errors due to inconsistencies that were caused by subscriptions linked to deleted groups/namespaces.",2
70362437,2020-08-27 08:54:01.310,BE: Prevent deletion of groups/namespaces when they have a subscription,"Original issue: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1273

### Problem
The deletion of groups/namespaces with linked subscriptions are creating inconsistencies between GitLab and the Customers Portal. The linked group/namespace can't be fetched on the Customers Portal side on update like changing namespace and results in an error (500).

### Proposal
Prevent groups/namespaces from being deleted when they have a subscription. A group/namespace has to be disassociated from any linked subscriptions before deletion.

It should also be checked what happens to a subscription when a group gets transferred. The current assumption is that the subscription does not change.

### Design

[See UX issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1923)

### Result
Keep data between GitLab and Customers portal in sync.

### Next steps (if any)
- Disable the `Delete group` button when deleting a group
- Add an info text about disassociating any subscriptions first
- Prevent deletion in the backend

### How will we measure success?
No error on the Customers Portal side because of deleted groups/namespaces in subscriptions.",2
70341967,2020-08-26 23:30:26.104,Customer cannot add new card during renewal/new purchase,"
### Summary

When customer try to renew a subscription using a new credit card, the purchase will give an error if the customer is trying to use a different card that's not stored on their account.

### Steps to reproduce

1. Have a self-managed subscription
1. Select Renew button
1. During checkout, choose `Add new credit card` option
1. Add credit card details ([stripe test credit cards](https://stripe.com/docs/testing#cards))
1. See the purchase error

### Error
![Issue_1877](/uploads/f7d864149828a89009fd3d283e3a1b80/Issue_1877.gif)

### What is the current *bug* behavior?

Customer cannot pay with a different than the existing one(s?)

### What is the expected *correct* behavior?

Customer should be able to successfully purchase with different card than the default one.

### Relevant logs and/or screenshots

These look like  SOAP-related errors
- [Sentry errors](https://sentry.gitlab.net/gitlab/customersgitlabcom/?query=is%3Aunresolved+user%3A120855): 
- https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1773339/?query=is%3Aunresolved%20user%3A120855
- https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1768435/?query=is%3Aunresolved%20user%3A120855
- https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1181887/?query=is%3Aunresolved%20user%3A120855

### Workarounds

Instruction for customer:

1.  Sign in to [customers portal](https://customers.gitlab.com/customers/sign_in)
2.  Navigate to `My account` → `Payment methods`
3.  Click on `Add new payment method` → Fill in all the information
4.  Edit the new card, fill in the information and make sure that the `Make default payment method` box is checked → click `Save changes`
5.  Try to renew again



### Reported examples

1. https://gitlab.zendesk.com/agent/tickets/169982
- Zuora account: https://www.zuora.com/apps/CustomerAccount.do?method=view&id=2c92a0fe6d151c5b016d161751fb0dca
- No prior refunds: https://gitlab.my.salesforce.com/0014M00001jCFVz?srPos=0&srKp=001

1. https://gitlab.zendesk.com/agent/tickets/169925
- Zuora account: https://www.zuora.com/apps/CustomerAccount.do?method=view&id=2c92a0086d4dcd5a016d62ea6f807df1
- No prior refunds: https://gitlab.my.salesforce.com/0014M00001jCq6h?srPos=0&srKp=003

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",3
70327080,2020-08-26 14:54:54.129,Cap percentageUsed at 0% and on 100% if return value is out of range,"### Problem

With the following data:

| now          | start date   | end date     |
| ------------ | ------------ | ------------ |
| `2018-04-02` | `2018-05-02` | `2019-05-02` |


The percentage used should be: `0%`, but the current implementation is returning `-8%`

---

With the following data:

| now          | start date   | end date     |
| ------------ | ------------ | ------------ |
| `2020-04-02` | `2018-05-02` | `2019-05-02` |

The percentage used should be: `100%`, but the current implementation will return something like `240%`

### How to reproduce

Renew a subscription 2+ times then go to ""add more seats"" page (the pajama's page) and see the percentage.

Example of the issue:

![](https://gitlab.com/gitlab-org/customers-gitlab-com/uploads/430e7f340829449e9344fd0217eb5fa0/Screenshot_2020-08-24_at_11.31.54_AM.png)


### Proposal

We need to cap `percentageUsed` to:

- `0%` if the `start date` is in the future.
- `100%` if the `end date` is in the past.

### Result

We will have realistic percentages and we can unblock shipping #1808.

### Next steps (if any)

Adding this issue to %""13.4"" since it's blocking other issues in the milestone.",2
70326560,2020-08-26 14:43:37.848,Remove SOAP matches from VCR spec matcher,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

Once we've stopped using SOAP endpoints we need to clean up SOAP usages in the test suite: 

- [x] Remove [`method_with_soap_support`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/63fb053af4231ec3005b90abd240a4cf837db063/spec/support/vcr.rb#L45) 
- [x] Remove [`SoapMatcher`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/1576acf0ccfcd349e1496a737b8af7613ca8322e/spec/support/vcr/soap_matcher.rb)
- [x] Remove [this part](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/86a674fc14aa21d81488b5583d57aac5e87de785/spec/support/vcr/custom_request_matcher.rb#L16-17) of `CustomRequestMatcher` that uses `SoapMatcher`.",1
70312762,2020-08-26 10:03:21.778,Self-Service Upgrades for Self-Managed,"Original issue https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/107

This is the issue for the ~backend part.

### Problem
A user should be able to self-serve upgrade a paid self-managed subscription to a higher tier.

### Proposal
This workflow already exists for upgrading a .com subscription, so try reusing that logic as much as possible.

When upgrading an existing paid self-managed subscription to a higher tier:
* Prorate total price at the new rate for the remaining time, e.g. when upgrading a Starter subscription bought 4 months ago, only pay for the remaining 8 months for the new tier
* Create amendment with the same end date as the original subscription (syncs to Zuora)
* Generate new license key
* Send new license key to user
* Deprecate old license key
* Make sure this process works if it was triggered from Zuora directly instead of the Customers Portal (https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/353#note_120015198)",3
70288817,2020-08-25 21:37:56.356,Clarify that the customers portal is a separate platform,"### Problem

When GitLab.com users purchase products or go to manage their subscription from within GitLab.com, they often don't realize that they were taken to a separate website. 
- Users are often confused by ""Sign in with GitLab"" because they believe they are still on GitLab.com and are already signed it. 
- For first time users, the customers portal registration step is confusing because users have trouble understanding why they are being asked to register again (not realizing they are on a separate website).

The root of these issues comes down to the fact that users don't notice that they are being sent to a separate website when they are redirected to the customers portal.

### Proposal

Our long term vision is to move all purchasing/subscription management out of the portal and into GitLab.com for SaaS customers. 

But in the short term, we can make the customers portal a better experience by being clearer about the fact that it is a website separate from GitLab.com and telling the user why that is.

### Design

[Figma](https://www.figma.com/file/hFQB3yZJTD7ZZlBNBNH2hw/Clarify-that-the-customers-portal-is-a-separate-platform?node-id=0%3A1)

**Important:** The implemented designs differ from the Figma designs and the designs attached as a result of some discussions. To iterate faster we decided not to modify the Figma file nor the attached designs. Here are the differences:
- Main h1 heading sits on its own row, just like in theGitLab signup page ([relevant discussion here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1865#note_416996380))
- Typography is the same as GitLab.com signup page; only notable exception is the paragraph, which will have the Pajamas h2 styles ([relevant discussion here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1865#note_417714030))
- The text in the paragraph changes to `The Customers Portal is a standalone site for managing payment and license information` ([relevant discussion here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1984#note_420799169))

### How to test?

#### Sign-in view
1. Go to https://customers.stg.gitlab.com/ and make sure you're signed out
1. Click **Sign In** in the top-right of the nav bar

#### Sign in w/GitLab view
1. Go to https://customers.stg.gitlab.com/ and make sure you're signed out
2. Click **Buy Now** for any of the plans
3. In the modal, choose the GitLab.com plan

### Follow-up Issue
https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2005",2
70272533,2020-08-25 14:09:41.687,Remove the :seat_link feature flag,"### Problem
As [discussed here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1802#note_401767545), the `:seat_link` feature flag has been in use for quite some time without being turned off.  Seat link information has been persisted as expected for a while so this feature was successful.

### Proposal
Remove the `:seat_link` feature flag from the code base and remove the entry from [the feature flags management list](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags).

### Result",1
70254786,2020-08-25 08:21:31.845,Graduate pajamas_error_messages feature flag,"We introduced a new look for showing error messages in #1021 under [`pajamas_error_messages`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/57/edit) feature flag.

It has been enabled on production since 10-04-2020, without any issue so far.

We need to graduate this change from the feature flag.

### Next steps (if any)

Schedule

### How will we measure success?",1
70202924,2020-08-24 08:53:45.321,Refactor AmendSubscriptionService#calculate_quantity,"[Original discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1826#note_399344899) (+5 comments) from !1826.

The `AmendSubscriptionService#calculate_quantity` method is quite complex in its logic and should be evaluated to be refactored to something easier. A few possibilities were discussed [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1826#note_399344899).

Before refactoring, we should make sure that the method is 100% covered by specs, so that we are not missing a possible scenario from this method.",2
70113188,2020-08-21 13:17:23.676,Sync danger with GitLab updates,"Noticed during https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1838 that there were some recent updates like the warning on 50 character commit limit (removal) and assignment for feature specs that hasn't been sync'd to this application yet.

We should do that along with a bit of restructure to match the GitLab danger implementation for easier updating.

Note: This will include the timezone details on reviewers


/cc @pcalder",2
70112400,2020-08-21 13:01:26.882,"Follow-up from ""Fix broken string concatenation""","Add test coverage for this route/path on eula_requests


The following discussion from !1818 should be addressed:

- [ ] @rdavila started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1818#note_398389379):  (+4 comments)

    > @dstull can you please review?",1
70108972,2020-08-21 12:09:28.066,Clean-up: graduate Pajama's add more seats page from feature flag,"With #954 we introduced a new design for adding more seats page.

On 2020-08-21 we turned [`pajamas_add_seats`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/13/edit) feature flag on for production environment.

We should graduate this page from the feature flag after 2 milestones if there's nothing being reported.",2
70107940,2020-08-21 11:44:24.219,Unable to purchase CI minutes when subscription has been refunded before,"### Summary

Customer is unable to purchase additional CI minutes, currently they're on a bronze plan and while trying to purchase additional CI minutes - the portal shows `Unknown error occurred` at checkout

### Steps to reproduce

1. Have a subscription
1. Try to purchase additional CI minutes 
1. see the purchase error

### Relevant logs and/or screenshots

https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1430650/?referrer=gitlab_plugin

```
malformed error

{
error: Not Found, 
status: 404
}

```

![Screenshot_2020-08-27_at_8.23.03_AM](/uploads/c6cd1ec4abe2a399ba45abf1a8c511c9/Screenshot_2020-08-27_at_8.23.03_AM.png)
**Zendesk Ticket**: [Ticket #168992](https://gitlab.zendesk.com/agent/tickets/168992)

SE issue: https://gitlab.com/gitlab-com/support/internal-requests/-/issues/2939 (Internal)

Examples:
1. Customer: https://customers.gitlab.com/admin/customer/131019/edit | Ticket: https://gitlab.zendesk.com/agent/tickets/169015",2
70107905,2020-08-21 11:43:33.565,Clean-up: graduate Pajama's renew subscription page from feature flag,"With #955 we introduced a new design for renew subscription page.

On 2020-08-21 we turned [`pajamas_purchases_renew_subscription`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/59/edit) feature flag on for production environment.

We should graduate this page from the feature flag after 2 milestones if there's nothing being reported.

## Next action

- [x] Schedule the issue for development.
- [x] Create MR !2133 to clean up the code
- [x] Turn the feature flag off
- [x] Make sure nothing is broken
- [x] Delete the [feature flag](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/20/edit)",2
70086806,2020-08-20 22:06:28.988,Update renewal flow screenshots,"## Summary

As a result of [this change](https://gitlab.com/gitlab-org/gitlab/-/issues/233823) we will need to update the screenshots in the self-managed renewal flow created in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/955 to display  `Billable users` instead of `Active Users`.


## Updated screenshots

| Users over license | Billable users |
| ------ | ------ |
| ![1](/uploads/05032489c20d42cfa8d5be1932a35b47/1.png) | ![2](/uploads/8da0a45b38d987d43136ef6cded46cb1/2.png) |",1
70082185,2020-08-20 19:05:19.825,Remove DB tables for Eula and EulaRequest,"### Problem

As mentioned in [the epic](https://gitlab.com/groups/gitlab-org/-/epics/4225), we no longer require the manual EULA process. After a period of time (TBD), we will no longer need to preserve the data for existing EULAs or EULA Requests.

### Proposal

Once we've removed references to the models `Eula` and `EulaRequest` (as part of [this issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1842)), we should remove the tables from the database.

**Important Note: This issue is blocked until the new terms have been live for at least 90 days (e.g. 90 days after [the `stop_eula_requests` feature flag was enabled](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1882)).  [That occurred on 2020-10-13](https://gitlab.slack.com/archives/CMJ8JR0RH/p1602599797469400).  The exact date is TBD. See [this issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1602) for more information.**",1
70082099,2020-08-20 19:02:40.654,"Document process of investigating ""applying discounts to renewals""","### Problem

We will be on-boarding two new engineers to the Business Integration team. A significant part of on-boarding is understanding the complexity of the data model and code abstractions. 

### Proposal

Use the issue of [applying previous discounts to renewals](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/790) as an vehicle to examine the code and data model of the customer portal

### Result
Start documenting the data model for the Customer's Portal.

### How will we measure success?",3
70082078,2020-08-20 19:01:45.575,Remove references of Eula and EulaRequest models,"### Problem

As mentioned in [the epic](https://gitlab.com/groups/gitlab-org/-/epics/4225), we no longer require the manual EULA process. After a period of time (TBD), we will no longer need to preserve the data for existing EULAs or EULA Requests.

### Proposal

Remove references to the `Eula` and `EulaRequest` models.

Here is a list of code that could be removed:
- https://gitlab.com/gitlab-org/customers-gitlab-com/blob/7e111a908a465b5e6b8101647b203cef2e79dbff/app/models/eula_request.rb
- https://gitlab.com/gitlab-org/customers-gitlab-com/blob/ee5aedd2d4a3ca662c95371aba3ef07d2808b8f8/app/models/eula.rb
- https://gitlab.com/gitlab-org/customers-gitlab-com/blob/0b900c33fe4dec8ce9b2d78ce050cd18dd83fdfc/app/models/customer.rb#L35
- Factories for Eula and EulaRequest.
- Use different table name [here](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/39de54a16787d2d3e3a79f0ce187e09b3a272253/spec/lib/database/migrations_helper_spec.rb#L169)
- References to files to be removed as part of this issue from .rubocop_todo.yml (e.g. https://gitlab.com/gitlab-org/customers-gitlab-com/blob/154152723d1f0a9af846573222eda73082368ffb/.rubocop_todo.yml#L13)

**Important Note: This issue is blocked until the new terms have been live for at least 90 days (e.g. 90 days after [the `stop_eula_requests` feature flag was enabled](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1882)).  [That occurred on 2020-10-13](https://gitlab.slack.com/archives/CMJ8JR0RH/p1602599797469400).  We may decide to keep this data around for a while longer.  The exact date is TBD.  See [this issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1602) for more information.**",2
70081840,2020-08-20 18:52:26.601,Remove code allowing customers to accept EULAs,"### Problem

As mentioned in [the epic](https://gitlab.com/groups/gitlab-org/-/epics/4225), we no longer require the manual EULA process. As a result, customers no longer need to accept EULAs.

### Proposal

We should remove all the code that allows customers to accept EULAs.  However, we still want to keep the data for existing EULAs for period of time (exact time TBD) so we don't want to remove models and DB tables.

Here is some related code to be sure to remove:
- https://gitlab.com/gitlab-org/customers-gitlab-com/blob/02d90dd9d3d776b0d9f5e25c9127f4b219342d85/app/models/subscription.rb#L133
- https://gitlab.com/gitlab-org/customers-gitlab-com/blob/0769075bb7cb91ba6871d074de30b07ce8001298/app/presenters/subscription_presenter.rb#L72
- https://gitlab.com/gitlab-org/customers-gitlab-com/blob/b82fc68107f4a6a6f8b23191fa19aea9749dbafc/app/helpers/eula_requests_helper.rb#L3
- https://gitlab.com/gitlab-org/customers-gitlab-com/blob/a0caa37649a5701a805b6c82caa458852d542438/app/controllers/eula_requests_controller.rb
- https://gitlab.com/gitlab-org/customers-gitlab-com/blob/7c57f22ba9073f86ed1b428681d5430715ef6633/app/assets/stylesheets/pages.scss#L3
- https://gitlab.com/gitlab-org/customers-gitlab-com/blob/e2cab1a1d9e4f09bd4c2b14093a83a3bf44f4f02/app/views/eula_requests/show.html.haml
- https://gitlab.com/gitlab-org/customers-gitlab-com/blob/d789b8c7493cade57c6dd69ec2edb31651625131/config/routes.rb#L35
- References (e.g. `eulaRequestPath`) in https://gitlab.com/gitlab-org/customers-gitlab-com/blob/9ac7fb080d7096d77d7737fff8f44e36c41e6f52/app/frontend/javascripts/subscription/components/subscription_buttons.vue
- References (e.g. `eulaReuqestPath`) in https://gitlab.com/gitlab-org/customers-gitlab-com/blob/d7d5757677ee8060adb05f52b99230954fb52952/app/frontend/javascripts/subscription/components/subscription.vue#L70

**Important Note: This issue is blocked until the new terms have been live for at least 90 days (e.g. 90 days after [the `stop_eula_requests` feature flag was enabled](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1882)).  [That occurred on 2020-10-13](https://gitlab.slack.com/archives/CMJ8JR0RH/p1602599797469400).  The exact date is TBD.**",3
70081676,2020-08-20 18:47:12.691,Remove AdminMailer code for notifying of EULA acceptance,"### Problem

As mentioned in [the epic](https://gitlab.com/groups/gitlab-org/-/epics/4225), we no longer require the manual EULA process. As a result, we no longer need to notify admins when a customer has accepted a EULA.

### Proposal

We should remove [the `eula_notification` mailer from `AdminMailer`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/4ee96946d6358b1768ecb60a70edd27cde352b0d/app/mailers/admin_mailer.rb#L10), as well as related views and other references (e.g. https://gitlab.com/gitlab-org/customers-gitlab-com/blob/a0caa37649a5701a805b6c82caa458852d542438/app/controllers/eula_requests_controller.rb#L53).

**Important Note: This issue is blocked until the new terms have been live for at least 90 days (e.g. 90 days after [the `stop_eula_requests` feature flag was enabled](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1882)).  [That occurred on 2020-10-13](https://gitlab.slack.com/archives/CMJ8JR0RH/p1602599797469400).  The exact date is TBD.**",1
70081224,2020-08-20 18:30:51.180,Notify admins of license delivery error in the ZuoraCallbacksController,"### Problem

As mentioned in [the epic](https://gitlab.com/groups/gitlab-org/-/epics/4225), we no longer require the manual EULA process. This means in `ZuoraCallbackController#subscription_update` we will no longer deliver emails asking customers to accept terms before sending a license key.  Instead, the license key will be delivered immediately (for EE).  

It appears we send an error notification to admins in the event a key is not created successfully (and therefore not delivered to the customer) when accepting the EULA ([here](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/a0caa37649a5701a805b6c82caa458852d542438/app/controllers/eula_requests_controller.rb#L42)).  However, we do not send this notification for the same operation in `ZuoraCallbackController#subscription_update` ([here](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/fe3d569fbe4e1f5e9b23bafe91bca8fb860200c0/app/controllers/zuora_callbacks_controller.rb#L145)).

### Proposal

Update the `ZuoraCallbackController#subscription_update` [here](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/fe3d569fbe4e1f5e9b23bafe91bca8fb860200c0/app/controllers/zuora_callbacks_controller.rb#L145) to send this notification if an error occurs when generating the license key, in a similar manner to [the EULA acceptance logic here](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/a0caa37649a5701a805b6c82caa458852d542438/app/controllers/eula_requests_controller.rb#L42).",1
70080949,2020-08-20 18:19:29.690,Remove CustomerMailer for accepting terms,"### Problem

As mentioned in [the epic](https://gitlab.com/groups/gitlab-org/-/epics/4225), we no longer require the manual EULA process. As part of this work, we no longer need mailers for asking customers to accept terms.

### Proposal

Remove [the `accept_terms_request` mailer](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/fe3d569fbe4e1f5e9b23bafe91bca8fb860200c0/app/mailers/customer_mailer.rb#L20) in `CustomerMailer` (and related views) for allowing customers to accept terms.

This should no longer be used and can safely be removed once https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1830, https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1836, and https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1882 are resolved and the legacy EULA process has been sunset (see below note).

**Important Note: This issue is blocked until the new terms have been live for 90 days (e.g. 90 days after [the `stop_eula_requests` feature flag was enabled](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1882)).  [That occurred on 2020-10-13](https://gitlab.slack.com/archives/CMJ8JR0RH/p1602599797469400).  The exact date is TBD.**",1
70080716,2020-08-20 18:11:20.367,Put ability to resend EULA from admin panel behind a feature flag,"### Problem

As mentioned in [the epic](https://gitlab.com/groups/gitlab-org/-/epics/4225), we no longer require the manual EULA process. As part of this work, we should not need to resend EULA request email from the Admin panel.

### Proposal

Remove the components related to resending EULAs via the admin panel.  This will be put behind the feature flag, `:stop_eula_requests`, until the new EULA workflow is adopted.  Once it is live, we can remove this code altogether (as part of [this issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1882)).",1
70069332,2020-08-20 13:51:03.903,Ensure change namespace button is disabled while operation is in progress,"Suggested by @chris_baus to investigate.


### Problem

In the ""Change namespace"" page, the confirm button wasn't being disabled when the AJAX request is sent to the server, which could lead to the user being able to click it again.

### Proposal

We need to ensure the submit button is being disabled while the AJAX request is being made, then make it enabled once the AJAX request is finished, so if the request fails the user can click the button again.",1
70041755,2020-08-20 00:59:22.281,SPIKE: Force association often not working because of new validation,"### Summary

Support has a [""force associate"" function](https://gitlab.com/gitlab-com/support/toolbox/console-training-wheels/-/blob/master/lib/support_team.rb#L133-139) which we frequently use.

However, recently, we've seen the following error crop up:

```
W, [2020-08-20T00:10:39.100108 #130878]  WARN -- : You are setting a key that conflicts with a built-in method Hashie::Mash#default defined in Hash. This can cause unexpected behavior when accessing the key as a property. You can still access the key via the #[] method.
Traceback (most recent call last):
        2: from (irb):13
        1: from app/services/gitlab/namespace/update_plan_info_service.rb:30:in `execute'
Errors::ActionNotAllowed (Namespace change to 12345 is not allowed)
```

### Validation Issue

This line has the validation which is causing the error: https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/master/app/services/gitlab/namespace/update_plan_info_service.rb#L30

> raise(::Errors::ActionNotAllowed, ""Namespace change to #{order_gl_namespace_id} is not allowed"") unless namespace_transaction_validator.valid?

According to the description in the [relevant commit](https://gitlab.com/gitlab-org/customers-gitlab-com/-/commit/a51b25ca85662460bb2d00f8592728aea7b4c125), this validation was added for this reason:

> Please note that subscriptions with add-ons can
only be moved when the new namespace does not have a subscription yet,
also subscriptions containing legacy CI minutes only are not moveable.

However, we're seeing orders with the `amendment_type: ""UpdateProduct""` where there are no add-ons and we cannot force associate the order.

### Current workaround

Our workaround right now is to change the `amendment_type` temporarily and change it back after we run the function.

### Ask

I'd like to know what Support can do here. I'd really prefer not to be messing around with the order data to make our function work but we also need this function to work, especially when there are no add-ons attached.

1. Why are we hitting this validation error for orders that don't have add-ons?
1. In the short term, the workaround is to force the sync anyway. Is it a problem if there are add-ons?

### Some examples

1. https://gitlab.com/gitlab-com/support/internal-requests/-/issues/2757#note_387042141
1. https://gitlab.com/gitlab-com/support/internal-requests/-/issues/2933
1. https://gitlab.com/gitlab-com/support/internal-requests/-/issues/2955
1. https://gitlab.com/gitlab-com/support/internal-requests/-/issues/2983#note_432262992
1. https://gitlab.zendesk.com/agent/tickets/200673",5
70036930,2020-08-19 20:52:47.304,Stop sending EULA requests for new purchases,"### Problem
As mentioned in [the epic](https://gitlab.com/groups/gitlab-org/-/epics/4225), we no longer require the manual EULA process.  In order to move away from this process, we must stop the generation of new EULA requests.

### Proposal

Update the `ZuoraCallbacksController` to remove references to EULAs.  This means we will no longer send a EULA Request email to the customer and will send the license key directly to the customer instead (for EE plans).

We should also be able to remove [the EULA question in the SKU Issue template](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/938c94efbaaf6cbd50acd6b6d6ed87ceba7e7c03/.gitlab/issue_templates/Sku.md#L26), as this is no longer relevant.

**Important Note: We need to sync this issue of stopping the current EULA request process with the introduction of [the new EULA acceptance process](https://gitlab.com/gitlab-org/gitlab/-/issues/224712).**",1
70030194,2020-08-19 16:52:51.201,Updating company VAT number field fails to save,"## UPDATE 2020-09-23

1. This failure occurs when no customer record exists in Zuora
1. The customer record does not exist because no purchase has been made

### Actions

1. Remove the VAT from Account Details page if no Customer exists in Zuora - work for this issue
1. Introduce VAT on all purchase flows for applicable countries #2022 
1. Prefill VAT where available from Zuora and allow customer to overwrite #2023 



---

## Summary

Entering a VAT number under **account details** > **your company details** >> **VAT Number** returns a `Your account has been updated successfully.` message, but the VAT Number input box remains empty. Sounds like it updates the VAT internally, but continues to show an empty field to the customer, causing confusion.

### Steps to reproduce

Set your Country location under Personal Details to any country that would have a VAT number (primarily those within the EU) in order for the VAT number box to appear under company details. Enter a valid VAT number and save the form.

### What is the current *bug* behavior?

Customer portal does not show updated VAT number

### What is the expected *correct* behavior?

VAT should be updated and the input box should reflect the change

### Relevant logs and/or screenshots

No sentry errors that I can find.

Form data looks correct; POST 302s

```
utf8: ✓
_method: patch
authenticity_token: [redacted]
customer[company]: GitLab
customer[vat_code]: 12345678
customer[company_size]: 1-99
```
Server replies with 200.

Appears to be frontend only.

### Reported examples

1. [ZD 169097](https://gitlab.zendesk.com/agent/tickets/169097) (internal only)
1. [ZD 168953](https://gitlab.zendesk.com/agent/tickets/168953) (internal only)
1. [My own test customer portal account](https://customers.gitlab.com/admin/customer/194288)
1. [ZD 173364](https://gitlab.zendesk.com/agent/tickets/173364)",3
69993917,2020-08-19 07:30:28.220,Error when calling namespace change for customer's subscription who does not have a linked GitLab account,"### Summary

While conducting some testing for another issue with @vshumilo, we found a 500 error. It happens when clicking the button to `change linked namespace` of a subscription that was created manually in Zuora (sales-assisted purchase) for a customer that has not linked their account to GitLab yet. This results in a `nil` object [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/views/subscriptions/_edit_gitlab_com_plan.html.haml#L7).

### Steps to reproduce

- Have a customer account that has not linked their account to GitLab
- Create a subscription in Zuora for that customer
- Look for subscription in the Customers Portal and click `change linked namespace` for it
- See error

### What is the current *bug* behavior?

A 500 error is raised when clicking on the `change linked namespace` button or calling its page directly via url.

### What is the expected *correct* behavior?

Page for change linked namespace is successfully rendered.

### Relevant logs and/or screenshots

(Paste any relevant logs - please use code blocks (```) to format console output,
logs, and code as it's tough to read otherwise.)

### Workarounds

None

### Possible solutions

Add safe nav (`&`) to the line that raised the error ([here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/views/subscriptions/_edit_gitlab_com_plan.html.haml#L7)).

**But a cleaner overall solution would be:**
Always return an array for the [`GitLab::Namespace::ListService`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/services/gitlab/namespace/list_service.rb) which is used in the a lot of helper methods in [`GitLabPlansHelper`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/helpers/gitlab_plans_helper.rb) with a safe nav (`&`). Although it has to be checked if this affects anything else if an empty Array is returned instead of `nil`.


### Reported examples

1. [Raised error](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1678514/?query=is%3Aunresolved) for this [subscription](https://www.zuora.com/apps/Subscription.do?method=view&id=2c92a00e73ed8d8701740207ccec6bfd)",2
69975206,2020-08-18 18:44:48.056,Unable to change linked namespace for subscriptions when the quantity is the same AND reconciliations feature flag is enabled,"### Summary

Environment: Staging 
Pre conditions: [`reconciliations` feature flag](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags) is enabled

### Steps to reproduce

For any .com subscription that has enabled the `Change linked namespace` action.

1. Check the Subscription quantity.
1. Try linking the subscription to another namespace OR group that has the same quantity via ""Change linked namespace"" action.

### What is the current *bug* behavior?

The initial selection of such namespace will result on a `422 (Unprocessable Entity)`

### What is the expected *correct* behavior?

We should be able to updated the linked namespace for a subscription when the conditions for such a change [are valid](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/9157567e4f93a4ba9a3412e9aaa849a97c1f37ac/doc/subscription_namespace_change.md) not affected by the quantity.

### Relevant logs and/or screenshots

The issue seems to be related to the `AmendSubscriptionService`.

The `AmendSubscriptionService` will [error](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/b769f1a499cc793a674462f092734d00429201bd/app/services/amend_subscription_service.rb#L17) if it is not able to generate and amendment for the requested action.

The issue seems related to [this check](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/9157567e4f93a4ba9a3412e9aaa849a97c1f37ac/app/services/amend_subscription_service.rb#L42) for when:

- The quantities match
- The subscription is not autorenew and there is not an increase in quantity. 

![Screen_Shot_2020-08-19_at_7.44.35_AM](/uploads/efb727027e96e7b8d0f9325db7f0f3a1/Screen_Shot_2020-08-19_at_7.44.35_AM.png)

![Screen_Shot_2020-08-19_at_7.38.12_AM](/uploads/2089e3c247cf55f98b6c316dd52ab338/Screen_Shot_2020-08-19_at_7.38.12_AM.png)

### Workarounds

This is not affecting production atm because the `reconciliations` feature flag is not turned on for production.

@cwiesner would you please check / highlight anything else to leverage our pairing looking over this and add as much context by combining our brain power! :) Thank you :pray: 

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",2
69972099,2020-08-18 17:26:33.212,Verify ruby version update (2.6.6) in stg,"This is a ~""production::blocker"" issue for verifying that ES6 version of Zuora operates normally.",1
69922449,2020-08-17 16:20:26.520,Add SKU for migration +,"# SKU Request Summary

The SKU description and official approval process is here: https://gitlab.com/gitlab-com/Finance-Division/finance/-/issues/2803
<!---
Provide a brief description of what this SKU will be used for.
--->



## SKU Requirements

In order to expedite your request, please complete all of the following information. 
Any questions about this template or this request can be directed to @amandarueda in the comments of this issue.

1. [x] SKU Name: Professional Services and Training
1. [x] SKU Code/ID: SKU-00000016 | 2c92a0fc57fb750d0157fe16b0d75e7a
1. [x] Zuora Plan Name: Migration+
1. [x] Zuora Plan ID: 2c92a00c74356b8001744ed8056a4064
1. [x] Service type: `add-on`
1. [x] Does this need to be purchase-able via the customers portal? `No`
1. [x] Does this service renew? `No`
     * [ ] If yes, what is the renewal cadence? `monthly | annually | other`
1. [x] Should an email be sent indicating the subscription is coming to an end?: `N/A` or `no`
1. [x] Is there a unit of measure, if so what? `No`  `Users | Qty | other`
1. [x] Does this service provision anything? `other`
     * [x] If yes, please describe in detail what should be provisioned including the systems affected: Data from legacy systems (bitbucket, github) will be migrated into the destination gitlab system under this service. No infrastructure is provisioned. Wasn't sure if this qualified
1. [x] Does this service require a EULA to be sent? `No`
1. [x] How soon do you need this SKU ? Timeline: As soon as [approval](https://gitlab.com/gitlab-com/Finance-Division/finance/-/issues/2803) clears - Likely in the next 2-3 weeks. 
1. [ ] Who in Sales-Ops approved this request: See approval :point_up: @username
1. [ ] Link to originating Finance issue: https://gitlab.com/gitlab-com/Finance-Division/finance/-/issues/2803
1. [ ] Apply the appropriate `BTG Priority` label to this issue.",1
69811820,2020-08-13 16:54:18.169,"Verify Pajamas Update: Portal ""Manage Purchases/Add More Seats"" Page","This is a follow-up to #954, to verify it's working as expected.

@amandarueda has these notes:

> I found two issues:
> 
> 1. The remaining % appears to be wrong. In the example I've used, the start date is May 6th, so there should be about 10 months of the subscription left, but the % displayed is 17%.
> 1. The amount being charged is definitely off. Not sure if this is related to what @rhardarson posted?
> 
> Here's a video of my test: https://www.loom.com/share/d69935f071664d69a756d58f1bdbec51",2
69776681,2020-08-12 21:02:08.617,Move Zuora callback related logic into a Job,"### Problem
In the context of the Subscription Portal, we want to move Zuora interactions to jobs whenever asynchronous execution is a possibility.

### Proposal
Move the logic that executes on `ZuoraCallbacksController#subscription_update` to a job.

### Result
Whenever a callout happens from Zuora regarding a subscription update: Amendments, New Subscriptions, Refunds.
Instead of executing the `subscription_update` logic inline we will enqueue a Job that will take care of the further required:
- Zuora queries
- Gitlab sync

### How will we measure success?
- We expect to see more successful codes in the Zuora Notification Callout History (meaning the Jobs have been enqueued on our end)
- We will have more control on retries for the sync to happen if it is on our end.",2
69764567,2020-08-12 14:11:48.656,Replace begin block with strong memoize,"Change blocks of code that are currently defined like:

```ruby
 def z_subscription
    @z_subscription ||= begin
      Zuora::Subscription.active_find_by(name: callback_attrs[:subscription_name]) ||
        Zuora::Subscription.find_by(id: callback_attrs[:subscription_id])
    end
  end
```

to this:

```ruby
 def z_subscription
    strong_memoize(:z_subscription) do
      Zuora::Subscription.active_find_by(name: callback_attrs[:subscription_name]) ||
        Zuora::Subscription.find_by(id: callback_attrs[:subscription_id])
    end
  end

```

The following discussion from !1777 should be addressed:

- [ ] @cwiesner started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1777#note_393904099):  (+3 comments)

    > **nitpick:** Since we're already touching this file, what do you think about replacing `begin` with `strong_memoize`? It was introduced a while back.",2
69751347,2020-08-12 08:12:34.975,Document Salesforce flow and understanding around it,"In regards to discussion happening around [this issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1758#note_394200743), it would really be nice to have a document dedicated around understanding of what Salesforce is and how customers portal is making use of it. 

This include understanding as how the Sales team is making use of it and also the flow happening from the customers portal to SF including the parameters send and the parameters received.",1
69741982,2020-08-11 23:02:51.911,Investigate Zuora callback failure,"### Problem
Zuora callbacks are failing and being logged in Sentry, and no action is take on them. This could result in other problems such as [CI minutes not being provisioned correctly](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1740)

@djparker notes that we should return a HTTP body on failure because Zuora logs these responses.",5
69633208,2020-08-10 14:07:12.356,Migrate feature flags to new version,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

We've got ~20 [feature flags active now](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags) which will be set to read-only as of 13.4

For example: https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/19/edit

![image](/uploads/e23eab610f502c4837f21541129ed1a0/image.png)

### Proposal

Migrate our feature flags to the new shiny feature flags :)

It'll be a bit of manual process. To minimize risk we can adopt this pattern @ogolowinski suggested

```
I have a flag ""A"", create new flag ""new_A"". Verify ""new_A"" is correct. Delete old flag ""A"", Rename ""new_A to ""A"".
```",1
69631967,2020-08-10 13:45:40.780,Add documentation for namespace change of a subscription,Add missing documentation about the conditions and scenario breakdown for the namespace change of a subscription. This is a follow-up for https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1549.,1
69615513,2020-08-10 08:45:56.628,Sync with Zuora's local product data during deployment,"After !1762 is merged, Zuora's product data can be cached locally to avoid API calls. Currently it is done manually by asking someone with production console access.

Since currently a refresh would also require a server restart, we should trigger the refresh during deployment.

- [ ] @jameslopez started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1762#note_393098608):  (+2 comments)",1
69565501,2020-08-07 22:48:09.670,Validation error on Gitlab::Namespace::UpdatePlanInfoService,"### Problem

There is a validation error that's happening in some scenarios when this service is invoked and it's affecting the sync to GL.com.

Sentry:

https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1712530/events

https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1713125/events

REF: https://gitlab.com/gitlab-com/support/internal-requests/-/issues/2868

### Proposal

Provide a fix.

### Result

The sync to GL.com can be completed

### Next steps (if any)

### How will we measure success?",2
69555952,2020-08-07 19:15:29.929,Improve Digital Signature raise clauses,"The following discussion from !1766 should be addressed:

- [ ] @dstull started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1766#note_391997523):  (+1 comment)

    > this area could likely benefit in a diff MR from some methods made around these conditionals to make them more readable...  something like
    > 
    > ```ruby
    > def invalid_page_id?
    >   page_id != payment_page_id(payment_type)
    > end
    > ```",2
69544893,2020-08-07 12:55:18.578,Resolve misspelling of GitLab,"The following discussion from !1766 should be addressed:

- [ ] @a_akgun started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1766#note_392225696):  (+1 comment)

    > @dstull there's a typo here  `eligible_to_purchase_gilab_plan`, for another issue.",1
69534443,2020-08-07 07:12:53.630,Customer cannot make new purchases after subscription was refunded,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you're about to submit isn't a duplicate.

Do not include confidential information!
--->

### Summary

Customer was trying to make a new purchase but got Unknown error message.

### Steps to reproduce

1. Purchase a subscription
1. Get the subscription refunded
1. Try to purchase a new subscription → see the error

### What is the current *bug* behavior?

Customer cannot purchase new subscription when the previous subscription was refunded

### What is the expected *correct* behavior?

Customer can make new purchase regardless of refunded ones.

### Relevant logs and/or screenshots

![Error](/uploads/08a38bd7a9b5d6a22c15e16a3d6cfc59/Error.png)

### Workarounds

(Ways to get around the issue)

### Reported examples

1. https://gitlab.zendesk.com/agent/tickets/168006; Sentry event log: https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1330530/events/31962262/ ; SFDC: https://gitlab.my.salesforce.com/0016100001SrpL6
1.
1.

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",1
69531507,2020-08-07 04:41:23.091,"Check if make_default action is used, otherwise delete it","Remove `make_default` method/endpoint from [`payment_methods_controller.rb`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/controllers/payment_methods_controller.rb) with any other references, since it's no longer in use.

The following started on !1729:

I see there's still an option to set the [Default Payment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/frontend/javascripts/payment_methods/edit_cc.vue#L162), and the [`update` api ](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/controllers/payment_methods_controller.rb#L87) probably handles it. Meaning we *may* not require the `make_default` action anymore, however it might be a good idea to get it cross-checked.",1
69509013,2020-08-06 13:40:09.584,Resolve Exceptions in RuboCop todo,"All items that have exceptions should be resolved/inline disabled if not a light change, and rule removed from todo or moved to `.rubocop.yml` file if not default enabled/configured.

### Problem

Currently many rules have exceptions in the `.rubocop_todo.yml`.

### Proposal

- Resolve those exceptions.
- Double check the [Style/RedundantFreeze](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1799#note_397773621) items

### Result

Better compliance with our style guide.

### Next steps (if any)

### How will we measure success?

Smoother review process and more standard/code written by the same hand",5
69508879,2020-08-06 13:37:18.278,Resolve disabled RuboCop rules in todo file,"Enable/resolve the exceptions with these disabled rules/cops:

- [x] `Layout/ArgumentAlignment` !1887 
- [x] `Layout/FirstHashElementIndentation` !1798 
- [x] `RSpec/ContextWording` !1867 
- [x] `RSpec/EmptyLineAfterLetBlock` !1765
- [x] `RSpec/ExpectInHook` !1879 
- [x] `Style/FrozenStringLiteralComment` !1799 
- [x] `Style/GuardClause` !1766 
- [x] `Style/IfUnlessModifier` !1772
- [x] `Style/TrailingCommaInArguments` !1866 
- [x] `Style/TrailingCommaInHashLiteral` !1878 

### Problem

Currently many rules are disabled due to too many exceptions in the `.rubocop_todo.yml`.

### Proposal

Resolve those exceptions and remove the entire cop/entry out of the `.rubocop_todo.yml` so that it will follow default configuration of being enabled.

### Result

Better compliance with our style guide.

### Next steps (if any)

### How will we measure success?

Smoother review process and more standard/code written by the same hand",5
69447614,2020-08-05 06:20:41.127,Our exisiting CI jobs do not run alongside static security checks - Confirm if this is intended,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Raised in [this slack thread](https://gitlab.slack.com/archives/CNLHTE457/p1596480844131600)

We're seeing SAST checks run in their own pipeline, and the jobs we've defined in `.gitlab-ci.yml` run in their own.

Some of the pipeline runs are flagged ""Detached state"" and we probably do not want this :thinking: 

* https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1754/pipelines#c77fa4e671717bfa2a920ffed00535f301dd5a4f


![image](/uploads/596b95c5d170680535b504e2bc6cbbbf/image.png)",2
69416205,2020-08-04 15:35:53.032,Follow-up: add support link to plain text alerts,"## Problem

We're using plain text as alert, where we tell the users to ""contact support"" without any link to guide them to the right direction.

## Proposal 

Update all plain ""contact support"" alerts so those two words would link to: `https://about.gitlab.com/support/`.

The idea from @nicolasdular started on this [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1741#note_388200342).

We could be placing the link in a constant for easy reuse.

/cc @amandarueda @chris_baus for prioritization and scheduling.",2
69375189,2020-08-03 17:45:52.706,Perform BulkDownloadInvoice  on the 1st day of the month,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Proposal

Update the monthly invoice download to be on the 1st day of the month instead of the 3rd.

### Result

Monthly invoices are sent on the 1st of the month.

### Next steps (if any)

### How will we measure success?",1
69312844,2020-07-31 20:01:14.039,"Handle zuora callbacks from ""Professional Services"" Subscriptions","### Problem

There were reports of 500 errors in `ZuoraCallbacksController#subscription_update` requests.  It turns out these all appear to the from ""Professional Services"" subscriptions.

Related info:
- [Slack thread](https://gitlab.slack.com/archives/CMJ8JR0RH/p1596224122000000)
- [Sentry error](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1700065/events/7be3912a293d48daa1a557b436da214f/)
- [Zuora Account page with callout errors](https://www.zuora.com/apps/CustomerAccount.do?method=view&id=2c92a0fd71c96bdb0171cc6f139f36e6)

### Proposal

I don't believe these errors are cause for alarm, but we should confirm.  If so, we should handle subscriptions of this type without throwing errors.",2
69236063,2020-07-30 14:21:42.021,Follow-up: remove .gl-top-4 from utilities.scss,"### Problem

We introduced a new utility class `.gl-top-4` in !1741, also sent a [merge request](https://gitlab.com/gitlab-org/gitlab-ui/-/merge_requests/1612) to gitlab-ui to add the class to the main project so we could reuse it.

Once the gitlab-ui MR is merged, we'd have 2 definitions for the same class.

### Proposal

Delete the class from `app/frontend/stylesheets/_utilities.scss`.

### Result

### Next steps (if any)

Schedule.

### How will we measure success?",1
69105884,2020-07-28 08:03:47.045,Ensure ordering of invoice items is consistent,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Uncovered in https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1622#note_385785696

Our backend gets a response from Zuora and relays `invoice_items` to the frontend. These `invoice_items` do not have a consistent order, which makes any comparison between individual items error prone.

### Proposal

Sort `invoice_items` response on the backend or frontend.

### Result

Consistent response and calculations.",2
69078939,2020-07-27 21:33:52.545,Can't change namespace of Gold subscription to a Free group with Guest users,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
As a potential (or past) Gold customer I might want to change the namespace of a subscription to a group on Free. If any Guest users are present, the customers application will bill me for the number of seats in `billable_users` regardless of the _target_ subscription level. In the case of Gold, Guest users should _not_ be charged.

Reproduction is hard because you need an existing subscription. 

#### What works

The following flow _works as expected_ on a new purchase from the billing page:
- Create a new (free) group.
- Add a guest user
- Attempt a purchase of Gold, and note it will charge for the correct number of users.

#### What doesn't work
Attempting to change the namespace of an _existing_ subscription to a Free group does _not_ work correctly.


### Proposal
Build the list of billable users based on the target subscription level, rather than the current subscription level. Mirror the logic in the new purchase flow.

### Workaround
Re-establishing a Gold trial restores the billable users count to what it should be and allows the subscription to be applied.",5
68907358,2020-07-23 12:25:30.176,Namespaces with paid plan can return nil,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Seeing `namespaces_with_paid_plan: namespaces_with_paid_plan.map(&:id).uniq` fail with `ActionView::Template::Error: undefined method `map' for nil:NilClass`

https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1678514/?query=undefined%20method%20%60map%27

### Proposal

Add a guard so we do not have a runtime error.

### Result

### Next steps (if any)

### How will we measure success?",3
68348975,2020-07-20 23:17:33.612,"Follow-up from ""This fixes an issue of doing nothing""","We should double check if we're properly handling the preview mode here. At a first glance looks like we should access the key through a `Symbol`. For now, it's likely we're always ignoring the passed preview mode.

The following discussion from !1702 should be addressed:

- [ ] @rdavila started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1702#note_382608503):  (+3 comments)

    > @jejacks0n can you please double check if we're getting the correct value by using a `String` instead of `Symbol` here? Ar a first glance looks like we should be using a `Symbol` here.",1
68217831,2020-07-20 18:35:40.309,"Follow-up from ""Move add-ons on namespace change""","The following discussion from !1635 should be addressed:

- [ ] @chloeliu started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1635#note_382505061): 

    > **Non-blocker**: I might be missing it somewhere, but shall we also add a scenario for 'namespace change not allowed' from UI perspective(if it's ready)? To verify a dropdown item disabled or maybe an error flashcard.",1
62637787,2020-07-17 03:00:38.029,Add new cop to detect missing new line at the end of the files,"### Problem

Sometimes we forgot to include the new line at the end of the file and the diff shows a warning like `\ No newline at end of file`.

### Proposal

Update Rubocop's policies to include a new cop that detect this missing line.

### Result

Pipeline will fail and the developer will be aware of this required updated.

### Next steps (if any)

### How will we measure success?",1
62129687,2020-07-16 22:17:36.664,Introduce matching web direct data on domain to avoid duplicate accounts in SFDC,"### Problem

The **initial** Web-Direct order from the portal does not attempt to match against an existing Salesforce account, and instead **always** creates a net-new account (sometimes a duplicate, sometimes not). This is problematic primarily in scenarios where we've:

1. Have existing `Sales-Assisted` accounts/hierarchies in place, as the closed won business now is duplicated somewhere else.
1. Have existing ""greenfield"" accounts already built out in Salesforce.

In both examples we're now creating duplicate accounts, as well as potentially breaking `new` vs `connected new` business metrics - as these web direct accounts aren't tied to existing Acct Hierarchies in Salesforce.

The subsequent renewal web direct order already has the Account ID, and therefore pushes to the existing Account it already created, **unless possibly** it was merged on Salesforce side already as a dupe (would need to validate this example).

In a perfect world the portal would attempt to first do some sort of matching logic to find an existing account in Salesforce prior to generating a new one. Examples of what I've seen in other applications would be a search on:

1. `Domain/Website` Match
1. `Company Name` Match
1. Combinations of fuzzy `Company Name`, `Domain`, `Address` matches (probably more complicated)
>>>

[per slack thread](https://gitlab.slack.com/archives/GEMFSJ94L/p1594916606133400)

cc @jbrennan1 @tav_scott @jrabbits @annapiaseczna 

### Proposal

Match on domain match (labeled website in Salesforce) prior to new account creation is fine by me, and would be a good way to 80/20 it from an improvement perspective.

### Result

### Next steps (if any)

### How will we measure success?",2
61276770,2020-07-16 12:47:17.140,Add missing destroy_zuora_records in specs,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Some spec does not have `destroy_zuora_records` method which removes created records after the spec passes.

### Proposal

We should check and add it to required places.

### Result

No more orphaned records in our Sandbox.

### Next steps (if any)

### How will we measure success?",1
61268570,2020-07-16 12:41:02.677,Show error message on failed namespace change,"### Problem

When a namespace change is not allowed we just redirect back to the subscription's page. It would be nice to show an error message to let the user know what's going on. With https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1635 there will be a general error message in case of an error that could be shown.

### Proposal

Process error in frontend to inform the user about an error.

### Result

User knows about the error.

### Next steps (if any)

### How will we measure success?",1
61205642,2020-07-16 11:56:11.676,"Follow-up from ""WIP: Move add-ons on namespace change""","The following discussion from !1635 should be addressed:

- [ ] @vshumilo started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1635#note_379456815):  (+5 comments)

    > I want to make sure I am understanding correctly this update.
    > 
    > Will this mean we are choosing GitLab to be our source of truth indirectly? 
    > 
    > Wondering about this scenario:
    > - `CreateOrderService` succeeds (as in a transaction things are not yet commited but all looking good
    > - Sync with `GitLab` succeeds
    > - (no raised exceptions so far) but the commit of the transaction fails, can this happen? can be a lock on the table or something that makes this happen? leaving this in a state where out truth in the customers portal is not GitLab truth because it has been updated?
    > 
    > I apologize for thinking out loud :)",3
61144894,2020-07-16 11:18:03.521,"Follow-up from ""Move add-ons on namespace change""","The following discussion from !1635 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1635#note_380158242):  (+1 comment)

    > **Question (non-blocking):** Not for this MR, but just wondering if the `Gitlab::HostedPlans::ExtraAddOnService` should actually be absorbed into the `NamespaceParamsGenerator`.  Either the logic could be moved into the `NamespaceParamsGenerator`, or the `NamespaceParamsGenerator` could call that service as needed.  The purpose of the `ExtraAddOnService` as I understand it is to basically generate the values to be used in the namespace params anyway so it seems pretty related and the purpose of `ExtraAddOnService` is tough to understand based on the current name.  Just something to consider for a future issue maybe.

Check if this is a valid approach due to the fact that the `ExtraAddOnService` is also used later in the class to update the Order.",2
60086300,2020-07-16 00:21:30.495,Scope session[:visited_plan] to Devise session,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Whenever a user navigates to a **new subscription** page to make a purchase (for a subscription, plan or add-on), we [store that url in the session](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/a9a49f5d71154ca43ddf3e7130c853f5ade31d72/app/controllers/subscriptions_controller.rb#L204-206) so we can use it to redirect the customer after they confirm their email. 

This url usually looks like `https://customers.gitlab.com/subscriptions/new?plan_id=0000&transaction=XXXX` but could also be a named one like `https://customers.gitlab.com/buy_pipeline_minutes` or `https://customers.gitlab.com/buy_storage`.

In !1646 we started using this `session[:visited_plan]` value to redirect the user [after signing in](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/f684885c4e146281d8a810977bc88f2db0a61106/app/controllers/application_controller.rb#L173). This ensures that the user goes back to the subscription page they were looking at before being prompted to sign in or register (if they weren't already signed in).

However, this `:visited_plan` value **can stick around after the user has logged out** because it's not in the `devise` namespace. This could result in the user being redirected to a previously visited plan page right after logging in. In a scenario where they come from the *Sign In* page and not from a subscription page, this would not be the expected behavior.

**Example Scenario**
1. User goes to Customer Portal without signing in
1. User clicks on _Buy CI Minutes_
1. User is prompted to connect with Gitlab
1. User is redirected to _Buy more CI minutes_ form
1. They complete the purchase
1. User can now go and manage their subscription
1. User logs out
1. User goes signs in again from the sign in form (`/customers/sign_in`)
1. They are redirected to _Buy more CI minutes_ because the `visited_plan` value is still in the session
1. They *should* have been redirected to manage their subscriptions 

**Notes**

:exclamation: This will happen only if the user signs in *again* before the [session expires](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/f684885c4e146281d8a810977bc88f2db0a61106/config/initializers/session_store.rb#L11). 

:exclamation: If the user logs out and comes back to log in again after that time has passed, they will be redirected to manage their subscriptions.

:exclamation: This is more evident when testing in development or staging where we may need to do something with one test user, visit a plan purchase page and then log in with a different account to do something else. 

### Proposal

Consider scoping `:visited_plan` to the Devise session (`session[""devise.visited_plan""]`) so the value gets automatically cleaned up by Devise whenever a new session is created.

### Result

`session[""devise.visited_plan""]` is reset with every new session.

### Next steps (if any)

### How will we measure success?",2
59250195,2020-07-15 13:56:26.717,"Follow-up from ""WIP: Move add-ons on namespace change""","The following discussion from !1635 should be addressed:

- [ ] @vshumilo started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1635#note_379456813):  (+3 comments)

    > I know this logic was already here but I am trying to understand why the `params[:subscription_id]` is merged back into the params and named the same?
    > 
    > Based on the code the `params` have a attr called `:subscription_id`
    > 
    > And we are creating this value `subscription_id: params[:subscription_id]`
    > 
    > just to merge it back into the params.
    > 
    > I am probably missing something but it is like this is not changing anything but overwriting what is already there with the same value it already has?",1
57585775,2020-07-14 18:56:54.215,Let's remove these order columns after a while,"We added billing_rate_adjusted_at and billing_rate_last_action to the orders table, and we're doing this to have some better insights into how orders are being renewed, but we don't expect these to give us extensive value long term, so we should come back and make sure we clean them up.

The following discussion from !1591 should be addressed:

- [ ] @jejacks0n started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1591#note_376164306):  (+4 comments)

    > @jayswain, would you make sure I have this correct please? I've changed the columns around a bit, and we clear out the notified_at value when we process the renewal -- since we can process it with either an increase, decrease, or no change now.
    > 
    > At 2 weeks before renewal we start processing an order and check it every day leading up to renewal. If at any point in those 2 weeks you exceed your available seats with users, you'll get the notification and we track that we sent it. We won't send it again for the remaining days leading up until renewal, which happens when the order is processed on the same day as its end_date.
    > 
    > At renewal we clear out when we sent the notification, and track that we either created an amendment or took no action. This logic would also now work for monthly or quarterly renewal. I would like to make sure that when things come back from zuora, this logic will still work how you initially intended -- I wasn't entirely sure about it.",1
57062435,2020-07-14 11:28:11.587,Deprecate GitlabPlansHelper if favor of additional attribute in the namespace object,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

We use `GitlabPlansHelper` every time we want to pull Gitlab namespaces for a customer:

* To fill a select with available namespaces when purchasing a new subscription;
* To fill a select with all namespaces when a customer wants to change linked namespace;

We are slowly transitioning to Vue.js and using this helper becomes harder because we need more data in a slightly different form. For instance, we want to see if a returned namespace has an expired subscription.

### Proposal

I suggest to deprecate this helper and add a new attribute called `subscription` to the existing `namespace` object.

**Current `namespace` object structure:**

```
                                    ""id"" => 53,
                                  ""name"" => ""gold"",
                                  ""path"" => ""gold"",
                                  ""kind"" => ""group"",
                             ""full_path"" => ""gold"",
                             ""parent_id"" => nil,
                            ""avatar_url"" => nil,
                               ""web_url"" => ""http://127.0.0.1:3000/groups/gold"",
        ""members_count_with_descendants"" => 1,
                ""billable_members_count"" => 1,
                                  ""plan"" => ""silver"",
                         ""trial_ends_on"" => nil,
                                 ""trial"" => false,
```

**Suggested `namespace` object structure:**

```
                                    ""id"" => 53,
                                  ""name"" => ""gold"",
                                  ""path"" => ""gold"",
                                  ""kind"" => ""group"",
                             ""full_path"" => ""gold"",
                             ""parent_id"" => nil,
                            ""avatar_url"" => nil,
                               ""web_url"" => ""http://127.0.0.1:3000/groups/gold"",
        ""members_count_with_descendants"" => 1,
                ""billable_members_count"" => 1,
                                  ""plan"" => ""silver"",
                         ""trial_ends_on"" => nil, // deprecate this field also and move it under subscription attribute
                                 ""trial"" => false, // deprecate this field also and move it under subscription attribute
                          ""subscription"" => {
                     ""name"" => ""A-S00039218"",
               ""start_date"" => Tue, 30 Jun 2020,
                 ""end_date"" => Wed, 30 Jun 2021,
            ""trial_active"" => false
        }
```

**NOTE:** I do not suggest removing it completely because we have the code that depends on this helper but stop adding new functionality to it.

### Result

* Removed legacy helper with better-structured data.
* Removed code that is hard to maintain due to its growing complexity.

### Next steps (if any)

### How will we measure success?",1
56103774,2020-07-13 22:49:54.501,When Signing in with GitLab customers do not need to provide a password,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

When users get redirected to `Sign In with GitLab` and end in the registration page, the form contains the password field as a required field to complete the process.

However, if the user is signing in with GitLab they shouldn't be asked to provide a password.

### Proposal

Only render the password field if the user trying to register has empty `provider` and `uid` fields. The way it's done in  [app/views/shared/customer/_sign_up_form.html.haml](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/views/shared/customer/_sign_up_form.html.haml#L2). 

Relevant thread: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1484#note_371285508

### Result

The customer will be required to provide only the missing information in the registration form. 

After #1176 is addressed, customers will only need to provide their billing info (city, zip code, country) to complete the registration.

### Next steps (if any)

:warning: Removing this as a next step because users can add a password after signing in with GitLab via the `Forgot Password` form and they'll need a way to update it from their Account Details page.

~~Update the `Account Details` page so that the `Update Password` section is not displayed for users that register from `Sign In with GitLab`.~~

### How will we measure success?",2
55793214,2020-07-13 18:26:23.363,GitLab.com new paid subscription purchase flow throwing error,"## Summary

User has reported receiving `Failed to confirm your order! Please try again.` when attempting to by a paid subscription within GitLab.com.

![failurepic](/uploads/f1ec8dd4067c708f8fb3f835a0c19384/failurepic.png)


## Possible Root Cause
The new registration with checkout flow creates a group name from the company name automatically, but doesn't validate or sanitize the Group Name input. The save fails and we get a cryptic error message

## Workaround
Avoid commas and other disallowed characters in the company name


## Solution Suggestion
Sanitize the Group Name input, in such a way that it conforms to the rules set in the original group creation screen, as partially seen in the screenshot.

![screenshot-2020-07-13-22-50-53](/uploads/c8c3948be55c53caf43e8ce940680bd7/screenshot-2020-07-13-22-50-53.png)",2
54107582,2020-07-08 15:57:11.582,Lock date-sensitive spec,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

We're seeing `spec/frontend/lib/datetime_spec.js` fail locally for on some machines.

We should lock the timezone this spec runs in so it's consistent `const start = DateTime.fromISO(startDate, { zone: 'utc' });`",1
54100236,2020-07-08 13:23:45.815,Rely on https://gitlab.com/gitlab-org/gitlab-build-images to install node + headless chrome for CI builds,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

Half-step towards https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/834

We're currently installing custom dependencies like node, yarn, and headless chrome via a custom shell script https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/bd7286b17af7db1b11de5fa12f929085b539f8a3/scripts/prepare_build.sh

Since the Customer Portal has much the same dependencies as GitLab does, we can piggyback on the [gitlab-build-image](https://gitlab.com/gitlab-org/gitlab-build-images ) from there.

This should result in faster builds, and more reliable installs of headless chrome, so we do not end up [with these sort of workarounds again](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1423)",2
54091907,2020-07-08 10:24:44.225,Replace whitelist/blacklist with allowlist/denylist,"
### Proposal

Let's be more inclusive and replace these terms across the codebase (whenever possible)

Related: https://gitlab.com/groups/gitlab-org/-/epics/3478",2
53944572,2020-07-06 02:02:50.059,Handle new throughput labels in Dangerfile for customers-gitlab-com,"### Problem

`backstage` is being deprecated in favor of new scoped `feature::` and `tooling::` labels.

See: 

1. https://gitlab.com/gitlab-org/quality/team-tasks/-/issues/488
2. https://update-throughput-backstage.about.gitlab-review.app/handbook/engineering/management/throughput/index.html#deprecated-types (Review app)

### Proposal

### Result

### Next steps (if any)",1
53910741,2020-07-04 11:51:52.943,N+1 query on loading the subscriptions list,"### Problem

Our `SubscriptionPresenter` produces too many extra queries when we call it. The presenter returns the state of EULA request by querying the `eula_requests` table.
The simplest fix would be including this table (`eula_requests`) to the list of subscriptions but the `Subscription` model is not the `ActiveRecord` class. We can't use `include` on it. We should find another way of preloading `eula_requests` for the given list of subscriptions.

```
web     |   EulaRequest Load (0.6ms)  SELECT  ""eula_requests"".* FROM ""eula_requests"" WHERE ""eula_requests"".""subscription_name"" = $1 AND ""eula_requests"".""accepted_at"" IS NULL LIMIT $2  [[""subscription_name"", ""A-S00038997""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:133
web     |   Order Load (0.5ms)  SELECT  ""orders"".* FROM ""orders"" WHERE ""orders"".""zuora_account_id"" = $1 AND ""orders"".""subscription_name"" = $2 ORDER BY ""orders"".""updated_at"" DESC LIMIT $3  [[""zuora_account_id"", ""2c92c0f872e0ce920172e660eb610357""], [""subscription_name"", ""A-S00039203""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:40
web     |   EulaRequest Load (0.3ms)  SELECT  ""eula_requests"".* FROM ""eula_requests"" WHERE ""eula_requests"".""subscription_name"" = $1 AND ""eula_requests"".""accepted_at"" IS NULL LIMIT $2  [[""subscription_name"", ""A-S00039203""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:133
web     |   Order Load (0.4ms)  SELECT  ""orders"".* FROM ""orders"" WHERE ""orders"".""zuora_account_id"" = $1 AND ""orders"".""subscription_name"" = $2 ORDER BY ""orders"".""updated_at"" DESC LIMIT $3  [[""zuora_account_id"", ""2c92c0f872e0ce920172e660eb610357""], [""subscription_name"", ""A-S00039214""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:40
web     |   EulaRequest Load (0.5ms)  SELECT  ""eula_requests"".* FROM ""eula_requests"" WHERE ""eula_requests"".""subscription_name"" = $1 AND ""eula_requests"".""accepted_at"" IS NULL LIMIT $2  [[""subscription_name"", ""A-S00039214""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:133
web     |   Order Load (0.4ms)  SELECT  ""orders"".* FROM ""orders"" WHERE ""orders"".""zuora_account_id"" = $1 AND ""orders"".""subscription_name"" = $2 ORDER BY ""orders"".""updated_at"" DESC LIMIT $3  [[""zuora_account_id"", ""2c92c0f872e0ce920172e660eb610357""], [""subscription_name"", ""A-S00039215""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:40
web     |   EulaRequest Load (0.4ms)  SELECT  ""eula_requests"".* FROM ""eula_requests"" WHERE ""eula_requests"".""subscription_name"" = $1 AND ""eula_requests"".""accepted_at"" IS NULL LIMIT $2  [[""subscription_name"", ""A-S00039215""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:133
web     |   Order Load (0.5ms)  SELECT  ""orders"".* FROM ""orders"" WHERE ""orders"".""zuora_account_id"" = $1 AND ""orders"".""subscription_name"" = $2 ORDER BY ""orders"".""updated_at"" DESC LIMIT $3  [[""zuora_account_id"", ""2c92c0f872e0ce920172e660eb610357""], [""subscription_name"", ""A-S00039217""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:40
web     |   EulaRequest Load (0.3ms)  SELECT  ""eula_requests"".* FROM ""eula_requests"" WHERE ""eula_requests"".""subscription_name"" = $1 AND ""eula_requests"".""accepted_at"" IS NULL LIMIT $2  [[""subscription_name"", ""A-S00039217""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:133
web     |   Order Load (0.4ms)  SELECT  ""orders"".* FROM ""orders"" WHERE ""orders"".""zuora_account_id"" = $1 AND ""orders"".""subscription_name"" = $2 ORDER BY ""orders"".""updated_at"" DESC LIMIT $3  [[""zuora_account_id"", ""2c92c0f872e0ce920172e660eb610357""], [""subscription_name"", ""A-S00039218""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:40
web     |   EulaRequest Load (0.6ms)  SELECT  ""eula_requests"".* FROM ""eula_requests"" WHERE ""eula_requests"".""subscription_name"" = $1 AND ""eula_requests"".""accepted_at"" IS NULL LIMIT $2  [[""subscription_name"", ""A-S00039218""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:133
web     |   Order Load (0.5ms)  SELECT  ""orders"".* FROM ""orders"" WHERE ""orders"".""zuora_account_id"" = $1 AND ""orders"".""subscription_name"" = $2 ORDER BY ""orders"".""updated_at"" DESC LIMIT $3  [[""zuora_account_id"", ""2c92c0f872e0ce920172e660eb610357""], [""subscription_name"", ""A-S00039257""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:40
web     |   EulaRequest Load (0.3ms)  SELECT  ""eula_requests"".* FROM ""eula_requests"" WHERE ""eula_requests"".""subscription_name"" = $1 AND ""eula_requests"".""accepted_at"" IS NULL LIMIT $2  [[""subscription_name"", ""A-S00039257""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:133
web     |   Order Load (0.3ms)  SELECT  ""orders"".* FROM ""orders"" WHERE ""orders"".""zuora_account_id"" = $1 AND ""orders"".""subscription_name"" = $2 ORDER BY ""orders"".""updated_at"" DESC LIMIT $3  [[""zuora_account_id"", ""2c92c0f872e0ce920172e660eb610357""], [""subscription_name"", ""A-S00038996""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:40
web     |   EulaRequest Load (0.4ms)  SELECT  ""eula_requests"".* FROM ""eula_requests"" WHERE ""eula_requests"".""subscription_name"" = $1 AND ""eula_requests"".""accepted_at"" IS NULL LIMIT $2  [[""subscription_name"", ""A-S00038996""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:133
web     |   Order Load (0.5ms)  SELECT  ""orders"".* FROM ""orders"" WHERE ""orders"".""zuora_account_id"" = $1 AND ""orders"".""subscription_name"" = $2 ORDER BY ""orders"".""updated_at"" DESC LIMIT $3  [[""zuora_account_id"", ""2c92c0f872e0ce920172e660eb610357""], [""subscription_name"", ""A-S00039210""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:40
web     |   EulaRequest Load (0.4ms)  SELECT  ""eula_requests"".* FROM ""eula_requests"" WHERE ""eula_requests"".""subscription_name"" = $1 AND ""eula_requests"".""accepted_at"" IS NULL LIMIT $2  [[""subscription_name"", ""A-S00039210""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:133
web     |   Order Load (0.4ms)  SELECT  ""orders"".* FROM ""orders"" WHERE ""orders"".""zuora_account_id"" = $1 AND ""orders"".""subscription_name"" = $2 ORDER BY ""orders"".""updated_at"" DESC LIMIT $3  [[""zuora_account_id"", ""2c92c0f872e0ce920172e660eb610357""], [""subscription_name"", ""A-S00039205""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:40
web     |   EulaRequest Load (0.3ms)  SELECT  ""eula_requests"".* FROM ""eula_requests"" WHERE ""eula_requests"".""subscription_name"" = $1 AND ""eula_requests"".""accepted_at"" IS NULL LIMIT $2  [[""subscription_name"", ""A-S00039205""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:133
web     |   Order Load (2.4ms)  SELECT  ""orders"".* FROM ""orders"" WHERE ""orders"".""zuora_account_id"" = $1 AND ""orders"".""subscription_name"" = $2 ORDER BY ""orders"".""updated_at"" DESC LIMIT $3  [[""zuora_account_id"", ""2c92c0f872e0ce920172e660eb610357""], [""subscription_name"", ""A-S00039208""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:40
web     |   EulaRequest Load (0.4ms)  SELECT  ""eula_requests"".* FROM ""eula_requests"" WHERE ""eula_requests"".""subscription_name"" = $1 AND ""eula_requests"".""accepted_at"" IS NULL LIMIT $2  [[""subscription_name"", ""A-S00039208""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:133
web     |   Order Load (0.5ms)  SELECT  ""orders"".* FROM ""orders"" WHERE ""orders"".""zuora_account_id"" = $1 AND ""orders"".""subscription_name"" = $2 ORDER BY ""orders"".""updated_at"" DESC LIMIT $3  [[""zuora_account_id"", ""2c92c0f872e0ce920172e660eb610357""], [""subscription_name"", ""A-S00039211""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:40
web     |   EulaRequest Load (0.4ms)  SELECT  ""eula_requests"".* FROM ""eula_requests"" WHERE ""eula_requests"".""subscription_name"" = $1 AND ""eula_requests"".""accepted_at"" IS NULL LIMIT $2  [[""subscription_name"", ""A-S00039211""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:133
web     |   Order Load (0.5ms)  SELECT  ""orders"".* FROM ""orders"" WHERE ""orders"".""zuora_account_id"" = $1 AND ""orders"".""subscription_name"" = $2 ORDER BY ""orders"".""updated_at"" DESC LIMIT $3  [[""zuora_account_id"", ""2c92c0f872e0ce920172e660eb610357""], [""subscription_name"", ""A-S00039213""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:40
web     |   EulaRequest Load (0.3ms)  SELECT  ""eula_requests"".* FROM ""eula_requests"" WHERE ""eula_requests"".""subscription_name"" = $1 AND ""eula_requests"".""accepted_at"" IS NULL LIMIT $2  [[""subscription_name"", ""A-S00039213""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:133
web     |   Order Load (0.5ms)  SELECT  ""orders"".* FROM ""orders"" WHERE ""orders"".""zuora_account_id"" = $1 AND ""orders"".""subscription_name"" = $2 ORDER BY ""orders"".""updated_at"" DESC LIMIT $3  [[""zuora_account_id"", ""2c92c0f872e0ce920172e660eb610357""], [""subscription_name"", ""A-S00039202""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:40
web     |   EulaRequest Load (0.4ms)  SELECT  ""eula_requests"".* FROM ""eula_requests"" WHERE ""eula_requests"".""subscription_name"" = $1 AND ""eula_requests"".""accepted_at"" IS NULL LIMIT $2  [[""subscription_name"", ""A-S00039202""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:133
web     |   Order Load (0.5ms)  SELECT  ""orders"".* FROM ""orders"" WHERE ""orders"".""zuora_account_id"" = $1 AND ""orders"".""subscription_name"" = $2 ORDER BY ""orders"".""updated_at"" DESC LIMIT $3  [[""zuora_account_id"", ""2c92c0f872e0ce920172e660eb610357""], [""subscription_name"", ""A-S00038717""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:40
web     |   CACHE Order Load (0.0ms)  SELECT  ""orders"".* FROM ""orders"" WHERE ""orders"".""zuora_account_id"" = $1 AND ""orders"".""subscription_name"" = $2 ORDER BY ""orders"".""updated_at"" DESC LIMIT $3  [[""zuora_account_id"", ""2c92c0f872e0ce920172e660eb610357""], [""subscription_name"", ""A-S00038717""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:40
web     |   EulaRequest Load (0.4ms)  SELECT  ""eula_requests"".* FROM ""eula_requests"" WHERE ""eula_requests"".""subscription_name"" = $1 AND ""eula_requests"".""accepted_at"" IS NULL LIMIT $2  [[""subscription_name"", ""A-S00038717""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:133
web     |   CACHE Order Load (0.0ms)  SELECT  ""orders"".* FROM ""orders"" WHERE ""orders"".""zuora_account_id"" = $1 AND ""orders"".""subscription_name"" = $2 ORDER BY ""orders"".""updated_at"" DESC LIMIT $3  [[""zuora_account_id"", ""2c92c0f872e0ce920172e660eb610357""], [""subscription_name"", ""A-S00038717""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:40
web     |   Order Load (0.4ms)  SELECT  ""orders"".* FROM ""orders"" WHERE ""orders"".""zuora_account_id"" = $1 AND ""orders"".""subscription_name"" = $2 ORDER BY ""orders"".""updated_at"" DESC LIMIT $3  [[""zuora_account_id"", ""2c92c0f872e0ce920172e660eb610357""], [""subscription_name"", ""A-S00039204""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:40
web     |   EulaRequest Load (0.4ms)  SELECT  ""eula_requests"".* FROM ""eula_requests"" WHERE ""eula_requests"".""subscription_name"" = $1 AND ""eula_requests"".""accepted_at"" IS NULL LIMIT $2  [[""subscription_name"", ""A-S00039204""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:133
web     |   Order Load (0.5ms)  SELECT  ""orders"".* FROM ""orders"" WHERE ""orders"".""zuora_account_id"" = $1 AND ""orders"".""subscription_name"" = $2 ORDER BY ""orders"".""updated_at"" DESC LIMIT $3  [[""zuora_account_id"", ""2c92c0f872e0ce920172e660eb610357""], [""subscription_name"", ""A-S00039207""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:40
web     |   EulaRequest Load (0.4ms)  SELECT  ""eula_requests"".* FROM ""eula_requests"" WHERE ""eula_requests"".""subscription_name"" = $1 AND ""eula_requests"".""accepted_at"" IS NULL LIMIT $2  [[""subscription_name"", ""A-S00039207""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:133
web     |   Order Load (0.5ms)  SELECT  ""orders"".* FROM ""orders"" WHERE ""orders"".""zuora_account_id"" = $1 AND ""orders"".""subscription_name"" = $2 ORDER BY ""orders"".""updated_at"" DESC LIMIT $3  [[""zuora_account_id"", ""2c92c0f872e0ce920172e660eb610357""], [""subscription_name"", ""A-S00038720""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:40
web     |   EulaRequest Load (0.4ms)  SELECT  ""eula_requests"".* FROM ""eula_requests"" WHERE ""eula_requests"".""subscription_name"" = $1 AND ""eula_requests"".""accepted_at"" IS NULL LIMIT $2  [[""subscription_name"", ""A-S00038720""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:133
web     |   Order Load (0.5ms)  SELECT  ""orders"".* FROM ""orders"" WHERE ""orders"".""zuora_account_id"" = $1 AND ""orders"".""subscription_name"" = $2 ORDER BY ""orders"".""updated_at"" DESC LIMIT $3  [[""zuora_account_id"", ""2c92c0f872e0ce920172e660eb610357""], [""subscription_name"", ""A-S00039556""], [""LIMIT"", 1]]
web     |   ↳ app/models/subscription.rb:40
web     |   EulaRequest Load (0.5ms)  SELECT  ""eula_requests"".* FROM ""eula_requests"" WHERE ""eula_requests"".""subscription_name"" = $1 AND ""eula_requests"".""accepted_at"" IS NULL LIMIT $2  [[""subscription_name"", ""A-S00039556""], [""LIMIT"", 1]]

```",2
53814840,2020-07-02 21:50:45.472,Remove ability to select ACH and Wire from payment method type,"## Summary 

In https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1024 we intended to remove the ability to select ACH as a payment type in the customers portal. However the value still exists when attempting to make a purchase over a threshold.

### Examples

![Screen_Shot_2020-07-02_at_16.33.44](/uploads/fc397910a5926c05c32fe212bbe5b9e8/Screen_Shot_2020-07-02_at_16.33.44.png)

![Screen_Shot_2020-07-02_at_16.27.32](/uploads/d554fd5585ed73674b7829ed44e297be/Screen_Shot_2020-07-02_at_16.27.32.png)

#### When you attempt to select an option, you then receive this message and subsequent error (reported [here](https://gitlab.zendesk.com/agent/tickets/162819)):

![Screenshot_2020-07-02_at_22.00.21](/uploads/632235a49be4c725a425e3253632583b/Screenshot_2020-07-02_at_22.00.21.png)
![Screenshot_2020-07-02_at_22.00.28](/uploads/cec11e2cdd0accb9b1aa5ae7241f8494/Screenshot_2020-07-02_at_22.00.28.png)

## Proposal

Finance has [confirmed](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1644#note_372889179) that we should only offer credit card payment in all purchase flows regardless of threshold.",3
53812606,2020-07-02 21:20:44.936,Add ability for admin to renew trial,"### Problem

From #1173 

The extend trial feature was implemented in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/372 but our team members have not seen this option on any expired trials.

Note: the option to extend trials by changing the end date does appear for active trials.

### Example

The group https://gitlab.com/groups/this-trial-wont-work/-/billings has a trial that expired 2019-06-13, but there's no options that I can see that would allow me to:

1. Know that a trial existed but has since expired
1. Extend that trial

Screenshot: ![image](https://gitlab.com/gitlab-org/customers-gitlab-com/uploads/bd6d2401597df0a913801d2d7b776bfd/image.png)

Interestingly, even though Lyle started a new trial

```
#<Order:0x000000000bfbfb48
 id: 56044,
 customer_id: 8334,
 product_rate_plan_id: ""2c92a0fc5a83f01d015aa6db83c45aac"",
 subscription_id: nil,
 subscription_name: nil,
 start_date: Tue, 11 Feb 2020,
 end_date: Wed, 12 Feb 2020,
 quantity: 1,
 created_at: Tue, 11 Feb 2020 00:55:46 UTC +00:00,
 updated_at: Tue, 11 Feb 2020 00:56:24 UTC +00:00,
 gl_namespace_id: ""7139776"",
 gl_namespace_name: ""will-this-trial-work"",
 amendment_type: nil,
 trial: true,
 last_extra_ci_minutes_sync_at: nil,
 zuora_account_id: nil,
 increased_billing_rate_notified_at: nil>
```

The expired date is still the original. Nevertheless, I'm certain that more than one of Lyle's groups have had trials and none of them are showing previous expiration dates or the option to extend: https://customers.gitlab.com/admin/customer/8334/list_gitlab_namespaces

Please see @lyle's comments for more details: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/372#note_284557673

## This issue will be resolved when

Note: displaying the date of a previously expired trial is being worked on in #1173 

When team members have the ability to: 

* Reactivate and extend expired trials
  * A team member will select a ""renew trial"" button
  * The button will automatically reactivate the trial with Gold plan and an end date 2 weeks from current date
  * Once reactivated, team member can select different plan and end date as with any active trial
  * Note: team members should be able to reactive any trial regardless of its age

Solution wireframe: 
 
| Step 1 | Step 2 |
| ------ | ------ |
| ![TrialsFuture](/uploads/13aa6f981fef502886e5a9a6d1a65bd1/TrialsFuture.png) | ![Trial_Update_expired_trial](/uploads/1cee93cd973e18b9fb6f3f377ae45ec9/Trial_Update_expired_trial.png) |

## Technical considerations

As noted in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1576#note_380200751

would be much easier to implement if we know which orders were created as a trial originally, and being able to check if a `trial` is `true` would help validate not accidentally changing a non-trial order.

From https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1643#note_372870393

finding the original order for the trial may be somewhat problematic because the `trial_histories` table doesn't include the order ID.

Ideally, when [the trial expires](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/6b275192c6dfa91f2ddee9ed7d50480fba34b65d/app/jobs/expire_order_job.rb#L17-23), the data is not edited so that the order keeps the original end date and that it was tied to a trial.

Nevertheless, even in the current state of things, we could potentially use the fact that trials are the only type of order not tied to a purchase transaction to find the relevant order:

```
subscription_id: nil,
 subscription_name: nil
```

The function could be a modified version of [what support currently use via console](https://gitlab.com/gitlab-com/support/toolbox/console-training-wheels/-/blob/master/lib/support_team.rb#L7), specifying gold plan and the current date + 2 weeks for the trial end date, as long as we also add the validation above.
 
### Potential Solution

* Add 'order_id' to trials history table
* in Customers admin reference the trials history table for to check for expired trials for that particular namespace.
* If an expired trial is found add a ""reactivate trial"" button and default the value to +14 days from current date. Once the trial is active, the admin should have the ability to adjust the date even further as needed, note the further adjustment of active trials should be a feature that's already live via https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/372
* When extending a trial is extended we update the trials table with the updated trial end date
* Update other relative systems/tables to ensure the trial is properly extended to the new end date

## Prioritization

Deprioritized in favour of https://gitlab.com/gitlab-org/gitlab/-/issues/290278",5
53734845,2020-07-02 12:53:33.931,Store `seats_currently_in_use` field in gitlab.com `subscription` table,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

The Data team needs to be able to replicate the GitLab UI Billing/Usage values that Customers/Users see on the GitLab UI into internal reports (for Sales, Product, etc) from the data warehouse. To ensure one SSOT for these calculations, it would be ideal that these values are stored in the same location at the same data granularity. 

This issue specifically tracks storing the `seats_currently_in_use` field in gitlab.com `subscription` table. I will leave it up to the person who picks up this ticket to decide if this issue should also track making the UI read and use this value or if that should be a separate issue. Thank you for your help! 

FYI @amandarueda , @jbrennan1 , @derekatwood , @jeromezng 

### Proposal


Currently, the `max_seats_used` is stored into the `gitlab_subscriptions` table [via this cron job](https://gitlab.com/gitlab-org/gitlab/-/blob/c086bd8f75537a7f73fc386f2053962b389dc990/ee/app/workers/update_max_seats_used_for_gitlab_com_subscriptions_worker.rb). It would be ideal if this cron job also stored the other values on the [billing page](https://gitlab.com/gitlab-data/analytics/-/issues/5084/designs/Screen_Shot_2020-06-15_at_5.07.01_PM.png) into the datawarehouse at the same time and that the UI was retrieving this value so that there can be more consistency across systems in terms of our internal and external reporting of this value. 


### Result

### Next steps (if any)

### How will we measure success?",2
53664512,2020-07-02 10:43:21.493,Consolidate on pattern for product copy place and presenting,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Some background: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1581#note_372289528

In our `/plans` page we've got product specific copy; for example ""1000 CI minutes"".

We've also got product specific copy living on the frontend in https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/frontend/javascripts/purchase/products.js

Additionally there's quite a lot of copy that's living in HAML templates or Vue templates.

This means that updating copy can mean touching multiple different files, and that copy can get out of sync.

### Proposal

We should decide on some guidelines on when a copy should be pulled to a central place, and when it's fine to have it live in templates.

* When should copy be pulled to a presenter (worth taking inspiration from https://gitlab.com/gitlab-org/gitlab-foss/blob/master/app/presenters/README.md#when-to-use-a-presenter)
* When should copy live in the Vue template?
* When should we pull data directly from Zuora?
* Should some of this live in a database so we do not need to run a deploy to update copy?",1
53081941,2020-07-01 15:13:40.714,"Follow-up from ""Add service to create Salesforce Quote Amendment""","The following discussion from !1496 should be addressed:

- [ ] @alexbuijs started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1496#note_361526697):  (+2 comments)

    > Maybe you could expand the `sf` part of this method name to `ensure_presence_of_salesforce_quote`? It is a bit more descriptive that way.",1
53074827,2020-07-01 14:57:02.287,Ensure `gl-link` not having it's own font-size won't break Customers,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

See https://gitlab.com/gitlab-org/gitlab-ui/-/issues/605 and https://gitlab.com/gitlab-org/gitlab-ui/-/merge_requests/1159#note_371241476 for more context.

The inner workings of `gl-link` font size is changing. 

> In `gitlab.com` update all existing instances of `gl-link` to add a `gl-font-base` utility class. This way, we're guaranteed the preexisting behavior is preserved in `gitlab.com` (and we can slowly migrate away from it)...

We need to do the same in Customers.

With 12 instances at the time of writing this shouldn't be the biggest lift

```
~/workspace/customers-gitlab-com staging
❯ git grep gl-link | wc -l
      12
```",1
52491143,2020-06-30 20:29:40.512,Data Cleanup: Credit card on file without default setting,"## Summary

Somehow, customer records which have at least one credit card on file have gotten into a state where there is no default credit card indicated. This causes a purchasing error for users.

## Proposal

For this issue, we need to find all the data records in this state and handle them accordingly.

We should query for all customer records which have:

1. an active subscription
1. no default payment method
1. autorenew set to true

For these results we should:

1. set autorenew to false

For the results where there are more than one credit card on file:

1. Produce a report which includes:
     - Customer record link to customers portal
     - Email address associated with customer record
     - Name associated with customer record
     - Company associated with customer record
     - SFDC ID
     - Zuora ID
     - Subscription number
     - Products in subscription
     - Subscription end date",2
52460608,2020-06-30 19:34:38.289,Improve purchase error when no default credit card is on file,"## Summary

When a user attempts to make a purchase in the customers portal and a credit card is on file but is not marked as ""default"", we display `Electronic payment needs electronic payment method` as an error, which is not helpful. 

![image__1___1_](/uploads/8dab983db2c467cc5a57d9651c4eef99/image__1___1_.png)

## Proposal

We should display a helpful message which directs the user how to solve the issue.

To solve the issue, the user needs to edit the existing credit card and mark it as `default` or create a new credit card record and mark it as default.",1
50130977,2020-06-26 14:39:48.548,UX: How should we display pricing information related to purchases?,"## Summary

While working [this issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1560), we discovered a use case (plan upgrades) which we determined needed an additional level of pricing detail (the proration credit) that we do not currently display. 

In following this discussion, we determined that we would likely need to mimic the line-level detail on invoices in the subscription card to adequately display the activity. 

This led me to wonder why we are displaying pricing in the subscription card at all? I am not sure this data is commonly used by customers, especially since it is incorrect today and we don't get complaints about it. 

Perhaps we should spend effort on making the Invoices page more useful (collated by subscription, provide an ability to expand and view details, etc), rather than building pricing out in the subscription card.

I'd like UX to dig into this and provide a recommendation. Since we've removed the pricing from the subscription card, I'd like to get this follow-on work in pretty quickly.",2
50092686,2020-06-25 19:18:54.720,SPIKE: Decommission the EULA acceptance process in customers,"## Summary

In a decision made [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1360#note_368446506) we will no longer require a manual EULA process. As a result. We need to decommission the processes involved, including the templates, the emails to user/reseller/SFDC. We should retain any acceptance data previously obtained for a period of _tbd_ in case it is needed by the legal team.

This is a research issue to identify, create and weight issues for the individual tasks required to decommission the customers portal EULA processes.

We will schedule the dev issues created for %""13.5""",2
50052205,2020-06-25 01:29:21.989,[Deprecate Zuora SOAP] Remove SOAP code related to payment methods,"### Problem
Now that the Zuora REST update is complete and the SOAP code is no longer needed, we can remove all the legacy Zuora SOAP code from the application.  One place that was missed during the initial deprecation work was code related to payment methods.

### Proposal
We can remove the Zuora SOAP API code and related feature flags. This issue focuses on cleaning up the SOAP logic and feature flags related to the payment methods which was added in https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/620.

The [`PaymentMethodPresenter` also has code](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/75cf2267f33f0b34e5c25834e34d8f489c1cfc25/app/presenters/payment_method_presenter.rb#L35) that should be cleaned up as part of this issue.

If there are any other places that check for `Feature.enabled?(:zuora_rest_api)` we should consider removing them, either in this issue or a separate issue.",2
50039350,2020-06-24 17:25:18.316,Prefer `RSpec.describe` over `describe` in top-level namespace,"### Problem
The GitLab development docs were updated recently to prefer `RSpec.describe` over `describe` in top-level namespace.  It is [referenced here in the docs](https://docs.gitlab.com/ee/development/testing_guide/best_practices.html#general-guidelines). This is a best practice to avoid a monkey patch and will be removed in RSpec 4.0.

References:
- https://gitlab.com/gitlab-org/gitlab/-/issues/220018
- https://gitlab.com/gitlab-org/gitlab/-/issues/220218


### Proposal
We should update all specs to use `RSpec.describe` at the root level and disable the monkey patching going forward.  See [this issue](https://gitlab.com/gitlab-org/gitlab/-/issues/220018) for more information for how this was accomplished in GL.",1
50030430,2020-06-24 13:30:23.081,Consider using IronBank's local records feature to improve performance,"### Problem
There are possibly 2 problems solved by this proposal:
1. The Customer Portal commonly communicates with Zuora which can become a bottleneck for performance.
1. Plans are preloaded during the initialization of the Rails application which is a blocker for moving the Customer Portal app to Auto Devops.  Check out !525 for more details.

### Proposal
We should investigate using [the ""local records"" feature in IronBank](https://github.com/zendesk/iron_bank#local-records) to provide a caching layer for Zuora objects that don't commonly change.  According to the [IronBank docs](https://github.com/zendesk/iron_bank#local-records):

> If your product catalog does not change often, you may want to export it locally so that product catalog and related object queries look for local records first, then fallback to the API if no records are found.
> 
> You can export your product catalog locally using the LocalRecords class:
> ```
> # Save CSV files in the directory specified by `config.export_directory`
> IronBank::LocalRecords.export
> ```

With this change, we might be able to refactor or completely remove the eager loading of plans (defined [here](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/4ff55c5197239fa25e037f3749d9af1666804e9e/app/models/plans_finder.rb#L19) and initialized [here](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/8c0c8b6c20692479ea8d9482721465ebb8f6aba6/config/application.rb#L69)

### Result
A cleaner initialization and more performant app.",3
50004811,2020-06-23 23:35:33.776,Investigate card decline issue,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you're about to submit isn't a duplicate.

Do not include confidential information!
--->

### Summary

Recently, we have seen several tickets where customers are experiencing credit cards being declined even though the card works on other services. Customers also try to use different cards but seems like most of the time different cards did not resolve the issue. Since everything is not clear as we cannot find anymore information in sentry, please kindly investigate this issue.

### Steps to reproduce

N/A

### What is the current *bug* behavior?

Credit card is declined while try to make a purchase on customer portal even though it's working on other service.

### What is the expected *correct* behavior?

If the card work with other services, it should work on customer portal.

### Relevant logs and/or screenshots

- Sentry issue: [CUSTOMERSGITLABCOM-2NZ](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1181887/?referrer=gitlab_integration)

Possible related issue:

- Sentry issue: [CUSTOMERSGITLABCOM-3BM](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1531808/?referrer=gitlab_integration)

### Workarounds

(Ways to get around the issue)

### Reported examples

1. https://gitlab.zendesk.com/agent/tickets/158827
1. https://gitlab.zendesk.com/agent/tickets/160371
1. https://gitlab.zendesk.com/agent/tickets/160087
1. https://gitlab.zendesk.com/agent/tickets/162539
1. https://gitlab.zendesk.com/agent/tickets/165580 customer mentioned they have some temporary cards

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",2
49898619,2020-06-22 10:10:50.200,Investigate and fix intermittent failures in payment_method spec,"The following discussion from !1552 should be addressed:

- [ ] @jejacks0n started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1552#note_364813747):  (+2 comments)

    > @rhardarson looks like we have a flakey test with https://gitlab.com/gitlab-org/customers-gitlab-com/-/jobs/603585348 -- do you know what that might be about?
    > 
    > Also: https://gitlab.com/gitlab-org/customers-gitlab-com/-/jobs/603643658

Very similar to https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1511

We're seeing the feature spec `./spec/features/payment_methods_spec.rb` fail every once in a while.

After the fact it's pretty difficult to figure out what went wrong.

We need to identify what's the cause of this flakiness.

* Race condition in spec?
* Non-deterministic behaviour?
* Is the spec correct but the code itself is flaky?
* Is VCR not matching HTTP requests?
* Is this because it's making real HTTP requests to Zuora? Can we add more VCR coverage then?",5
49249958,2020-06-19 12:22:52.784,Use spacing utilities from GitLab UI in CompanyDetails,"The following discussion from !1364 should be addressed:

- [ ] @ekigbo started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1364#note_357623676):  (+2 comments)

    > I think we can replace these with their `gl` equivalents, :thinking: ?
    > 
    > ```suggestion:-0+0
    >     <div class=""gl-display-flex gl-justify-content-space-between gl-mb-5"">
    > ```",2
48388869,2020-06-18 20:05:33.202,"Follow-up from ""Improve order -> namespace resolution logic""","The following discussion from !1529 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1529#note_364083877): 

    > **Suggestion (non-blocking)**: We could extract part of this into a method called `gitlab_namespace`.  This method could do the lookup with the list service and return the one that matches the `gl_namespace_id`.  The main advantage is easy reuse of the gitlab namespace.
    > ```
    > def gitlab_namespace
    >   return nil if gl_namespace_id.blank?
    > 
    >   @gitlab_namespace ||= begin
    >     namespaces = Gitlab::Namespace::ListService.new(customer).execute || []
    >     # ""to_s"" the id from gitlab because we store ours as strings. :joy:
    >     namespaces.find { |ns| ns.id.to_s == gl_namespace_id }
    >   end
    > end
    > ```
    > 
    > That would just leave this method much simpler, maybe something like:
    > 
    > ```
    > def current_number_of_users
    >   return 0 unless gitlab_namespace
    > 
    >   gitlab_namespace[:billable_members_count) || 0
    > end
    > ```
    > 
    > Since this is not needed yet, I'm happy not doing it now.  Mostly just mentioning it so that I can create a follow up issue for it. :smile:",3
117519010,2022-10-25 08:41:47.990,FF use of Orders API for subscription update,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Now that [preview amendment using orders API](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4694) is merged, we can update the workflows to preview using the orders API using a feature flag to control its rollout.

This issue integrates the use of Orders API in subscription update workflow.

The following business scenarios need to be implemented:

- Add CI minutes
- Add seats
- Add storage
- Renew subscription
- Renew subscription with true up
- Renew subscription with upgrade

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

In `SelfService::Subscriptions::UpdateService`, invoke `Zuora::Orders::AmendmentManagerService` if the request is to preview and FF `use_orders_api_to_preview_amendment` is enabled.

### Result

Orders API is used to preview subscription update.

### Next steps (if any)

### How will we measure success?",2
117517212,2022-10-25 08:34:05.451,FF use of Orders API for subscription upgrade,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Now that [preview amendment using orders API](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4694) is merged, we can update the workflows to preview using the orders API using a feature flag to control its rollout.

This issue integrates the use of Orders API in upgrade workflow.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

In `Gitlab::UpgradeSubscriptionPlanService`, invoke `Zuora::Orders::AmendmentManagerService` if the request is to preview and FF `use_orders_api_to_preview_amendment` is enabled.

### Result

Orders API is used to preview subscription upgrade.

### Next steps (if any)

### How will we measure success?",2
117516175,2022-10-25 08:23:01.382,[Feature flag] Remove ignore_billable_field flag,Remove `ignore_billable_field` flag after successful [rollout](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4960),1
117507893,2022-10-25 06:02:18.735,Transitioning from Amendment.Name in Auto renewal,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

This issue pertains to setting `order.description` to `AutoRenew by CustomersDot` during Auto renewal when using Orders API (instead of `name`). This is required as we transition from Amend to Orders API.

See more details on the motivation behind this change in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3784.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Params for auto renewal is generated by `AutoRenew::AmendmentParamsGenerator` service. Update `#run` method to set `order_description` when the FF `use_orders_api_auto_renew_workflow` is enabled. Default to `name` when FF is disabled.

### Result

With the implementation in this issue, the description will be set when Orders API is used for auto renewal.

### Next steps (if any)

### How will we measure success?",2
117482757,2022-10-24 19:06:37.952,"[Reseller] Update ""change linked namespace"" flow","## Problem

Currently, it's possible that if the customer tries to change the linked namespace to a namespace with more seats in use than seats in the subscription, they will be asked to pay for the additional seats.  

We cannot allow this transaction in Customers Portal, since customer should be transacting through a Reseller.

### How Support handles this today

When support encounters this situation, they:

1. Inform the customer that they have more users than purchased seats.
2. Propose the following options:
   1. Contact their purchase partner to purchase more seats.
   2. Deal with overages at the end of the subscription term (via True-Ups).
   3. Remove excess users.
3. Depending on what option was selected, wait for the daily sync job to run and re-calculate the Billable users count.
4. Link the subscription and confirm there are no overages recorded.

## Proposal

Update the `Change Linked Namespace` flow for a subscription that is purchased via a reseller.

- **If they have more users in their group than purchased seats**, display a message about the overage and let the user know that they will be charged for the overage at the end of their subscription term. Allow them to associate the subscription to the namespace regardless of overages.
- **If there is no overage** for a reseller customer, we will use the current flow (no changes needed).

| Current ""Change linked namespace"" flow (No overage) | Current ""Change linked namespace"" flow (With overage)  | Proposed reseller customer ""Change linked namespace"" flow (With overage) |
| ------ | ------ |  ------ |
| ![image](/uploads/2366421c283f5af7917a5db837077481/image.png) | ![image](/uploads/d8331298970fe91669fc7ec270981c80/image.png) | ![image](/uploads/16db327e08bafbfb05510c490bcff64b/image.png) |

### Design

- Mockup in design section https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5015/designs/Change_linked_namespace_for_reseller_customers.png
- [Figma file](https://www.figma.com/file/8qPxWBgTmLdOqSu9S1UbUx/Allow-customers-that-purchased-via-Reseller-to-access-Customers-Portal?node-id=2%3A29&t=ssRQtSMzrW04gs3t-1)

#### Implementation plan

| Step | Issue | MR/state |
|------|-------|-----------------------------|
| Create a `updated_namespace_change_flow` feature flag | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5015 | ~""workflow::complete""  |
| Add a new component under the FF | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5015 | https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6894 ~""workflow::complete""  |
| Adjust the flow to work only for reseller customers | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5015 | https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6980 https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/7181 ~""workflow::complete"" |
| Rollout FF (staging) | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/6052 | TBD |
| Make sure the related docs are updated | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5006 | :construction:  |
| Rollout FF (production) | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/6052 | TBD |
| Clean up FF | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/6052 | :one: |

## Result

Customer knows how to proceed should they run into issues associating purchased subscription to a namespace.

## Next steps (if any)

## How will we measure success?",3
117471019,2022-10-24 15:52:42.646,Update CDot's BaseTrialService to route trials to Workato,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

We're removing Platypus from the Trial Lead workflow so that work will need to be done via other methods. Currently Customers Dot's `BaseTrialService` [posts the lead to Platypus after the lead is created](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/ceda41a8af626cecb659b2230b9e445646bb78ae/app/services/gitlab/base_trial_service.rb#L20).

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

There are two places to change:
 - In place of the `BaseTrialService`'s existing `create_platypus_lead` create a new `create_workato_lead` method utilizing the Sidekiq worker from gitlab-org/customers-gitlab-com#5012. This new method will want to take the same information as the existing method but hand it off to a local Sidekiq queue instead of Platypus.
 - In `TrialsController`, create a new method `create_hand_raise_workato_lead` to replace existing `create_hand_raise_platypus_lead`.
 - Introduce a new feature flag `switch_lead_creation_from_platypus_to_workato`

### Result

We're able to complete the full trial lead process without involving Platypus in the process.

### Next steps (if any)

Roll out the new method of posting Leads via a feature flag.

### How will we measure success?

We will consult with the Marketing Operations team to ensure that the newly posted data in Workato conforms to expectations and will work as expected for them in downstream processes.",2
117470939,2022-10-24 15:51:09.627,Create a sidekiq worker to send trials to Workato,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

We're working to remove Platypus from the trial creation pipeline, but want to retain Workato as part of the process. Currently Platypus handles trial lead storage via an [asynchronous Bull worker](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/integrations/platypus/-/blob/master/apps/server/src/marketing/commands/new-lead.command.ts#L42) that disconnects the time needed to service the request from the customer facing HTTP flow, the worker also handles posting failures to slack and email as needed.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Create a Sidekiq worker to do the same tasks currently being done by the Bull worker within Playtups.

### Result

Customers Dot can now post new leads to Workato with the same level of error reporting currently available in Platypus.

### How will we measure success?

Leads can be successfully posted from Customers Dot.",1
117470866,2022-10-24 15:49:57.213,Create Workato service within CDot,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Customers Dot is not currently able to communicate with Workato to post leads from trials.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Workato uses OAuth and a REST api, customers dot already includes gems for handling both of those methods of communication. We just need to take the pieces and assemble them into a service that will allow us to post leads to Workato in a practical convenient way. To do this we will create a service that will abstract secret handling and routing requests to the correct end point on Workato.

The only method that we need to implement at present is POSTing to `https://apim.workato.com/marketo/lead`. There isn't solid documentation on fields available with that end point, however the [existing Platypus Service](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/integrations/platypus/-/blob/master/apps/server/src/marketing/commands/new-lead.command.ts#L12) includes the names and types of all of the elements that we would want to include in our request.

We also need to create a new `Workato::LogLeadService` to replace existing `Platypus::LogLeadService`

### Result

There is a convenient service available to help facilitate the implementation of other tickets under this epic.

### How will we measure success?

Work on gitlab-org/customers-gitlab-com#5013 is able to proceed.",3
117294238,2022-10-21 07:44:46.911,[Reseller] Create feature flag to allow customers to login,"### Proposal
Create a new feature flag to allow customers created via reseller flow to login.


### Result
Feature flag [created](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/175/edit) as `reseller_access`.

### Next steps (if any)

### How will we measure success?",1
117290828,2022-10-21 06:47:37.753,[Reseller] Update details in email sent out on purchasing/renewing SaaS subscription,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
Currently the email which is sent out to customers on purchasing subscriptions via reseller flow mentions that they would not have access to the CustomersDot account. With https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5002, we would be allowing such customers to login to CustomersDot account.
We should update the email body to change this communication. 

Current email sent - 
![image](/uploads/168258b33f10ee08fbd1baa92627a1e2/image.png)

### Proposal

Update email body to remove the part which mentions that customer will not have access to the CustomersDot portal.  This should be behind the feature flag created in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5007.

### Proposed email text

_Anchor links remain the same as current implementation._

---

**Subject: [GitLab Transactions] Set up your new subscription to get started**

---

Hi Sharmad :wave: 

Thanks for purchasing a GitLab.com subscription. To set up your new subscription, you must link it to a group. Complete the following steps:

1. Create your GitLab account.
   - If you're already registered, [sign in](link).
1. Select the group for your subscription.
   - Create a new group or for an existing group, make sure you have the [Owner](link) role.
1. Sign in to your Customers Portal account. 
   - If this is your first purchase, we've sent you an email with instructions to set your password and access your account.
1. Link your GitLab account and subscription.
   - [Link your GitLab user account to your Customers Portal account](link).
   - [Link the subscription to your namespace](link).
1. [View your GitLab SaaS subscription](link) to confirm it's linked to a group.

If you require assistance, contact GitLab support.

Thanks,

The GitLab Team

---

### Result

Reseller customer receives correct information about getting access to Customers Portal and provisioning their SaaS subscription.

### Next steps (if any)

### How will we measure success?",2
117267921,2022-10-20 18:11:34.357,"[SPIKE]: Investigate ""PaymentFormsController#show"" speed","From: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4918#note_1142253500

### Problem
`PaymentFormsController#show` fails to meet it's apdex requirements 70% of the time.

### Context
`PaymentFormsController#show` is currently set at `:default` urgency. This means it will fail apdex if requests take longer than 1 second. [Reference](https://docs.gitlab.com/ee/development/application_slis/rails_request_apdex.html#how-to-adjust-the-urgency)

On average, these requests are taking longer than 1 second 70% of the time:
![Screen_Shot_2022-10-19_at_3.13.25_PM](/uploads/2d8e92b5853f55d15de641c8fbf4d5d0/Screen_Shot_2022-10-19_at_3.13.25_PM.png)

### Results
1. Find way to optimize endpoint so requests take less than 1 second.
2. If not possible, decrease the urgency so we allow up to 5s.",2
117227617,2022-10-20 09:51:05.588,Enable use of Orders API in Reconciliation workflow,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

`ReconciliationService` currently uses [Amend API](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/1c7002a2ef484ff3db77db80be29a08785e1b339/app/services/reconciliation_service.rb#L101) to perform reconciliation. Update it to use Orders API instead.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Update `ReconciliationService#amend_subscription` to invoke `Zuora::Orders::AmendmentManagerService` with appropriate params when the FF `use_orders_api_reconciliation_workflow` is enabled.

### Result

Reconciliation is performed appropriately when Orders API is used.

Verify: `contract_effective_date`, updated `quantity`.

### Next steps (if any)

### How will we measure success?",2
117146932,2022-10-19 06:27:05.585,New CustomersDot feature categorization,"## Proposal

As part of [this MR](https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/112379), new feature categories have been added for the Fulfillment team. 

We then need to update the CustomersDot app accordingly so that it uses the new feature categories.

## New categories

Descriptions about these 12 categories can be found in [the `data/categories.yml` file](https://gitlab.com/gitlab-com/www-gitlab-com/blob/b7c70a880e1677eaf1526a69e5729b55a3cbfef7/data/categories.yml#L2516).

For ~""group::purchase"":
  - `purchase`

For ~""group::provision"":
  - `sm_provisioning`
  - `saas_provisioning`

For ~""group::utilization"":
  - `subscription_usage_reports`
  - `subscription_cost_management`

For ~""group::fulfillment platform"":
  - `fulfillment_infrastructure`
  - `fulfillment_developer_productivity`
  - `customersdot_application`

For ~""group::billing and subscription management"":
  - `billing_and_payments`
  - `subscription_management`

For ~""group::commerce integrations"":
  - `commerce_integrations`

For ~""group::fulfillment admin tooling"": 
  - `fulfillment_admin_tooling`


## Feature Category tables

The tables below have been copy-pasted from [this issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4859). 

## Controllers

| Name | Current group / feature category | New feature category |
| ------ | ------ | ------ |
| `Admins::OmniauthCallbacksController` | ~""group::fulfillment platform"" | `customersdot_application` |
| `Customers::OmniauthCallbacksController` | ~""group::fulfillment platform"" | `customersdot_application` |
| `DeviseController` | ~""group::fulfillment platform"" | `customersdot_application` |
| `EmailConfirmationsController` | ~""group::fulfillment platform"" | `customersdot_application` |
| `Gitlab::NamespacesController` | ~""group::billing and subscription management"" | `subscription_management` |
| `GraphqlController` | ~""group::not_owned"" |  |
| `InstanceReviewController` | ~""group::utilization""  | `subscription_usage_reports` |
| `InstanceReviewSettingsController` | ~""group::utilization""  | `subscription_usage_reports` |
| `InvoicesController` | ~""group::billing and subscription management"" | `billing_and_payments` |
| `LicensesController` | ~""group::provision"" | `sm_provisioning` |
| `MarketoController` | ~""group::fulfillment platform"" | `customersdot_application` |
| `OrdersController` | ~""group::purchase"" | `purchase` |
| `PaymentFormsController` | ~""group::purchase"" | `purchase` |
| `PaymentMethodsController` |  ~""group::billing and subscription management"" | `billing_and_payments`  |
| `PlansController` | ~""group::fulfillment platform"" | `customersdot_application` |
| `CouponsController` | ~""group::purchase"" | `purchase` |
| `RailsAdmin::ApplicationController` | ~""group::fulfillment platform"" | `fulfillment_admin_tooling` |
| `RegistrationsController` | ~""group::fulfillment platform"" | `customersdot_application` |
| `SessionsController` | ~""group::fulfillment platform"" | `customersdot_application` |
| `SubscriptionUpgradesController` | ~""group::billing and subscription management"" | `subscription_management` |
| `Subscriptions::CommunityProgramController` | ~""group::billing and subscription management"" | `subscription_management` |
| `SubscriptionsController` | ~""group::not_owned"" |  |
| `TrialsController` | ~""group::not_owned"" | `saas_provisioning`  |
| `ZuoraCallbacksController` | ~""group::provision"" | `customersdot_application` |

## Workers

| Name | Current group / feature category | New feature category |
| ------ | ------ | ------ |
| `Platypus::CreateLeadWorker` | ~""group::commerce integrations""  | `commerce_integrations`  |
| `Platypus::MarkSubscriptionProvisionedWorker` | ~""group::commerce integrations""  | `commerce_integrations` |
| `Salesforce::CreateAccountWorker` | ~""group::commerce integrations"" | `commerce_integrations` |
| `Salesforce::CreateLeadWorker` | ~""group::commerce integrations"" | `commerce_integrations` |
| `Salesforce::CreateOpportunityForUpcomingReconciliationWorker` | ~""group::commerce integrations"" | `commerce_integrations` |
| `Salesforce::CreateOpportunityWorker` | ~""group::commerce integrations"" | `commerce_integrations` |
| `Salesforce::CreateQuoteForReconciliationWorker` | ~""group::commerce integrations"" | `commerce_integrations` |
| `Salesforce::FindOrCreateLeadWorker` | ~""group::commerce integrations"" | `commerce_integrations` |
| `ZuoraCallout::BaseWorker` | ~""group::provision"" | `customersdot_application` |
| `ZuoraCallout::OrderProcessedWorker` | ~""group::provision"" | `customersdot_application` |
| `ZuoraCallout::SubscriptionTermStartWorker` | ~""group::provision"" | `customersdot_application` |
| `CreateAmendmentWorker` | ~""group::billing and subscription management""  | `subscription_management`  |
| `SelfHostedUsageNotifier` | ~""group::utilization""  | `subscription_usage_reports` |
| `SkipReconciliationWorker` | ~""group::billing and subscription management"" | `subscription_management`  |
| `UpdateGitlabPlanInfoWorker` | ~""group::provision"" | `saas_provisioning` |
| `UpdateGitlabUpcomingReconciliationsWorker` | ~""group::billing and subscription management"" | `subscription_management` |
| `UpdateSubscriptionEoaStarterBronzeOfferWorker` | ~""group::billing and subscription management"" | `subscription_management` |
| `UpdateZuoraSubscriptionNamespaceDataWorker` | ~""group::provision"" | `saas_provisioning` |
| `ZuoraCallbackWorker` | ~""group::provision"" | `customersdot_application` |

## Jobs

| Name | Current group / feature category | New feature category |
| ------ | ------ | ------ |
| `AutoRenew::UpcomingNotificationCronJob` | ~""group::billing and subscription management""| `subscription_management`  |
| `AutoRenew::UpcomingNotificationJob` | ~""group::billing and subscription management""| `subscription_management` |
| `Gitlab::SyncMinutesJob` | ~""group::utilization"" | `subscription_usage_reports` |
| `Gitlab::SyncOrderJob` | ~""group::provision"" | `saas_provisioning`  |
| `HealthCheckCron::CheckGitlabJob` | ~""group::fulfillment platform"" | `fulfillment_infrastructure` |
| `HealthCheckCron::CheckZuoraJob` | ~""group::fulfillment platform"" | `fulfillment_infrastructure` |
| `Quality::TestAccountCleanupCronJob` | ~""group::not_owned"" | `fulfillment_developer_productivity` |
| `Reconciliations::SendSeatOverageNotificationJob` | ~""group::billing and subscription management""| `subscription_management` |
| `AutoRenewCronJob` | ~""group::billing and subscription management""| `subscription_management` |
| `AutoRenewJob` | ~""group::billing and subscription management""| `subscription_management` |
| `BulkDownloadInvoiceJob` | ~""group::billing and subscription management"" | `billing_and_payments` |
| `DownloadMonthlyInvoiceCronJob` | ~""group::billing and subscription management"" | `billing_and_payments` |
| `ExpireOrderCronJob` | ~""group::billing and subscription management"" | `subscription_management` |
| `ExpireOrderJob` | ~""group::billing and subscription management"" | `subscription_management` |
| `OrphanedComSubscriptionEmailCronJob` | ~""group::fulfillment platform"" | `customersdot_application` |
| `QueueReconciliationIntroEmailJob` | ~""group::billing and subscription management"" | `subscription_management` |
| `ReconciliationCronJob` | ~""group::billing and subscription management""  | `subscription_management` |
| `ReconciliationJob` | ~""group::billing and subscription management""  | `subscription_management` |
| `RetryDeclinedReconciliationJob` | ~""group::billing and subscription management"" | `subscription_management` |
| `SaasUpcomingReconciliationAlertJob` | ~""group::billing and subscription management""| `subscription_management` |
| `SendUpcomingReconciliationEmailJob` | ~""group::billing and subscription management""| `subscription_management` |
| `SubmitSeatUtilizationDataReminderCronJob` | ~""group::provision"" | `sm_provisioning` |
| `SubmitSeatUtilizationDataReminderJob` | ~""group::provision"" | `sm_provisioning` |
| `UnlinkedComSubscriptionNotificationJob` | ~""group::fulfillment platform"" | `customersdot_application` |
| `UpcomingReconciliationNotificationCronJob` | ~""group::billing and subscription management"" | `subscription_management` |
| `Zuora::*` | ~""group::not_owned"" | `customersdot_application` |",3
116913715,2022-10-14 18:15:25.767,Rename Account model to BillingAccount,"### Background

In today's [sync meeting](https://docs.google.com/document/d/1_YbxNCo3KXK1-KdIZTgSvmU9kIslYjQnFZAmmu1DSqQ/edit#heading=h.lif00r71v2kb), it was suggested that the `Account` model name could be improved by renaming to `BillingAccount`.  This should avoid confusion in thinking an `Account` in CustomersDot is the same as a GitLab `Organization`.

We also want to standardize naming across our Order to Cash systems in https://gitlab.com/groups/gitlab-org/-/epics/9018.  Given this, we've identified the column name `BillingAccount.name` should be `BillingAccount.zuora_account_name` to avoid confusion.

### Proposal

Rename the `Account` model to `BillingAccount` avoid confusion.  Given we are renaming `Account`, let's also rename `AccountMembership` as well.

- Rename model `Account` to `BillingAccount`
   - Rename DB table `accounts` to `billing_accounts`
- Rename model `AccountMembership` to `BillingAccountMembership`
   - Rename DB table `account_memberships` to `billing_account_memberships`

Also rename the column `BillingAccount.name` to `BillingAccount.zuora_account_name`.",2
116852923,2022-10-13 19:12:42.771,Investigate: `invoice.DMRC` mismatch during Renewal+Upgrade,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

During Renewal + Upgrade, `DMRC` for the invoice's rate plan charge when triggered by Amendment vs Orders API is different.

|  | Amendment API | Orders API |
|--|---------------|------------|
| Subscription link | [Link](https://apisandbox.zuora.com/platform/subscriptions/8ad0877b83babdd00183ce8be0050f0d) | [Link](https://apisandbox.zuora.com/platform/subscriptions/8ad09c4b83bacd5d0183ce8563260443) |
| Invoice Item ID | `8ad0877b83babdd00183ce8be0f40f29` | `8ad09c4b83bacd5d0183ce8565010532` |
| Rate Plan Charge ID | `8ad0877b83babdd00183ce8be0440f1d` | `8ad09c4b83bacd5d0183ce8563af046f` |
| DMRC | **0** | **1188** |

**Steps to reproduce**:

* Purchase a Premium Subscription
* Login to CDot
* In the subscription card, select 'Renew'
* Select Ultimate plan, enter quantity and submit

**Additional references**:

* See tab two (`Renewal + Upgrade`) in [spreadsheet](https://docs.google.com/spreadsheets/d/1mydR5iZd4709tLkKRal30vE3Xad1dsxGOzCwhiwB7HQ/edit#gid=179256484) for full comparison

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",2
116844100,2022-10-13 15:48:56.857,[UX] Navigation for CDot to represent new User/BillingAccount data structure,"## Problem

Right now a Customer record in CustomersDot represents a mixture of a physical user (Zuora Contact) and an Account (Zuora Customer Account). As discussed in https://gitlab.com/groups/gitlab-org/-/epics/8331+, this is a problem for a few reasons, leading to a variety of bugs. The ~""group::fulfillment platform"" team is working to correct this by introducing new data models to allow for Accounts and Account Memberships (and renaming Customers to Users to reduce confusion). Multiple Users in CDot should be able to be associated with a BillingAccount. On the flip side, one User record should be able to be associated with multiple BillingAccount (through BillingAccountMemberships).

The UI for CustomersDot currently only supports one User per BillingAccount and one BillingAccount per User. As we work on updating the data structure, we need to think about IA and navigational changes to allow an Account to have multiple billing managers and a User to have multiple BillingAccountMemberships.

## Proposal

Explore how the new data structure will impact the IA and navigation of CDot.

- How/where do Users manage their personal user data vs data associated with an BillingAccount(s)?
- How/where do Users associate additional Customers with an BillingAccount?
- If a User has multiple BillingAccount memberships, how does the choose which BillingAccount they are managing before the normal operations and features are shown, like Managing Purchases or Editing Account information?

While the output of this issue will be the final design/specs of the navigation for a customer with a single BillingAccount only, this issue will also explore, design, and validate navigation for customers with _multiple_ BillingAccounts (because we want to make sure that the navigation will scale to that use case).

### Information architecture

<details><summary>Click to expand</summary>

I wanted to understand how the new User/BillingAccount data architecture and IA will impact CDot navigation. 

:art: [Figma file](https://www.figma.com/file/6eubaRn3G9YP5PmVsHijlr/Navigation-for-CDot-to-represent-new-Customer%2FAccount-data-structure?node-id=0%3A1) for the explorations

#### Process

To start, I did a site map of the current state of CDot. I wanted to understand which information that currently lives under the User model will be moving to the BillingAccount model. Based on information in this [thread](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4799#note_1100958075) and https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4799 and https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4793, I highlighted all affected information/pages in blue. 

![image](/uploads/bf7ceeed3af0db542495d2969e15821c/image.png)

From there, I started reorganizing and grouping the information, making a clearer distinction between what information lives on the User model and what information lives on the BillingAccount model. The team has already ironed out these details as part of spike/exploration work in https://gitlab.com/groups/gitlab-org/-/epics/8331, so this is really just a visualization of that work and thinking through how a user might access it and interact with it.

![image](/uploads/061023388554b5acf03dd127f70ce8da/image.png)

Because it's important to think about the navigation and IA holistically, the site map is based on the end state of https://gitlab.com/groups/gitlab-org/-/epics/8331+. However, I also wanted to think about how this work breaks down and how it fits into the iterations that we've outlined in that Epic. 

I mapped out which parts of the experience would be tackled as part of each iteration (and other key Fulfillment projects like https://gitlab.com/groups/gitlab-org/-/epics/8905+).

![image](/uploads/ea4cd5f8b93442fa5ee5c5ed3d824d8a/image.png)

</details>

### Wireframes

**:clapper: Check out the [video walkthrough](https://youtu.be/pbT0Wn4kWJQ)! (5 1/2 minutes)**

Topics addressed in the video:

* How does the introduction of the BillingAccount impact the *current* information architecture of CDot?
* How will the information architecture change to support the BillingAccount structure?
* What navigation options have been explored to represent that BillingAccount relationship to the user?
* What are the next steps and how can I give feedback?

See [this comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4973#note_1285983310) for more details about the wireframes and how to give feedback.

### Visual designs

Based on the feedback on the wireframes, I explored a variety of different visual designs for the navigation. There were two different designs that moved forward into solution validation.

| Option 1: Dropdown switcher in the left sidebar | Option 2: Account info page header with button to switch Accounts  |
| ------ | ------ |
| ![image](/uploads/58178fbb675257b75fd0542ad5378707/image.png)  | ![image](/uploads/db830f150dd55f4350d26b7e9e0bf12a/image.png) |

### Prototypes

Each of the two visual design options were built out into full prototypes for user testing.

**Important note:** The content and design of many of the pages (such as the My accounts page, the Account details page, and the Billing managers page) is **not final or finished**. There are separate UX issues open to fully design and test these pages. But in order to test the navigation, there needed to be _something_ on those pages, so I threw together quick mockups for the purposes of the user test. 

**Prototype links**
  * [Navigation Option 1](https://www.figma.com/proto/iCqd9J7DOCTS7Q3CDcKdPX/Subscription-management?page-id=33%3A17506&node-id=87%3A27374&viewport=-22%2C1031%2C0.13&scaling=scale-down&starting-point-node-id=87%3A27374&disable-default-keyboard-nav=1&hotspot-hints=0&hide-ui=1)
  * [Navigation Option 2](https://www.figma.com/proto/iCqd9J7DOCTS7Q3CDcKdPX/Subscription-management?page-id=33%3A17506&node-id=125%3A36077&viewport=-20%2C2321%2C0.13&scaling=scale-down&starting-point-node-id=125%3A36077&disable-default-keyboard-nav=1&hotspot-hints=0&hide-ui=1)

### Solution validation 

**:clapper: Want a quick(ish) overview?** I put together an [overview video](https://www.youtube.com/watch?v=Bq4Ywc58ISk) (7 mins) walking through the goals of the research, the prototypes we tested, and the results.

**:book: Want to dig into the findings?** If you're interested in the more detailed insights, check out the solution validation [issue description](https://gitlab.com/gitlab-org/ux-research/-/issues/2149#what-did-we-learn). (You can also find the full research plan and links to the prototypes that we tested in that issue.)

## Final design and specs

#### :arrow_right: :art: [Figma link for final designs and specs](https://www.figma.com/file/iCqd9J7DOCTS7Q3CDcKdPX/Navigation-for-CDot-to-represent-User%2FBillingAccount-data-structure?node-id=265%3A29947&t=pjeyODWa9X6SfD3J-1)

**Important note:** The output of this issue is the final designs/specs for navigation for users with **only a single BillingAccount** (because in https://gitlab.com/groups/gitlab-org/-/epics/8951+, a user will only be able to have a single BillingAccount association).

![image](/uploads/4fb9fbc95c2e54c766b307c964b1a2bd/image.png)

## Follow-ups and next steps

- The design for the navigation for mobile/small screens will be handled in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/6051+
- While the navigation for users with multiple BillingAccounts has already been largely designed and validated in this issue, the final designs and specs will be handled in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4791+",5
116841687,2022-10-13 15:10:48.854,[Rollout plan] Orders API for subscription amendments,"The aim of this issue is to track the rollout of Orders API when updating (amending) a Zuora subscription.

#### Non-preview mode:

|Scenario|FF name|Testing issue| FF rollout issue | Status |
|--------|-------------|-------|------------------|--------|
|Upgrade Subscription| `use_orders_api_upgrade_workflow` | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5052  | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5050 | :white_check_mark: Enabled on production |
|Update Subscription <br/> <br/> Includes the following scenarios: <br/> - `Purchase additional seats` <br/> - `CI minutes purchase` <br/> - `Storage purchase` <br/> - `Renew without upgrade` <br/> - `Renew with upgrade` <br/> - `Renew with purchase of true ups` | `use_orders_api_subscription_update_workflow` | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5062 | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4775 | :white_check_mark: Enabled on production |
|Auto renewal| `use_orders_api_auto_renew_workflow` | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5065 | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5064 | :white_check_mark: Enabled on production |
|Reconciliation| `use_orders_api_reconciliation_workflow` | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5067 | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5066 | :white_check_mark: Enabled on production |
|Custom auto renew rake task| -NA- | -NA- | -NA- | It is a [one time rake task](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2285) that was completed a year ago. <br/> <br/> Confirmed the rake task is not required: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4784#note_1152442502. |

#### Preview mode:

|Scenario|FF name|Testing issue| FF rollout issue | Status |
|--------|-------------|-------------|------------| -------|
|Upgrade Subscription| `use_orders_api_to_preview_upgrade` | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5053 | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5051 | :white_check_mark: Enabled on production |
|Update Subscription <br/> <br/> Includes the following scenarios: <br/> - `Purchase additional seats` <br/> - `CI minutes purchase` <br/> - `Storage purchase` <br/> - `Renew without upgrade` <br/> - `Renew with upgrade` <br/> - `Renew with purchase of true ups` | `use_orders_api_to_preview_amendment` | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5063 | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4774 | :white_check_mark: Enabled on production |
|Upcoming reconciliation email job| `use_orders_api_to_preview_quoted_invoice_amount` | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5069 | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5068 | :white_check_mark: Enabled on production |
|Validating quoted invoice during reconciliation| `use_orders_api_to_preview_quoted_invoice_amount` | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5069 | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5068 | :white_check_mark: Enabled on production |
|Ineligibility for auto renewal notification job| `use_orders_api_preview_in_upcoming_saas_mailer` | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5071 | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5070 | :white_check_mark: Enabled on production |
|Upcoming auto renewal notification job| `use_orders_api_preview_in_upcoming_saas_mailer` | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5071 | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5070 | :white_check_mark: Enabled on production |
|Order Preview GraphQL endpoint| `use_orders_api_in_preview_graphql_resolver` | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5073 | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5072 | :white_check_mark: Enabled on production |",0
116836724,2022-10-13 14:25:56.614,Account details form updates BillingAccount model,"### Problem

The current Account details form in CustomersDot updates the `Customer` (to be renamed `User`) record which has ActiveRecord callbacks to update the Zuora Account and Zuora Contact.  The Zuora Contact updated by this callback is [simply the first Zuora Contact associated to the Zuora Account](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/58c2d92e7fb4892f2326423300e6b9f6267a9632/app/services/update_contact_service.rb#L26).  It is a known bug that if the Zuora Account has more than one Zuora Contact, there is no guarantee this logic updates the correct Zuora Contact.

For reference, here's what the page looks like currently:
![Screen_Shot_2022-09-12_at_6.02.09_PM](/uploads/34922ad336fcff352258ac3c31cda96c/Screen_Shot_2022-09-12_at_6.02.09_PM.png)

Now that `BillingAccount` information is being stored locally, this form should also update `BillingAccount` locally as well as in Zuora.

### Proposal

The Account details form should allow the following:
- Show and update (local) `BillingAccount` record
- Show and update (remote) Zuora Account
- Show and update (remote) Zuora Contact (the correct one)

The look of the form should not need to change in this iteration as the app still only allows one `BillingAccount` per `Customer` (to be renamed `User`).  This form will be updated in later iterations as well, both in https://gitlab.com/groups/gitlab-org/-/epics/8951+ and https://gitlab.com/groups/gitlab-org/-/epics/8986+.",3
116774753,2022-10-12 18:41:58.156,Customers with different BillTo/SoldTo contacts on the Zuora account are not receiving a Welcome email,"### Problem

As identified in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4924+, customers that are purchasing directly from GitLab via a Sales Rep are not receiving the Customers Portal [welcome email](https://gitlab.com/gitlab-org/customers-gitlab-com/uploads/92e7ac101afa342c73a8896285e83ef6/welcome-to-portal-email.png). This only happens if the Sales Order (and Zuora account) has different contacts for BillTo and SoldTo.

### Proposal

Per [suggestion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4924#note_1126792349) from `@tyleramos`:

>>>
I think if we agree that this logic is flawed, and the purpose of billable was to determine reseller subscriptions, we should probably just remove the `billable` column altogether. We already have an accurate way of calculating [subscriptions managed by resellers](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/01600a67144b2b47ba1857794f02ebb897a2e27b/lib/zuora/subscription.rb#L74) which is [used to determine the ](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/6d78d7ab5044fdb102e85f4f4709251f7384d99f/app/workers/zuora_callout/base_worker.rb#L25)`login_activated` boolean column when processing callouts.

We should be able to simply remove the logic and column for `billable` and the welcome email would be sent to new customers that have zuora accounts and their subscription wasn't managed by a reseller. That seems like the desired behavior. We would have no need to send the `bill_to_id` at that point too, so it would be some simplification of the code and the params in the configured callouts.
>>>

* Reference to code that triggers the welcome email: https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/a370c2b4b1a4fec50a6be2291c7b0ec7c73e0cd7/app/services/find_or_create_customer_service.rb#L79
* Reference to code where `billable` is set: https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/a370c2b4b1a4fec50a6be2291c7b0ec7c73e0cd7/app/services/find_or_create_customer_service.rb#L62

### Result

All customers that purchase directly from GitLab (not Reseller) will receive a [Welcome email](https://gitlab.com/gitlab-org/customers-gitlab-com/uploads/92e7ac101afa342c73a8896285e83ef6/welcome-to-portal-email.png).

### Next steps (if any)

### How will we measure success?",1
116773583,2022-10-12 18:12:19.591,Create proposal doc with ERD,"### Background

We would like to create a proposal document that lives in the customers-gitlab-com project.  This is a great way to spread awareness and create an SSoT for the overall scope of work involved in the epic.  This was identified as a goal in our weekly sync meeting agenda [here](https://docs.google.com/document/d/1_YbxNCo3KXK1-KdIZTgSvmU9kIslYjQnFZAmmu1DSqQ/edit?disco=AAAAhbdDiNI).",1
116759522,2022-10-12 14:26:57.597,Add proration custom attributes in subscription update response,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Similar to the addition in Order preview, the [proration custom attributes](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/ac19a2843ad59a38351558c4e77b2e4b90fd7ee7/app/services/amendment_base_service.rb#L82) needs to be included in the Order response when updating subscription.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Include proration custom attributes in [`Zuora::Orders::AmendmentManagerService#success`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/f38128d5dd47c74f02635ea12b823bb27799c3d8/app/services/zuora/orders/amendment_manager_service.rb#L71).

### Result

### Next steps (if any)

### How will we measure success?",1
116715263,2022-10-12 00:23:58.113,Enable use of Orders API in Auto renewal workflow,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

When auto renewing subscription in ReconciliationService and in Reconciliation workflow, FF use of Orders API.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",2
116711094,2022-10-11 22:08:49.082,[Reseller] Display a banner with info on how to modify a reseller-purchased subscription,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

## Problem

Customers that purchased their subscription through a reseller will be able to see but not modify that subscription (issue: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4946+)

It would be confusing to them why they aren't able to do anything to the subscription.

## Proposal

Display an alert at the top of the manage purchases page with a message to contact their reseller.

### Alert copy

>>>
**Some or all of your subscriptions are in read-only mode**

To make changes to a read-only subscription or purchase additional products, contact your GitLab Partner.
>>>

- [x] `@cfarris` reviewed and approved
- [x] `@esybrant` reviewed and approved  
- [x] `@fneill` reviewed and approved  

## Result

## Next steps (if any)

## How will we measure success?",2
116691310,2022-10-11 16:56:36.027,Do not set Service Activation Date in Orders API,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Service Activation date should not be explicitly set, but should inherit the value of Contract Effective Date. Also, we do not require Service Activation of Orders. (see related [conversation](https://gitlab.slack.com/archives/C037WQ2BUGK/p1665417907870689?thread_ts=1665414245.001139&cid=C037WQ2BUGK).

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

- In [`Zuora::Orders::Actions::BaseService`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/ac19a2843ad59a38351558c4e77b2e4b90fd7ee7/app/services/zuora/orders/actions/base_service.rb#L34), remove attribute `service_activation`
- In [TriggerDate](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/ac19a2843ad59a38351558c4e77b2e4b90fd7ee7/app/services/zuora/orders/entities/trigger_dates.rb#L20) entity, remove support for `service_activation`
- Update specs

### Result

Service Activation date is not set during Order creation in Zuora.

### Next steps (if any)

### How will we measure success?",2
116671308,2022-10-11 13:08:07.848,[Feature flag] Enable block_seat_overage_notification,"# Summary

<!-- Short description of what the feature is about and link to relevant other issues. -->

This issue is to rollout and cleanup [a feature to prevent enqueuing `SendSeatOverageNotificationJob` for certain namespaces](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4934) in CustomersDot production, that is currently behind the [`block_seat_overage_notification`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/165/edit) feature flag.

## Owners

- Team: ~""group::billing and subscription management"" 
- Most appropriate Slack channel to reach out to: `#g_billing_and_subscription_management`
- Best individual to reach out to: @jhyson @tyleramos
- PM: @tgolubeva 

## Stakeholders

<!--
Are there any other stages or teams involved that need to be kept in the loop?

- GITLAB_HANDLE of a PM
- The Support Team
- The Delivery Team
-->

## The Rollout Plan

- This feature was rolled out immediately in production to mitigate the issue that was bloating [our Sidekiq queues](https://customers.gitlab.com/sidekiq/).

## Expectations

### What are we expecting to happen?

When enabled, this feature will prevent the `SendSeatOverageNotificationJob` from being enqueued for specific GitLab namespace ids (currently just `10782951`).  See https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5582 for more info.

### What might happen if this goes wrong?

The feature flag should make it easier to toggle this blocking logic.  If it doesn't work, it's possible that the `SendSeatOverageNotificationJob` doesn't get blocked properly for the specified namespace.

### What can we monitor to detect problems with this?

We can monitor problems [in Sentry](https://sentry.gitlab.net/gitlab/customersgitlabcom/) or [in Sidekiq](https://customers.gitlab.com/sidekiq/).

## Rollout Steps

### Rollout on non-production environments

- [x] Ensure that the feature MRs have been deployed to non-production environments, i.e. `customers-staging`.
- [x] Consider announcing that the flag will be enabled to potentially impacted groups, e.g. `#s_fulfillment_engineering`
- [x] Enable the feature globally on non-production environments by applying the appropriate environment, e.g. `customers-staging` and `customers-development`.
- [x] Notify the Software Engineers in Test (SETs) for Fulfillment via Slack and in a comment in this issue when enabling a feature flag in `customers-staging` as it can impact the QA pipeline.
- [x] Verify that the feature works as expected. Posting the QA result in this issue is preferable.

### Preparation before production rollout

- [x] Ensure that the feature MRs have been deployed to production
- [x] Check if the feature flag change needs to be accompanied with a
  [change management issue](https://about.gitlab.com/handbook/engineering/infrastructure/change-management/#feature-flags-and-the-change-management-process).
  Cross link the issue here if it does.
- [x] Ensure any documentation has been updated
- [x] Announce on [the feature issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4934) an estimated time this will be enabled on production if applicable

### Global rollout on CustomersDot production

- [x] Confirm the feature flag is enabled on `staging` without incident
- [x] Roll out the feature to targeted testing users first (if applicable)
- [x] If applicable, [incrementally roll out](https://docs.gitlab.com/ee/operations/feature_flags.html#percent-rollout) the feature.
- [x] Verify the change has the desired outcome with the limited rollout before enabling the feature globally on production.
- [x] Enable the feature globally on production environment
- [~] Announce on [the feature issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4934) that the feature has been globally enabled.
- [x] Wait for [at least one day for the verification term](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release).

### Release the feature

After the feature has been [deemed stable](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release),
the clean up should be done as soon as possible to permanently enable the feature and reduce complexity in the codebase.

<!-- The checklist here is to help stakeholders keep track of the feature flag status -->
- [x] Ensure https://gitlab.com/gitlab-org/gitlab/-/issues/358080 has been resolved before removing the feature flagged code.
- [x] Create a merge request to remove `block_seat_overage_notification` feature flag
  - [x] Remove all references to the feature flag from the codebase
- [x] Ensure that the cleanup MR has been deployed to both staging and production
- [x] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [x] Ensure production environment is still working as expected
- [x] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [x] Close this rollout issue.

## Rollback Steps

- [ ] This feature can be disabled by performing the following actions:
  - [ ] Disable the Unleash flag on the [feature flag page](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/165/edit)",1
116614517,2022-10-10 21:36:23.684,[Reseller] Hide subscription management buttons for a subscription purchased via a reseller,"## Problem

Subscriptions purchased via a Reseller should not be amended via the Customers Portal. 

Any subscription changes should be done via the Reseller (and not the customer), since Resellers are responsible for paying the related invoices.

For screenshots of the current experience for Reseller customer (if they were able to login) see https://gitlab.com/gitlab-org/fulfillment-meta/-/issues/809+.


## Proposal

Hide the following buttons on the subscription card if the subscription is managed by a reseller:

- Add Seats
- Upgrade
- Resume
- Cancel
- Renew
- Buy additional CI Minutes
- Buy additional Storage

Looks like we have a `subscription.managed_by_reseller?` method in the code.

### SM Subscription card

All buttons should be removed. 

![cdot-sm-subscription-card-crossed](/uploads/268a4f53a15dd0972e6512e9a0559ac0/cdot-sm-subscription-card-crossed.png)

### SaaS Subscription card

The only button we need to keep is `Change linked namespace`

![cdot-saas-subscription-card-crossed](/uploads/0eba0eec5a61f0a15a8f87d25d623860/cdot-saas-subscription-card-crossed.png)

**Note:** Hiding the `Buy new subscription` button will be tackled in this issue - https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5074

## Implementation breakdown
| Description | MR |
| ------ | ------ |
| :one: Hide CI minutes button | https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5695|
| :two: Hide buy storage button| https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5719/ |
| :three: Hide upgrade plan button | https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5728 |
| :four: Hide add seats button | https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5729/ |
| :five: Hide renew button | https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5730  |
| :six: Hide cancel and resume button | https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5731 |


## Result

Reseller customer will not be able to amend their subscription.

### Next steps (if any)

### How will we measure success?",3
116596617,2022-10-10 16:07:01.324,Set appropriate billing options when updating a subscription,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

When updating a subscription using Orders API, set billing options as described below:

| Attribute | Value |
| ------ | ------ |
| `target_date` | If subscription has expired, set to current date. <br/> Default to Subscription term end date |
| `document_date` | Current date |
| `document_date` | Current date |
| `process_payments` | Based on `params[:process_payments]` |
| `payment_method_id` | Based on whether `params[:payment_method_id]` is present |

These attributes are inline with the existing [Amend API](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/60e7bfca2087f17bc06104474ca1b0a3f5b9bb9c/app/services/amendment_base_service.rb#L192).

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Update billing params and remove setting of service activation date as described in the Problem statement.

### Result

### Next steps (if any)

### How will we measure success?",2
116421407,2022-10-06 17:37:12.457,SendSeatOverageNotificationJob continually enqueued for the same namespace,"### Problem

We noticed the sidekiq queue in CDot growing endless and it seems the same job, `Reconciliations::SendSeatOverageNotificationJob`, is being enqueued over-and-over with the same params.  More info in [this Slack thread](https://gitlab.slack.com/archives/CL7SX4N86/p1665070227457529).

Our current pending Sidekiq queue count is 23,646 and growing.  You can see the reconciliations queue at https://customers.gitlab.com/sidekiq/queues/reconciliations

### Proposal

We can work on a short-term fix to block the particular namespace id, `10782951`, for the numerous jobs, until we determine a better long-term solution.",1
116378634,2022-10-06 06:28:28.136,"Follow-up from ""Set default payment before an upgrade""","The following discussion from !5518 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5518#note_1122714925): 

    > **Thought (no change necessary):** I was noticing some similarities (you may have as well) between this method and the `set_default_payment_method` [in `::Zuora::Helpers::PaymentMethod`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/42542df5fa778f782ae3ccefc21f04711eb0a1f3/app/services/zuora/helpers/payment_method.rb#L21).  There is even a `payment_method_id` method defined there.  
    > 
    > I wonder if there is room for refactoring to combine these in the future? There is a difference in setting `auto_pay` but we may be able to define that in a flexible way.  Anyway, just a thought for the future perhaps.",2
116359301,2022-10-05 20:10:17.122,Update setup instructions to include setting salesforce secrets,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

With unset salesforce values in `secrets.yml`, mailer preview will no longer generate.

### Proposal

Update the readme to list instructions for setting the salesforce secrets",1
116353393,2022-10-05 19:06:20.403,[Error Budget] Investigate `MaxAdditionalSeatsExceededError`,"From: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4918#note_1124235188  
Sentry: https://sentry.gitlab.net/gitlab/customersgitlabcom/?query=is%3Aunresolved+lastSeen%3A%2B1d+maxadditional

This error seems like valid business logic and not an application exception. We should stop raising an error where appropriate so we're not reporting these as errors.",2
117773634,2022-10-05 16:13:35.939,[SPIKE] Investigate on improving SubscriptionController#create response time,"According to the kibana query below, we see that the endpoint: `SubscriptionsController#create` has the worst Appdex, with `515` operations over the threshold out of `674`.

This issue is a placeholder to dig deeper into the request and try to find a way to improve the response time.

1. **Rails Requests Apdex**: slow requests exceeding the threshold along with total number of request

![Screenshot_2022-10-05_at_17.57.45](/uploads/98ae6e9ec9d4f4fbfbbcae0eef4fe86a/Screenshot_2022-10-05_at_17.57.45.png)

[Kibana log](https://log.gprd.gitlab.net/app/kibana#/visualize/create?type=table&indexPattern=7092c4e2-4eb5-46f2-8305-a7da2edad090&_a=(filters:!((meta:(key:json.subcomponent,negate:!t,params:graphql_json,type:phrase),query:(match:(json.subcomponent:(query:graphql_json,type:phrase)))),(meta:(key:json.meta.feature_category,params:!(purchase),type:phrases),query:(bool:(minimum_should_match:1,should:!((match_phrase:(json.meta.feature_category:purchase)))))),(meta:(key:exists,type:json.duration_s,value:exists),query:(exists:(field:json.duration_s))),(meta:(key:exists,type:json.target_duration_s,value:exists),query:(exists:(field:json.target_duration_s)))),query:(language:kuery,query:''),vis:(aggs:!((enabled:!t,id:'1',params:(),schema:metric,type:count),(enabled:!t,params:(field:json.meta.caller_id.keyword,missingBucket:!f,missingBucketLabel:Missing,order:desc,orderBy:'3',otherBucket:!t,otherBucketLabel:Other,size:5),schema:bucket,type:terms),(enabled:!t,params:(field:json.request_urgency.keyword,missingBucket:!f,missingBucketLabel:Missing,order:desc,orderBy:'3',otherBucket:!t,otherBucketLabel:Other,size:5),schema:bucket,type:terms),(enabled:!t,params:(field:json.target_duration_s,missingBucket:!f,missingBucketLabel:Missing,order:desc,orderBy:'3',otherBucket:!t,otherBucketLabel:Other,size:5),schema:bucket,type:terms),(enabled:!t,id:'3',params:(customLabel:'Operations+over+specified+threshold+(apdex)',field:json.duration_s,json:'%7B%22script%22:+%22doc%5B!'json.duration_s!'%5D.value+%3E+doc%5B!'json.target_duration_s!'%5D.value+?+1+:+0%22%7D'),schema:metric,type:sum))))&_g=(time:(from:'now-3d',to:'now')))


2. **Rails slow requests**: Top slow requests

![Screenshot_2022-10-05_at_18.09.53](/uploads/43fad2671ebd5fe5717b14d97e10bcab/Screenshot_2022-10-05_at_18.09.53.png)

[Kibana log](https://log.gprd.gitlab.net/app/discover#/?_a=h@7842932&_g=(time:(from:'2022-10-05T09:37:00.000Z',to:'2022-10-05T15:37:59.999Z')))",3
116309745,2022-10-05 09:40:27.771,'License seat links' - customer field has incorrect URL,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

The customer field in the 'License seat links' view links to the customer information in the `Customer` view. \
The URL is incorrect though.

Currently: https://customers.gitlab.com/admin/RailsAdmin::Customer/6057 \
Should be: https://customers.gitlab.com/admin/Customer/6057

### Proposal

Fix URL

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

Clicking on a customer name in the 'License seat links' view will open the customer information in the `Customer` view.

### Next steps (if any)

### How will we measure success?",1
116275359,2022-10-04 18:06:21.025,"Follow-up from ""FF use of Orders API in Upgrade workflow""","The following discussion from !5539 should be addressed:

- [ ] @aish.sub started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5539#note_1122624105):  (+2 comments)

    > **note**: I wonder if it will be better (helpful?) to update this custom action to `add_main_product_during_renewal` in order to make it explicit (similar to `add_main_product_during_upgrade`) :thinking:",1
116033419,2022-09-29 19:22:28.938,[Documentation & Learning] Cloud License Activation,,1
116033367,2022-09-29 19:21:45.287,[Documentation & Learning] True-Up Logic,"## Documentation

* https://gitlab.com/gitlab-org/gitlab/-/blob/aaa552b248b3af6dd2a4de88173fff7bfe85f4e1/doc/subscriptions/self_managed/index.md#users-over-license
* https://gitlab.com/gitlab-org/gitlab/-/blob/30adf0ce90db1326e9e53388aae26b3266651033/doc/subscriptions/quarterly_reconciliation.md#quarterly-reconciliation-and-annual-true-ups
* https://gitlab.com/gitlab-org/fulfillment-meta/-/issues/510+
* https://about.gitlab.com/handbook/business-technology/enterprise-applications/quote-to-cash/troubleshooting/#true-ups-adding-seats-users


## Learning

* The true-up logic can be simplified by skipping it for Cloud Licenses (https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5483).
* Introduce the ability to revoke cloud licenses (activation codes, https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5486).
* Define a process to recognize and require payment for overages (separate from removing true-ups) https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5299",1
116033322,2022-09-29 19:20:30.359,[Documentation & Learning] Legacy License Provisioning,"## Step 1: Documentation & Learning

* [x] You feel the existing document is accurate, current, and thorough.
* [-] You have engaged `@courtmeddaugh` / `@fneill` as needed for assistance if you feel business or customer-facing documentation should be updated.
* [x] You have a strong enough understanding of the process to be able to host a knowledge share session.",2
122493434,2022-09-29 16:59:52.699,Create activation code for all SM subscriptions (even when TurnOnCloudLicensing = No),"## Background
There is one remaining bucket of customers for whom no cloud activation is created, meaning there no way for them to access an activation code other than requesting one be created by the support team:
* Customers with `TurnOnCloudLicensing` = `No` - we do not generate a cloud activation for explicitly opted out customers

## Proposal
Update the activation code logic to create an activation code for all Self-Managed subscriptions, so that even opted out customers have the option of activating with cloud licensing.

## Experience
When a customer has `TurnOnCloudLicensing` = `No` (opted for a legacy license), but an activation code exists, we show an expandable banner with both the legacy license available for download and the activation code:


![image](/uploads/3b360a2fbacae9aed15e0a97cf492293/image.png)

## Next Steps
Once this is closed, we should backfill any active Self-Managed subscriptions that do not have an activation code available (https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5604).",2
116027508,2022-09-29 16:29:57.567,[Backfill] Create activation codes for subscriptions on legacy licenses pre-SCL,"## Background
https://gitlab.com/gitlab-org/fulfillment-meta/-/issues/589+ defines the process for customers to activate with Cloud Licensing mid-term if they already have an active legacy license subscription. For most customers, a Support ticket is required to move to Cloud Licensing.

To make it easier for these customers to self-activate with Cloud Licensing, this issue will evaluate the possibility of mass-generating activation codes for customers that do not have one.

## Details
Today, the Customer Portal subscription activation display banner for `TurnOnCloudLicensing` = `null` has a dependency on if an activation code exists.
* If activation code exists: display legacy download option only
* If activation code does not exist: display activation code only

As of September 2022, we are creating activation codes for all subscriptions where `TurnOnCloudLicensing` is not = `No`. However, prior to SCL launch (July 2022), we did not create activation codes for these subscriptions.

## Proposal
1. Query the subscription names with `TurnOnCloudLicensing` set to `null` and `Status = ""Active""` in Zuora (with a Data Query, [example](https://apisandbox.zuora.com/platform/data-query/queries/20e2a75f-8e30-4ea6-b922-a0a73c80efde)) and then cross check those with existing cloud activations. 
2. If no cloud activation exists for the subscription name, create one.
3. In doing so, ensure we do NOT send customers emails with the activation code (to avoid confusion).

## Result
All customers (who did not explicitly opt out of Cloud Licensing, `TurnOnCloudLicensing` = `No`) will have a cloud license activation code available for download visible in the Customer Portal, allowing for mid-term activations of cloud licensing without the need for a support ticket.",3
115954457,2022-09-28 18:57:41.145,Perform Post Order creation steps for amendment,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Once a subscription is amended, there are a few post order creation steps that is performed:

- Update EoA starter/bronze offer
- mark coupon as redeemed

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Perform the above listed steps when applicable in `Zuora::Orders::PostCreationService`

### Result

### Next steps (if any)

### How will we measure success?",2
115897852,2022-09-28 04:27:03.423,Improve SeatLink Apdex score,"### Problem

~""group::provision"" [apdex customersdot rails_requests failure is high](https://dashboards.gitlab.net/d/stage-groups-detail-provision/stage-groups-provision-group-error-budget-detail?orgId=1&from=now-24h&to=now&viewPanel=14). For the past 7 days the [apdex failure ratio is 47255/93360](https://dashboards.gitlab.net/d/stage-groups-detail-provision/stage-groups-provision-group-error-budget-detail?orgId=1&from=now-7d&to=now&viewPanel=14). It is holding back our overall error budget.

By sorting the averge on [Grafana ranking](https://dashboards.gitlab.net/d/stage-groups-detail-provision/stage-groups-provision-group-error-budget-detail?orgId=1&from=now-24h&to=now&viewPanel=44), `Api::V1::SeatLinksController#create` seems to be the largest contributing factor. It usually peaks around 4 AM UTC each day at -50% mark. E.g. in CDot production log, I found one request taking 7s.

### Proposal

We should first gather stats on request time in order to see how the distribution and average looks like. Since we don't have log.gitlab.net for CDot this will take some manual effort.

Engineering-wise, we can look into reducing seat link time. 

The peak probably means a large number of self-managed instances are concentrated in the same timezone. We may also look into spreading the sync time further apart. 

Product management-wise: we may have to consider increase the request threshold (urgency). According to [Rails request Apdex SLI doc](https://docs.gitlab.com/ee/development/application_slis/rails_request_apdex.html#decreasing-the-urgency-setting-a-higher-target-duration), automated process is not user face therefore it makes sense to have a lower urgency.

### Result

Reduce the number of apdex errors.

### Next steps (if any)

### How will we measure success?

A healthier [apdex percentage](https://dashboards.gitlab.net/d/customersdot-main/customersdot-overview?orgId=1&viewPanel=23&from=now-7d&to=now) of less than -5%.",8
115885543,2022-09-27 21:01:27.458,Update the admin_access feature spec,"### Summary

`spec/features/rails_admin/admin_access_spec.rb` Covers the actions an Admin has access to per model via the Admin app.

This test is out of date. It needs to be updated to account for the addition of:
- Cloud Activations
- Trading Partners
- Provisions",1
115802819,2022-09-26 18:51:05.619,Cloud License activation failure when future dated renewal and past subscription trueups,"# Bug

## Summary

When activating a cloud license for the first time (especially when coming from legacy), the cloud license is generated using the subscription version that better ""fits"" the activation moment / date.

Per @vshumilo:

> The subscription version is resolved [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/df807833e9e1b346bde9a0c0d2adf37a6ab89209/app/models/cloud_activation.rb#L23) using [this logic](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/df807833e9e1b346bde9a0c0d2adf37a6ab89209/lib/zuora/subscription.rb#L70-L72)
> 
> Additional context
> - This decision was per-design to allow a customer that is in the middle of a subscription term to upgrade to cloud license we decided to use the current subscription version (applicable at the moment of the activation)
> - The specific logic on how this current subscription is resolved changed ~1 month ago, current one should be more accurate. Is this something you have seen reported in the last month or since the release of cloud activation?

However, in some cases when the following conditions are also true:

1. A future-dated renewal amendment exists
2. The current, pre-renewal version of the subscription has true-ups

The cloud license being generated is failing to activate until at least the start date of the renewal term when the license gets generated with the most recent version of the subscription.

It seems to be related to true-up checking (documented in at least 2 of the reported examples), and possibly current billable users since the trueup logic includes a [fallback check on current users](https://gitlab.com/gitlab-org/gitlab/-/blob/066245b248aa8df95958302656b252705d0f74fc/ee/app/models/license.rb#L507-508) that would normally be skipped in cloud licenses.

Currently unknown why the true-up logic would be failing, even for the current (non-renewal) term; in theory it should be generating a license that works the same as it did at the start of the current term.  It's using `trueup_from` and `trueup_to` of the current period, in other words, `trueup_from == current_starts_at - 1 year` and `trueup_to == current_starts_at`

[example ticket](https://gitlab.zendesk.com/agent/tickets/329201)  
[example customer](https://customers.gitlab.com/admin/customer/205112/edit)  
[example cloud license](https://customers.gitlab.com/admin/license/1043282)

## Steps to reproduce

1. Be on legacy license
2. Have your current term subscription include true-ups
3. Adjust user counts in a way that prevents your current license from being reactivated
   - Either increase your billable users count, or your max historical (for current term)
4. Try to convert to cloud license prior to renewal

## Proposed fix

It's really the trueup logic at fault here, since that both re-validates current term trueups and also contains a current users check (which would be skipped without `License#check_trueup` being called).  Because these numbers can change over the course of a year, re-activating the current term license may be impossible.

Sidenote: Perhaps this highlights the [discussions in this issue](https://gitlab.com/gitlab-org/fulfillment-meta/-/issues/511).

1. Skip all of `License#check_users_limit`, `License#check_trueup`, and `License#check_restricted_user_count` when renewing or prior to renewing from legacy to cloud license the first time.
 
## Workarounds

1. Wait until start date of the renewal period

## Reported examples

1. https://gitlab.zendesk.com/agent/tickets/329201
1. https://gitlab.zendesk.com/agent/tickets/325200
1. https://gitlab.zendesk.com/agent/tickets/322732
1. https://gitlab.zendesk.com/agent/tickets/324490
2. https://gitlab.zendesk.com/agent/tickets/328920
3. https://gitlab.zendesk.com/agent/tickets/340797
4. https://gitlab.zendesk.com/agent/tickets/342180
5. https://gitlab.zendesk.com/agent/tickets/342994 (result of manual legacy)
6. https://gitlab.zendesk.com/agent/tickets/344686 (result of manual legacy)
7. https://gitlab.zendesk.com/agent/tickets/360298 (result of manual legacy)
8. https://gitlab.zendesk.com/agent/tickets/375405 (current billable, `check_restricted_user_count`)

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",2
115662608,2022-09-23 11:51:39.923,[Spike] Backporting Cloud License fixes to 14.1,"With the efforts for [Strict Cloud License](https://gitlab.com/groups/gitlab-org/-/epics/7088) and [Cloud License Follow-Ups](https://gitlab.com/groups/gitlab-org/-/epics/8187) we should look at which Cloud License ~""type::bug""  fixes we should backport to [Cloud License V1](https://gitlab.com/groups/gitlab-org/-/epics/1878), so customers upgrading to this version don't experience issues fixed down the road.

An example of this could be this issue: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4688.",3
115645252,2022-09-23 08:05:49.046,Migrate CustomersDot Ansible to gitlab-org,"This issue provides a checklist that will support the migration of [the CustomersDot Ansible project](https://gitlab.com/gitlab-com/gl-infra/customersdot-ansible) to the `gitlab-org` group.

## Main information

- Date and time of migration: November 3rd 2022, 10am UTC (duration: 1 hour)

- Former project URL: https://gitlab.com/gitlab-com/gl-infra/customersdot-ansible
- (Proposed) New project URL: https://gitlab.com/gitlab-org/customers-ansible

- CustomersDot Documentation MR: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5520
- CustomersDot Ansible Documentation MR: https://gitlab.com/gitlab-com/gl-infra/customersdot-ansible/-/merge_requests/316
- Runbooks MR: https://gitlab.com/gitlab-com/runbooks/-/merge_requests/5019
- CustomersDot `.gitlab-ci.yml` MR: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5522

## Checklist

### Preparation

1. [x] Make sure that someone in the Fulfillment team can proceed to do [the project transfer](https://docs.gitlab.com/ee/user/project/settings/index.html#transfer-a-project-to-another-namespace). We need someone who's both the Owner of `customersdot-ansible` and has the `Maintainer` role for the `gitlab-org` group.
    - Access request issue: https://gitlab.com/gitlab-com/team-member-epics/access-requests/-/issues/18088

1. [x] Prepare the following MRs. Get them approved and ready to be merged, but **do not** merge them.
    1. [x] Prepare an MR to update all CustomersDot Ansible references in the documentation (ie. `README.md`, `doc/` folder, comments) for both the CustomersDot and the Ansible projects.
    1. [x] Prepare an MR that updates all CustomersDot Ansible references in the Runbooks project.
    1. [x] Prepare an MR that updates CustomersDot Ansible references in CustomersDot's `.gitlab-ci.yml`

1. [x] When items above are completed, choose a date and time to do the transfer and announce it in the `#s_fulfillment` Slack channel.

### Project transfer!

1. [x] Create a [new CustomersDot issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/new) with a ~""production::blocker"" label.
    - Use this issue: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5092

1. [x] Create a [new CustomersDot Ansible issue](https://gitlab.com/gitlab-com/gl-infra/customersdot-ansible/-/issues/new) with a ~""provisioning blocker"" label.
    - Use this issue: https://gitlab.com/gitlab-com/gl-infra/customersdot-ansible/-/issues/162

1. [x] Delete all existing images: https://docs.gitlab.com/ee/user/packages/container_registry/index.html#limitations
   1. [x] Double-check the current version of [Docker images in the former project](https://gitlab.com/gitlab-com/gl-infra/customersdot-ansible/container_registry) and take note of them:
      - customersdot-ansible: `v0.0.1`
      - molecule-environment: `v0.0.1`

1. [x] Proceed to [transfer the project to `gitlab-org`](https://docs.gitlab.com/ee/user/project/settings/index.html#transfer-a-project-to-another-namespace).

1. [x] Rebuild the Docker images and push them
   1. [x] Make sure you're logged in to the new (migrated) project's registry.
   1. [x] Rebuild Docker images locally (verify version numbers) and push them to the new project's registry:
       ```bash
       # customers-ansible image
       docker build --no-cache -f Dockerfile -t registry.gitlab.com/gitlab-org/customers-ansible:v0.0.1 .
       docker push registry.gitlab.com/gitlab-org/customers-ansible:v0.0.1

       docker build --no-cache -f Dockerfile -t registry.gitlab.com/gitlab-org/customers-ansible:stable .
       docker push registry.gitlab.com/gitlab-org/customers-ansible:stable

       # molecule-environment image
       docker build --no-cache -f test/docker/molecule-environment/Dockerfile -t registry.gitlab.com/gitlab-org/customers-ansible/molecule-environment:v0.0.1 .
       docker push registry.gitlab.com/gitlab-org/customers-ansible/molecule-environment:v0.0.1

       docker build --no-cache -f test/docker/molecule-environment/Dockerfile -t registry.gitlab.com/gitlab-org/customers-ansible/molecule-environment:latest .
       docker push registry.gitlab.com/gitlab-org/customers-ansible/molecule-environment:latest
       ```

### Post-transfer tasks and tests

1. [x] Merge the CustomersDot `.gitlab-ci.yml` MR.

1. [x] Test new configuration:
    - [x] [Provision manually](https://gitlab.com/gitlab-com/gl-infra/customersdot-ansible/blob/8873ad26f8c025db03d86a5fd527dc58d7c64fa0/doc/readme.md?plain=0#manual-provisioning).
    - [x] [Deploy manually](https://gitlab.com/gitlab-com/gl-infra/customersdot-ansible/blob/8873ad26f8c025db03d86a5fd527dc58d7c64fa0/doc/readme.md?plain=0#manual-deployment-to-production).

1. [x] Review that existing CustomersDot Ansible issues, epics, etc, can be found.

1. [x] Close the ~""production::blocker"" CustomersDot issue.

1. [x] Close the ~""provisioning blocker"" CustomersDot Ansible issue.

1. [x] Ask everyone in `#s_fulfillment` to update their project remote:
    ```bash
    # cd into local customersdot-ansible project
    git remote remove origin
    git remote add origin git@gitlab.com:gitlab-org/customersdot-ansible.git
    ```
    Let them know that deployments have resumed as well.

1. [x] Merge the two Documentation MRs.

1. [x] Merge the Runbooks MR.

1. [x] Apply ~""group::fulfillment platform"" to all issues that are already tagged with the ~""Fulfillment::InfraDev"" label.",2
115616749,2022-09-22 17:44:03.388,[Feature flag] Enables Zuora Billing Account based architecture,"<!-- Title suggestion: [Feature flag] Enable description of feature -->

# Summary

This issue is to rollout [Zuora Billing Account as a Customer Account](https://gitlab.com/groups/gitlab-org/-/epics/8331) on CustomersDot production,
that is currently behind the [`account_data_structure`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/160/edit) feature flag.

## Owners

- Team: ~""group::fulfillment platform"" 
- Most appropriate Slack channel to reach out to: `#g_fulfillment_platform`
- Best individual to reach out to: @tyleramos or @vshumilo 
- PM: @mgass1  

## Stakeholders

- Support (@mdunninger @ffarukh)
- Finance (@s_mccauley @annapiaseczna)

## The Rollout Plan

Percentage Rollout on CustomersDot

## Expectations

### What are we expecting to happen?

##### For all self served orders 

**First purchase**

- The creation of an `Account` object in CustomersDot as a counterpart to the Zuora Billing Account that will be created in Zuora. 
- The creation of an `AccountMembership` record in CustomersDot that will associate the Customer that made the purchase to the created `Account`.
- The SFDC associated account id information will be stored at the created `Account` level.

**Subsequent orders for the same Account**

Will reuse the Account created in the first step. Future orders might be initiated by the same or another Customer. A Customer initiating an order will be already associated to the account via an AccountMembership record to be able to place the order so the creation of this membership is not mentioned here.

##### For sales assisted orders will result in: 
- The creation of a `Customer` based on the provided information that will be reused as the Bill To / Sold To contact at the Zuora Account Level.
- The creation of an `Account` object in CustomersDot as a counterpart to the Zuora Billing Account.
- The creation of an `AccountMembership` based on the before mentioned Account and Customer.

**Subsequent orders for the same Account**

Will reuse the Account created in the first step. _To be reviewed: If the new order is associated to a different contact (different email) then we might create a new Customer + Account Membership in CustomersDot._

### What might happen if this goes wrong?

- Purchase flow will not work within CustomersDot.
- Provision for sales assisted orders will not work.

### What can we monitor to detect problems with this?

- Keep an eye on [Sentry](https://sentry.gitlab.net/gitlab/customersgitlabcom/#).
- Check `#s_fulfillment_daily` for errors.
- Verify provisions are being fulfilled within the Provision Tracking System (Admin > Provisions)

## Rollout Steps

### Rollout on non-production environments

- [x] Ensure that the feature MRs have been deployed to non-production environments, i.e. `customers-staging`.
- [x] Ensure that the rake task to backfill Account and AccountMembership (introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4798) has been run and verified.  This data must be populated before we enable the feature flag in the environment.
    - [x] `RAILS_ENV=stg ~/.rbenv/shims/bundle exec rake data_maintenance:billing_accounts:backfill_with_customers[false]`
    - [x] `RAILS_ENV=stg ~/.rbenv/shims/bundle exec rake data_maintenance:billing_accounts:backfill_cloud_activations[false]`
    - [x] `RAILS_ENV=stg ~/.rbenv/shims/bundle exec rake data_maintenance:billing_accounts:backfill_licenses[false]`
    - [x] `RAILS_ENV=stg ~/.rbenv/shims/bundle exec rake data_maintenance:billing_accounts:backfill_orders[false]`
- [x] Consider announcing that the flag will be enabled to potentially impacted groups, e.g. `#s_fulfillment_engineering`
   - https://gitlab.slack.com/archives/C029YFPUA6M/p1674229395068479
- [x] Enable the feature globally on non-production environments by applying the appropriate environment, e.g. `customers-staging` and `customers-development`.
- [x] Notify the Software Engineers in Test (SETs) for Fulfillment via Slack and in a comment in this issue when enabling a feature flag in `customers-staging` as it can impact the QA pipeline.
   - https://gitlab.slack.com/archives/C029YFPUA6M/p1674229669719009?thread_ts=1674229395.068479&cid=C029YFPUA6M
- [x] Verify that the feature works as expected. Posting the QA result in this issue is preferable.

### Preparation before production rollout

- [x] Ensure that the feature MRs have been deployed to production
- [x] Ensure [test plan](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5555) had been executed successfully
- [x] Ensure that the rake task to backfill Account and AccountMembership (introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4798) has been run and verified.  This data must be populated before we enable the feature flag in the production environment.
    - [x] `RAILS_ENV=production ~/.rbenv/shims/bundle exec rake data_maintenance:billing_accounts:backfill_with_customers[false]`
    - [x] `RAILS_ENV=production ~/.rbenv/shims/bundle exec rake data_maintenance:billing_accounts:backfill_cloud_activations[false]`
    - [x] `RAILS_ENV=production ~/.rbenv/shims/bundle exec rake data_maintenance:billing_accounts:backfill_licenses[false]`
    - [x] `RAILS_ENV=production ~/.rbenv/shims/bundle exec rake data_maintenance:billing_accounts:backfill_orders[false]`
- [x] Check if the feature flag change needs to be accompanied with a
  [change management issue](https://about.gitlab.com/handbook/engineering/infrastructure/change-management/#feature-flags-and-the-change-management-process).
  Cross link the issue here if it does.
- [x] Ensure that you or a representative in Fulfillment can be available for at least 2 hours after feature flag updates in production.
  If a different developer will be covering, or an exception is needed, please inform the Fulfillment team in #s_fulfillment_engineering
- [x] Ensure any documentation has been updated
- [x] Announce on [the feature epic](https://gitlab.com/groups/gitlab-org/-/epics/8950) an estimated time this will be enabled on production if applicable
- [x] If the feature might impact the user experience, notify `#s_fulfillment` and potentially `#support_gitlab-com`, as well as your team channel ([more guidance when this is necessary in the dev docs](https://docs.gitlab.com/ee/development/feature_flags/controls.html#communicate-the-change)).

### Global rollout on CustomersDot production

- [x] Confirm the feature flag is enabled on `staging` without incident
- [x] Roll out the feature to targeted testing users first (if applicable)
- [x] If applicable, [incrementally roll out](https://docs.gitlab.com/ee/operations/feature_flags.html#percent-rollout) the feature.
- [x] Verify the change has the desired outcome with the limited rollout before enabling the feature globally on production.
- [x] Enable the feature globally on production environment
- [x] Announce on [the feature epic](https://gitlab.com/groups/gitlab-org/-/epics/8950) that the feature has been globally enabled.
- [x] Wait for [at least one day for the verification term](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release).

### Release the feature

After the feature has been [deemed stable](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release),
the clean up should be done as soon as possible to permanently enable the feature and reduce complexity in the codebase.

- [x] https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5710+
  - [x] Remove all references to the feature flag from the codebase
  - [x] Ensure the cleanup issue is closed and all MRs have been deployed to both staging and production
- [x] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [x] Ensure production environment is still working as expected
- [x] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [x] Close this rollout issue.

## Rollback Steps

- [ ] This feature can be disabled by performing the following actions:
  - [ ] Disable the Unleash flag on the [feature flag page](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/160/edit)",2
115509266,2022-09-21 13:55:53.697,Do not show subscription management buttons on CI mins subscriptions without attached namespace,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
As mentioned in this [comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4428#note_1108064352), we should not be showing subscription management buttons on CI minutes subscriptions without namespace attached.

### Proposal
As mentioned in point 3 of this [refinement](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4428#note_1092677679), update the logic to hide subscription management buttons.

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result
Subscription management buttons should not be visible on CI minutes (and other free plans) with no linked namespace.

### Next steps (if any)

### How will we measure success?",2
115447179,2022-09-20 18:28:25.941,Remove Visual Compliance except for eDisty Marketplace use,"### Problem

As described in [this thread](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3393#note_1106637176), Visual Compliance code is enabled for eDisty Marketplace Orders, but disabled for all other use in CustomersDot.  This is because Visual Compliance proved to not be as effective in screening, particularly outside of the US.  Given eDisty Marketplace Orders are starting out as US-only, we've enabled VC just for this workflow for now.  The intention eventually is for VC to be replaced with Risk Rate as described [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3393#note_1107774308).

### Proposal

Given we do not want to enable VC for code paths other than eDisty Marketplace, let's remove this code to avoid confusion and potentially enabling this path by accident.

Note there are 2 distinct feature flags related to visual compliance: `compliance_check_marketplace` and `compliance_check`.  We want to keep the flag `compliance_check_marketplace`, but drop the flag for `compliance_check` and any related code.  

- `perform_compliance_check` [in application_controller.rb](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/e3d1c1a06c37668851bf96058ad78699288fa7e7/app/controllers/application_controller.rb#L92)",2
115435033,2022-09-20 15:03:36.188,[Knowledge-sharing] Storage provisioning,,3
115435024,2022-09-20 15:03:23.841,[Knowledge-sharing] True-ups,"# True-ups

## What are True-ups?

True-ups are the outstanding overage of maximum users exceeding the users/seats in a license of a self-managed subscription. Any overages during the subscription term need to be resolved by purchasing additional seats for the subscription. True-ups are handled as an add-on product to the subscription during renewal. They are validated when the new license is applied to a self-managed instance.

### How to find the overage

There are two places within a self-managed instance where the overage is displayed:
1. Visit the admin dashboard (`/admin`) and look for the `License overview` section. A box displays the overage number as `USERS OVER LICENSE`.
   <details>
   ![admin_dashboard](/uploads/2a4e2bffda091bdafcff3611f1423935/admin_dashboard.png)
   </details>
2. Visit the subscription page (`/admin/subscription`) to find a similar box as on the admin dashboard that displays the overage number as `USERS OVER SUBSCRIPTION`.
   <details>
   ![subscription](/uploads/e5f7c8f6201814dd0112d90a6ef6f34d/subscription.png)
   </details>


## Quarterly reconciliations

Quarterly reconciliations is a feature that is offered within Cloud Licenses. If enabled, a self-managed instance will send seat link information to CustomersDot on a daily basis. This information includes a count of active users and a historical maximum user count.

The manual true-up process is replaced by an automated quarterly reconciliation process which uses the information from the daily seat link sync to amend subscriptions with any additional users added within the past quarter.

### Difference to quarterly reconciliations (QSR)

True-ups are an annual process which means that users over the license needs to be paid for the whole subscription term. When the users were added is not important for this.

Quarterly reconciliations are performed quarterly. Any users over the license needs to be paid for for the remaining subscription term only. This process can result in substantial savings.

See [this documentation](https://docs.gitlab.com/ee/subscriptions/quarterly_reconciliation.html) for an example on the difference in costs.

## CustomersDot

### Subscription renewal

When renewing a self-managed subscription, a section for true-ups will be displayed. The customer is required to enter their current users over the license. Otherwise the license created for the renewal might not work on their instance (might will be explained in the GitLab section).

<details>
![renewal](/uploads/966d6de03d0ed59abbf4b6a3a2663599/renewal.png)
</details>

True-ups are handled as an add-on product to the subscription. [This code](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/a0bd9c8aa410b0e3c924d17a9240db2644ff2e1b/app/services/amend_subscription_service.rb#L162-186) applies the true-up product if required.

When the license is created for the renewal, [the code](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/a0bd9c8aa410b0e3c924d17a9240db2644ff2e1b/app/models/license.rb#L82) checks if true-up info needs to be set. This is only the case if the true-up quantity is greater than 0 and the license has a term end date. If it is the case, the true-up date range [is automatically set](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/a0bd9c8aa410b0e3c924d17a9240db2644ff2e1b/app/models/license.rb#L160-165) to the year prior to the current subscription term.

### Manual license creation

When creating a license manually in the Admin, the true-up count can be filled in during the creation as an optional field. Similar to the renewal process, the overage number has to be sufficient to cover the current overage of an instance.

<details>
![license_creation](/uploads/811e3e93dc56cb71dcb2769c9290ae3f/license_creation.png)
</details>

## GitLab

When applying a license to a self-managed instance, [a validation](https://gitlab.com/gitlab-org/gitlab/-/blob/ba33e30e7295c3528e0eda559dc6768c3c90a257/ee/app/models/license.rb#L36) checks for a sufficient true-up count. This check is only executed if the true-up info is set and the flag `reconciliation_completed` (license restriction attribute) is not set to `true` in the license. If the latter is set to `true`, true-ups will be skipped due to a successful Q3 quarterly reconciliation.

The historical max during the given true-up date range is used for this validation ([code](https://gitlab.com/gitlab-org/gitlab/blob/ba33e30e7295c3528e0eda559dc6768c3c90a257/ee/app/models/license.rb#L502)). If a previous user count (license restriction attribute `previous_user_count`) is present in the license, the historical max subtracted by the previous user count equals the expected true-up count. If the previous user count is missing, the daily billable users count is used instead (there's a reported bug for this fallback in https://gitlab.com/gitlab-org/gitlab/-/issues/361345).

The expected true-up count is then compared to the true-up count set in the license plus an additional 10% overage threshold (hence the ""might not work"" phrasing in the CustomersDot section). The threshold part is only available in versions ""%14.2""+. If it's greater or equal the restricted user count (license restriction attribute `active_user_count`) is validated. This validation adds an error to the user count if the restricted user count plus a 10% overage threshold is less than the restricted user count in the license. If the expected true-up count is less than the true-up count set in the license plus an additional 10% overage threshold, the true-up validation results in an error that is added to the base errors (errors that are not associated to a specific attribute).

## Documentation

- https://gitlab.com/gitlab-org/gitlab/-/blob/aaa552b248b3af6dd2a4de88173fff7bfe85f4e1/doc/subscriptions/self_managed/index.md#users-over-license
- https://gitlab.com/gitlab-org/gitlab/-/blob/30adf0ce90db1326e9e53388aae26b3266651033/doc/subscriptions/quarterly_reconciliation.md#quarterly-reconciliation-and-annual-true-ups
- https://gitlab.com/gitlab-org/fulfillment-meta/-/issues/510+
- https://about.gitlab.com/handbook/business-technology/enterprise-applications/quote-to-cash/troubleshooting/#true-ups-adding-seats-users

## Possible improvements

1. No documentation about true-ups in CustomersDot. Is documentation in GitLab already sufficient?
1. Consolidate different spellings of true-up. GitLab, CustomersDot and the handbook use a mix of `true-up`, `trueup` and `true up`. It looks like `true-up` is the spelling that is used for customer-facing content.
   * **Here's one merge request that refactors the spelling in CustomersDot docs: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6225+**
1. A previous investigation suggested to loosen the true-up validation for Cloud Licenses or even skip it entirely. This is still under discussion though, see https://gitlab.com/gitlab-org/gitlab/-/issues/362076+.


## Knowledge sharing video

https://youtu.be/jfwOlYFRTy4",3
115435011,2022-09-20 15:03:12.055,[Knowledge-sharing] Cloud License Activation,"Notes: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4851#note_1190996681

Video: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4851#note_1191293557",3
115435007,2022-09-20 15:02:50.869,[Knowledge-sharing] Legacy License Provisioning,"Step 2: Knowledge Sharing

* [x] You've hosted a live knowledge share session for the team or sent out a pre-recorded one that provides an overview of your process.

Video: https://youtu.be/S6PkHHXjF3c",2
115434998,2022-09-20 15:02:37.772,[Knowledge-sharing] Provisioning-related Notifications,"Please check the video [here](https://www.youtube.com/watch?v=T_UM41tO10U).

[Notes](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4849#note_1222246231) and [recommendations](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4849#note_1260130350) are below :point_down_tone2:",2
115434943,2022-09-20 15:02:25.977,[Knowledge-sharing] Minutes provisioning,,2
115433442,2022-09-20 14:58:12.487,Keeping amendment logic in sync for Orders API,"The following discussion from !5458 should be addressed:

- [ ] @tvellishetty started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5458#note_1107066330):  (+1 comment)

    > thought (non-blocking): As we're duplicating the existing logic, it could happen that the logic in `AmendSubscriptionService` is updated and we miss out on updating the logic here. What do you think about moving these to a helper class and use them both here and in existing services? If the chances of this happening is low then it might not be required.",2
115376867,2022-09-20 06:28:02.177,Cancel subscription button should not be shown for expired subscriptions,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
As raised in this [comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5390#note_1105664081), `Cancel subscription` button is shown on expired subscriptions.

### Proposal
Add a condition to hide `Cancel subscription` button on expired subscriptions. We could add a similar condition like the one for `Resume subscription` in `eligible_for_resumption?` in `subscription.rb`. Since the condition is common for `Cancel` and `Resume` logic, we could move it to the `recurrent_subscription?` method in `subscription.rb`.

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result
`Cancel subscription` button will not be shown on expired subscriptions.

### Next steps (if any)

### How will we measure success?",2
115315416,2022-09-19 09:48:51.693,Update general emails layout,"We are moving from old purple header/footer layout to the black one. This issue is to update the general template, check all the emails affected and change it for all of them at the same time.

### Design draft:

| Old layout | New layout |
| ------ | ------ |
| ![layout_old](/uploads/0e726b07802d75e0ce82d468cdee8e10/layout_old.png) | <img src=""/uploads/4df1a8413ad827aed8057539b42ba2b9/layout_new.png"" width=""450px""/> |

Figma: https://www.figma.com/file/RwDEORCySqiDhagP7OJSde/Clean-up-SaaS-Privisioning-Email?node-id=1%3A60


### Links that we use:

| Linked Email Text | URL |
| ------ | ------ |
| header: logo | https://about.gitlab.com/ |
| footer: logo | https://about.gitlab.com/ |
| footer: Support | https://about.gitlab.com/support/ |
| footer: Customers Portal | https://customers.gitlab.com/customers/sign_in |
| footer: Blog | https://about.gitlab.com/blog/ |
| footer: Contact Sales | https://about.gitlab.com/sales/ |

### Technical considerations:

We should make sure that email is responsive on smaller screens

### Test plan

https://gitlab.com/gitlab-org/fulfillment-meta/-/issues/786+",2
115242136,2022-09-16 20:46:28.075,Testing New Zuora reCAPTCHA Configuration,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

[Zuora has verified](https://community.zuora.com/communities/community-home/digestviewer/viewthread?MessageKey=ed58fe64-3842-4ea4-9e44-3c093081f1d1&CommunityKey=5aff528c-0e69-4a3d-a756-fe240ad97b02&_ga=2.76996181.1990020224.1663002836-1655512474.1656430981&_gl=1*18qjf3b*_ga*MTY1NTUxMjQ3NC4xNjU2NDMwOTgx*_ga_MY8CQ650DH*MTY2MzM2MTEzOC4yMTYuMS4xNjYzMzYxMTQ3LjAuMC4w) that the Google reCAPTCHA version that we are using in Zuora Production (reCAPTCHA V2) will be deprecated on 2022.11.08. As a result, we will need to implement Google reCAPTCHA Enterprise Interactive, which allows for user input within the CAPTCHA interface, allowing us to abide by GDPR requirements.

### Proposal

In alignment with the [Proposed Implementation Plan](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/financeops/finance-systems/-/issues/812#update-20220916-captcha-v2-will-be-deprecated-20221108):

1. Assist Finance Systems in testing Hosted Payment Pages in local environments in API Sandbox 1
2. In coordination with Finance Systems, testing the new reCAPTCHA functionality within all [Hosted Payment pages](https://gitlab.com/groups/gitlab-com/business-technology/enterprise-apps/financeops/-/wikis/Zuora-Hosted-Payment-Pages#hosted-payment-page-gateway-assignments-config-overview). Verify functionality on mobile devices if possible. 
   * Once Finance Systems performs configuration changes in Zuora Central (staging), disable automated end to end testing.  
   * Once testing is complete, Finance Systems to modify setting to allow for automated end to end testing. Re-enable automated end to end testing.
3. Production changes made by Finance Systems.


### Action plan

#### Dev

EntApps – `2022.09.27 End of Day Pacific Time`:

- [x] update reCAPTCHA settings for `GL.com self-serve Flow`
- [x] update reCAPTCHA settings for `GL.com CC Validation_2022.04`
- [x] update reCAPTCHA settings for `GL.com CC Validation_registration`
- [x] update reCAPTCHA settings for `CustomersDot self-serve Flow`
- [~] update reCAPTCHA settings for `GL.com CC Validation`


Eng – `2022.09.28`:

- [x] verify purchase scenario in GitLab.com (**GL.com self-serve Flow**)
- [x] verify purchase scenario in CustomersDot (**CustomersDot self-serve Flow**)
- [x] verify CC validation scenario in GitLab.com (**GL.com CC Validation_2022.04**)
- [ ] verify [CC validation scenario](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/99202#how-to-set-up-and-validate-locally) during registration (**GL.com CC Validation_registration**)


#### Staging

Pre-requisite – `2022.10.04`:

- [x] SET: disable end-to-end tests [running on staging](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/.gitlab/ci/e2e.gitlab-ci.yml#L132)

EntApps – `2022.10.04 End of Day Pacific Time`:

- [x] update reCAPTCHA settings for `GL.com self-serve Flow`
- [x] update reCAPTCHA settings for `GL.com CC Validation_2022.04`
- [x] update reCAPTCHA settings for `GL.com CC Validation_registration`
- [x] update reCAPTCHA settings for `CustomersDot self-serve Flow`
- [~] update reCAPTCHA settings for `GL.com CC Validation`

Eng – `2022.10.05`:

- [x] verify purchase scenario in GitLab.com (**GL.com self-serve Flow**)
- [x] verify purchase scenario in CustomersDot (**CustomersDot self-serve Flow**)
- [x] verify CC validation scenario in GitLab.com (**GL.com CC Validation_2022.04**)
- [ ] verify [CC validation scenario](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/99202#how-to-set-up-and-validate-locally) during registration (**GL.com CC Validation_registration**)

Post actions:

- [x] EntApps: modify reCAPTCHA threshold to allow for E2E tests
- [x] SET: reenable end-to-end tests

#### Production

EntApps – `2022.10.11 Afternoon Pacific Time`:

- [x] update reCAPTCHA settings for `GL.com CC Validation_2022.04`
- [x] Announce update in [#s_fullfilment](https://gitlab.slack.com/archives/CMJ8JR0RH) (internal channel), `#business-fulfillment-sync` and `s_fulfillment_fyi`. Tag Omar in one of the posts to re-post in `s_fulfillment_fyi`.


Eng – `2022.10.11`:

- [x] verify CC validation scenario in GitLab.com (**GL.com CC Validation_2022.04**)

EntApps – `2022.10.11 After Successful Testing for GL.com CC Validation_2022.04`:

- [x] update reCAPTCHA settings for `GL.com self-serve Flow`
- [x] update reCAPTCHA settings for `CustomersDot self-serve Flow`
- [x] update reCAPTCHA settings for `GL.com CC Validation_registration`
- [x] Announce updates in [#s_fullfilment](https://gitlab.slack.com/archives/CMJ8JR0RH) (internal channel), `#business-fulfillment-sync` and `s_fulfillment_fyi`. Tag Omar in one of the posts to re-post in `s_fulfillment_fyi`.

**Escalation Path**
`#financesystems_help` Slack channel.",2
115226057,2022-09-16 15:17:40.927,Improvements to custom action mapping,"The following discussion from !5439 should be addressed:

- [ ] @vshumilo started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5439#note_1102613144):  (+5 comments)

    > What do you think about mapping to the actual class?
    > 
    > That way if the class name changes or is removed we will immediately get an error here?

- [ ] @tvellishetty started a [discussion]https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5439#note_1103708391)

    > thought (non-blocking): similar to [using constants for amendment types](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3778), we could also use constants order action types",1
115171593,2022-09-15 22:44:45.233,Update ActionTypeGenerator to determine actions based on business logic,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

[`ActionTypesGenerator`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/d482c68e02279a049e34766362baa76efd869d95/app/services/zuora/orders/amendment/action_types_generator.rb) currently determines applicable actions types for a request on an individual basis.

This approach was found to have the following two shortcoming:

1. The order (or priority) in which the order actions were sent to Zuora may not be appropriate
   For e.g. when upgrading a self-managed subscription plan during renewal and true-ups are added, `AmendmentSubscriptionService` currently generates amendment in the following order:

   - Remove main product
   - Add main product
   - Renew subscription
   - Add true-ups

  In the current implementation of `ActionTypesGenerator`, it will generate these order actions in the following order:

   - [Remove main product](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/d482c68e02279a049e34766362baa76efd869d95/app/services/zuora/orders/amendment/action_types_generator.rb#L39)
   - [Add main product](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/d482c68e02279a049e34766362baa76efd869d95/app/services/zuora/orders/amendment/action_types_generator.rb#L43)
   - [Add true-ups](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/d482c68e02279a049e34766362baa76efd869d95/app/services/zuora/orders/amendment/action_types_generator.rb#L65)
   - [Renew subscription](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/d482c68e02279a049e34766362baa76efd869d95/app/services/zuora/orders/amendment/action_types_generator.rb#L49)

   Given Zuora processes Order actions in the order in which it is sent, it is critical to maintain the priority of the action types:

   ![Screen_Shot_2022-09-15_at_5.37.46_PM](/uploads/27c5cbdbb32ec750f4870b120b24fbf1/Screen_Shot_2022-09-15_at_5.37.46_PM.png)

2. In the event when an order action type is twice: e.g when updating main product, and when updating options product OR when upgrading to a new product and adding true-ups. The determination logic is replicated in both `ActionTypeGenerator` and in `ParamConstructor`.


### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

In order to resolve these two issues, action type in `ActionTypesGenerator` can be determined using business logic. `ActionTypesGenerator` returns a list of action types that are specific to CDot, such as `add_main_product`, `add_true_ups`, `remove_main_product`, `update_support_options` and so on.

Crete a mapping of these business driven action types with that of Zuora before invoking Orders API.


### Result

### Next steps (if any)

### How will we measure success?",3
115166607,2022-09-15 20:30:06.020,Salesforce object creation behavior in CustomersDot,"### Background

Via the integration with SFDC, Salesforce objects are created in CustomersDot following any self service purchases.  These CDot services that integrate with Salesforce use `Customer` (later to be renamed `User`) information stored in the CDot database like company name, first and last name, email, country, state, zip to create the Salesforce objects.

In https://gitlab.com/groups/gitlab-org/-/epics/8331, Fulfillment is looking at improving the data architecture of CDot, in particular the `Customer`/`BillingAccount` alignment.  We are focusing on simplifying the `Customer` model, and treating this more like a ""User of the Customer Portal"" (later to be renamed `User`), persisting mainly email address, first name and last name.  These `Customer`s (later renamed `User`s) would have memberships to `BillingAccount`s, which represent Zuora Accounts.  Much of the data that is pulled from `Customer` currently, could be pulled directly from Zuora (and potentially cached in CDot in later iterations) via the Zuora Account and the Sold To Contact for the `BillingAccount`.

### Proposal

Investigate whether CustomersDot can use the Sold To Contact from the Subscription's Zuora Account, instead of `Customer` (to be renamed `User`) data stored in the CDot DB, to create the appropriate SFDC objects (Account, Contact, Opportunity, etc).

Services in question:
- All services in https://gitlab.com/gitlab-org/customers-gitlab-com/-/tree/main/app/services/salesforce
- [`CreateSalesforceContactService`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/edf972ee51f37d98f23a0e38828e5c01d0f5ed3a/app/services/create_salesforce_contact_service.rb)
- [`CreateSalesforceAccountService`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/99ecaa74572bcf1542b5ab9fadba3f410b402b18/app/services/create_salesforce_account_service.rb#L3)

### Delivery strategy

- [x] :one: Update the CustomersDot matching strategy to find an account within SFDC (https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5970):

From:
- Find SFDC Account by CusomersDot user `salesforce_account_id`
- Find SFDC Account by CustomersDot user's Zuora Account `crm_id`
- Find SFDC Contact by exact match to the CustomersDot user's email -> then find the Account for the Contact

To:
- Find SFDC Account by CustomersDot user's Zuora Account `crm_id`
- Exact match with the Zuora Sold To contact email
- Find SFDC Contact by exact match to the CustomersDot user's email -> then find the Account for the Contact

Diff:
- **Remove:** ~~Find SFDC Account by CusomersDot user `salesforce_account_id`~~
- Find SFDC Account by CustomersDot user's Zuora Account `crm_id`
- **New:** Exact match with the Zuora Sold To contact email
- Find SFDC Contact by exact match to the CustomersDot user's email -> then find the Account for the Contact

---

- [x] :two: Update the SFDC Account / Contact creation logic: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6151

From: Be based on the CustomersDot user's data.

To: Be based on the CustomersDot user's Zuora Account Sold To Contact data.

This change is added behind the `:create_sf_contact_from_zuora_contact` feature flag given:
- We might have to hand out validation for the changes working properly in staging to another team, possibly not related to engineering.
- Failures in the SFDC Contact and Account creation will impact revenue metrics.

Feature Flag rollout issue: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5409

:exclamation: :checkered_flag: The flag is currently disabled for staging and production

----

:eye: Extra context: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4822#note_1166606063",3
115070479,2022-09-14 18:36:44.160,Generate all cloud licenses for the entire subscription term,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

## Background
Today, not all cloud licensing subscriptions are generated for the full subscription term.

The logic defined [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/b555261242ad22c16a988161f2615b8aa07cb78f/app/models/concerns/license_creation.rb#L7-20) defines license end date upon creation of a license. The way this logic is written, if a customer purchases a multi-year subscription and is:

1. On Cloud Licensing AND (QSR OR Ramp): license is issued for the full term purchased for :white_check_mark:
1. On Cloud Licensing AND **(NOT on QSR and Not on Ramp)**: license is issued for one year only :exclamation:


The thinking for this was that it provides sales with the opportunity for checking for true-ups prior to the start of a new year.

## Problem
With this logic, all Cloud Licensing Multi-Year Subscriptions where the customer is not on QSR will expire after 1 year. This will result in the customer losing access entirely at the start of the second year, unless: 
* Sales creates a new $0 quote for the second year, it is synced to Zuora/CDot, and then the customer receives a new activation code? :thinking: this is the only way to avoid this I can think of.
* This is definitely not a process sales is familiar with.

Related to this, because of the logic of `term start date` + `1 year`, we are actually creating expired activation codes on year 2. Separate issue for this specifically created here: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4815

### What is the Impact?
We expect the majority of customers who are on Cloud Licensing to also have QSR enabled, however, the following categories of customers are currently opted out of QSR by default, but not out of Cloud Licensing:
1. Channel customers
2. PubSec customers
3. PO Required customers
4. MSA customers
5. Legacy Ramp customers
6. Customers on non-standard terms


A quick report of new/renewal quotes sent to Zuora with a `Close Date` in 2022, `Initial Term` > `12`, `TurnOnCloudLicensing__c` = `Yes` and `TurnOnSeatReconciliation__c` = `No`:
* 40 quotes

Looking at this same criteria but New quotes (not yet sent to Zuora), we see:
* 92 quotes

However, with SCL launch having only happened 2 months ago, we can expect this number to continue to increase at a higher rate as all customers are set to `TurnOnCloudLicensing__c` = `Yes` by default.

### Reported Examples
1. https://gitlab.zendesk.com/agent/tickets/331005
2. https://gitlab.zendesk.com/agent/tickets/336134
3. https://gitlab.zendesk.com/agent/tickets/340677
4. https://gitlab.zendesk.com/agent/tickets/343223
5. A [Mid-Market Customer](https://gitlab.my.salesforce.com/0014M00001kHwnHQAS) has encountered this after the first year of their 3-Year contract resulted in an ""expired"" cloud activation. [Ticket for reference](https://gitlab.zendesk.com/agent/tickets/351591).

## Proposal

**Summary:** Update license creation logic to generate all cloud licenses for the full term

We can remove the dependency on QSR for generating a full term license. Instead, all cloud licenses could be generated for the full, Multi-Year term.

**Pros:**
* Eliminates risk of customer losing instance access/downgrading to free
* Smoother customer experience, no need to enter a new activation code each year
* Aligned to communications put out about cloud licensing, that there is no need for additional engagement each year as there is with legacy licenses

**Cons:**
* Potential loss of revenue as customer would not have an obligation to pay for true-ups prior to beginning the second/third year of their subscription term


_NOTE: given the current process for creating ramp deals as 3 unique subscriptions, we should not remove the dependency here for creating 1-year subscriptions for a ramp deal._


<details><summary>Alternative option, ruled out</summary>

#### Maintain current logic but define sales process for non-QSR customers

Potentially, this is by design and sales leadership would prefer to keep this logic in place. If so, we need to make sure that the process is clearly understood by the sales team if their customer is on CL and not QSR. To be considered: additional enablement, sales alerts for upcoming license expiration.

**Pros:**
* Allows for the possibility of reconciling true-ups, increase in revenue

**Cons:**
* If sales is not proactive, can result in customer loss of access/downgrade to free

</details>

### Result
All cloud licenses are to be generated for the full subscription term. Customers will no longer lose access after 1 year on a MY subscription.",1
114993136,2022-09-13 19:57:31.301,Offline Usage File: Support additional mime-types,"
## Summary

Customer emailed their offline license usage CSV file to us, and received an automated message back that it could not be processed. 

- [Customer ticket](https://gitlab.zendesk.com/agent/tickets/325524) (internal)  
- [subscription](https://www.zuora.com/apps/Subscription.do?method=view&id=8a12892d8234963001823e7435a3621b)  
- [customer account](https://customers.gitlab.com/admin/customer/437768/edit)


<details><summary>Full details of reported bug</summary>

I see that a [cloud activation](https://customers.gitlab.com/admin/cloud_activation/11787) exists for the subscription, and the [offline license is here](https://customers.gitlab.com/admin/license/1034640).


### Relevant logs and/or screenshots

![screenshot-2022-09-13-15_51](/uploads/7fc191c16e1654c86b9906551ea20caf/screenshot-2022-09-13-15_51.png)

The csv file itself is recorded in the logs here:

https://console.cloud.google.com/logs/query;cursorTimestamp=2022-09-13T09:46:10.532Z;query=resource.type%3D%22gce_instance%22%0A%22enrico.prevosti@2bits.it%22%0Atimestamp%3D%222022-09-13T09:46:10.532Z%22%0AinsertId%3D%221ohz9dwf6pj2i3%22;timeRange=PT8H?project=gitlab-subscriptions-prod

`param[33]` specifically.

I also noticed these log entries from `production.log`

<details>

```
I, [2022-09-13T09:46:10.086326 #969237]  INFO -- : [d94d5079-51c0-4d87-b445-4bb7ddc1f37f] Started POST ""/rails/action_mailbox/mailgun/inbound_emails/mime"" for 172.70.135.221 at 2022-09-13 09:46:10 +0000
I, [2022-09-13T09:46:10.088610 #969237]  INFO -- : [d94d5079-51c0-4d87-b445-4bb7ddc1f37f] Processing by ActionMailbox::Ingresses::Mailgun::InboundEmailsController#create as */*
I, [2022-09-13T09:46:10.089279 #969237]  INFO -- : [d94d5079-51c0-4d87-b445-4bb7ddc1f37f]   Parameters: {""Accept-Language""=>""it-IT, en-US"", ....... [snipped out]

I, [2022-09-13T09:46:10.520825 #969237]  INFO -- : [d94d5079-51c0-4d87-b445-4bb7ddc1f37f]   GCS Storage (385.1ms) Uploaded file to key: [snipped] (checksum: eOh6+mF+m4cU4kqmXYFa1g==)
I, [2022-09-13T09:46:10.522318 #969237]  INFO -- : [d94d5079-51c0-4d87-b445-4bb7ddc1f37f] [ActiveJob] Enqueued ActionMailbox::RoutingJob (Job ID: f2d3a2bb-3291-4802-a2e7-b3321dd92c9b) to Sidekiq(default) with arguments: #<GlobalID:0x00007f8c54b5e798 @uri=#<URI::GID gid://payment-app/ActionMailbox::InboundEmail/30>>
I, [2022-09-13T09:46:10.532055 #969237]  INFO -- : [d94d5079-51c0-4d87-b445-4bb7ddc1f37f] No template found for ActionMailbox::Ingresses::Mailgun::InboundEmailsController#create, rendering head :no_content
I, [2022-09-13T09:46:10.532353 #969237]  INFO -- : [d94d5079-51c0-4d87-b445-4bb7ddc1f37f] Completed 204 No Content in 443ms (ActiveRecord: 19.1ms | Allocations: 25146)

I, [2022-09-13T09:46:10.537933 #969416]  INFO -- : [ActiveJob] [ActionMailbox::RoutingJob] [f2d3a2bb-3291-4802-a2e7-b3321dd92c9b] Performing ActionMailbox::RoutingJob (Job ID: f2d3a2bb-3291-4802-a2e7-b3321dd92c9b) from Sidekiq(default) enqueued at 2022-09-13T09:46:10Z with arguments: #<GlobalID:0x000055749db261c0 @uri=#<URI::GID gid://payment-app/ActionMailbox::InboundEmail/30>>
I, [2022-09-13T09:46:10.630964 #969416]  INFO -- : [ActiveJob] [ActionMailbox::RoutingJob] [f2d3a2bb-3291-4802-a2e7-b3321dd92c9b] ESC[36m  GCS Storage (69.6ms) ESC[0mESC[34mDownloaded file from key: [snipped]ESC[0m
I, [2022-09-13T09:46:10.647535 #969416]  INFO -- : [ActiveJob] [ActionMailbox::RoutingJob] [f2d3a2bb-3291-4802-a2e7-b3321dd92c9b]   Rendered customer_mailer/provisioning_error_notification.html.haml within layouts/mailer (Duration: 4.6ms | Allocations: 3430)
```

</details>

Not sure how relevant it is, but this kinda stands out

>  No template found for ActionMailbox::Ingresses::Mailgun::InboundEmailsController#create, rendering head :no_content

Production's console output:

```
I, [2022-09-13T09:46:10.537933 #969416]  INFO -- : [ActiveJob] [ActionMailbox::RoutingJob] [f2d3a2bb-3291-4802-a2e7-b3321dd92c9b] Performing ActionMailbox::RoutingJob (Job ID: f2d3a2bb-3291-4802-a2e7-b3321dd92c9b) from Sidekiq(default) enqueued at 2022-09-13T09:46:10Z with arguments: #<GlobalID:0x000055749db261c0 @uri=#<URI::GID gid://payment-app/ActionMailbox::InboundEmail/30>>
```

This log line indicates the `ActionMailbox::InboundEmail` object saved from this email has `id = 30`.

Using the steps from [our troubleshooting docs](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/doc/license/cloud_license.md#troubleshooting), we can see the attached file has `mime-type: 'application/octet-stream'` instead of the [expected](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/d2ccaa0f4eab6ff879d4b00a8e5a9ac77db9a9f3/app/mailboxes/offline_provisioning_mailbox.rb#L25) `'text/csv'` so we end up with an *empty* attachment which triggers a [provisioning_error_notification](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/app/mailboxes/offline_provisioning_mailbox.rb#L14).

<details>
<summary>Output from production</summary>

```ruby
inbound_email = ActionMailbox::InboundEmail.find(30)
=> #<ActionMailbox::InboundEmail id: 30, status: ""delivered"", message_id: ""VI1PR0701MB23836406448561E20F5820D2D5479@VI1PR0701..."", ...>

mail = inbound_email.mail
=> #<Mail::Message:91420, Multipart: true, Headers: <Received: from ...>...>

license_usage_file = Array(mail.attachments).find do |attachment|
  attachment.filename == 'license_usage.csv' && attachment.mime_type == 'text/csv'
end
=> nil

# Load all the attachments
attachments = Array(mail.attachments)
attachments.size
=> 2

attachment = attachments.last
=> #<Mail::Part:91460, Multipart: false, Headers: <Content-Type: application/octet-stream; name=""license_usage.csv"", ...>,

# the csv file is there and contains the usage data but the check for the mime_type doesn't succeed
```
</details>

</details>

## Cause of Bug
In investigating this bug, it was determined that the mime-type `mime-type: 'application/octet-stream'` used by the customer here is not currently supported by our code. This mime-type is somewhat common in email clients.

## Proposal for Resolution
Consider the mime-type `mime-type: 'application/octet-stream'` as part of the [finding condition](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/d2ccaa0f4eab6ff879d4b00a8e5a9ac77db9a9f3/app/mailboxes/offline_provisioning_mailbox.rb#L25) for offline usage data reporting.

## Reported examples

1. https://gitlab.zendesk.com/agent/tickets/325524
1. https://gitlab.zendesk.com/agent/tickets/333322
1. https://gitlab.zendesk.com/agent/tickets/335931
1. https://gitlab.zendesk.com/agent/tickets/334735
1. https://gitlab.zendesk.com/agent/tickets/339231
1. https://gitlab.zendesk.com/agent/tickets/340432
1. https://gitlab.zendesk.com/agent/tickets/348986 (mime was `application/vnd.ms-excel`)

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",1
114984766,2022-09-13 17:30:31.291,[Spike] Replace Customer references to salesforce_account_id,"### Problem

There are places in the application where `salesforce_account_id` is referenced from `Customer` (to be renamed `User`).  Here are a few examples:

- [Salesforce::CreateAccountWorker](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/a9a5f019735cfacfca05992367c369f1bc95ef27/app/workers/salesforce/create_account_worker.rb#L42)
- [Salesforce::FindAccountService](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/43b599e2dc1d52d074d97da549167c2b44a8bf69/app/services/salesforce/find_account_service.rb#L16)
- [Api::CustomersController](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/5c81f897836d36021d982a6c4f5b2645e946f5a6/app/controllers/api/customers_controller.rb#L35)

Note: This is not an exhaustive list.  As we start working on this issue, we could promote this to a sub-epic and create issues for smaller pieces.

### Proposal

Let's review the application code to find all the places where `salesforce_account_id` is referenced from a `Customer`.  When the feature flag (introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4794) is enabled, the `Customer`'s `BillingAccountMembership` should be used instead.  In many instances, the logged in Customer would have selected the `BillingAccount` they wish to administer, so this scope should be set and used to fetch `salesforce_account_id` instead of using the `salesforce_account_id` directly on `Customer`.

The legacy code will be removed in a later issue once the feature flag has been vetted and promoted in production.",1
114980769,2022-09-13 16:53:43.326,Ability to add an Order Action type more than once in a transaction,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

[`ParamConstructor`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/tree/main/app/services/zuora/orders/actions/param_constructor/) (`Zuora::Orders::Actions::ParamConstructor`) is a set of middleware services that sanitizes and formulates params required by an order action service (`Zuora::Orders::Actions`).

Currently, `ParamConstructor` returns a single object, assuming that a transaction can contain an Order action type only once. While this is true for most order actions in the existing business driven actions, there are a few exceptions such as:

  - `UpdateProduct`: a single transaction can update [main product](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/d2ccaa0f4eab6ff879d4b00a8e5a9ac77db9a9f3/app/services/amend_subscription_service.rb#L83) as well as [options product](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/d2ccaa0f4eab6ff879d4b00a8e5a9ac77db9a9f3/app/services/amend_subscription_service.rb#L94)

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

- Update `params` in `Zuora::Orders::Actions::BaseService` to be an Array of Objects instead of a single Object
- Update `.execute` in `Zuora::Orders::Actions::BaseService` to loop through `params` 
- Individual `Zuora::Orders::Actions::ParamConstructor` returns an array instead of an object

### Result

- Ability to add more than one instance of an OrderAction type in a transaction 
- Signature of `ParamConstructor` is consistent for all order actions

### Next steps (if any)

### How will we measure success?",2
114974741,2022-09-13 15:48:57.209,Replace Customer references to zuora_account_id in Rails Admin and Reconciliation services,"### Problem

There are many places in the application where `zuora_account_id` is referenced from `Customer` (to be renamed `User`).  Here are a few examples:

- [Setting zuora_account_id on an Order](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/65d6481e7edac53a5839973c5f7aa6d916a10c75/app/models/order.rb#L308)
- [FindOrCreateCustomerService](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/a370c2b4b1a4fec50a6be2291c7b0ec7c73e0cd7/app/services/find_or_create_customer_service.rb#L23)
- [InvoicesFinder](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/ccc5b4d03aaa3929ab72b3a36fdc7b6eb14d672c/app/finders/invoices_finder.rb#L19)

Note: This is not an exhaustive list.  As we start working on this issue, we could promote this to a sub-epic and create issues for smaller pieces.

### Proposal

Let's review the application code to find all the places where `zuora_account_id` is referenced from a Customer.  When the feature flag (introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4794) is enabled, the `Customer`'s `BillingAccountMembership` should be used instead.  In many instances, the logged in `Customer` would have selected the `BillingAccount` they wish to administer, so this scope should be set and used instead of using the `zuora_account_id` directly on `Customer`.

The legacy code will be removed in a later issue once the feature flag has been vetted and promoted in production.

**2022-12-16 UPDATE:** [We've broken this issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4807#note_1211450977) into an epic with many issues.  I moved this issue into the [newly created epic](https://gitlab.com/groups/gitlab-org/-/epics/9515) and I've narrowed the focus of this issue to just those items that have been delivered to this point (admin changes and updates to the reconciliation services).",5
114972511,2022-09-13 15:30:47.866,Create Admin tools for Account and AccountMembership,"### Problem

Once Account and AccountMembership models are added, Support and other GitLab members will need a way to manage these records via the CustomersDot Admin interface.

### Proposal

Let's sections to the Admin interface (http://customers.gitlab.com/admin) for the new models `Account` and `AccountMembership`.  This should allow admins to:

- View all Accounts
- View AccountMemberships for an Account
- View AccountMemberships for a Customer
- Create an AccountMembership
- Delete an AccountMembership

Other functionality like creating or editing an Account, might be useful, but let's check with the team on this before adding, or it could always be added later.",3
114969953,2022-09-13 15:13:54.902,Add billing_account_id to Order,"### Problem

The `Order` model currently has an association with an individual `Customer` (to be renamed `User`) via foreign key `customer_id`.  This relationship is problematic for many reasons and should be associated with a `BillingAccount` instead.

### Proposal

With the new data structure for `BillingAccount` and `BillingAccountMembership`, the `Order` model should be updated to be associated with a `BillingAccount` instead of a `Customer`.  The full migration will need to be done in steps, spread across multiple issues and MRs.  

For this issue, we will focus on getting to compatibility mode where `customer_id` continues to be set, but the `billing_account_id` will also be set.  In this issue, the following should be covered:

- [x] Add `billing_account_id` column - https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5750
- [x] Start setting `billing_account_id` in application logic (e.g. when creating/updating a `Order`) - https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5770
- [x] Use new `billing_account` relationship instead of `customer` when `account_data_structure` [feature flag](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4867) is enabled - https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5874
- [x] Introduce rake task to backfill `billing_account_id` for existing `Order` records - https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5967
   - ~~If it's easier, this could be added to the rake task from https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4798.  Or it could be a standalone task.~~

### Result

`billing_account_id` will be populated similar to how `customer_id` is set currently.  `customer_id` will continue to be populated to ensure compatibility and allow us to revert if needed.  When the feature flag is enabled, the new `billing_account_id` will be used instead of `customer_id`.",3
114968429,2022-09-13 15:03:37.936,Add billing_account_id to License,"### Problem

The `License` model currently has an association with an individual `Customer` (to be renamed `User`) via foreign key `customer_id`.  This model really should be associated with a `BillingAccount` instead of an individual `Customer`.  Most data that references `Customer` should be pulled directly from the `BillingAccount`, or from the Sold To Contact associated with the `BillingAccount`.

### Proposal

With the new data structure for `BillingAccount` and `BillingAccountMembership`, the `License` model should be updated to be associated with an `BillingAccount` instead of a `Customer`.  The full migration will need to be done in steps, spread across multiple issues and MRs.  

For this issue, we will focus on getting to compatibility mode where `customer_id` continues to be set, but the `billing_account_id` will also be set.  In this issue, the following should be covered:

- [x] Add `billing_account_id` column: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5732
- [x] Start setting `billing_account_id` in application logic (e.g. when creating a `License`) https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5747
- [x] Use new `billing_account` relationship instead of `customer` when `account_data_structure` [feature flag](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4867) is enabled https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5798
- [x] Introduce rake task to backfill `billing_account_id` for existing `License` records https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5967
   - ~~If it's easier, this could be added to the rake task from https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4798.  Or it could be a standalone task.~~

### Result

`billing_account_id` will be populated similar to how `customer_id` is set currently.  `customer_id` will continue to be populated to ensure compatibility and allow us to revert if needed.  When the feature flag is enabled, the new `billing_account_id` will be used instead of `customer_id`.",3
114965413,2022-09-13 14:46:32.664,Add billing_account_id to CloudActivation,"### Problem

The `CloudActivation` model currently has an association with an individual `Customer` (to be renamed `User`) via foreign key `customer_id`.  This relationship is problematic for many reasons and should be associated with a `BillingAccount` instead.

### Proposal

With the new data structure for `BillingAccount` and `BillingAccountMembership`, the `CloudActivation` model should be updated to be associated with an `BillingAccount` instead of a `Customer`.  The full migration will need to be done in steps, spread across multiple issues and MRs.  

For this issue, we will focus on getting to a compatibility mode where `customer_id` continues to be set, but the `billing_account_id` should also be set.  In this issue, the following should be covered:

- [x] Add `billing_account_id` column
   - https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5717
- [x] Start setting `billing_account_id` in application logic (e.g. when creating a `CloudActivation`)
   - https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5738
- [x] Use new `billing_account` relationship instead of `customer` when `account_data_structure` [feature flag](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4867) is enabled
   - https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5754
   - https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5809
   - https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5836
   - https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5858
- [x] Introduce rake task to backfill `billing_account_id` for existing `CloudActivation` records
   - If it's easier, this could be added to the rake task from https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4798.  Or it could be a standalone task.
   - https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5890

### Result

`billing_account_id` will be populated similar to how `customer_id` is set currently.  `customer_id` will continue to be populated to ensure compatibility and allow us to revert if needed.  When the feature flag is enabled, the new `billing_account_id` will be used instead of `customer_id`.",3
114901357,2022-09-12 21:45:12.448,Backfill BillingAccounts and BillingAccountMemberships for existing Customers,"### Problem

Once `BillingAccount` and `BillingAccountMembership` records are being created (introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4795 and https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4796) and kept in sync (introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4797), we should be in a position to confidently backfill this data for existing `Customer` (to be renamed `User`) records.

### Proposal

Create a rake task to backfill `BillingAccount` and `BillingAccountMembership` records for existing `Customer` (to be renamed `User`) records.  We should consider an idempotent rake task that can be run multiple times.  We may need to run this several times as we test out the issues for creating `BillingAccount`s and keeping the information in sync.  

This task will need to be run at least once before [the feature flag](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/160/edit), `account_data_structure`, is enabled to ensure we can confidently start using the new data architecture in production.  Steps have been added to the feature flag rollout issue, https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4867+, to run the rake task introduced in this issue in non-production, then production environments.  As part of this issue, we should verify the rake task works by running it in staging and production to test, but we will run it again as part of the feature flag rollout.  Please update [the rollout issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4867) with the exact rake task command to run in staging and production.

Question to consider:
- What happens when the `zuora_account_id` and `salesforce_account_id` aren't consistent between `Customer` (to be renamed `User`) records associated to the same `BillingAccount`?  We should probably run a query to see how prevalent this is.  If this does happen, how prevalent is it and can we account for these discrepancies programmatically?",3
114901124,2022-09-12 21:38:50.695,Mechanism to keep BillingAccount data in sync with Zuora,"### Problem

With `BillingAccount` records being created and stored locally in CustomersDot, it will be important to make sure the data stored locally is kept in sync with the Single Source of Truth, Zuora.  The main concern at this point might be the `BillingAccount` `name` as we may not be caching much else locally.  We can reference the issue where the `BillingAccount` model was introduced for more information, https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4792.

### Proposal

In this issue, we need to work with @gitlab-com/business-technology/enterprise-apps/zuora-architects to build the mechanism for ensuring changes to Zuora Account (mainly `name` and `salesforce_account_id`) are synced to CustomersDot.  

We've engaged the Finsys team via https://gitlab.com/gitlab-com/business-technology/enterprise-apps/financeops/finance-systems/-/issues/886.  In that issue, the Finsys team will create a Custom Event for Zuora Account which will send a callout notification to CustomersDot.

In this issue, we will be responsible for creating the API endpoint for updating the `BillingAccount` record based on this callout notification.

##### Checklist

- [x] Add new API endpoint to enqueue sync account background job
  - https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5995
- [x] Add sync account worker to update BillingAccount with Zuora Account data
  - https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5995
- [x] Update documentation in [doc/zuora/zuora_callouts.md](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/1c704fd9e437fd519a4b989884192eece9d080eb/doc/zuora/zuora_callouts.md)
  - https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6031

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

When we arrive at a solution, we should add tests to ensure that this _mechanism_ indeed passes and receives correct data with Zuora.  This will likely take the form of integration tests, but contract tests would also work.",5
114900593,2022-09-12 21:26:59.551,Create BillingAccountMembership when processing Zuora Callouts,"### Problem

In https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4795, the `BillingAccount` and `BillingAccountMembership` should be created when a purchase originates from CustomersDot (ie. self service purchase).  However, there are still places where the `BillingAccount` and/or `BillingAccountMembership` should be created outside of this workflow.

- Sales-assisted purchases
- Renewals

In these cases, CustomersDot processes the callout from Zuora in order to update the `Customer` (to be renamed `User`) and provision the subscription.  The Zuora callout code in CustomersDot needs to be updated to handle `BillingAccount` and `BillingAccountMembership` creation.

### Proposal

In this issue, the `FindOrCreateCustomerService` should be updated to create an `BillingAccountMembership` for a `Customer` (to be renamed `User`) when the `zuora_account_id` attribute is present.  It should also consider creating the `BillingAccount` if it doesn't already exist.

If an existing `Customer` is found, but the `Customer` is not associated with the `BillingAccount` matching `zuora_account_id`, a new `BillingAccountMembership` (and potentially new `BillingAccount`) could be created.  

We've decided for this first iteration (https://gitlab.com/groups/gitlab-org/-/epics/8950), that we want to ensure only one `BillingAccountMembership` for a Customer.  This is to keep the same behavior as before, allowing us to step into the new data architecture and roll out the changes more effectively.  See the description in https://gitlab.com/groups/gitlab-org/-/epics/8950#purpose for more info.

#### Feature flag

This logic will be feature flagged in the short term using [the `:account_data_persistence` flag](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/171/edit). Here is the rollout issue for it: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5060+. Once we confirm the data is being created as expected and doesn't have any negative effects with the existing creation behavior, we will remove this feature flag.

As this is just creating data in the new models but not using it yet, we shouldn't need to use the `:account_data_structure` [feature flag](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/160/edit) for this logic. Eventually, the code setting `customer.zuora_account_id` will be removed but for now both will be set. This will allow us to roll out changes more efficiently without worry of breaking existing functionality.

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

Tests should be created/updated to account for this change.  Test to ensure that:

- Likely Model and Controller specs (to ensure proper validation and relation)
- UI specs",3
114895317,2022-09-12 19:43:32.680,Create BillingAccount and BillingAccountMembership after purchase,"### Proposal

The `SubscribeService` and `Zuora::Orders::PostCreationService` should be updated to create a `BillingAccount` and `BillingAccountMembership` at the same time `zuora_account_id` is set on the `Customer` (to be renamed `User`).

#### Feature flag

This logic will be feature flagged in the short term using [the `:account_data_persistence` flag](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/171/edit).  Here is the rollout issue for it: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5060+.   Once we confirm the data is being created as expected and doesn't have any negative effects with the existing creation behavior, we will remove this feature flag.

As this is just creating data in the new models but not using it yet, we shouldn't need to use the `:account_data_structure` [feature flag](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/160/edit) for this logic.  Eventually, the code setting `customer.zuora_account_id` will be removed but for now both will be set.  This will allow us to roll out changes more efficiently without worry of breaking existing functionality.

### Delivery plan
- [X] Restrict the validations in `BillingAccountMembership` to allow a single account per `Customer`: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5622
- [x] Create a service that given a customer will update (if necessary) the `BillingAccount` and `BillingAccountMembership` records to reflect the same association the customer is holding: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5660

Plug in the service in the places the customer's `zuora_account_id` set / updated?
- [x] FindOrCreateCustomerService: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5807
- [x] SubscribeService: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5807
- [x] Zuora::Orders::PostSubscriptionCreationService: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5810
- [x] `clear_missing_zuora_account_ids` task: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5811
- [x] :exclamation: Rails Admin allows the update to the customer `zuora_account_id`, there is no code in CDot for this as this update uses the RailsAdmin default logic. Make sure the BillingAccount and BillingAccountMemberships are properly updated base on that: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5832
- [x] Create an issue for ~QA pointing to the service so the associated objects are created in the QA context as well: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5128
  - PostZuoraRefreshTask
  - OrderApiClient
  - QA::Resource::Subscription",3
114895045,2022-09-12 19:37:07.677,Introduce a feature flag for using new Account structure,"### Proposal

To deliver features more efficiently and safely, let's introduce a feature flag that can be used to gate the new logic for using Accounts and AccountMemberships.  The feature flag could be named something like `account_data_structure` but open to other suggestions.  When the flag is enabled, the new data structure would be used, otherwise continue to use the old relationships.  Even when the flag is disabled though, we could start populating Accounts and Account Memberships to get into a ""compatibility mode"" where we could easily switch the flag on and off as needed.

TODOs:

- [x] Create the [feature flag in CustomersDot project](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags): [account_data_structure](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/160/edit) created.
- [x] Create an issue to rollout this feature flag and add it to [the epic](https://gitlab.com/groups/gitlab-org/-/epics/8331): https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4867+",1
114890486,2022-09-12 18:20:49.046,Create AccountMembership model,"### Problem

CustomersDot needs a model that represents a `Customer`'s membership to an `Account`.  This would be similar, but not a 1:1 mapping to a Zuora Contact.

### Proposal

Create migration and model for `AccountMembership` which represents a `Customer` ability to manage an `Account` (Zuora Billing Account).

Attributes to consider for model:

* id
* customer_id
* account_id

The relationships created in this join table will be informed by Zuora Contact data, typically received via Zuora Callouts.  When processing callouts or after a purchase is made in CustomersDot, the `AccountMembership` may be created as a result.  This will be implemented in later issues.",2
114890145,2022-09-12 18:12:14.419,Create Account model,"### Problem

CustomersDot needs a model that represents a Zuora Customer Account.

### Proposal

Create migration and model for `Account` that maps 1:1 with a Zuora Customer Account.

Attributes to consider for model:
- `id`
- `name` (e.g. Customer.company_name)
- `zuora_account_id`
- `salesforce_account_id`

Other attributes to consider:
- `company_size`
   - This may not need to be persisted on Account as it is currently only used when creating the Salesforce Account when creating a subscription via `SubscriptionManagerService`.  I don't think it is needed for future purchases and therefore probably does not need to be synced.
- `vat_code`
   - This may not need to be persisted on Account as it is currently only used in `SubscribeService` or `Zuora::Orders::Entities::NewAccount` before a new account is created.  I don't think it is needed for future purchases and therefore probably does not need to be synced.
- `billable`
   - This attribute probably makes more sense at the `Customer` or `AccountMembership` level, but may not make sense as currently implemented.  It's used only to determine which customers should receive a welcome email.  This may require a follow-up issue, perhaps not part of this epic.
- `login_activated`
   - This attribute probably makes more sense at the `Customer` or `AccountMembership` level, but may not make sense as currently implemented.  When enabled, this attribute prevents access to CustomersDot.  It is set when a Zuora Callout is processed and a subscription is determined to be managed by a reseller.  This may require a follow-up issue, perhaps not part of this epic.

It might be a good idea to review [the latest `schema.rb`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/db/schema.rb#L112) to make sure all appropriate Customer attributes have been considered for the Account model.

We are leaning towards very light duplication of data that exists in Zuora, and rely on fetching from Zuora when needed.  We will revisit caching in later iterations, but it probably makes sense to store Account `name` and `salesforce_account_id` locally on this table given they will be used frequently.  This means we will need to keep this model in sync with Zuora, which will be implemented in a later issue.",2
114866402,2022-09-12 13:50:09.007,Consolidate subscription state finding logic,"### Problem

For a few of the issues in https://gitlab.com/groups/gitlab-org/-/epics/8402, new logic was introduced in CustomersDot to find subscription state.  This new logic was introduced in [the `Subscriptions::VersionManager` class](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/647dcf59d97e50410274960ab0c847e24b7097ab/app/services/subscriptions/version_manager.rb), used in [the `Subscription#previous_subscription` method](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/bf2057bd9b9e6dcadbcdff3e0ad43fb4b9d65d43/app/models/subscription.rb#L214) as well as a handful of other places.

There are a few other places, such as the ones below, where subscription state is determined for fetching the current subscription or future versions.

- [`Subscription#current_subscription`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/bf2057bd9b9e6dcadbcdff3e0ad43fb4b9d65d43/app/models/subscription.rb#L48)
- [`Subscription#subscription_on`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/bf2057bd9b9e6dcadbcdff3e0ad43fb4b9d65d43/app/models/subscription.rb#L52)
- [`SubscriptionFutureVersionFinder`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/4e6b41d7a311ca7ed54f6a9174cec0cb88ceec64/lib/subscription_future_version_finder.rb#L3) (this is used in for the cloud licensing and seat link)

### Proposal

Let's investigate whether the new class `Subscriptions::VersionManger` can be used for the cases above, and consolidate our subscription state logic.",3
114785328,2022-09-10 18:18:26.974,Upgrade Rails to 7,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

[In the light of freezing Rails bug fixes for 6.1 releases](https://rubyonrails.org/2022/9/9/Rails-7-0-4-6-1-7-6-0-6-have-been-released), only security fixes will be landed, we should migrate to Rails 7 to keep our version up to date.


BTW: Rails 7 has more support, for example: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5678#note_1146728976
```
        # Rails 6 `upsert` does not support `:update_only` keyword argument. Rails 7 support `:update_only`.
        # After upgrade to Rails 7, there is no need to query `existing record's created_at`. It could simplify to:
        # LocalRecord.upsert({ name: resource, csv: csv, created_at: current_time, updated_at: current_time },
        #                      unique_by: :name, update_only: [:csv, :updated_at])

```

### Next steps (if any)

### How will we measure success?",2
114759324,2022-09-09 19:27:54.952,Add additional checks in RenewSubscription order action,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

As observed in this [comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5397#note_1094164054), if `params = { auto_renew: false, renew: true }`, AmendSubscriptionService code will only generate `::Amendment::Types::TERMS_AND_CONDITIONS`.

However, `ActionTypesGenerator` will generate both actions: `:renew_subscription` and `:terms_and_conditions`.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Update `check_renewal` in `ActionTypesGenerator` to check for auto renewal and adding new product:

```ruby
def check_renewal
  return unless renewing?
  return if auto_renew_amendment?
  return if adding_new_product?

  actions << :renew_subscription
  actions << :update_product if eoa_starter_bronze_uplift_qualified?
end
```

### Result

### Next steps (if any)

### How will we measure success?",2
114691429,2022-09-08 20:01:54.722,Add application instrumentation category,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

'Application instrumentation' category was [recently added](https://gitlab.com/gitlab-com/www-gitlab-com/raw/master/data/stages.yml), it needs to be added to feature category config.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",1
114676684,2022-09-08 15:58:20.429,[Feature flag] Enable use_orders_api_subscription_update_workflow - Subscription Update,"<!-- Title suggestion: [Feature flag] Enable description of feature -->

# Summary

<!-- Short description of what the feature is about and link to relevant other issues. -->

This issue is to rollout [Transition Subscription Update workflow to use Orders API](https://gitlab.com/groups/gitlab-org/-/epics/9046) on CustomersDot production,
that is currently behind the [`use_orders_api_subscription_update_workflow`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/167/edit) feature flag.

## Owners

- Team: Fulfillment Platform
- Most appropriate Slack channel to reach out to: `#g_fulfillment_platform`
- Best individual to reach out to: @aish.sub 
- PM: @tgolubeva @mgass1 

## Stakeholders

<!--
Are there any other stages or teams involved that need to be kept in the loop?

- GITLAB_HANDLE of a PM
- The Support Team
- The Delivery Team
-->

## The Rollout Plan

- Partial Rollout with specific Customers on CustomersDot, [via Unleash](https://docs.gitlab.com/ee/operations/feature_flags.html#user-ids)
- Rollout on CustomersDot for a certain period (How long)
- Percentage Rollout on CustomersDot
- Rollout Feature for everyone as soon as it's ready

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? Sentry errors reports can also be useful to review -->

## Testing User/Customer IDs

<!--
List any Customer IDs for Customers that are happy to have this feature turned on early.

Remove if not applicable
-->

## Expectations

### What are we expecting to happen?

<!-- Describe the expected outcome when rolling out this feature -->

### What might happen if this goes wrong?

<!-- Should the feature flag be turned off? Any MRs that need to be rolled back? Communication that needs to happen? What are some things you can think of that could go wrong - data loss or broken pages? -->

### What can we monitor to detect problems with this?

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? -->

## Rollout Steps

### Rollout on non-production environments

- [x] Ensure that the feature MRs have been deployed to non-production environments, i.e. `customers-staging`.
- [x] Consider announcing that the flag will be enabled to potentially impacted groups, e.g. `#s_fulfillment_engineering`
- [x] Enable the feature globally on non-production environments by applying the appropriate environment, e.g. `customers-staging` and `customers-development`.
- [x] Notify the Software Engineers in Test (SETs) for Fulfillment via Slack and in a comment in this issue when enabling a feature flag in `customers-staging` as it can impact the QA pipeline.
- [x] Verify that the feature works as expected. Posting the QA result in this issue is preferable. https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5062

### Preparation before production rollout

- [x] Ensure that the feature MRs have been deployed to production
- [ ] Check if the feature flag change needs to be accompanied with a
  [change management issue](https://about.gitlab.com/handbook/engineering/infrastructure/change-management/#feature-flags-and-the-change-management-process).
  Cross link the issue here if it does.
- [x] Ensure that you or a representative in Fulfillment can be available for at least 2 hours after feature flag updates in production.
  If a different developer will be covering, or an exception is needed, please inform the Fulfillment team in #s_fulfillment_engineering
- [ ] Ensure any documentation has been updated
- [x] Announce on [the feature issue](ISSUE LINK) an estimated time this will be enabled on production if applicable
- [x] If the feature might impact the user experience, notify `#s_fulfillment` and potentially `#support_gitlab-com`, as well as your team channel ([more guidance when this is necessary in the dev docs](https://docs.gitlab.com/ee/development/feature_flags/controls.html#communicate-the-change)).

### Global rollout on CustomersDot production

- [x] Confirm the feature flag is enabled on `staging` without incident
- [ ] Roll out the feature to targeted testing users first (if applicable)
- [x] If applicable, [incrementally roll out](https://docs.gitlab.com/ee/operations/feature_flags.html#percent-rollout) the feature.
- [x] Verify the change has the desired outcome with the limited rollout before enabling the feature globally on production.
- [x] Enable the feature globally on production environment
- [ ] Announce on [the feature issue](ISSUE LINK) that the feature has been globally enabled.
- [ ] Wait for [at least one day for the verification term](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release).

### Release the feature

After the feature has been [deemed stable](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release),
the clean up should be done as soon as possible to permanently enable the feature and reduce complexity in the codebase.

<!-- The checklist here is to help stakeholders keep track of the feature flag status -->
- [ ] Create a merge request to remove `<feature-flag-name>` feature flag
  - [ ] Remove all references to the feature flag from the codebase
- [ ] Ensure that the cleanup MR has been deployed to both staging and production
- [ ] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [ ] Ensure production environment is still working as expected
- [ ] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [ ] Close this rollout issue.

## Rollback Steps

- [ ] This feature can be disabled by performing the following actions:
  - [ ] Disable the Unleash flag on the [feature flag page](LINK TO THE FEATURE FLAG EDIT PAGE)",1
114676562,2022-09-08 15:55:48.864,[Feature flag] Enable use_orders_api_to_preview_amendment - Preview Subscription Update,"<!-- Title suggestion: [Feature flag] Enable description of feature -->

# Summary

<!-- Short description of what the feature is about and link to relevant other issues. -->

This issue is to rollout [Use of Orders API when previewing Subscription Update](https://gitlab.com/groups/gitlab-org/-/epics/9046) on CustomersDot production,
that is currently behind the [`use_orders_api_to_preview_amendment`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/157/edit) feature flag.

Testing issue: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5063

## Owners

- Team: Fulfillment platform
- Most appropriate Slack channel to reach out to: `#g_fulfillment_platform`
- Best individual to reach out to: @tvellishetty 
- PM: @tgolubeva 

## Stakeholders

<!--
Are there any other stages or teams involved that need to be kept in the loop?

- GITLAB_HANDLE of a PM
- The Support Team
- The Delivery Team
-->

## The Rollout Plan

- Partial Rollout with specific Customers on CustomersDot, [via Unleash](https://docs.gitlab.com/ee/operations/feature_flags.html#user-ids)
- Rollout on CustomersDot for a certain period (How long)
- Percentage Rollout on CustomersDot
- Rollout Feature for everyone as soon as it's ready

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? Sentry errors reports can also be useful to review -->

## Testing User/Customer IDs

<!--
List any Customer IDs for Customers that are happy to have this feature turned on early.

Remove if not applicable
-->

## Expectations

### What are we expecting to happen?

<!-- Describe the expected outcome when rolling out this feature -->

### What might happen if this goes wrong?

<!-- Should the feature flag be turned off? Any MRs that need to be rolled back? Communication that needs to happen? What are some things you can think of that could go wrong - data loss or broken pages? -->

### What can we monitor to detect problems with this?

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? -->

## Rollout Steps

### Rollout on non-production environments

- [x] Ensure that the feature MRs have been deployed to non-production environments, i.e. `customers-staging`.
- [ ] Consider announcing that the flag will be enabled to potentially impacted groups, e.g. `#s_fulfillment_engineering`
- [x] Enable the feature globally on non-production environments by applying the appropriate environment, e.g. `customers-staging` and `customers-development`.
- [x] Notify the Software Engineers in Test (SETs) for Fulfillment via Slack and in a comment in this issue when enabling a feature flag in `customers-staging` as it can impact the QA pipeline.
- [ ] Verify that the feature works as expected. Posting the QA result in this issue is preferable.

### Preparation before production rollout

- [x] Ensure that the feature MRs have been deployed to production
- [ ] Check if the feature flag change needs to be accompanied with a
  [change management issue](https://about.gitlab.com/handbook/engineering/infrastructure/change-management/#feature-flags-and-the-change-management-process).
  Cross link the issue here if it does.
- [x] Ensure that you or a representative in Fulfillment can be available for at least 2 hours after feature flag updates in production.
  If a different developer will be covering, or an exception is needed, please inform the Fulfillment team in #s_fulfillment_engineering
- [ ] Ensure any documentation has been updated
- [x] Announce on [the feature issue](ISSUE LINK) an estimated time this will be enabled on production if applicable
- [x] If the feature might impact the user experience, notify `#s_fulfillment` and potentially `#support_gitlab-com`, as well as your team channel ([more guidance when this is necessary in the dev docs](https://docs.gitlab.com/ee/development/feature_flags/controls.html#communicate-the-change)).

### Global rollout on CustomersDot production

- [x] Confirm the feature flag is enabled on `staging` without incident
- [ ] Roll out the feature to targeted testing users first (if applicable)
- [ ] If applicable, [incrementally roll out](https://docs.gitlab.com/ee/operations/feature_flags.html#percent-rollout) the feature.
- [x] Verify the change has the desired outcome with the limited rollout before enabling the feature globally on production.
- [x] Enable the feature globally on production environment
- [x] Announce on [the feature issue](ISSUE LINK) that the feature has been globally enabled.
- [ ] Wait for [at least one day for the verification term](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release).

### Release the feature

After the feature has been [deemed stable](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release),
the clean up should be done as soon as possible to permanently enable the feature and reduce complexity in the codebase.

<!-- The checklist here is to help stakeholders keep track of the feature flag status -->
- [ ] Create a merge request to remove `<feature-flag-name>` feature flag
  - [ ] Remove all references to the feature flag from the codebase
- [ ] Ensure that the cleanup MR has been deployed to both staging and production
- [ ] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [ ] Ensure production environment is still working as expected
- [ ] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [ ] Close this rollout issue.

## Rollback Steps

- [ ] This feature can be disabled by performing the following actions:
  - [ ] Disable the Unleash flag on the [feature flag page](LINK TO THE FEATURE FLAG EDIT PAGE)",1
114675808,2022-09-08 15:44:26.912,Add warning in Danger if a mailer preview is skipped,"## Proposal

- [x] Add previews for any mailers that don't already have one
- [x] Add a warning to [the mailers Dangerfile](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/f8315c9636beef4f2c9baf0a6537f2db91fd325a/danger/mailers/Dangerfile), `mailers/Dangerfile`, to remind people to add a mailer preview if it's not in the MR.

## Follow-up

The following discussion from !5396 should be addressed:

- [ ] @cwiesner started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5396#note_1093158284):  (+1 comment)

    > **question (non-blocking):** I wonder if it makes sense to add some checks to ensure we have a preview available for every mail :thinking:",1
114609928,2022-09-07 20:10:21.104,Determine TERMS_AND_CONDITIONS order action using Orders API,"### Problem

Use `ActionTypeGenerator` to determine when a request pertains to updating `TERMS_AND_CONDITIONS` of a subscription.

### Proposal

![Amendment_Manager_Service](/uploads/0d268933ceafe24643b111892095c38d/Amendment_Manager_Service.png)

In this issue, we address (1), (2) and (3) for 'TERMS_AND_CONDITIONS' functionality in the following ways:

(1) Add method `#check_terms_and_conditions` to `Orders::Amendment::ActionTypesGenerator` (see `#check_renewal` for implementation structure). The method returns based on the `params` whether a product is being added to subscription. Use existing logic from `AmendSubscriptionService`.

(2) Add method `#terms_and_conditions` to `Zuora::Orders::FeatureAvailability`. This checks if `Unleash.enabled?(:use_orders_api_terms_and_conditions_workflow)` is enabled. Add `terms_and_conditions` to `SUPPORTED_TYPES` constant

(3) Create validator `Zuora::Orders::Amendment::Validators::TermsAndConditions`. Implement `#validate` method that validates if the request for updating terms and conditions is valid. (see `Renewal validator` for implementation structure). Use existing validation logic from `AmendSubscriptionService`. If no validation is present, the validator can return an empty array.

Create FF `use_orders_api_terms_and_conditions_workflow`.

### Result

### Next steps (if any)

### How will we measure success?",2
114472408,2022-09-06 01:13:05.448,Set default payment before an upgrade,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Before an upgrade (adding new and removing existing main product), the [default payment method is updated](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/34a6597b6ae6e3b9bd304a7e83db7847c28f0939/app/services/amendment_base_service.rb#L217).

We need a way to incorporate this change when upgrading using Orders API.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

One option is to set the default payment in the [`PreCreationService`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/34a6597b6ae6e3b9bd304a7e83db7847c28f0939/app/services/zuora/orders/pre_creation_service.rb).

### Result

### Next steps (if any)

### How will we measure success?",2
114364728,2022-09-02 18:11:26.677,Remove obsolete worker CreateAmendmentWorker,"### Problem

It appears that as of https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5064, the `CreateAmendmentWorker` is no longer used within CustomersDot.  It was previously used in the `billingRateUpdateJob` but this was removed in favor of the renewal capabilities of the `AutoRenewJob`.

### Proposal

Let's remove the obsolete worker, `CreateAmendmentWorker`, and its related code.",1
114362745,2022-09-02 16:58:41.228,Change type of `actions` from Array to Set,"The following discussion from !5354 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5354#note_1086797196):  (+1 comment)

    > **Suggestion (non-blocking):** I wonder if we made `actions` a [Set](https://ruby-doc.org/stdlib-2.7.6/libdoc/set/rdoc/Set.html) instead of an Array, if that would be slightly more efficient.  It would eliminate duplicates so we wouldn't need to call `.uniq` here.  WDYT?
    > 
    > This could be in a different MR if you like the suggestion.",1
114349235,2022-09-02 12:50:13.558,Exclude unsactioned region on GitLab.com purchase page,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

Background: https://gitlab.com/gitlab-com/legal-and-compliance/-/issues/1024

### Problem


On the country pick list, ""Ukraine"" specifically excludes ""the Crimea Region"" but should be updated to exclude ""the Crimea, Donetsk, and Luhansk regions""

![image](/uploads/2167f351b27ad5d728e89f92572fa575/image.png)

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Exclude ""the Crimea, Donetsk, and Luhansk regions""

### Result

Country list is compliant

### Next steps (if any)

### How will we measure success?",3
114321038,2022-09-01 22:37:00.232,Business driven validation for order actions,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

In addition to validating individual order action types, there are other complex, business driven validations such as [validating an upgrade](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/d2d6b0627183cb23baa6b296d76c3718ae7b56b5/app/services/amendment_base_service.rb#L215) and so on.

This kind of validation most often involves more than one order action type.

![CamScanner_09-01-2022_16.19_1](/uploads/2ae42e10e6fae86e5e0307d768b8ef53/CamScanner_09-01-2022_16.19_1.jpg)

The purpose of this issue is to add ability to validate the business driven validations.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

There are at least two ways we can approach it:

- have all the complex use cases in a single file with separate methods OR,
- have a separate class for each of them

TBD.

### Result

### Next steps (if any)

### How will we measure success?",2
114311181,2022-09-01 18:45:35.537,Use Orders API for Plan upgrade workflow,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

When upgrading a plan (for e.g. from `Premium` to `Ultimate`), [`subscription_upgrades`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/58b903bd713166e58c21b469779859320e2fc10b/config/routes.rb#L102) endpoint is used to preview and perform the upgrade.

There are specifically two Order action types involved: Add a product and Remove a product.

This issue pertains with using Orders API to perform the upgrade.

Related to https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5335#note_1085605708

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",3
114296571,2022-09-01 14:12:52.322,Investigate: activation code error received for unknown reason,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
Customer received a generic error while trying to apply a cloud license activation code. Details:
* Customer had seat overages, but paid for them as true-ups. However they were applied as two different line items. Was the system maybe not recognizing that all true-ups were paid for?
* They first tried to apply the activation code prior to the subscription start date of the renewal; this is when the error occurred. Once they tried on the first day, they were successful in activating. Could the date be a factor?

Supporting material:
* Full context in Slack thread: https://gitlab.slack.com/archives/CMJ8JR0RH/p1661547828336769
* Zendesk Ticket link (includes screenshot of customer admin view): https://gitlab.zendesk.com/agent/tickets/318851

### Ask
* Investigate what caused this error to occur.
* Determine how this can be prevented in the future - do we need any changes, or was this a one-off situation?

### Resolution
![image](/uploads/4927d71ef63cd2929be891a581037175/image.png)",5
114296114,2022-09-01 14:05:14.734,"Take care of `app/jobs/zuora` classes (Follow-up from ""Add feature categories to job classes"")","The following discussion from !5333 should be addressed:

- [ ] @paulobarros started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5333#note_1084189875):  (+2 comments)

    > @ebaque Hi Etienne, this looks good to me but I see that some jobs were not included in this categorization (e.g. the ones under the `zuora` folder and a couple more audit-related). Sorry for my lack of context but just for my understanding, could you elaborate a bit on that? I wonder why can't we apply the `:not_owned` category to those. Thanks!",1
114276693,2022-09-01 08:54:39.471,Update Subscription Stories in Storybook,"The [subscription.stories.js](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/dcbaa3cf09dc0acfe3f32b73720077bebee98a02/stories/subscription.stories.js) is out of sync with the `subscription.vue` component.

For example the story of [Subscription - one product](http://localhost:6006/?path=/story/subscription--no-products) is displaying a renew button where there's no product available.

We should update the story accordingly and also update its format to use [controls](https://storybook.js.org/docs/react/essentials/controls).",1
114239899,2022-08-31 16:01:18.416,Impact to SalesForce amendment opportunity creation with migration to Zuora's Orders API,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Background

With https://gitlab.com/groups/gitlab-org/-/epics/6438, new subscription creation and amendment to existing subscriptions will be executed using Zuora's Orders API instead of Subscribe and Amend API.

After a subscription is created, an account in SalesForce is [created](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/a0563d4d477684f0a49b56e57fff2eeb8ba8f469/app/services/subscription_manager_service.rb#L77).
After a subscription is amended, an opportunity is created in SalesForce ([source](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/a0563d4d477684f0a49b56e57fff2eeb8ba8f469/app/services/self_service/subscriptions/update_service.rb#L57)).

When a subscription is amended, the [list of amendments](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/a0563d4d477684f0a49b56e57fff2eeb8ba8f469/app/services/self_service/subscriptions/update_service.rb#L97) are sent to the opportunity creation service and the opportunity creation payload includes attributes that are [retrieved from the amendments](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/a0563d4d477684f0a49b56e57fff2eeb8ba8f469/app/services/salesforce/create_quote_objects_service.rb#L104).

### Problem

Zuora's Orders API creates composite amendments, however they will [no longer be available once Orders harmonization is turned off](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4643#note_1079761771). (Orders harmonization lets the use of both Orders and Subscribe & Amend apis in parallel).

Thus, before rolling out the use of Orders API for amendment related actions, we need a way to determine:

  - [ ] does this change require updates to Amendment Quote (currently `sObject` is set to `zqu__QuoteAmendment__c` and result key to `quote_amendment_id`)? This requires input from `Sales Systems` team. 
        Please note this will also require a plan to support both types during the transition period from Amendment API to Orders API.

  - [ ] will this change involve updates to existing attributes or inclusion of any new attributes? This requires input from `Sales Systems` team. 

  - [x] determining the amendment related attributes that corresponds with Orders. Possible leads include using invoice line items / abstracting information from order actions. This requires input from `Fulfillment engineering` team. 

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

TBD

### Result

Opportunity creation in SalesForce works seamlessly with the migration to Orders API.

### Next steps (if any)

### How will we measure success?",3
114239795,2022-08-31 15:58:17.172,Remove self service condition from activation code logic,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

## Background

The original activation code logic had a couple of checks in place in order for a code to be generated:
1. Validate the Super Sonics fields (i.e. auto-renewal, operational metrics) were populated OR
2. Validate the purchase was made through self service 

In reviewing this logic, it was determined that there was no need for the SS field dependency (detailed reasoning outlined [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4688#note_1070731626)). As a result, this was removed as part of this issue: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4688

## Problem
Since this update, we have identified that the activation code logic still includes the check that a purchase was completed through a self-service path. With the SS logic removed, this is now preventing activation code creation for _all_ sales assisted Self-Managed purchases.

_Note: self-service purchases are still working as expected_

#### Reported Examples
1. https://gitlab.zendesk.com/agent/tickets/321798 
2. https://gitlab.slack.com/archives/C018C623KBJ/p1661947151593559?thread_ts=1661268847.706399&cid=C018C623KBJ

### Proposal

Remove the `self_service?` check altogether from the activation code logic.


### Result
Cloud activation codes will be created for all Self-Managed subscriptions who do not have `TurnOnCloudLicensing` = `No`, regardless of purchase method.",1
114236503,2022-08-31 15:00:01.931,Follow up: Add Product Order Action,"### Summary

The following feedback is addressed: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5320#note_1083185137

For the checks in this form:

```ruby
raise SomeError, 'Error message' unless value
```

Within the `orders/actions` we want to update to

```ruby
raise SomeError, 'Error message' if value.blank?
```

To account for empty strings and other possible empty states.",1
114129936,2022-08-30 07:35:58.093,Marketplace subscription ZuoraCallbackWorker wait for the right order status,"After marketplace subscription is created, when Zuoracallback starts, in theory, there is a chance:
- the new customer record is not committed (because we are using [DB transaction](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/fc0f52c30c4420b8f79d8b3a2ba2c4da04236ece/app/services/marketplace/create_subscription_service.rb#L21-26))
- the [new order creation](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/fc0f52c30c4420b8f79d8b3a2ba2c4da04236ece/app/services/marketplace/create_subscription_service.rb#L28) has not finished yet

In reality, these are less likely(we assume the Postgres DB transaction and Rails code runs fast enough). But we should ensure to handle this safely.

Depends on https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4732+

### Proposal

In the Zuora callback worker, add a validation as the first thing:
 1. check whether this is a marketplace subscription. If it is NOT a marketplace subscription, return.
     - A marketplace subscription is a subscription with: `Marketplace::CHANNELS.include?(external_subscription_source)`
 2. query the MarketplaceOrder table, check the order status. raise exception if the `status != :created`.
     - The Zuoracallback worker will retry, per the Sidekiq worker retry settings.
     - If it does not succeed after all retries, this requires a manual check. This is unexpected. Actually, most likely we will perform more frequently(probably daily) check the failed Marketplace order.

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

Avoid unexpected errors from duplicated Customer record and Order record creation competition. -- as the same customer/order creation will be initiated from both Rails(Marketplace::CreateSubcriptionService) and Sidekiq(ZuoracallbackWorker).

### Next steps (if any)

### How will we measure success?",2
114126201,2022-08-30 06:34:19.854,Validate duplicate Marketplace order request,"We want to validate a marketplace request duplication. For duplicated requests, we will return error message.

The proposal is [option 2 in the comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4637#note_1066891473).

We allow the same `external_subscription_source`/`external_subscritpion_id` to retry when the request processing failed. For other status, we reject the request with an error message.
* When a Marketplace request comes, we search saved `external_subscription_source`/`external_subscritpion_id` with `status != 'failed'`. If found, reject the request. Otherwise, continue.
* We **upsert** `external_subscription_source`/`external_subscritpion_id`, update the status as `in_progress`.
* When the CDot failed to create the subscription, we mark the status as `failed`(This includes other validation failures)
* When the CDot succeeds to create the subscription, we mark the status as `created`
* When the CDot succeeds to notify the customer(and reseller?), we mark the status as `provisioned`

This issue depends on issue https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4732+

### Problem

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",2
114125828,2022-08-30 06:25:46.935,Track the Marketplace order status,"### Background:

**NOTE**: ATM we only have one Marketplace partner, which is `Arrowsphere`. So the below description uses `Arrow` to describe the scenario. However, this scenario applies to all Marketplace orders. It does not limit to Arrow.

Previously Arrow system talks to Gitlab Platypus API endpoint(and then Platypus talks to CustomersDot). We will remove Platypus in this communication chain.

* previously(as of today): `Arrow -> Platypus -> CustomersDot`
* after removing Platypus, Arrow will directly talk to CustomersDot: `Arrow -> CustomersDot`

In order to achieve this, there are several changes required on CustomersDot side.

1. implement OAuth provider in CustomersDot. This allows secure API access control. We propose to use `doorkeeper` gem.
1. add required data mapping in CustomersDot. This maps some Arrow payload data to the CustomersDot/Zuora/SFDC required values.
1. track the Arrow order status. The status is used to:  allow Arrow to poll the order status; validate duplicate requests; ensure to take action safely only on the right order status.
1. provide API endpoint for Arrow to poll the order status.

For more information, refer to the task breakdown at https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4637#note_1062429151.

### This issue's scope

This issue covers the thrid task `track the Arrow order status`

#### Proposal

Create a table `MarketplaceOrders`(columns: `external_subscription_source, external_subscription_id, payload, status(:creating, :failed, :created, :provisioned)`. This has the benefit to prevent duplicated API requests from Arrow.

* An Arrow create order request comes
* If there is a validation error, return failure without tracking this order.
* Check the existence of `external_subscription_id`/`external_subscription_source`. 
   * If does not exists, create new `marketplace_orders` record for this `external_subscription_id`/`external_subscription_source`, and mark the status as `:creating`. Continue
   * If exists and the status is `:failed`, reset the order(status to `:creating`, payload to new payload). Continue.
   * If exists and the status is not `:failed`, return duplicated order error.
* Start to create the customer/subscription/order/sfdc..
* If the CDot failed to create the subscription, mark the status as `failed`
* When customer/subscription/order are created, mark status as `:created`
* After notify_customer(this is currently in ZuoracallbackWorker), mark the status as `:provisioned`.

#### Where does the `check duplicate marketplace order` sit in the process flow.
**NOTE**: this is a simplified flowchart. It does not contain some steps like `map payload`, `check Visual compliance`, `check customer existance`. We could also consider all of these as part of the general `create subscription` node.

```mermaid
graph TD
    A(Start) -->|POST order request received| B[Authentication]
    B --> C{Authenticated?}
    C -->|No| D(Reject request)
    C -->|Yes| E[Validate payload]
    E --> F{valid payload?}
    F -->|No| D
    F -->|Yes| G[check existing order record]
    G --> H{order exists?}
    H -->|No| L[Create order record]
    L --> I[Create subscription]
    H -->|Yes|J{existing order failed?}
    J -->|No| D
    J -->|Yes| K[Reset order status]
    K --> I
    
```

#### State transition diagram
```mermaid
stateDiagram-v2
    [*] --> creating
    creating --> created: Customer/Order/ZuoraSubscription created
    creating --> failed: Encounter error
    failed --> creating: Receive the order request again
    created --> provisioned: Customer notification sent
    provisioned --> [*]
            
```
### Problem

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",3
25682258,2019-10-07 11:38:47.157,Serve CSS styles through webpacker,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

During the process of moving JavaScript code to `webpack` we don't do anything with styles. But we are going to drop `sprockets` completely. Dropping it will require moving styles processing to `webpack` too. I also would like to point that we will connect Pajamas Design System via Node.js packaging system (`@gitlab/ui`).

### Proposal

Move styles processing to `webpacker` too.

Note: moving to webpacker is also on the CSS roadmap for the GitLab project. https://gitlab.com/groups/gitlab-org/-/epics/950#css-roadmap 

### Result

This will make the process of moving to Pajamas easier. For example, #663.
Another pro is we can start using features like `autoprefixer`.

### Next steps (if any)

### How will we measure success?",3
25679630,2019-10-07 10:21:25.684,Broken deployment: Upgrade flow,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
We introduced a bug in !470 (f951c19f) 
Events are not being set correctly on Info Panels.

This got onto `staging` because we were in the middle of transitioning from feature test quarantine.",2
25619983,2019-10-04 09:18:15.008,[Portal Pajamas] Add FE testing infrastructure,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
Currently our only way of testing JS is to spin up a feature spec.

This is slow and overkill in many cases.
### Proposal
Adopt the [gitlab FE testing guide](https://docs.gitlab.com/ee/development/testing_guide/frontend_testing.html) to our needs.
Since the Customer portal differs from gitlab-com (notably in size) we should only adopt what makes sense.

Be sure to add `vue-test-utils` and a small Vue test
### Result
We have increased confidence in our JS
### Next steps (if any)
Add coverage report metrics to CI (?)",5
25619708,2019-10-04 09:10:43.195,[Portal Pajamas] Consume gitlab-ui components,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
The Customer Portal should follow the Pajamas design system.
The best way to ensure that's the case is to use the codified implementation of it: [gitlab-ui](https://gitlab.com/gitlab-org/gitlab-ui)

### Proposal
Setup infrastructure to consume `gitlab-ui` Vue components.

- [x] Add Vue webpack support https://github.com/rails/webpacker#vue
- [x] Add `gitlab-ui` dependencies: `Bootstrap` v4 
- [x] Add `gitlab-ui` dependencies: `bootstrap-vue`
- [x] Ensure migrating from `Bootstrap` v3 -> v4 does not break UI and any visual changes are intentional; handled in https://gitlab.com/gitlab-org/customers-gitlab-com/issues/753
- [x] Add `gitlab-ui` as a dependency
- [ ] Migrate a small piece of UI behind a feature flag (registrations form f.x.) WIP in https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/603",5
25602264,2019-10-03 20:51:07.266,Remove import.rake & RecurlyMigrationMailer,"### Problem
I noticed while working on a separate issue that `lib/tasks/import.rake` and the `RecurlyMigrationMailer` hasn't been touched in a while.  I wondered if this was still being used, or if this was a relic of an old migration?

### Proposal
If deemed obsolete, remove the following:
- `lib/tasks/import.rake`
- `RecurlyMigrationMailer`
  -  related views and specs

### Result
A cleaner codebase! :100:",1
25576467,2019-10-03 08:41:19.602,Add com routes to rubocop.yml,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
To add `com` related routes to `rubocop.yml`

### Proposal

### Result

### Next steps (if any)

### How will we measure success?",1
25558820,2019-10-02 20:46:45.167,Move trial registration api under com module,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
Trials Registration api is specific to `gitlab.com`. It currently resides under `ee` module with a check to see if it is a `gl.com` environment.

### Proposal
Move the Trials Registration api under the `com` module.

### Result

### Next steps (if any)

### How will we measure success?",2
25551371,2019-10-02 16:16:48.871,Add documentation for developers to add Com-only code,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
1. With the `.com` code segregation, add developer documentation on the steps to add code specific to only `com`
2. Add a checkbox to MR `Separation of Com specific content`

### Proposal

### Result

### Next steps (if any)

### How will we measure success?",2
25547989,2019-10-02 14:46:33.235,Create skeleton files and folders for com module,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
Add logical code seperation for `com` module that would get loaded only for `com` environement.

### Proposal
Create `com` module with the following hierarchy:

![Screen_Shot_2019-09-24_at_8.04.42_PM](/uploads/2bd0c0a973e99af5eafa09c35e23223b/Screen_Shot_2019-09-24_at_8.04.42_PM.png)

1. Load the module only if it's a `com` environement
2. Draw `com` specific routes only if it's a `.com` environment

### Result

### Next steps (if any)

### How will we measure success?",2
25469038,2019-09-30 19:21:00.237,De-couple any trial related information/integration from customers.gitlab.com,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Historically, trials were integrated with the customer portal to store customer data. This leads to an additional point of failure with trials if something goes wrong, and Fulfillment becomes a bottleneck for fixing any trial issues which are dependent on this integration as Marketing cannot fix it themselves. It also makes it harder to identify issues with trials if there are more points of failure.

### Proposal

Trials should not need to interact with the portal or any other tool other than Marketo > Salesforce for lead creation. We should remove any integrating code regarding trials from the portal and run a clean up of customer information and accounts in the portal that relates to trials. 

### Result

### Next steps (if any)

### How will we measure success?",8
25381447,2019-09-27 12:37:57.145,Use Sentry to proactively catch errors,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
It's not clear which developers should react to Sentry error reports in the Customer Portal.
The reports we currently have need to be triaged.

We're also suffering from similar issues mentioned https://gitlab.com/groups/gitlab-org/-/epics/737

### Proposal
Determine a process for handling Sentry errors.
Document and codify the process.

Enable relevant alerts for dev team; slack or email.

### Concrete TODOs

- [x] Update Sentry
- [x] Add SentryJS to JS bundle
- [ ] Upload sourcemaps to Sentry

### How will we measure success?
We're proactive in catching and fixing bugs instead of customers reporting them.",8
25364171,2019-09-27 02:44:17.927,Better error/warning messaging when installing new license,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

When installing a new license with seats less than historical max, the warning message is a bit misleading like below.

> “During the year before this license started, the GitLab installation had 77 active users, exceeding this license’s limit of 50 by 27 users. Please upload a license for at least 77 users or contact renewals@gitlab.com.”

The customer actually needs to pay true-up if they don't need to keep 77 users for the renewal. Once the license includes the true-up and seats for the new year it will work.

### Proposal

New message should display 

MVC (all cases) 

`The submitted license is not compatible with this system’s usage: X active users, Y maximum users and Z users in license. Please get in touch with our [Support team](https://support.gitlab.com/hc/en-us/requests/new?ticket_form_id=360000071293) for further assistance.`

Let's also update the banner so it uses the correct styling (from the design system):

![image](/uploads/fda050a6a6bda7d60f7b217481d1345d/image.png)

### Alternate Approach
If we are able to create tailored messages for each [error case](https://gitlab.com/gitlab-org/customers-gitlab-com/issues/713#note_276616812), then we will want to provide better specific information for the customers based on their situation. This is TBD based on initial investigation. 


### Result

### Next steps (if any)

* [ ] Eng to determine our ability to have tailored messages 
* [ ] Eng to define additional effort to provide tailored messages 
* [ ] If tailored messages are possible, we will need to create new ones for each case, assuming we want to invest the extra effort",2
25357852,2019-09-26 20:17:16.518,Bug: Customers portal trial form throwing error on missing field,"### Problem

user went to [this link](https://customers.gitlab.com/trials/new?return_to=http%3A%2F%2Flocalhost&id=YWRtaW5AZXhhbXBsZS5jb20=) and cannot complete trial because of this error `There were some errors when trying to generate your trial:
Company size can't be blank`.

### Steps to recreate

1. started gitlab-ee:latest in local docker environment.
2. from administration -> licenses click to ""obtain trial"" goes to this url

### User reports

1. https://gitlab.zendesk.com/agent/tickets/133408",1
25341724,2019-09-26 12:10:29.684,Extra purchased CI minutes aren't added to namespace where the namespace path contains a dot,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Extra purchased CI minutes do not apply to namespace where the namespace **path** contains a `.`. I suspect there was a change to the `/namespaces` endpoint.

`GET` works as expected, for example `GET /namespaces/deandre.test-group.2` returns:

```
{
  ""id"": 4248792,
  ""name"": ""deandre-test-group-2"",
  ""path"": ""deandre.test-group.2"",
  ""kind"": ""group"",
  ""full_path"": ""deandre.test-group.2"",
  ""parent_id"": null,
  ""avatar_url"": null,
  ""web_url"": ""https://gitlab.com/groups/deandre.test-group.2"",
  ""members_count_with_descendants"": 1,
  ""shared_runners_minutes_limit"": null,
  ""extra_shared_runners_minutes_limit"": null,
  ""billable_members_count"": 1,
  ""plan"": ""free""
}
```

`PUT` (and presumably `POST`) fails, for example `PUT /namespaces/deandre.test-group.2?extra_shared_runners_minutes_limit=1000` returns:

```
{
  ""error"": ""404 Not Found""
}
```

### Related Support Tickets (internal)

- https://gitlab.zendesk.com/agent/tickets/133265
- https://gitlab.zendesk.com/agent/tickets/135238",3
25315665,2019-09-25 18:15:09.034,"Follow-up from ""Make company_size optional""","The following discussion from !481 should be addressed:

- [ ] @jejacks0n started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/481#note_222130659): 

    > I’d say you can probably skip the added test, since generally testing a negative isn’t worth it. What might be better is to test a simulated request from zuora where it wouldn't be present.",1
25291865,2019-09-25 09:52:53.780,Update admin management roles,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Following up on https://gitlab.com/gitlab-org/customers-gitlab-com/issues/639 we should add a restriction so not all admins can add/remove admins

### Proposal

Add a flag in order to do this

### Result

### Next steps (if any)

### How will we measure success?",2
25271246,2019-09-24 18:23:33.918,Customers getting 500s on customers.gitlab.com  - ActionView::Template::Error: uninitialized constant TransactionViewer::LINK_GITLAB_ACCOUNT,"Relates to: https://gitlab.com/gitlab-com/support/dotcom/dotcom-internal/issues/886

https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/951624/

```
NameError: uninitialized constant TransactionViewer::LINK_GITLAB_ACCOUNT
  app/views/subscriptions/_update_btn.html.haml:10:in `_app_views_subscriptions__update_btn_html_haml___3390558228538312127_47056115447700'
    = link_to 'Link my GitLab.com account', edit_subscription_path(subscription.id,
  app/views/subscriptions/_subscription.html.haml:37:in `_app_views_subscriptions__subscription_html_haml___1229786290608102266_47056103999600'
    = render 'subscriptions/update_btn', subscription: subscription
  app/views/subscriptions/index.html.haml:7:in `_app_views_subscriptions_index_html_haml___3338024472363674668_47056104101860'
    = render partial: 'subscription', collection: @subscriptions
  app/middleware/basic_health_check.rb:20:in `call'
    return @app.call(env) unless env['PATH_INFO'] == HEALTH_PATH
...
(157 additional frame(s) were not displayed)

ActionView::Template::Error: uninitialized constant TransactionViewer::LINK_GITLAB_ACCOUNT

ActionView::Template::Error: uninitialized constant TransactionViewer::LINK_GITLAB_ACCOUNT
```

## Reported Examples

1. https://gitlab.zendesk.com/agent/tickets/132861
1. https://gitlab.zendesk.com/agent/tickets/133079",1
25230005,2019-09-24 09:18:33.750,Changing country on existing customers does not allow for changing state / province,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
The state list is not updating when changing countries in edit profile
_Note how the state list is the same_
![state-list-not-updating](/uploads/f855ad3970bd1a91e1bc8e323c52daf7/state-list-not-updating.gif)

Behavior should be the same as when creating a user
![state-list-updating](/uploads/de44b5b3e7bb39febf37e3dd89a998d9/state-list-updating.gif)",1
25000337,2019-09-19 18:10:40.043,[Frontend] Make Auto Renew the Default and Disable Ability to Turn it Off,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

### Proposal

### Result

### Next steps (if any)

### How will we measure success?",2
24994860,2019-09-19 15:12:34.769,Fix width of the Company select box on the Registration form,"The following discussion from !450 should be addressed:

- [ ] @oswaldo [commented](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/450#note_219403305):

    > @tyleramos Minor thing, should the Country select be touching the State / Province one? Feels like it's surpassing the width a bit.",1
24904585,2019-09-17 14:41:01.100,Increase services test coverage,"### Problem
Services with little to no test coverage:
![Screen_Shot_2019-09-17_at_10.38.44_AM](/uploads/2f4ef038afcf1643793f1a637f15fa23/Screen_Shot_2019-09-17_at_10.38.44_AM.png)

### Proposal
Increase the test coverage of these services, ideally at least up to 70%.

We could also consider adding ""Services"" as its own tab to the SimpleCov coverage html page.

### Result
Better coverage around services.",5
24755822,2019-09-13 09:01:20.693,Investigate and address flaky feature tests,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
Our pipelines are randomly going red, the constant factor are tests heavily interacting with Zuora.

https://gitlab.com/gitlab-org/customers-gitlab-com/-/jobs/294574079 (this one is waiting a full minute)
https://gitlab.com/gitlab-org/customers-gitlab-com/-/jobs/294376711


### Proposal

Short term: disable the feature tests; they're causing more headache than helping

Next steps: Figure out the cause of this.
Possible causes are
- Poorly written tests
- Zuora sandbox is shaky - either the system or conflicting because of shared credentials.
- Our project is shaky (I really hope this isn’t the case)

Go through this checklist https://docs.gitlab.com/ee/development/testing_guide/flaky_tests.html

### Result
We have tests that we can trust.",3
24739404,2019-09-12 19:33:48.866,Remove log rotation logic from codebase,"### Problem
There are some places in the codebase (see list below) that define custom log rotation policies.  There may be others as well.
*  [upgrade_subscription_plan_service.rb](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/staging/app/services/gitlab/hosted_plans/upgrade_subscription_plan_service.rb#L10)
*  [billing_rate_update_service.rb](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/staging/app/services/gitlab/hosted_plans/billing_rate_update_service.rb#L7)

[More info on this topic can be found here](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/379#note_192191916).

### Proposal
Remove this logic from the code and rely on Linux log rotation tools.  This will likely involve changes to server setup/cookbooks.

### Result
The code is not tied to log rotation logic making it cleaner and easier to maintain.

### Next steps (if any)

### How will we measure success?",3
24737542,2019-09-12 18:20:33.390,Use seperate Zuora credentials for pipelines testing and local development,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
~~The credentials used in the pipeline and are recommended for use in [our README](https://gitlab.com/gitlab-org/customers-gitlab-com/tree/staging#setup-commands) are the same.~~ Not the case actually: however they are being used locally by some developers.

This could be a factor in conflicting Zuora credentials causing specs to randomly fail https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/456#note_216365165

### Proposal
Rotate the credentials used in our pipelines.

1. Rotate the [CI Pipelines](https://apisandbox.zuora.com/apps/HostedPageLite.do?method=preview&id=2c92c0f85b1ab29a015b34a60fb22f52) credentials
1. Update ENV variables on CI
1. Update Zuora details in `config/secrets.yml.example`
1. Don't hand `zuora_cc_payment_page_id` and CI API credentials out.


### Result
Less flaky feature tests.

### How will we measure success?
Pipelines don't go red randomly.",2
24737033,2019-09-12 18:00:38.484,Compare Capybara setup between Customer portal and GitLab; port what makes sense,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
A screenshot setting was missing from our capybara configuration.
Background: https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/457
There might be more configuration worth having.
### Proposal
Look through [the CE file](https://gitlab.com/gitlab-org/gitlab-ce/blob/master/spec/support/capybara.rb) and port what makes sense
### Result
Better capybara runs.",2
24734836,2019-09-12 16:23:44.416,"Pajamas Update: Portal ""Sign in/Registration"" Page","### Designs

| Interface | Description |
| ------ | ------ |
| **Sign In**<br>![Sign_In](/uploads/67d3035fb864dd301e9c86836294a2ab/Sign_In.png) | To keep consistent, I'm using the same styling from https://gitlab.com/users/sign_in and https://gitlab.com/-/trials/new (if you are not logged in) |
| **Register**<br>![Register](/uploads/35b1c68af57bb534fd5a784237009bc6/Register.png) | All input fields are kept the same with current implementation except for the Password field. If possible this is a good opportunity to remove the password confirmation field and reduce user friction. |

### Design Specs

https://gitlab-org.gitlab.io/gitlab-design/hosted/tim/&1886-customers-portal-pages-redesigns/sign-in-register/",3
24734756,2019-09-12 16:21:23.156,"Pajamas Update: Portal ""Payment Methods"" Page","## Current Design

<img width=""400"" src=""/uploads/14fc65b7b08269f6fb06600e0e640fd1/payment-methods.png"">

## Proposal Designs

| Empty State | Default View | Add Payment Method (Credit Card) |
| ------ | ------ | ------ |
| ![Payment_Methods_1_2x](/uploads/f164e3606be5b93743effe9dd7a8b551/Payment_Methods_1_2x.png) | ![Payment_Methods_2](/uploads/09c7a9ca9e9ea5ee7ebdef37bc365fb1/Payment_Methods_2.png) | ![Payment_Methods_3_2x](/uploads/95cdde533c5a57b40b704bd3015a623b/Payment_Methods_3_2x.png) |
| !610 | !610 | !639 |

| Add Payment Method (ACH) | Edit Payment Method (Credit Card) | Edit Payment Method (ACH) |
| ------ | ------ | ------ |
| ![Payment_Methods_4_2x](/uploads/c7be92212d6e15aa8bdedfbeb9da98e6/Payment_Methods_4_2x.png) | ![Payment_Methods_5_2x](/uploads/90c52b812ddf65f444fa25df71df7f00/Payment_Methods_5_2x.png) | ![Payment_Methods_6_2x](/uploads/fc95fa092e7c48d1372587946000cb73/Payment_Methods_6_2x.png) |
| !639 | !772 | !900 |

### Design Specs
https://gitlab-org.gitlab.io/gitlab-design/hosted/tim/&1886-customers-portal-pages-redesigns/payment-methods",3
24734720,2019-09-12 16:20:57.823,"Pajamas Update: Portal ""View Invoices"" Page","## Current Design

<img width=""400"" src=""/uploads/b09591e75dde389b5f6efb13889a25de/payment-history.png"">

## Proposal Designs

Formerly known as ""Payment History"" page in the portal.

| Empty State | List View |
| ------ | ------ |
| ![Payment_History_1_2x](/uploads/0e92d4af28a5a58bd1ebbeece2b7c7da/Payment_History_1_2x.png) | ![Payment_History_2_2x](/uploads/91596c28f043b3ebe67ce80c30604268/Payment_History_2_2x.png) |

### Design Specs

https://gitlab-org.gitlab.io/gitlab-design/hosted/tim/&1886-customers-portal-pages-redesigns/view-invoices/",3
24734710,2019-09-12 16:20:39.586,"Pajamas Update: Portal ""Manage Purchases"" Page","This is a sub-issue of the work being completed here: https://gitlab.com/groups/gitlab-org/-/epics/1788 to consolidate the redesign work of all the pages in the Customer Portal.

## Current Design

<img width=""400"" src=""/uploads/71baf0c373ea11a1313fc9caf054d673/manage.png"">

## Proposed Designs
#### Self-Managed Designs
| Interface | Description |
| ------ | ------ |
| **No Subscriptions (Empty State)**<br>![Manage_Purchases_1_2x](/uploads/d25d7d3f8fa24443a10174747dec868c/Manage_Purchases_1_2x.png) | This is the screen that is displayed when a user has no active subscriptions. |
| **Expanded Subscription Details**<br>![Manage_Purchases_2_2x](/uploads/84242a4746527e419731286c44d64a71/Manage_Purchases_2_2x.png) | An example of a user with two active subscriptions.<br>(1) Self-Managed Ultimate Subscription<br>(2) GitLab.com Bronze Subscription.<br><br>**Key Points**<br>- The first subscription is always expanded by default.<br>- Main CTA's `Add more seats`,`Renew`,`Change linked group`,`Buy more CI minutes`,`Upgrade` are exposed in the un-expanded state.<br>- If there is an active subscription the `Buy new subscription` button reverts to the secondary outline style.  |

#### GitLab.com Designs
| Interface | Description |
| ------ | ------ |
| **GitLab.com: Expanded Subscription (Details)**<br>![Manage_Purchases_3_2x](/uploads/f3d2b98af3498ac263d55698443a0b00/Manage_Purchases_3_2x.png) | **Key Points**<br>- Clear subscription details.<br>- ""Did you know"" section is an example of the ability to share pre-determined relevant information with users at set times during their subscription life-cycle. |
| **Expanded GitLab.com Subscription (Addons)**<br>![Manage_Purchases_4_2x](/uploads/99eb304979a25a390a78b24b32f7a2b3/Manage_Purchases_4_2x.png) | **Key Points**<br>- A historical view of the add-on purchases across the subscriptions life-cycle.  |

**Todo**
* [ ]  Include [dialog box informing customers who are purchasing a new instance](https://gitlab.com/gitlab-org/customers-gitlab-com/issues/232)
* [ ]  Gitlab.com - Add design for no linked group. 
* [ ]  Add design for linking to a custom user namespace.
",8
24734699,2019-09-12 16:20:10.302,"Pajamas Update: Portal ""My Account"" Page","## Current Design

<img width=""400"" src=""/uploads/e36dad6d4adc717361dd1788a5c567c8/my-account.png"">

## Proposal Designs

| Default view  | All modules expanded   |
| ------ | ------ |
| ![Account_details_1_2x](/uploads/144b9cf2287eaf9d43787900bc0546ca/Account_details_1_2x.png) | ![Account_details_2_2x](/uploads/5b1fd72eec38488063595916fae4134c/Account_details_2_2x.png) |

### Design Specs

https://gitlab-org.gitlab.io/gitlab-design/hosted/tim/&1886-customers-portal-pages-redesigns/account-details/",8
24695051,2019-09-11 15:33:36.418,[Portal Pajamas] Update the portal top NavBar to more closely resemble Gitlab's,"### Problem
The customer portal navigation doesn't resemble the navigation in the GitLab application. 

### Proposal
Update the navigation per design specs to more closely resemble the navigation of the GitLab.

![image](/uploads/5551290b9acb409f8fb5c603336e6e29/image.png)

[**Design Specs**](https://gitlab-org.gitlab.io/gitlab-design/hosted/tim/customers-gitlab-com%23676-update-the-portal-top-navbar-to-more-closely-resemble-gitlabs/)

| Menu item | Target page |
| ------ | ------ |
| Logo | `/` |
| Manage Purchases | `/manage-purchases` |
| View Invoices | `/invoices` |
| `?` Icon | It's a dropdown. No link here. |
| FAQ | `https://about.gitlab.com/pricing/licensing-faq/` |
| Support | `https://about.gitlab.com/support/#contact-support` |
| Contact Us | `https://support.gitlab.com/hc/en-us/requests/new?ticket_form_id=334447` |
| Submit feedback | `https://about.gitlab.com/submit-feedback/` |
| My account | It's a dropdown. No link here. |
| `CUSTOMER_NAME` | No link here. |
| Account details | `/customers/edit` |
| Payment methods | `/payment_methods` |
| Sign Out | `/customers/sign_out` |


### How will we measure success?

The customer portal provides a similar navigation experience as the GitLab application",3
24682791,2019-09-11 11:51:05.936,BCC Salesforce on EULA Emails,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
*  EULAS are either not being sent out or being sent out to the wrong individuals. Since these emails are not sent to out SFDC instance as well Reps have no idea who, when or if the EULAs were sent out.
### Proposal
*  Version 1 - have all EULA messages BCC our SFDC instance so that they get logged in on our records
### Result
*  This will reduce the pings coming from the field to SalesOps about EULAS being sent out
*  Decreased confusion in the field after they close a deal 
### Next steps (if any)
* [ ] The goal would be to BCC EULAs to our SFDC instance so that Sales Reps can see if they were sent out and if so to what email address
* [ ] Would we be able to alter how EULAs are sent out to BCC our SFDC instance while also keeping our BCC email address private? 
* [ ] We would want our BCC address private so that people can not find it and send emails directly into our SFDC instance 
* [ ] [Update the Customer Mailer](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/master/app/mailers/customer_mailer.rb) - to send to our SFDC instance. I believe that is the only edit that would be required but will leave to the trusted hands of our developers to determine the final scope 
### How will we measure success?
*  If EULAS can be found in SFDC after they are sent this will be a success",2
24675166,2019-09-11 08:25:09.533,[broken staging] Rspec failures on update_gitlab_namespace_plan_spec and subscriptions_spec,"```sh
Failures:

  1) Update GitLab Namespace Plan Admin can update the expiration date for a trial plan
     Failure/Error: page.select(new_end_date.year, from: 'trial_exp_on_year')

     Selenium::WebDriver::Error::ElementNotInteractableError:
       element not interactable: Element is not currently visible and may not be manipulated
         (Session info: headless chrome=77.0.3865.75)
         (Driver info: chromedriver=77.0.3865.40 (f484704e052e0b556f8030b65b953dce96503217-refs/branch-heads/3865@{#442}),platform=Linux 4.19.23-coreos-r1 x86_64)
     # ./spec/features/rails_admin/update_gitlab_namespace_plan_spec.rb:89:in `block (3 levels) in <top (required)>'
     # ./spec/features/rails_admin/update_gitlab_namespace_plan_spec.rb:81:in `block (2 levels) in <top (required)>'
     # ./spec/features/rails_admin/update_gitlab_namespace_plan_spec.rb:13:in `block (3 levels) in <top (required)>'
     # ./spec/features/rails_admin/update_gitlab_namespace_plan_spec.rb:13:in `block (2 levels) in <top (required)>'

  2) Subscriptions Successfully purchase and active subscription
     Failure/Error: find('#input-creditCardNumber', wait: 20)

     Capybara::ElementNotFound:
       Unable to find css ""#input-creditCardNumber""
     # ./spec/features/subscriptions_spec.rb:129:in `block (3 levels) in <top (required)>'
     # ./spec/features/subscriptions_spec.rb:127:in `block (2 levels) in <top (required)>'
```


This is blocking MRs to get merged into `staging` and blocking deployments too.",2
24619159,2019-09-10 01:53:19.113,Buying CI minutes for any namespace should never unassociate the paid tier subscription,"### Problem

When a group is subscribed to a paid tier (Bronze, Silver, Gold) on GitLab.com and has more billable users in the group on GitLab.com than is purchased in the subscription, when the user purchases additional CI minutes the following undesired behavior occurs -  

1. A new subscription is created for the CI minutes instead of the minutes being associated with the existing paid subscription. 
2. The group association to the previously purchase subscription (Bronze, Silver, Gold) is removed and the subscription is orphaned. 

### Steps to recreate

1. Create a group in GitLab.com
1. Purchase a subscription for any paid tier on GitLab.com for any number of users
1. Add more billable users to the GitLab.com group than the number of users allotted in the subscription
1. Purchase Additional CI minutes by:
    1. Navigate to group's **Settings>Usage Quotas**
    1. Select **Buy additional minutes**
    1. Follow the purchase process to buy any amount of additional minutes
1. BUG1: A new subscription is created for the CI minutes instead of the minutes being associated with the existing paid subscription 
2. BUG2: The group association to the previously purchase subscription (Bronze, Silver, Gold) is removed and the subscription is orphaned. 

### Proposal

During the purchase of additional CI minutes (Step 4.3 above) in a use case like this, provide the user notice that the group's number of billable users exceeds its purchased user amount and provide option to pay for those users along with the additional CI minutes.

### Example Screenshots

![billing_page](/uploads/f2f4c6bcc4d90ec43c0361a03778394a/billing_page.png)

![Customers_portal](/uploads/5b71d15d89b827a8013d90d7444a3d91/Customers_portal.png)

### Current ""workaround""

1. Ask user if we can charge the card on their behalf for the additional users.
1. Change the namespace to ""free"" in Gitlab.com admin
1. Try associating the namespace with the subscription in the customers portal
1. If the system is charging for all users and not crediting for the previously paid users, create an SE issue to see if there is a conflict causing this
1. If the system correctly applies the credit, complete the purchase



@lyle investigating console workaround

For more: [discussion on slack (internal)](https://gitlab.slack.com/archives/C4XFU81LG/p1568832939099600)

### Summary of Support Tickets Affected by Issue

1. https://gitlab.zendesk.com/agent/tickets/131493
1. https://gitlab.zendesk.com/agent/tickets/132182
1. https://gitlab.zendesk.com/agent/tickets/132597
1. https://gitlab.zendesk.com/agent/tickets/132437 (GL.com shows bronze, but subscription not showing group, now that it's orphaned gets 404 when trying to purchase minutes for group)
1. https://gitlab.zendesk.com/agent/tickets/132240
1. https://gitlab.zendesk.com/agent/tickets/132819
1. https://gitlab.com/gitlab-org/customers-gitlab-com/issues/672
1. https://gitlab.zendesk.com/agent/tickets/132947
1. https://gitlab.zendesk.com/agent/tickets/133110
1. https://gitlab.zendesk.com/agent/tickets/133357
1. https://gitlab.zendesk.com/agent/tickets/133546
1. https://gitlab.zendesk.com/agent/tickets/133573
1. https://gitlab.zendesk.com/agent/tickets/136205
1. https://gitlab.zendesk.com/agent/tickets/137840
1. https://gitlab.zendesk.com/agent/tickets/137791
1. https://gitlab.zendesk.com/agent/tickets/138649
1. https://gitlab.zendesk.com/agent/tickets/138827
1. https://gitlab.zendesk.com/agent/tickets/138976
1. https://gitlab.zendesk.com/agent/tickets/138730
1. https://gitlab.zendesk.com/agent/tickets/139225
1. https://gitlab.zendesk.com/agent/tickets/138707
1. https://gitlab.zendesk.com/agent/tickets/141672
1. https://gitlab.zendesk.com/agent/tickets/141926
1.",2
24605561,2019-09-09 16:21:17.421,Use rubocop config from GitLab CE,"### Problem
The Rubocop configuration for the Customers Portal is different from GitLab CE.  This topic first came up during [the review of an MR](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/422#note_214310904).

### Proposal
Look into sharing the Rubocop configuration from GitLab CE in customers-gitlab-com.

### Result
It would be nice to have a set standard across our apps, including the Customer Portal.",3
24591915,2019-09-09 11:01:14.692,Document Salesforce setup and usage for Development,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
The initial Secretes template does not contain any Salesforce credentials.
This results in errors like
```
CreateSalesforceAccountWorker JID-549f17949adb63c20dea6123 INFO: start
CreateSalesforceAccountWorker JID-549f17949adb63c20dea6123 ERROR: [Customer ID: 1] Error creating SalesForce Account
CreateSalesforceAccountWorker JID-549f17949adb63c20dea6123 INFO: done: 3.591 sec059c130feb92b69dd7d5c50970fd4dad7a215d5d95f7ca2243c372336025ac08
```

### Proposal
Add development Salesforce credentials to `secrets.yml.example`

### Result
Following the setup in the README will setup a development environment that works with Salesforce",1
24506885,2019-09-05 18:24:30.166,Add employee count field to portal registration form,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

We currently have an ""Unknown"" segment in our reporting due to the [portal sign up form](https://customers.gitlab.com/subscriptions/new?plan_id=2c92a0ff6145d07001614f0ca2796525&transaction=create_subscription) not including an employee count field (allowing us to segment the account).

Example:

![Screen_Shot_2019-09-05_at_2.18.26_PM](/uploads/0a675d147cdb5bd59aab203cd2ae333d/Screen_Shot_2019-09-05_at_2.18.26_PM.png)

### Proposal

Add the same field we use on the sales and trial sign up forms to the portal registration form, and ensure all three are consistent.

Sales form:

![Screen_Shot_2019-09-05_at_2.17.34_PM](/uploads/aafe2ffc62cd8b7e40b819db5767eaed/Screen_Shot_2019-09-05_at_2.17.34_PM.png)",2
24477799,2019-09-05 03:26:49.705,[Portal Pajamas] Convert Layout to Pajamas SCSS,"### Problem
Customers.gitlab.com layout design doesn't match gitlab.com

### Proposal

Use the SCSS from gitlab.com/pajamas to update the design of the layout and typography to be similar to Gitlab.com. This should be done under the supervision of the design team.  

This does not include implementing individual controls in Vue.js. 

### Result

customers.gitlab.com look and feel more closely resembles gitlab.com. This the first step in moving to the standard Design System.

### How will we measure success?

Customers.gitlab.com more closely resembles gitlab.com

### Next steps

- [x] Replace bootstrap v3 with v4
- [x] Read through bootstraps docs on migrating v3 to v4 and migrate

> **Note:** When replacing classes, look for classes being used within JS to toggle visibility.",5
24471648,2019-09-04 19:40:27.004,Hide coupon code field,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Showing the coupon code field when we don't give out coupons is misleading and may distract customers from the purchase flow if they decide to google for a discount coupon. We need to use the coupon field for testing sometimes, so being able to access it still would be preferable, we just need to somehow hide it from customers who are making a purchase.

### Proposal

Some options:

1. Hide the coupon field on production and only show for dev/staging instances.
2. Hide the coupon field behind a URL, and document how to access the URL for testing purposes.
3. Suggestions welcome.

Make sure this is properly communicated with the sales team. 

We should also ensure that a CC is not required when adding a coupon. This is a current bug with the purchase flow when adding coupons.

### Next steps (if any)

cc @timnoah @mkarampalas @s_awezec 

### How will we measure success?

@amandarueda Do you have a pulse on how many queries we get around coupon code confusion? ",2
24471456,2019-09-04 19:28:47.614,"The word ""licence/license"" is not consistently spelled the same","### Problem
On the `Manage Purchases` page, the word is spelled ""**license**"" but when selecting the `Add more seats` button, that page uses ""**licence**"". 

### Proposal
Use American English spelling per: https://about.gitlab.com/handbook/communication/#writing-style-guidelines",1
24467162,2019-09-04 16:10:51.180,"Create a license key if one does not exist during ""Download License""","### Problem
Sometimes licenses have not been created in the license-app by the time a user attempts to download the license from the customers-app.  This leads to a `LicenseNotFoundError` and the user is shown an error message.

This cannot be worked on until #658 is complete.

### Proposal
If the license key was not created on the license-app, a better user experience could be for the license to be created in real-time. The workflow to retrieve the license key from the portal would be:
1.  Look for an existing license key based on the `subscription name`.
1. If result is empty, check to make sure a license was successfully paid for. 
1. If it was successfully paid for, create a new license key based on the subscription info from the portal.
1. Else, display an error message? Copy tbd

### Result
No more errors when downloading licenses from the customers-app.

### Next steps (if any)

### How will we measure success?",3
24466987,2019-09-04 16:01:53.212,Find licenses using subscription name,"### Problem
We currently lookup licenses for the ""Download License"" feature from the license-app using 4 attributes (`email`, `plan_code`, `users_count`, and `expires_at`).  This link between the two systems seems a bit flimsy.

### Proposal
On the license app, add a new column to store the `subscription name`. We may need to create a script that contacts the Zuora API and obtains the `subscription name` based on the `subscription id` that we've stored on the license app. Once this is ready on the license app, we can just find by the `subscription name` instead of using all the 4 fields listed above.

This was [originally proposed](https://gitlab.com/gitlab-org/customers-gitlab-com/issues/281#note_188242848) by Rubén in #281.  This issue also relates to #636.

### Result
A cleaner link between the subscription in the customers-app and the license in the license-app.

### Next steps (if any)
Once this is in place, the customers-app can request a license to be created if it does not yet exist in the license-app.

### How will we measure success?",3
24438476,2019-09-03 20:14:39.723,Zuora error messages fail to show up in UI,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
Users are reporting that our Zuora payment gate is failing, and failing without a meaningful error message.

This is blocking users at a crucial step in their flow.
### Proposal
Find steps to reproduce.
- Browser
- OS
- Any browser plugins that can conflict

Add additional logging to Zuora iframe if possible.

### Result
Root cause of error is identified and fixed.
Future errors are logged",1
24397671,2019-09-02 20:02:10.743,Adding Zuora and Salesforce IDs to another user breaks upgrade,"## Summary

When a user requests access to manage the subscription in the customers portal in addition to or instead of another user, we (in support) will copy/remove the Zuora and SFDC ids from the Edit page in the customers portal from the existing user and add to the requesting user (after they fulfill security criteria).

When we do this, the subscription of the additional/new user appears without being linked in the Manage Purchase page. 

* Not only does this cause confusion to the user, but the `upgrade` button is no longer present in the customers portal as a result
* When the user attempts to upgrade via the button within GitLab.com group>billing page, they are not able to due to [this issue](https://gitlab.com/gitlab-org/customers-gitlab-com/issues/652)

Is there a workaround to add/change the customers portal contact for a subscription without causing these issues?

![Edit_Page](/uploads/8c4e19c878beecb72886563ab2e18d8b/Edit_Page.png)
![Manage_Purchase_Page](/uploads/4daf97572c8012bceb3239e45375552b/Manage_Purchase_Page.png)
![GitLab.com_Billing_Page](/uploads/1724008d6e045bfbc7d3c34fe76d4c6c/GitLab.com_Billing_Page.png)

## Related support tickets

I'm sure there's more, but recording the latest one. Users asking for us to allow another account to manage the subscription but we can't due to this bug.

1. https://gitlab.zendesk.com/agent/tickets/133949",2
24391973,2019-09-02 14:58:37.957,Linking a subscription group to a GitLab.com namespace does not work properly,"### Problem

Still unknown if it's a bug in 100% of the cases, but we've seem problems when trying to link the subscription group to a GitLab.com namespace. 

Workflow: https://www.loom.com/share/a007a39876904b0e9f3234cd704ad67a

We need to investigate further and see if it's not happening to all users.",3
24391864,2019-09-02 14:55:49.247,Redirect to /subscriptions when the found subscription is not upgradable,"### Problem

When an user is coming from the upgrade button in GitLab.com, it's possible that the subscription is not upgradable given the Group is not linked with the customers portal. Today we present a 404 in this scenario.

Workflow video: https://www.loom.com/share/3da777d3578043bb8fd376ad14dd2895

### Solution

When the subscription found is not upgradable, redirect the user to `/subscriptions` with a simple message that the subscription doesn't seem to be upgradable (and to check if the subscription is properly linked).",1
24265253,2019-08-28 18:43:56.580,Better Error Handling in `Client::LicenseApp`,"### Problem
The `Client::LicenseApp` class makes requests using `HTTParty` but does not handle any error cases.  This means the places that use this class are responsible for handling errors like `Errno::ECONNREFUSED` which likely has some duplication between those implementations.  [This came up during a discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/431#note_209327087) of MR !431.

### Proposal
Add error handling to the `Client::LicenseApp` class.

### Result
Reduce duplication of error handling and make the calling code a little simpler.

### Next steps (if any)

### How will we measure success?",2
24208714,2019-08-27 15:49:43.424,Remove dependency on Zuora when running test suite,"### Problem
As it stands currently, you must have the following secrets set for the test suite to pass.
```
zuora_api_user: <%= ENV['ZUORA_API_USER'] %>
zuora_api_password: '<%= ENV['ZUORA_API_PASSWORD'] %>'
```

Without this in place, you get an error like the following:
```
An error occurred while loading rails_helper.
Failure/Error:
          product_rate_plans.map do |product_rate_plan|
            product_rate_plan_charge = find_rate_plan_charge(product_rate_plan)
            product_rate_plan_charge_tier = find_rate_plan_charge_tier(product_rate_plan_charge)

            Plan.new(product_rate_plan, product_rate_plan_charge, product_rate_plan_charge_tier)
          end

Savon::SOAP::Fault:
  (fns:INVALID_LOGIN) invalid username or password: select Id, CreatedById, CreatedDate, Description, EffectiveEndDate, EffectiveStartDate, Name, ProductId, UpdatedById, UpdatedDate from ProductRatePlan where Id = '2c92c0f85991509d01599350751d762c' or Id = '2c92c0f853077d1d01530af9137f61bd' or Id = '2c92c0f95615e0560156272129075c2f' or Id = '2c92c0f958aa45650158d6ace53b53c5' or Id = '2c92c0f858aa38af0158d67f5eea4ca4' or Id = '2c92c0f958aa455e0158d1dcfd8427e6' or Id = '2c92c0f858aa39000158d67af26d6791' or Id = '2c92c0f861789eda01618c6e122f6bb5' or Id = '2c92c0f86179f24301618ceb8b456743' or Id = '2c92c0f861789eda01618c76c25810cb' or Id = '2c92c0f96178a7a901618cedb627046d' or Id = '2c92c0f86716796f01671a8e683821f2' or Id = '2c92c0f95a24621b015a259a50307881' or Id = '2c92c0f85aac66b3015aaea7164444f9' or Id = '2c92c0f95aac74f3015aaea8d97a4b48' or Id = '2c92c0f9699eca030169a2f1f117045f' or Id = '2c92c0f8540e24ee015411d434cf36ed' or Id = '2c92c0f9540e2d8d015411d39ac367dd' or Id = '2c92c0f9540e2d91015411d3402459d0' or Id = '2c92c0f9555cf11c015573e9db8731d8' or Id = '2c92c0f85599d51a01559c8759d31f9c' or Id = '2c92c0f85581f7a9015582383be8722f' or Id = '2c92c0f95819b30d015841863b87137e'
# ./app/models/plans_finder.rb:19:in `eager_load'
# ./config/initializers/zuora.rb:84:in `<top (required)>'
# ./config/environment.rb:5:in `<top (required)>'
# ./spec/rails_helper.rb:2:in `require'
# ./spec/rails_helper.rb:2:in `<top (required)>'
# ------------------
# --- Caused by: ---
# Savon::SOAP::Fault:
#   (fns:INVALID_SESSION) invalid session
#   ./app/models/plans_finder.rb:19:in `eager_load'
```

This error happens because the rails_helper.rb loads rails, which loads the config/initializers. This eventually loads the zuora.rb initializer and [tries to `eager_load` Plans here](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/894d8c5c1cde3ae771ec1c41008f2f2ecddd2b1d/config/initializers/zuora.rb#L84). This fails because the `ZUORA_API_USER` and `ZUORA_API_PASSWORD` environment variables are not set (or really the secrets file doesn't have `zuora_api_user` and `zuora_api_password` set in the test section).

More info can be found in #645.

### Proposal
We could look into stubbing the `PlansFinder.eager_load` or maybe disable that part of the initializer in the test environment.

### Result
It would great to remove this dependency for multiple reasons:
- Simplifies the process for getting your test suite running locally.
- A big step towards being able to run the test suite without being connected to the internet.

### Next steps (if any)",3
24100080,2019-08-23 15:29:40.563,Admin user  management,"### Problem

There doesn't appear to be a way to manage admin users through the Admin UI.  It would be nice to be able to add, remove, or update admin accounts without accessing the backend.

### Proposal

Add a new tab to the Admin console for management of Admins.  This would include the standard CRUD capabilities.

### Result

Easier admin user management.

### Next steps (if any)",1
24017030,2019-08-21 17:39:08.390,"422 Unprocessable Entity when trying to ""Download License""","### Problem

When attempting to download a license for this customer (see ticket for details), site throws a 422 error:

```
Failed to load resource: the server responded with a status of 422 (Unprocessable Entity)
application-42fcbdb6886a54697837ec01fe8e95bda6b41bab8bde374ee31416b090a9df47.js:9 Uncaught TypeError: this.showMessage is not a function
    at Object.<anonymous> (application-42fcbdb6886a54697837ec01fe8e95bda6b41bab8bde374ee31416b090a9df47.js:9)
    at u (application-42fcbdb6886a54697837ec01fe8e95bda6b41bab8bde374ee31416b090a9df47.js:2)
    at Object.fireWith [as rejectWith] (application-42fcbdb6886a54697837ec01fe8e95bda6b41bab8bde374ee31416b090a9df47.js:2)
    at i (application-42fcbdb6886a54697837ec01fe8e95bda6b41bab8bde374ee31416b090a9df47.js:3)
    at XMLHttpRequest.n (application-42fcbdb6886a54697837ec01fe8e95bda6b41bab8bde374ee31416b090a9df47.js:3)
```

Note: filing this now in case we get other reports

Got around this by triggering an email re-send of the licence via the licence app

Tickets reporting this:

- https://gitlab.zendesk.com/agent/tickets/129975
- insert here",1
23356621,2019-07-31 16:11:53.936,Prefer `Date.current` & `Time.current` over `Date.today` & `Time.now`,"### Problem
In various places in the app code, there are references to `Date.today` and `Time.now` which works but isn't as accurate as `Date.current` and `Time.current` which uses Rails timezone configuration (UTC in our case) instead of using the system configured time.  This could vary by installation, causing some tests to fail locally on one system but pass on another causing confusion and inconsistency.  [See this for more information](https://thoughtbot.com/blog/its-about-time-zones).

### Proposal
Change instances of:
- `Date.today` to `Date.current`
- `Time.now` to `Time.current`

Things like `10.hours.ago` and `5.days.from_now` [should already be using `Time.current`](https://github.com/rails/rails/blob/v4.2.6/activesupport/lib/active_support/duration.rb#L108).

### Result
This should result in cleaner and more consistent code base, as well as making tests more accurate.

### Next steps (if any)",2
23208083,2019-07-26 20:11:08.072,Export existing VAT ID to Zuora,"The following discussion from !371 should be addressed:

- [ ] @asubramanian1 started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/371#note_194568197):  (+2 comments)

    > @csotomango This applies only to new accounts.
    > 
    > In case you need it to be applied for existing accounts, let me know. Happy to create a script to push them to Zuora.

We are syncing the Vat ID to Zuora with the change in https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/371.

Although this would update for new records - we need to add a rake task to sync data for existing records.

cc: @csotomango",1
23186216,2019-07-26 08:34:36.101,Prevent GitLab.com features from affecting Self-Managed customers,"<!-- 
Please remove /confidential from the bottom if this issue can be made public.

Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

We are integrating more tightly the customer portal into GitLab EE, and it means that more GitLab.com only code will end up there, potentially increasing the leakage to self-manage.

This is a corrective action from the RCA: https://gitlab.com/gitlab-org/fulfillment-meta/issues/34

### Proposal

A few ideas could be:

1. Add a Danger warning when touching specific SaaS code
1. Add a checkbox in the MR to make sure we double-check we are guarding against this
1. Abstract and extract specific code so it is easier to put a high-level check or some sort of gateway to check for `.com?`
1. Extract this code into a Gem, engine, or different service, easier to include/exclude depending on being a `.com?` feature
1. Keep this code in the customer's app, focusing on a transparent transition to the customer (from `.com?` to the customer portal, they will appear the same).

### Result

More safety towards this kind of bugs, or total prevention

### Next steps (if any)

Gather more ideas and agree on one or more in order to prevent the leakage situation


cc @rdavila @stanhu @dennis",5
22808521,2019-07-15 15:08:39.368,"Follow-up from ""Increase helpers test coverage"" - Deprecate plan_quantity_label and gitlab_com_plan_name","The following discussion from !373 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/373#note_190486793):  (+1 comment)

    > I ended up writing tests for this method (`plan_quantity_label`) but I never found it referenced anywhere.  I was wondering if we should just remove it.  Same question for the method below, `gitlab_com_plan_name`.",1
22747776,2019-07-12 18:21:50.099,Customer Portal: change copy from downgrade to upgrade,"Working Group for Licensing and Transaction To Do:

Change the copy in the customer portal from:

*Need to downgrade?  Please contact us and we can assist.*

To:

*Looking to Upgrade?
Ready to add more support or more DevOps features? See our [pricing page](https://about.gitlab.com/pricing/) for details on our package options.  Then, contact us and we can assist in your upgrade. 
Need to downgrade?  Please [contact us](https://about.gitlab.com/sales/) and we can assist.*

The pricing page link should open in a new tab.

Current: 
![Screen_Shot_2019-07-12_at_11.42.59_AM](/uploads/4e6502fc935d110d5dd91be73edc8e4b/Screen_Shot_2019-07-12_at_11.42.59_AM.png)",1
22549638,2019-07-05 13:59:36.666,"Follow-up from ""Remove countries that are embargoed""","The following discussion from !369 should be addressed:

- [ ] @jameslopez started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/369#note_188659091):  (+1 comment)

    > Thanks @asubramanian1 - LGTM, left some nitpicks. 
    > 
    > [My initial idea](https://gitlab.com/gitlab-org/customers-gitlab-com/issues/554#note_186932864) was to have a table with this and add it to `RailsAdmin`, so it can be easily modified. However, since this is a bit urgent, your changes make sense :rocket:",2
22005625,2019-06-17 22:01:22.791,Integration with SFDC is broken due to invalid credentials,"### Problem

Salesforce credentials used by the subscription portal has been updated without notice to the Fulfillment team:

```
irb(main):001:0> Salesforce::LeadsFinder.find_by(Email: 'ruben@gitlab.com')
Restforce::AuthenticationError: invalid_grant: authentication failure
	from /home/gitlab-customers/customers-gitlab-com/vendor/bundle/ruby/2.3.0/gems/restforce-2.2.1/lib/restforce/middleware/authentication.rb:28:in `authenticate!'
	from /home/gitlab-customers/customers-gitlab-com/vendor/bundle/ruby/2.3.0/gems/restforce-2.2.1/lib/restforce/middleware/authentication.rb:15:in `rescue in call'
	from /home/gitlab-customers/customers-gitlab-com/vendor/bundle/ruby/2.3.0/gems/restforce-2.2.1/lib/restforce/middleware/authentication.rb:13:in `call'
	from /home/gitlab-customers/customers-gitlab-com/vendor/bundle/ruby/2.3.0/gems/faraday_middleware-0.10.0/lib/faraday_middleware/request/encode_json.rb:23:in `call'
```

Username being used is `sfdcadmins@gitlab.com`

### Proposal

Share the new credentials and inform the Fulfillment team the next time they're going to be updated so the integration keeps working.

### Result

Generation of Leads and Opportunities will always work fine. 

### Next steps (if any)

Inform the Production team about the new credentials so they can be updated in the Chef vault.",1
21983689,2019-06-17 15:17:54.678,User Settings Billing Page Improvement - Avatar and Username,"### Proposal

* The top illustration to include the users Avatar at the largest size. This is to help closer link the current active Subscription with the users custom namespace.
* Include the username in the reference copy. 

**[Design Specs](https://gitlab-org.gitlab.io/gitlab-design/hosted/tim/cg%23545-user-settings-billing-page-improvement-avatar-spec-previews/)**

![4._User_Settings_-_Proposal_MVC_2x](/uploads/151eda17a2994cba3b27aba899a033eb/4._User_Settings_-_Proposal_MVC_2x.png)",1
21968789,2019-06-17 11:33:16.909,Increase lib test coverage 2/2,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->
### Problem

Libraries with low or no test coverage:

```
lib/client/gitlab_app.rb	42.86 %
lib/zuora/coupon.rb	44.12 %
lib/world.rb	45.45 %
lib/salesforce/leads_finder.rb	50.0 %
lib/feature.rb	56.1 %
lib/rails_admin/list_gitlab_namespaces.rb	57.14 %
lib/client/promotion_code_app.rb	58.82 %
lib/null_request_store.rb	62.5 %
lib/safe_request_store.rb	63.64 %
lib/rails_admin/resend_eula.rb	66.67 %
lib/rate_plan_helper.rb	66.67 %
lib/health_check/db_check.rb	70.0 %
```

### Proposal

Increase the test coverage of these classes, ideally up to 70%

### Result

### Next steps (if any)",3
21968607,2019-06-17 11:25:58.981,Increase lib test coverage 1/2,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->
### Problem

Libraries with low or no test coverage:

```
lib/rails_admin/update_gitlab_namespace_plan.rb	16.98 %
lib/database/migrations_helper.rb	25.76 %
lib/zuora/digital_signature.rb	30.77 %
lib/validators/subscription_validator.rb	36.67 %
lib/health_check/response.rb	38.46 %
lib/subscription_params_generator.rb	38.46 %
lib/custom_error_handler.rb	40.0 %
lib/health_check/base.rb	40.0 %
```

### Proposal

Increase the test coverage of these files, ideally up to 70%

### Result

### Next steps (if any)",3
21968604,2019-06-17 11:25:56.014,Increase helpers test coverage,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->
### Problem

Helpers with low or no test coverage:

```
app/helpers/instance_review_helper.rb	20.0 %
app/helpers/payment_methods_helper.rb	28.57 %
app/helpers/eula_requests_helper.rb	50.0 %
app/helpers/plans_helper.rb	50.0 %
app/helpers/appearances_helper.rb	66.67 %
app/helpers/navigation_helper.rb	67.65 %
```

### Proposal

Increase the test coverage of these helpers, ideally up to 70%

### Result

### Next steps (if any)",3
21968603,2019-06-17 11:25:50.721,Increase mailers test coverage,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->
### Problem

Mailers with low or no test coverage:

```
app/mailers/recurly_migration_mailer.rb	0.0 %
app/mailers/admin_mailer.rb	36.84 %
app/mailers/customer_mailer.rb	39.39 %
vendor/ruby/2.3.0/gems/devise-3.5.6/app/mailers/devise/mailer.rb	64.29 % (?)
```

### Proposal

Increase the test coverage of these mailers, ideally up to 70%

### Result

### Next steps (if any)",2
21968601,2019-06-17 11:25:44.915,Increase models test coverage,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->
### Problem

Models with low or no test coverage:

```
app/models/payment_form/ach.rb	0.0 %
app/models/payment_method.rb	0.0 %
app/models/receipt.rb	0.0 %
app/models/subscription.rb	43.3 %
app/models/concerns/gitlab_com_helpers.rb	50.0 %
app/models/amend_generator.rb	51.16 %
app/models/eula_request.rb	52.5 %
app/models/order.rb	58.97 %
app/models/product.rb	60.0 %
app/models/eula.rb	62.5 %
app/models/trial_user.rb	70.59 %
```

### Proposal

Increase the test coverage of these models, ideally up to 70%

### Result

### Next steps (if any)",3
21968599,2019-06-17 11:25:42.427,Increase controllers test coverage,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->
### Problem

Controllers with low or no test coverage:

```
app/controllers/ngrok_controller.rb	0.0 %
app/controllers/orders_controller.rb	0.0 %
app/controllers/payment_methods_controller.rb	0.0 %
app/controllers/receipts_controller.rb	0.0 %
app/controllers/zuora_callbacks_controller.rb	0.0 %
app/controllers/registrations_controller.rb	60.0 %
app/controllers/subscriptions_controller.rb	62.67 %
app/controllers/health_controller.rb	72.73 %
```

SimpleCov also shows these:

```
vendor/ruby/2.3.0/gems/devise-3.5.6/app/controllers/devise/registrations_controller.rb	43.24 % 
vendor/ruby/2.3.0/gems/devise-3.5.6/app/controllers/devise/omniauth_callbacks_controller.rb	50.0 %
vendor/ruby/2.3.0/gems/devise-3.5.6/app/controllers/devise/confirmations_controller.rb	56.0 %
vendor/ruby/2.3.0/gems/devise-3.5.6/app/controllers/devise/sessions_controller.rb	57.78 %
vendor/ruby/2.3.0/gems/devise-3.5.6/app/controllers/devise_controller.rb	73.75 %
```

Unsure if that's an issue with SimpleCov/CI reporting this erroneously.


### Proposal

Increase the test coverage of these controllers, ideally up to 70%

### Result

### Next steps (if any)",5
21136399,2019-05-21 08:11:59.994,Upgrade Rails to latest,"### Problem

* Reduced speed
* Catching up with GitLab CE/EE development
* Development alignment with other GitLab repos

### Proposal

Update to latest Rails (may require to upgrade Ruby to latest too)

This will involve upgrading other gems.

### Result

### Next steps (if any)

Test on staging",3
21136347,2019-05-21 08:10:08.595,Update Ruby to latest 2.6,"### Problem

* Security issues
* Reduced speed
* Catching up with GitLab CE/EE development
* Development alignment with other GitLab repos

### Proposal

Update Ruby to `2.6`

To be done after https://gitlab.com/gitlab-org/customers-gitlab-com/issues/496

### Result

### Next steps (if any)

Test on staging",2
20650802,2019-05-07 11:51:38.941,Spike: Move calls to Zuora/GitLab to background jobs,"At the moment these are synchronous, meaning that the end user has to wait up until these are finished to see the result, making it a bad UX.

To be broken down into smaller issues.",1
19886918,2019-04-09 13:58:37.095,Configure Security Dashboard,"GitLab has a feature called Security Dashboard, see https://gitlab.com/gitlab-org/customers-gitlab-com/security/dashboard. It allows to constantly monitor a project for security vulnerabilities. We should set it up for this project to be notified of vulnerabilities.

@plafoucriere Can you help with this?",2
17482809,2019-01-18 22:01:53.892,Update Footer on customers.gitlab.com to Add Link to Repo for Contribution,"We should add links to the bottom of the customers.gitlab.com page for both the ability to edit the page in the web IDE as well as a direct link to the repository so everyone can contribute and find the repo easier. 

cc: @jeremy",1
16041015,2018-11-22 14:07:51.243,Content spoof on https://customers.gitlab.com,"**[HackerOne report #448781](https://hackerone.com/reports/448781)** by gopinath6 on 2018-11-22:

&gt; NOTE! Thanks for submitting a report! Please replace *all* the [square] sections below with the pertinent details. Remember, the more detail you provide, the easier it is for us to triage and respond quickly, so be sure to take your time filling out the report!

**Summary:** 
Content spoof on https://customers.gitlab.com

**Description:** 
An attacker modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. Upon visiting this link the user would believe the content being displayed as legitimate

In the below url error message is not sanitized, user input messages are reflected back to user 

## Steps To Reproduce:

In browser go to 
https://customers.gitlab.com/subscriptions/error?msg=Right%20now,%20we%20are%20facing%20issue.Please%20send%20USD%20to%20this%20btc%20address%202d3dff34455345ffee


## Supporting Material/References:

  * List any additional material (e.g. screenshots, logs, etc.)

## Impact

In this example the falsified content is directly reflected back on the same page. This presents the user with a modified page under the context of the trusted domain.
Attacker  can make user  to send btc to his address of any other spoof message.

## Attachments
**Warning:** Attachments received through HackerOne, please exercise caution!
* [spoof.PNG](https://h1.sec.gitlab.net/a/448781/379310/spoof.PNG)",2
10504535,2018-04-24 15:23:10.282,Check if the Lead has been converted before updating it,"If the user has requested previously a license and the lead has been converted, if he requests again a license when we update the Lead, it will throw an error.

https://sentry.gitlap.com/gitlab/customersgitlabcom/issues/180957/

```
Faraday::ClientError: CANNOT_UPDATE_CONVERTED_LEAD: cannot reference converted lead
  app/services/create_salesforce_lead_service.rb:43:in `update_lead'
    SalesforceClient.update!('Lead', params)
  app/services/create_salesforce_lead_service.rb:32:in `create_or_update'
    update_lead(params.merge(Id: existing_id))
  app/services/create_salesforce_lead_service.rb:23:in `create_or_update_lead'
    create_or_update(from_params)
  app/services/create_salesforce_lead_service.rb:8:in `execute'
    lead_id = create_or_update_lead
  app/controllers/trials_controller.rb:39:in `create_salesforce_lead'
    CreateSalesforceLeadService.new.execute(trial_user_params)
...
(104 additional frame(s) were not displayed)

Faraday::ClientError: CANNOT_UPDATE_CONVERTED_LEAD: cannot reference converted lead
```",2
9403017,2018-02-22 19:34:26.141,Add ability for admins to downgrade GL.com subscriptions,"I'm frequently receiving requests to downgrade customers from GL.com Bronze plan to the Free plan given this is not possible for customers to do on their own. I think will be useful to provide this option from the admin panel or by trying to improve the impersonate feature and detect when it's in use and enable features only when an admin is impersonating a customer account.

### Approach

* When impersonating a customer on a paid plan, allow downgrading of a user's plan to any lower tier.
  * The account downgrade should not go into effect until their paid period has expired at the higher tier. If a user pays for a year of Bronze, they should receive 100% of that paid year (even if they downgrade after 6 months).

/cc @csotomango @jeremy_",4
8146411,2017-12-11 11:27:51.870,Ability to perform sales-assisted purchases,"### Background

Currently, the only way to easily purchase a subscription on GitLab.com is to have a user who is a member of the group login to customers.gitlab.com and provide their credit card information. Customers.gitlab.com is then responsible for making API calls to Zuora, Salesforce and GitLab.com to update billing information.

Sales can, however, be processed via purchase order, either directly with GitLab sales or via partner resellers. This is currently a manual process that involves impersonation of a valid user on customers.gitlab.com.

### Proposal

1. After the order is processed and paid, the user should be sent an email explaining what they need to do:
  * The email should contain a link to set their password on customers.gitlab.com
  * The user then needs to choose the group to apply their payment to
  * If possible, the email should contain screenshots with an example",3
7061992,2017-10-03 15:18:16.078,Trials for GitLab.com plans,"## Background 

We need to allow our users and salespeople to trial GitLab.com plans for 30 days.

An initial simple solution is to allow a trial activation without a credit card.

## Proposal

1. Allow users to visit GitLab.com plan pages (https://gitlab.com/profile/billings or https://gitlab.com/groups/GROUPNAME/-/billings) and activate a trial.
2. A user should have the option of starting a 30-day Gold trial.
3. On clicking on the trial CTA, a form similar to the free trial form (https://about.gitlab.com/free-trial/) should be displayed to capture lead information, which is pushed to SF.
4. On submitting the form, the trial is activated. A user should be redirected to the billing page and see a banner notifying them that they're on a Gold trial, and when this trial expires. This banner should persist until the trial expires.
5. After 30 days, the trial is deactivated. The trial option should no longer be presented on the billing page, and a user should not be able to obtain another trial for a user or group that's had a trial before.

During the trial, users should receive a nurture campaign similar to our existing campaign for self-managed trials.

A user should also be able to upgrade their account to a paid account during the trial. 

## Open questions

* Are we doing trials at each subscription level?

No. The trial is for Gold only.

* Are we allowing trials for individuals, groups, or both?

Both. Accounts should get 1 trial, which can be applied to a personal namespace or a group.

* Should we change `pricing` and consider a separate flow for a new, unregistered user?

Yes, in a separate issue. This should only apply to existing users. 

* How does nurture messaging from Marketo and Outreach fit in?

TBD.

* How will the new form interface with SFDC?

We should push these leads to SFDC in the same way we do in https://about.gitlab.com/free-trial/, in the new free trial form. We should note that these leads are for .com.",4
31669460,2020-03-06 12:25:43.899,Exclude Vue entrypoints from Jest coverage,"### Problem

The entry points files are [exempt from testing](https://docs.gitlab.com/ee/development/fe_guide/performance.html#important-considerations) (e.g. `app/frontend/javascripts/navigation/index.js`).

To keep our Jest coverage more realistic, we need to exclude those files from the coverage report, to reduce noise and unnecessary checking on which files we need to cover with tests.


### Proposal

Add an array of files we need to exclude to jest config to keep everything ignored contained in one place.

### Result

Better and more accurate frontend test coverage.

### Next steps (if any)",1
31668076,2020-03-06 11:45:15.684,"Add client API code to PUT/POST subscriptions, with and without credit card","<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

Since Zuora is communicating back to us via a webhook, we need to listen to an event callback.

It'd be great to do this with an EventBus. But we have infrastructure in place to listen for event callbacks; so let's use those for now.

There's currently a [global client side event listener](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/assets/javascripts/zuora_subscription_event_listeners.js) that does this. However this will make a page redirect on failures and success. We want Vue to be in control of this.",2
31667786,2020-03-06 11:39:14.244,Zuora component,"

As part of https://gitlab.com/gitlab-org/customers-gitlab-com/issues/957 we need a Zuora Vue component.

We should take inspiration from https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/app/assets/javascripts/subscriptions/new/components/checkout/zuora.vue and retrofit it to our needs.

* Render iframe based on event; based on a prop
* Show loading state
* Allow for retrying on error",2
31563165,2020-03-04 19:53:22.802,CI Minutes container fix,"<!---

UI Polish Issue for the Portal

Please add to the Customer Portal Beautification epic: https://gitlab.com/groups/gitlab-org/-/epics/2653

--->

### Problem

On the `/plans` page the purchase CI Minutes component header is not rendering correctly.

| Current | Proposal |
| ------ | ------ |
| ![image](/uploads/37074db91bb824b647d5c0ed65c900e6/image.png) | ![image](/uploads/1b7d3b13cfc70b54aa2637ed0bd14915/image.png) |

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",1
31553649,2020-03-04 15:42:03.645,Display banner warning when a customer will incur an add-on charge,"## Summary

When we implement [Quarterly Self-Managed Seat Reconciliation & Billing](https://gitlab.com/groups/gitlab-org/-/epics/2747), users will not be aware of the need to load a new license unless we alert them.

### Implementation

1. Starting at ""quarterly event' - 7 days, do a daily check to see if the customer will require an add-on
1. Where yes, expose a banner in the instance UI (not portal) to admins only 
1. The banner should contain the following information:
     1. Link to docs page re: quarterly user reconciliation
     1. Importance of applying the updated license when it is received
     1. How to contact us for help
     1. The banner should be dismissible
     1. If the admin blocks enough users to get back under their subscription seat count, then the banner should be removed
1. Display a second banner after the quarterly seat reconciliation has been processed (and the new license is available)
     1. This banner should **not** be dismissible
     1. The banner should be removed upon applying the license
          Options:
          1. Any new license
          1. A license which has more users than previous count

We should not display this message to air-gapped, closed network, or prior to us starting to actually process these charges. 

### Test Cases

For each of the scenarios in the [test cases](https://docs.google.com/spreadsheets/d/1S7hF0yb4C8Kjwu_nRC41M6aBCDwSWn0GxI1A2G4NMBA/edit?usp=sharing), check the behavior of the banner against the desired behavior.",3
31531731,2020-03-04 07:55:17.134,Show a summarize of Seats for Self-Managed and GitLab.com subscriptions,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

The initial designs in https://gitlab.com/gitlab-org/customers-gitlab-com/issues/679 show a summation of seats for subscriptions.

![Screenshot_2020-02-28_at_10.46.22](/uploads/ba344778a417a79a9f56928235eaee3c/Screenshot_2020-02-28_at_10.46.22.png)

However this data isn't currently available from the backend: https://gitlab.com/gitlab-org/customers-gitlab-com/issues/1126 and making these calculations in the UI is error-prone; the worst thing we can do is show incorrect data.

### Proposal

Once #1126 has been implemented, add Seats data to `SubscriptionDetails.vue`",1
31517177,2020-03-03 18:39:24.800,Preload of Plans prevents Auto DevOps image build,"### Problem

The application preloads the plans during the initialization phase.  This phase is run during `pre-compile assets` when building an image for Auto DevOps.  Unfortunately, when the image is being built there is no environment. The image hasn't been deployed to production, staging, or a review app yet.  This causes the build to fail.

The specific piece of code causing the failure is this: https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/config/application.rb#L65
```ruby
# Load all the plans from Zuora and initialize Plan model in an instance variable.
# Avoid load in test environment as the call from Zuora is been preloaded via VCR cassette.
config.after_initialize do
  PlansFinder.eager_load unless Rails.env.test?
end
```
The failure happens in the `pre-compile assets` phase.  Here is an example: https://gitlab.com/gitlab-org/customers-gitlab-com/-/jobs/419644471#L830

```
D, [2020-01-29T23:28:23.810172 #2617] DEBUG -- : could not connect to server: Connection refused
Is the server running on host ""127.0.0.1"" and accepting
TCP/IP connections on port 5432?
excluded from capture: DSN not set
rake aborted!
PG::ConnectionBad: could not connect to server: Connection refused
Is the server running on host ""127.0.0.1"" and accepting
TCP/IP connections on port 5432?
```

This is expected at this point because the image is being built for any environment and is not yet deployed to any of them.  Anything which requires a database connection must happen later - outside of the `pre-compile assets` phase. Specifically, the initializers are run during the `pre-compile assets` phase.

### Proposal

[This test commit](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/525/diffs?diff_id=75038595&start_sha=e163aa1414572313a8deeeb61f326c61c4c09f76) fixes the problem and allows the image to be built and the application to start up.  However, since the plans are no longer pre-loaded, the app throws an error when accessing the login page.

I'm proposing moving this code to a more appropriate place rather than deleting it.  Perhaps it can be run on first use, or at some other time after the application has already started up.

I was unable to find a way to leave it where it is but wrap it in a conditional which would cause it to not run during an image build but run during normal app startup.  If anyone has an idea how to do that, it could be an alternate solution.

### Result

The result should be that no database connections should happen during the `pre-compile assets` phase of the image build.  However, the plans must be loaded when a user connects to the login page.

### Next steps (if any)

The next step is to get some ideas for the best way to do this, and discuss the best one.  At that point, we should create an MR against the default branch to implement that idea, and also test the change in the review branch here: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/525 

### How will we measure success?

If the image can successfully build, deploy, and start up, and the user facing functionality of the application is unchanged (the login page displays without errors), then this change will be successful.

/cc @jameslopez @dawsmith",2
31461705,2020-03-02 15:19:28.846,Spike: exposing webpacker images to HAML views,"Looks like we need to put a `require.context('../images', true)` in `application.js` to expose to Rails views.

[As the documentation states here](https://github.com/rails/webpacker/blob/master/docs/assets.md#link-in-your-rails-views)

We need to be sure that only the paths are exposed, and images do not effect bundle size.",1
31393256,2020-02-28 16:58:57.201,"A successful sign-in should redirect to ""Manage Purchases"" page","<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Currently, when a user successfully signs into the portal they are automatically taken to the https://customers.gitlab.com/plans page. 

### Proposal

If the user has an active product we should redirect them automatically to the `Manage Purchases` page.",2
31390859,2020-02-28 15:40:13.646,Danger reminder to update the DB ERD,"The following discussion from !1078 should be addressed:

- [ ] @vitallium started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1078#note_295841721):  (+1 comment)

    > It would be nice to have a rule for the Danger bot that will be triggered by when the following conditions met:
    > * `db/migrate` or `db/schema.rb` contains changes;
    > * **and** `doc/db_erd.png` wasn't updated.

Also, look into automating the generation of the DB diagram by using https://github.com/voormedia/rails-erd or something similar.  Using LucidChart requires access to an account which most of us don't have.",0
31383078,2020-02-28 12:36:33.438,Remove feature flag from Sign in / Register pages under pajamas,"
This is a follow-up to the original issue #682.

After the feature flag has been enabled on production for about 2 weeks without issues, we need to graduate the sign in & register pages from being served behind a feature flag to being a first-class code served directly to users.

I'm expecting the pages to be approved and the feature flag enabled by 2020-03-06, so this issue should be looked at around 2020-03-23.",1
31373761,2020-02-28 09:42:28.754,API endpoint design & implementation: Subscription information,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

While working on https://gitlab.com/gitlab-org/customers-gitlab-com/issues/679 we want to show purchases and seats in the UI.

This becomes a problem when a subscription

* Self-Managed and has a true-up 
* GitLab.com and users have been added to the group

Since this data isn't exposed by the backend, we'd need to make these calculations in the UI. Previously this wasn't a problem since the UI listed individual purchases, and did not add the total up.

### Proposal

Design and implement a `/subscriptions` endpoint with a clear contract of what data is available.
Possibly this could be done with graphql: https://gitlab.com/gitlab-org/customers-gitlab-com/issues/889 but that's a stretch-goal.

Alternatively [`subscription_presenter`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/presenters/subscription_presenter.rb) can be augmented with the required information.

In any case, this is calculating seats purchased and seats used; so it's a non-trivial product effect here.

### Result

We can trust that data in the UI accurately reflects the correct data",5
31369713,2020-02-28 07:30:40.436,Navigating to new subscription as anonymous user throws 500 error,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you're about to submit isn't a duplicate.

Do not include confidential information! 
--->

### Summary

Navigating to new subscription as anonymous user throws 500 error, e.g. https://customers.stg.gitlab.com/subscriptions/new?plan_id=2c92c0f9699eca030169a2f1f117045f&subscription_id=A-S00006613&transaction=ci_minutes

**NOTE:** This doesn't happen on production. On production it redirects you to `https://customers.gitlab.com/plans`

### Steps to reproduce

1. Try to open [this URL](https://customers.stg.gitlab.com/subscriptions/new?plan_id=2c92c0f9699eca030169a2f1f117045f&subscription_id=A-S00006613&transaction=ci_minutes) as anonymouse user.

### What is the current *bug* behavior?

Application throws 500 error.

### What is the expected *correct* behavior?

It should show a screen with sign in to GitLab.com

### Relevant logs and/or screenshots

### Workarounds

(Ways to get around the issue)

### Reported examples

1. https://sentry.gitlab.net/gitlab/customersstggitlabcom/issues/1365901/?query=is:unresolved
1. 
1. 

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",1
31331597,2020-02-27 09:34:27.178,Consolidate on a strategy for handling free plans in Customer Portal and GitLab Core,"Opening this issue on the background of [this comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1062#note_293550541)

> the plans handling in Gitlab.com and in customers.gitlab.com is a bit confusing including `null` plans. I think we're fine with the current MR's scope. But I feel like we need a bigger overhaul going forward across the two applications.

It becomes awkward to handle free plans, since we're marking the absence of information (`null`) as a Free Plan.

A `null` plan can also happen if a bug happens, so it might be risky to fall back to Free Plan like this.

---

### TODO

Find a strategy for handling free plans across GitLab core and Customer Portal.

* Could be actively marking Free Plans (serialize Free Plan as a product)
* Could be embracing `null` == Free Plan in the Customer Portal at the data layer.",2
31306230,2020-02-26 21:12:09.635,Refunded subscriptions cause customers to be unable to purchase,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem 
Often, when a subscription is refunded customers are unable to purchase again until we clear out the old `Order` object by setting the `subscription_id` and `product_rate_plan_id` to `nil`.

See: https://gitlab.com/gitlab-com/support/dotcom/dotcom-internal/issues/1663

Best guess as to how to reproduce:
- Purchase a new subscription
- Ask for a refund
- Attempt to re-purchase

### Proposal :pencil: 

@vshumilo writes: 

Based on the referenced tickets this happens in two main scenarios
1. The subscription is cancelled and the customer is not able tu purchase another subscription for the same group
1. The subscription is refunded and the customer is not able tu purchase CI minutes for it.

In order to address this, we will fix it in two separate MRs that correspond to the scenarios described above.

The main reason is that for the first scenario :one: the subscription portal currently listens for subscription callouts, so when a subscription is cancelled on the Zuora end we will get the callout and process it accordingly making it straightforward to recreate the fix.

For the second scenario :two: 
- A new `refund` endpoint needs to be created in the subscription portal
- Some `refund callouts` need to be configured on the Zuora Payment Notifications end
- Some questions need to be asked / answered to clarify the current refund process to establish what are the Zuora callouts we want to configure for refunds out of the available options (please see next section).
- Some investigation is in progress to establish how to get a Zuora Subscription based o a Zuora Refund
- Refunds and maybe some other objects need to be defined wihin the Subscription Portal to serve as an interface with the Zuora api. Ex: Refund is not one of the resources provided by IronBank

Based on this, we want to ship :ship: these scenarios separately to:
1. Deliver value in small incremental bits 
1. So the first part is not conditioned by the unknowns we have for the second

### Things we need to answer :question: 

1. What is the process to add a new callout to Zuora in Production mode
1. What are the current refunds that we handle, the 4 types available within Zuora notifications are:
    1. `Credit Balance Refund Processed | Credit Balance Refund Processed`
    1. `Credit Balance Refund Processed | External Credit Balance Refund Processed`
    1. `Payment Refund Processed | External Payment Refund Processed`
    1. `Payment Refund Processed | Payment Refund Processed`
1. How to get from the parameters available in the Zuora Refund (Payments scope) to the Zuora Subscription to be able to map the refund to an existing order (In Progress by @vshumilo)
1. How to get the type of Refund so we can differentiate between primary and secondary subscriptions (do not clear the subscription for the order if the refund is for ci minutes) (In Progress by @vshumilo)

### Thank you!

Shoutout to @rdavila for an awesome collaboration :handshake: and taking the time to talk through the challenges for the new endpoint and adding so much value and insight.

### The Promise :bulb: 

Document the process to add a new callout to Zuora (if it is not already)

### Result

### Next steps (if any)

### How will we measure success?",3
31293994,2020-02-26 14:45:56.284,Create a DB Schema Diagram for customers-gitlab-com,"### Problem
We do not have database schema diagrams documented for customers-gitlab-com.  These are very useful for engineers or otherwise to help visualize the relationships of the DB models.

### Proposal
Use a tool to generate the schema diagram using the [`db/schema.rb` file](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/0134cfb125f6b264c82e728f49a0a44cb0299804/db/schema.rb#L211) from the project.  

Once generated, [@j.carey suggested](https://gitlab.com/gitlab-org/customers-gitlab-com/issues/1011#note_293615743) we make the diagram available in the handbook on [the Business Systems Portal page](https://about.gitlab.com/handbook/business-ops/business_systems/portal) or a subpage.

### Result
Better documentation for the Customers Portal.

### Next steps (if any)

### How will we measure success?",1
31288880,2020-02-26 12:52:51.200,"Add Jest tests for ""Sign in/Registration"" Page""""",We're missing jest tests in !967 for the components.,1
31266744,2020-02-25 20:57:34.976,"Follow-up from ""Preserve default plans order in plans finder""","The following discussion from !1073 should be addressed:

- [ ] @vitallium started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1073#note_294224173):  (+1 comment)

    > Sort found plans by given `plan_ids` to keep the required order: `Free`, `Bronze`, `Silver` and `Gold`.",1
31256818,2020-02-25 15:10:13.722,Display correct response from Update and Delete Zuora actions,"### Summary

When updating the payment on the ""Payment Methods"" page, if the error responded back from Zuora the same error is shown in the string format instead of bulleted points like perviously. 

This happens only when Zuora is using the REST API.

### Steps to reproduce

1. Login and go to Payments Method page.
2. Make sure you have atleast one payment method present
3. Edit the payment and set the Expiration Date last month or before that.
4. Press Update

### What is the current *bug* behavior?

Error is displayed as String and not the expected message on top of page. 

`Body: [{""Errors""=>[{""Code""=>""INVALID_VALUE"", ""Message""=>""Expiration date must be a future date.""}], ""Success""=>false}]`

![Screenshot_2020-02-25_at_16.00.44](/uploads/bdf3de4560ffe33ac7965370c680ddb3/Screenshot_2020-02-25_at_16.00.44.png)

### What is the expected *correct* behavior?

The error string should display

`Expiration date must be a future date.`

### Relevant logs and/or screenshots


### Workarounds

(Ways to get around the issue)",2
31124683,2020-02-21 13:44:39.697,Zuora REST API - payment methods are nested in .remote,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

After turning on Zuora REST API, payment methods are nested in a `.remote` property.

This has an effect on Views that are querying payment methods and might well be causing some bugs that have not surfaced yet.

https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/views/subscriptions/new_extra_ci_minutes_plan.html.haml#L61

| `zuora_rest_api` off | `zuora_rest_api` on |
| ------ | ------ |
| ![Screenshot_2020-02-21_at_14.40.48](/uploads/5f4d2abaa3c5d69ca073d63da50163d9/Screenshot_2020-02-21_at_14.40.48.png) | ![Screenshot_2020-02-21_at_14.41.15](/uploads/2015bfe0ed4eb6a954c8f4fcc926ed84/Screenshot_2020-02-21_at_14.41.15.png) |

### Proposal

### Result

### Next steps (if any)

### How will we measure success?",2
31113727,2020-02-21 10:16:47.924,Graduate `pajamas_nav_bar` from feature flag (Cleanup),"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

The Pajamas Nav Bar has been live for a while without incident.

We should clean up after ourselves :)

* Remove instances of `pajamas_nav_bar`
* Remove HAML implementation of nav bar
* Remove HAML specific styles
* Remove specs that test `pajamas_nav_bar`
* Remove feature flag from https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags",1
31094160,2020-02-20 20:43:40.431,Web Directs not Sending MRR or Deal Length Data,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

For the Calculation of iACV in Salesforce, Opportunities need to have the following fields filled out to be 100% accurate.

MRR1__c = The MRR of the related Zuora Amendment.
Start_Date__c = the Start Date of the related Zuora Amendment.
Opportunity_Term_New__c = the term length in months (Initial Term or Renewal Term based on type)

### Proposal

Please add in these fields when you call `CreateSalesforceOpportunityService` here: https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/controllers/subscriptions_controller.rb#L226

### Result

Web Direct opportunities will have these fields populated on creation in SFDC by the portal. We will be able to fully depreciate the tangle of SFDC triggers that were not completing the job as written and were effectively ""Guessing"" the value of these fields.

### Next steps (if any)

### How will we measure success?",2
31094088,2020-02-20 20:41:35.274,"Follow-up from ""Check Zuora API response and return parsed response body""","The following discussion from !1052 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1052#note_291160337):  (+3 comments)

    > I suspect we might need to do the same thing in [app/jobs/zuora/actions/amend.rb](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/66678eb7ce0cc05105cb526ad44fbe3dc4e63189/app/jobs/zuora/actions/amend.rb#L13).  It might be worth checking the FE folks on what they are expecting there.",1
31091349,2020-02-20 19:35:54.908,Delete non-gitlab.com customers from customers.stg.gitlab.com,"The following discussion from !1051 should be addressed:

- [ ] @shreyasagarwal started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1051#note_291030121):  (+8 comments)

    > Is there anyway we do not have this change and we delete all the customers on staging with non gitlab.com email IDs.
    > 
    > Is there a reason we are leaving them in the system ?

The general consensus from the thread was to delete all customers from https://customers.stg.gitlab.com that do no have an email address ending in `@gitlab.com`.  When working on this task, considerations should be taken to ensure related associations are wiped from the database as well as to not leave orphaned records.

Also, once we've removed non-gitlab.com customer accounts from stg, we can revert most of the code changes from !1051.      The main piece we want to keep going forward is https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1051/diffs#fc4baf9840b8a1ebe46afd7dce3b9656c1c51c47_163_164 which prevents new non-gitlab.com registrations in stg.",2
30988192,2020-02-18 17:56:59.219,Users should be able to enter credit card cvc with leading zero,"### Problem
When user enters the details for a credit card in the `Edit` form within the customers portal, if the CVC has a leading `0`, the form strips the 3-digit entry of the zero and leaves only the 2-digit entry. 

When the user submits the form to save the details like this, they receive this error: `Body: [{""Errors""=>[{""Code""=>""TRANSACTION_FAILED"", ""Message""=>""Transaction declined.invalid_cvc - Your card's security code is invalid.""}], ""Success""=>false}]`

### Proposal
We should not remove the leading zero from CVC codes.",1
30900009,2020-02-16 21:51:48.885,"Update Customers with the ""where to find this"" dropdown","Once GitLab %12.8 is released, update the Customers app with the ""where to find this"" dropdown

Refer: https://gitlab.com/gitlab-org/growth/engineering/issues/40#note_274967995",1
30895351,2020-02-16 15:43:54.826,Create a mapping of interactions between the Customer Portal to Zuora and Salesforce.,"
### Problem

Our internal teams do not have documentation to help them understand all of the interactions between the Customer Portal, Zuora, and Salesforce. 
### Proposal
Create a mapping so that we can start to determine where the gaps are currently with data flowing between the systems.


### Result
Identify new issues and opportunities for improving data flow and processes. 


### Next steps (if any)
Time boxed effort to provide the mappings. 

These materials may help: 
* https://drive.google.com/drive/folders/1kfCEQM6XYGWYxq3Ke4TNvtmDR-46erVD
* https://about.gitlab.com/handbook/business-ops/business_systems/portal/#zuora-and-salesforce 

### How will we measure success?",2
30895306,2020-02-16 15:40:00.162,Hook staging environment up to Salesforce sandbox,"
### Problem
Our staging environment is not hooked up to the Salesforce sandbox that was recently provisioned. This makes testing changes that could impact the flow of data to Salesforce difficult and we often find issues in production that could'be been caught in staging if we had a better way to test them.


### Proposal

Per @tyleramos: This might not be too difficult now that we have access to the salesforce sandbox. This might just be a matter of updating some credentials in the `stg` environment and testing it out. Probably a weight of 1 for our team. It'll probably require opening a ticket with infrastructure to get the credentials added to the chef vault so we might be delayed by that.

### Result

Once we have a functional place to do testing, we can reliably develop new features incrementally.

### Next steps (if any)

### How will we measure success?",0
30791122,2020-02-14 21:27:09.653,Fix broken CI related to postgres image,"### Problem
As of the last hour or so, we are seeing errors like the following in CI:
```
PG::ConnectionBad: could not translate host name ""postgres"" to address: Name or service not known?
```

Example: https://gitlab.com/gitlab-org/customers-gitlab-com/pipelines/118021482

### Proposal
The underlying problem and fix has already been applied for gitlab with https://gitlab.com/gitlab-org/gitlab/-/merge_requests/25274.  A similar fix would probably solve it for customers.gitlab.com.

### Result
A functional CI.

### Next steps (if any)

### How will we measure success?",1
31131848,2020-02-13 15:20:23.604,GitLab.com users should be able to purchase additional users without adding members,"There are many instances when a user wants to purchase additional users for their GitLab.com subscription even though the users don't exist in their system yet. When this occurs, we have to defer the user to sales to issue a sales-assisted quote for the sale.

For example, when trying to use the rest of the money in their budget for the quarter/year, when planning on ramping up employees but they are not yet hired, etc.

Like the self-managed `Add more seats` workflow, we should offer GitLab.com users the ability to purchase prorated users without having to add them to their system.

---

## ROI

* [ ] IACV 
* [ ] Cost Reduction
* [x] Sales Efficiency: [$50k in first 90-days post implementation](https://docs.google.com/spreadsheets/d/1fLu95rdXLa1Y9zq5oI86AAneVsdMctB7NA7EAb7UgLM/edit?usp=sharing)
* [ ] Other

### Testing and Availability

This issue seems to be from a pure frontend perspective. UI tests to add (page rendering validation and purchase flow):

#### On Customer Portal
- `Add more seats` button shows for active .com subscription
- Subscription start/expire/renewal date remains the same
- Subscription renews with correct quantity (original + seats added)

#### GitLab.com -> Billing page
- Total seat quantity for a subscription is updated with successful purchase
- Seats remains the same if purchase did not go through

e2e Test tracked via #1772",3
30705415,2020-02-13 08:21:09.657,"Adjust countries/states components to be reused in ""Sign in/Registration"" Page","The following discussion from !967 should be addressed:

- [ ] @vitallium started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/967#note_287387305):  (+3 comments)

    > We can use existing Vue components for countries and states here. WDYT, @aalakkad?

We have these 2 points regarding countries/states components:

1. no straight forward way to set the `name` attribute for the rendered select.
1. couldn't save the selected country to the main app to pass it to the state select component.",3
30678716,2020-02-12 14:45:39.729,Provide a callback from Zuora when the subscription is cancelled.,"### Problem
Currently, An admin from Zuora can go to admin panel and can cancel a running subscription. This subscription is then not shown on the manage subscription page on the customers portal and the corresponding GL namespace is still using the paid plan. 

### Proposal
To add a new callback in the customers portal called from Zuora when the subscription is cancelled (or deleted) which will update the Order table and also make a call to the GL namespace updating its plan information. 

### Result
corresponding .com subscription is downgraded to free/cancelled",2
30598817,2020-02-10 18:51:38.083,Evaluate SentryJS initialization,"https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/924 moved Sentry to a separate webpack entrypoint and inserts a script tag via `javascript_pack_tag`

However mixing `javascript_pack_tag` and `javascript_packs_with_chunks_tag` with [`splitChunks`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/config/webpack/environment.js#L39) enabled is a no-go.

https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1013 addresses this issue.

It's worthwhile to evaluate the best strategy for loading and initializing SentryJS.

Additionally it'd be great to find a strategy for testing SentryJS is active in production; so we don't have the error service go down for a week without noticing it.",3
30559340,2020-02-10 01:36:10.944,Ensure amendment error messages are JSON serialized,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Currently we're passing the IronBank error message to the frontend and rendering it on failure.

![Screen_Shot_2020-04-30_at_17.51.21_copy](/uploads/35875d2ecc65a62c57dbbbbbe056910f/Screen_Shot_2020-04-30_at_17.51.21_copy.png)

There are quite a number of purchase routes that need to be covered here.

### Steps to reproduce

1. Navigate to Buy more CI minutes for an active subscription (bronze for example)
1. Try to purchase with card that will decline: `4000 0000 0000 0002` **note that this needs to be selected from the dropdown; adding a new credit card that will decline will not cause this bug**
1. Note the error message

### Proposal

Provide error message so that users know what's going on.

### Result

### Next steps (if any)

### How will we measure success?

Customers know why they cannot continue with their purchase and able to proceed to corrective action (change/update credit card information) themselves without contacting support.",3
30514283,2020-02-07 15:00:46.213,Spike: Determine approach for creating restricted view of the license database,"### Problem

In order to better protect customer data, we should enable restricted views of the license database so GitLab team members can be removed from having access to production customer data, while still being able to support customer issues.

### Proposal

* Create a ""middle view"" where customer PII information is scrubbed from the database, allowing for debugging / troubleshooting without access to sensitive customer information.

This issue is to determine the technical approach and should involve reviewing the proposal with stakeholders to ensure we are solving the problem fully and correctly.

### Result

Understanding of next steps and technical implementation details",2
30372422,2020-02-04 15:05:23.025,Change find by zuora account id to salesforce subscription id,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

We found that what was previously labeled as the zuora account id in the version application is actually the salesforce subscription id in the customers application. 

### Proposal

Change the rails admin finder override to use salesforce account id instead of zuora account id


### How will we measure success?

Ability to link from version application successfully to admin area on customers app.

/cc @timhey",1
30165778,2020-01-31 18:19:50.558,Consider enabling eager loading in dev and/or test environments,"### Problem
In [a recent discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/972#note_280295821) in !972, @oswaldo raised a valid point about enabling eager loading in the dev and/or test environments to avoid a bug where some `Zuora::` namespaced classes have not been loaded.  In the interest of fixing that particular bug quickly to avoid CI errors, we decided to move forward with the solution of using `const_get(resource_name, false)`. See !972 for more information on the specific error and solution.

### Proposal
Another potential solution would be to enable eager loading in Rails which would ensure those Zuora classes (and others) are loaded just as they are in Production.  It's worth considering the implications of enabling this setting in both environments.  A potential downside is the longer boot time in Rails but it might not be prohibitive.  Part of this issue should be reaching out to the team for consensus on this topic.  For perspective, the GitLab code base eager loads in the test environment but not development.

### Result
All classes are loaded up front which is more consistent with Production usage.

### Next steps (if any)

### How will we measure success?",1
30156960,2020-01-31 15:04:57.069,Intermittent CI rspec failures with `IronBank::Authentications::Token::InvalidAccessToken`,"### Problem
Since we've [enabled the `zuora_rest_api` feature flag by default in rspec](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/916), we've seen flakiness in some tests with the error `IronBank::Authentications::Token::InvalidAccessToken`.

Here's an example of the failure: https://gitlab.com/gitlab-org/customers-gitlab-com/-/jobs/420976521

### Proposal
The credentials for the Zuora API user are valid so we should investigate what leads to this error.  One thing to look at is the session caching in `IronBank`.

### Result
A more stable CI Pipeline.

### Next steps (if any)

### How will we measure success?",3
30145689,2020-01-31 11:29:29.606,NoMethodError: undefined method `access_token' for nil:NilClass,"https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1100779/

```
NoMethodError: undefined method `access_token' for nil:NilClass
  app/services/gitlab/namespace/list_service.rb:13:in `execute'
    return unless @customer.access_token
  app/helpers/gitlab_plans_helper.rb:86:in `gitlab_namespaces'
    @gitlab_namespaces ||= Gitlab::Namespace::ListService.new(current_customer).execute(params[:plan_id]) # rubocop:disable Rails/HelperInstanceVariable
  app/helpers/gitlab_plans_helper.rb:9:in `gitlab_namespace_options'
    gitlab_namespaces
  app/views/subscriptions/new_extra_ci_minutes_plan.html.haml:29:in `_app_views_subscriptions_new_extra_ci_minutes_plan_html_haml___1101725331863083723_87541060'
    = select_tag 'gl_namespace_id',
  app/controllers/application_controller.rb:99:in `render_custom_or_default_template'
    render name
...
(108 additional frame(s) were not displayed)

NoMethodError: undefined method `access_token' for nil:NilClass
```",0
30140840,2020-01-31 08:59:40.681,Update documentation about feature flags,"### Problem

Right now we get 500s and permission denied errors in the app when enabling a feature flag via `root` - https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1212441/

### Proposal

Update the documentation to make sure files are written as `gitlab-customers` when enabling this via the console

### Result

### Next steps (if any)

### How will we measure success?",1
30087340,2020-01-29 23:33:22.337,Cannot enable Auto-Devops on this project without Container Registry enabled,"### Problem

The container registry was disabled on this project for security reasons.

With the container registry disabled, Auto-Devops cannot build an image for this application.  This is the error:

```
$ /build/build.sh
322 Logging to GitLab Container Registry with CI credentials...
323 WARNING! Using --password via the CLI is insecure. Use --password-stdin.
324 WARNING! Your password will be stored unencrypted in /root/.docker/config.json.
325 Configure a credential helper to remove this warning. See
326 https://docs.docker.com/engine/reference/commandline/login/#credentials-store
327 Login Succeeded
328 Building Heroku-based application using gliderlabs/herokuish docker image...
329 invalid reference format
330 invalid reference format
331 invalid argument ""/enable-autodevops:c539778ab1e155e7d621e7e45feee9bfa43ca507"" for ""-t, --tag"" flag: invalid reference format
332 See 'docker build --help'.
```
![Screen_Shot_2020-01-29_at_12.58.36_PM](/uploads/83ad012505eef40b4722de232eeab85b/Screen_Shot_2020-01-29_at_12.58.36_PM.png)

When the above setting is turned on, the build proceeds.


### Proposal

In order to use Auto Devops, we need to do one of the following:

- Decide that the risk is acceptable and enable the registry
- Take the project private so that the registry is private, and enable the registry
- Implement more granular permissions on the registry and enable it

This open issue regarding registry permissions is 3 years old: https://gitlab.com/gitlab-org/gitlab/issues/878

There is also one regarding private/public registries: https://gitlab.com/gitlab-org/gitlab/issues/19585

### Result

Somehow, the registry will need to be on for Auto Devops to be enabled.

### Next steps (if any)

Temporarily enabling the registry results in Auto-Devops working, so we know that turning it on will unblock the Auto-Devops work.  We just need to decide how we are going to do that.",0
30054102,2020-01-29 05:31:54.026,"Follow-up from ""Adjust font sizes for the new nav bar""","The following discussion from !957 should be addressed:

- [ ] @vitallium started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/957#note_278318558):  (+1 comment)

    > @timnoah, could you please review changes in this merge request? Thanks!",1
30050686,2020-01-29 01:06:12.026,Subscription names with non-standard characters result in 404s when purchasing/upgrading,"### Problem
In some cases, strange characters in a subscription name aren't handled correctly.

See https://gitlab.com/gitlab-com/support/dotcom/dotcom-internal/issues/1477 where a customer with a `+` in their name triggered this.

### Proposal
Handle these more gracefully :wink: 

### Result

### Next steps (if any)

### How will we measure success?",2
30028688,2020-01-28 14:59:18.672,SKUS for Open Virtual Classroom ILTs,"# Overview
Our team in Customer Enablement is looking to roll out some additional customer training options. Here is the info of their request: 

Requesting a set of new SKUs that will be remote live and on-demand virtual classroom instructor-led trainings delivered via Zoom Webinars. These SKUs will be priced per individual user. Users will pay using a credit card through the Customers.GitLab.com portal which will give them access to the course registration page. The Fulfillment team will be added to this issue to work on building a connector to the Zoom Webinar registration pages for each session after the payment is processed.

## Requirements: 
* Able to be purchased via credit card in the customers portal 
*  On the main customer portal page at customers.gitlab.com, add an option to the bottom of the page after ""Purchase CI minutes."" The heading would say ""Sign up for a course"" and we'd list the different courses there. 
* The fields we need to collect in the Customers Portal, in addition to those required to process a payment, are: 
  * First name (required)
  * Last name (required)
  * Email address (required)
  * Organization (required text field)
  * Role (Required drop down select -- Developer, system administrator, product manager, engineering lead, project manager, security specialist, other)
  * gitlab.com username (optional text field)
* Post-purchase, direct the customer to the Zoom webinar registration page and pass the fields noted above, as well as the purchase information, so they are pre-populated on the Zoom registration page 
* The way an individual receives a GitLab purchase receipt should be consistent with how it is done for a GitLab license purchase 

## Info: 

| Course Name  | Per-User Price | 
|---------|-------------------------------------------|
| GitLab with Git Basics Training  | $399           | 
| GitLab for Project Managers Training   |$399  | 
| GitLab CI/CD Training | $399 | 
| GitLab for System Administrators Training  | $399 | 


## Details 

| Title  | Specimen SOW           | Course Description | 
|---------|-------------------------------------------| -------------------------------------------|
| * `Title`: GitLab with Git Basics Training - Remote | * `Specimen SOW`: Not applicable | * `Course Description`: [link to page](https://about.gitlab.com/services/education/gitlab-basics/) |
| * `Title`: GitLab for Project Managers Training - Remote  | * `Specimen SOW`: Not applicable | * `Course Description`: [link to page](https://about.gitlab.com/services/education/pm/) |
| * `Title`: GitLab CI/CD Training - Remote | * `Specimen SOW`: Not applicable | * `Course Description`: [link to page](https://about.gitlab.com/services/education/devops-fundamentals/) |
| * `Title`: GitLab for System Administrators Training - Remote  | * `Specimen SOW`: Not applicable )| * `Course Description`: [link to page](https://about.gitlab.com/services/education/admin/) |

* `Cost/Margin Estimate`: [link to doc](https://docs.google.com/spreadsheets/d/1gFjJFyPDbrzk47-AmeIqESqSmYW62BTJ76J9erR69Eo/edit?usp=sharing)

## Design

* [User flow of purchasing a training in Mural](https://app.mural.co/t/gitlab2474/m/gitlab2474/1586557304023/474e74695af04931e7ec343b31a47d8dc3605bb7)
* See design tab for individual screens


## ROI

* [x] IACV: $50-$100k in first year post deployment
* [ ] Cost Reduction
* [ ] Sales Efficiency
* [ ] Other",5
30028626,2020-01-28 14:57:35.143,Gracefully handle errors when fetching GitLab namespaces,"### Problem
There was recently a hiccup in the GitLab namespace service that caused unhandled errors in the customers portal for purchases.
https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1100780/?query=is:unresolved

This is reproducible locally if you try to purchase CI minutes or any .com plan with GDK turned off.

### Proposal
Gracefully handle errors when the GitLab service is unreachable or returns an error code.  We could display a helpful message on the page instead of erroring.

### Result
A better UX in the purchase workflow when GL.com is down.

### Next steps (if any)

### How will we measure success?",3
29972816,2020-01-27 10:42:18.461,Daily pipeline run fails due to empty vcr cassettes,"### Problem
There is a [daily pipeline](https://gitlab.com/gitlab-org/customers-gitlab-com/pipeline_schedules) run at 9:00 am UTC which runs the rspec job with `VCR=all`. This job always fails due to some vcr cassettes not being able to be recreated. Some cassettes require a date bump in the spec file and others are not recreatable.

The failing of the pipeline is noticed because there is now a deployment status entry in the `#g_fulfillment_status` slack channel. This is the [slack discussion](https://gitlab.slack.com/archives/CL7SX4N86/p1579944896005700) for this issue.

Example of a failing daily pipeline run: https://gitlab.com/gitlab-org/customers-gitlab-com/pipelines/112228583

### Proposal
We should try to fix this and make the daily pipeline run pass.

### Result
Passing pipeline for the daily pipeline job.

### Next steps (if any)

### How will we measure success?",3
29928050,2020-01-24 21:43:47.059,"Follow-up from ""Fixes an issue with id not always being string""","The following discussion from !940 should be addressed:

- [ ] @jackie_fraser started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/940#note_276736235):  (+6 comments)

    > I'm not sure if this quite makes sense because the return value has changed from false to nil.
    > The true/false response would actually need `(/[a-fA-F]/).match?(id.to_s)`

We should add addition test coverage to `spec/features/rails_admin/customer_show_spec.rb`.",1
29922116,2020-01-24 16:46:29.979,Rely more on Zuora object factories to create zuora records in tests,"The following discussion from !928 should be addressed:

- [ ] @dstull started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/928#note_276608606):  (+1 comment)

    > **not blocking:** Wonder if we could leverage a `trait` in the `customer` factory to remove the need for   using the `create_zuora_account` helper here...and perhaps altogether as I see it defining instance variables and such as well - which I try to avoid doing in tests as they have a tendency to leak and lead to flaky testing.
    > 
    > maybe something like this in the customer factory?
    > 
    > ```
    >     trait :with_real_zuora do
    >       zuora_account_id  { create(:z_account, :with_contact).id }
    >     end
    > ```
    > 
    > then something like this in the `:z_account` factory?
    > 
    > ```
    >     trait :with_contact do
    >       after(:create) do |record|
    >         zuora_contact = create(:z_contact, account_id: record.id)
    >         create(:z_payment_method, account_id: zuora_account.id)
    >         record.update_attributes!(
    >           status: 'Active',
    >           bill_to_id: zuora_contact.id,
    >           sold_to_id: zuora_contact.id
    >         )
    >       end
    >     end
    > ```
    > 
    > the above is just a start, but gets toward using factories a bit more


That being said, the main code smell comes from the `instance variables` of `module ZuoraTestHelpers`. So the ultimate goal is to eliminate all instance variables from `ZuoraTestHelpers`.

But this issue will limit the scope to be: add the FactoryBot for Zuora account, and use the factoryBot in `some` of the specs. 

To achieve the ultimate goal of `removing all instance variables from ZuoraTestHelpers`, it requires lots of specs to re-run VCR re-recording. Due to the complexity and effort is non-trivial, we will avoid this part in this issue. We leave the ultimate goal in another follow-up issue [Remove instance variables from spec/support/helpers/zuora_test_helpers.rb](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2306) for the next step.  BTW: with the MR https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2229 , we could already remove all `destroy_zuora_records` from `ALL` specs, per https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2229#note_468181231. But this is not urgent. And it will naturally happen in issue https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2306 anyway.",3
29896946,2020-01-23 21:53:41.580,Spike: Determine approach for creating restricted view of the customers database,"### Problem
In order to better protect customer data, we should enable restricted views of the customers database so GitLab team members can be removed from having access to production customer data, while still being able to support customer issues.


### Proposal
* Create a ""middle view"" where customer PII information is scrubbed from the database, allowing for debugging / troubleshooting without access to sensitive customer information. 

This issue is to determine the technical approach and should involve reviewing the proposal with stakeholders to ensure we are solving the problem fully and correctly. 


### Result
Understanding of next steps and technical implementation details",2
29896259,2020-01-23 21:09:10.551,Subscriptions cannot be created when Zuora REST API feature turned on,"### Problem
When the `zuora_rest_api` feature is turned on, users are not able to purchase subscriptions.  This feature was newly introduced by !829 but it's not currently breaking in production as the feature is not turned on at the moment.

### Proposal
Adjust specs in `subscriptions_controller_spec.rb` to run with the feature flag turned on or off, which should highlight the bug, then fix the bug.

### Result
A functional purchase process for subscriptions when the REST feature is enabled.

### Next steps (if any)

### How will we measure success?",1
29893578,2020-01-23 18:55:11.371,Allow searching of the customers portal admin by Subscription Number,"### Problem
Many times users submit support tickets with a subscription number but the email address associated with the ticket is not the email related to the subscription. It would be efficient to allow internal users to search the customers portal admin by subscription number (ex. A-S0000xxxx)",2
29886439,2020-01-23 14:48:06.847,Rubocop reports different offenses between CI and local dev environment,"### Problem
I noticed 7 offenses when running Rubocop in my local dev environment, but those are not reported in CI.  I opened !921 in order to fix the local offenses (by disabling the offending cop `Rails/BulkChangeTable`), but then Rubocop on CI reports `Unnecessary disabling of Rails/BulkChangeTable`.  It appears that Rubocop is running differently on CI (different gem version? different configuration?) from the local dev environments.  A few other engineers reported the same behavior so it doesn't seems to be a problem with a single dev environment.

**Local Dev Rubocop Results:**
```
➜  customers-gitlab-com git:(staging) be rubocop
Inspecting 494 files
.........................................................................................................................................................................CC.C...........C........C.C..........................................................................................................................................................................................................................................................................................................

Offenses:

db/migrate/20160408050701_add_devise_to_customers.rb:3:5: C: Rails/BulkChangeTable: You can combine alter queries using bulk: true options.
    change_table(:customers) do |t|
    ^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20160408063635_add_oauth_columns_to_customers.rb:3:5: C: Rails/BulkChangeTable: You can use change_table :customers, bulk: true to combine alter queries.
    add_column :customers, :provider, :string # rubocop:disable Migration/AddLimitToStringColumns
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20160426212810_add_country_state_city_and_zip_code_to_customers.rb:3:5: C: Rails/BulkChangeTable: You can use change_table :customers, bulk: true to combine alter queries.
    add_column :customers, :country, :string # rubocop:disable Migration/AddLimitToStringColumns
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20171228073933_add_extra_info_fields_to_orders.rb:3:5: C: Rails/BulkChangeTable: You can use change_table :orders, bulk: true to combine alter queries.
    add_column :orders, :gl_namespace_id, :string # rubocop:disable Migration/AddLimitToStringColumns
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20190206170351_add_confirmable_to_devise.rb:3:5: C: Rails/BulkChangeTable: You can use change_table :customers, bulk: true to combine alter queries.
    add_column :customers, :confirmation_token, :string # rubocop:disable Migration/AddLimitToStringColumns
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20190206170351_add_confirmable_to_devise.rb:14:5: C: Rails/BulkChangeTable: You can use change_table :customers, bulk: true to combine alter queries.
    remove_columns :customers, :confirmation_token, :confirmed_at, :confirmation_sent_at
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
db/migrate/20190512230632_add_address1_and_address2_to_customers.rb:3:5: C: Rails/BulkChangeTable: You can use change_table :customers, bulk: true to combine alter queries.
    add_column :customers, :address_1, :string # rubocop:disable Migration/AddLimitToStringColumns
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

494 files inspected, 7 offenses detected
```

**CI Rubocop Results:**
```
$ bundle exec rubocop
 Inspecting 494 files
 ..............................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
 494 files inspected, no offenses detected
```

### Proposal
Figure out why Rubocop is running differently on CI and make it consistent to avoid discrepancies.

### Result
Dependable Rubocop results in local dev and CI.

### Next steps (if any)

### How will we measure success?",2
29857384,2020-01-22 16:29:28.196,Enable customers to be found by zuora_account_id under the admin path,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

We need a way to find the customer's account in the customers application from the version application.

### Proposal

Use the Zuora account id that the version application has access to, and use that to find the proper customer account in the admin area of the customers application.

### Result

Provides a linkable url for the version application to reference: `https://customers.gitlab.com/admin/customer/:zuora_account_id`

### Next steps (if any)

Use this path in https://gitlab.com/gitlab-services/version-gitlab-com/issues/206 

/cc @timhey",3
29813333,2020-01-21 15:41:39.994,[REST Update] Turn on `zuora_rest_api` feature flag by default in tests suite,"### Problem
Now that we are in a position to have the `zuora_rest_api` feature flag on in production, we need to ensure the test suite runs alls specs successfully under this scenario.

### Proposal
Turn on the `zuora_rest_api` feature flag by default in `spec_helper.rb`.  Address any broken tests that result from the feature flag being on.

### Result
Better test coverage of the `zuora_rest_api` feature.

### Next steps (if any)

### How will we measure success?",3
29811055,2020-01-21 14:55:34.054,Hide ACH in Customer Portal,"## Overview
We want to hide ACH as an option for payment for customers in the customer portal. Per our billing team we have not seen an ACH transaction in the last couple years and we don't want to invest the work to bring it over to pajamas. 

We also will likely need to remove it as part of https://gitlab.com/gitlab-org/customers-gitlab-com/issues/786 so hiding it now will (1) allow us to not invest more time on it for pajamas (2) allow us to understand if our thinking/data is wrong and people do in fact need ACH (3) set us up for moving to the v2 API for Stripe, which does not support it.",1
29752317,2020-01-20 08:07:53.762,Style error messages under Pajama's Design System,"The proposed change is approved and is currently behind [pajamas_error_messages](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/1546/edit) feature flag.

### Problem

The validation error messages are not being styled properly under Pajamas updates in &1788.

![Screen_Shot_2020-01-20_at_11.03.00](/uploads/7d6f99136f9deb15060b5199aac59259/Screen_Shot_2020-01-20_at_11.03.00.png)

### Proposal

Wrap the current errors within a [danger alert](https://design.gitlab.com/components/alert/). 


### Next steps (if any)

- [x] Validation and approval from ~UX 
- [x] Add weight and schedule",1
29716362,2020-01-17 22:54:54.886,Subscription adjustment buttons should not be offered when the subscription is expired.,"### Problem
Once a subscription expires, there is a short period (maybe 24 hours - need to check with AR), where a user can still renew and the card will try to process the payment. After that short period, if a user tries to renew using the ""Resume Subscription"" button or ""Auto Renew"" toggle, the renewal will not process. Offering this button to users after expiration is confusing.

In some cases the subscription does appear active after these actions but the user is never billed.

Additionally, there is a timeframe that when the customer reengages after ""x"" days post-renewal date, they become a ""new"" order rather than a ""renewal"" order. We should obtain how sales defines and align the behavior.

### Proposal

Remove all buttons beneath an expired subscription including ""Resume Subscription"", ""Change linked group"", and ""Buy more CI minutes"" from the subscription widget once the subscription is expired. This applies to both .com and self-managed subscriptions/licenses.

NOTE: We're only doing this in the new Pajamas (vue) interface. 

![Resume_Subscriptoin](/uploads/9282c62d6bb5c98f48b220313ccdbd15/Resume_Subscriptoin.png)",1
29713966,2020-01-17 19:59:56.256,[Deprecate Zuora SOAP] Update test helpers and factories to use Zuora REST API,"### Problem
The test helpers in [zuora_test_helpers.rb](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/bcc08aba11dbdc6044635ef24bc257ac55a28aa4/spec/support/helpers/zuora_test_helpers.rb) and [stub_zuora_calls.rb](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/bcc08aba11dbdc6044635ef24bc257ac55a28aa4/spec/support/stub_zuora_calls.rb) are littered with `zuora_rest_api` feature flag logic.  Also, [Zuora object factories](https://gitlab.com/gitlab-org/customers-gitlab-com/tree/staging/spec/factories/z) create `active_zuora` objects (`Z::`).

### Proposal
We should transition to using the Zuora REST API (`IronBank`) where possible in the test helpers and factories.

- Remove the feature flag logic from the test helper files.
- Update the factories to create `Zuora::` namespaced objects, instead of `Z::` namespaced objects.

### Result
Cleaner test helpers and factories.

### Next steps (if any)

### How will we measure success?",2
29710141,2020-01-17 16:44:12.103,[REST Update] Fix bug in auto-renew amendments,"### Problem
The recent deployment of subscription amendments using Zuora REST API prompted errors related to auto-renew amendments.

https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1181887/?referrer=slack

### Proposal
Fix bug in the Zuora REST API amendments

### Result
Functional auto-renew amendments via REST API.

### Next steps (if any)

### How will we measure success?",1
29697895,2020-01-17 10:13:07.541,Adopt Unleash for rolling out Pajamas,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
With [Pajamas conversion](https://gitlab.com/groups/gitlab-org/-/epics/1788) we will end up with a number of [feature flags](https://gitlab.com/groups/gitlab-org/-/epics/1788#feature-flags)

Enabling feature flags currently is to SSH into the box and toggle the flag from the command line.
This requires access to the staging and production server to toggle the flag and to query which flags are enabled.

Disabling a feature flag if something is wrong can also be time consuming.

### Proposal

[Unleash](https://docs.gitlab.com/ee/user/project/operations/feature_flags.html) has solves a number of these problems.

[Unleash is enabled in the Customer Portal](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/758) so adopting Unleash requires updating existing feature flags (2 as of opening this issue) to the `Unleash` prefix: https://gitlab.com/gitlab-org/customers-gitlab-com#feature-flags-unleash

### Result

Feature flags are visible in a central place: https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags

### Next steps (if any)

Document how to use Unleash in local development",1
29599132,2020-01-14 16:10:08.286,"Follow-up from ""Health check adjustments""","The following discussion from !865 should be addressed:

- [ ] @rdavila started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/865#note_269968174):  (+5 comments)

    > @cwiesner @jejacks0n regarding the usage of the `okcomputer` gem, I really like it, it will be less code to write and maintain for us, it has all the features that we've in our current implementation.",1
29597797,2020-01-14 15:37:21.256,"Re-populate ""mark as default"" checkbox when editing a credit card","The following discussion from !772 should be addressed:

This came up in a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/772#note_271284795) while converting the edit payment method to Pajamas. It is related to making a payment method the default one:

    If you edit a payment method and you want to make it a default but the form contains an validation error,
    the check box will be unchecked again. I tried adding a check to set the checkbox to check, but then it
    will be disabled.

It will disabled due to not being able to remove it for the real default payment method. Which is not the case here.",3
29469319,2020-01-10 05:49:25.509,Follow-up: change admin table dates format,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

This is a follow-up to https://gitlab.com/gitlab-org/customers-gitlab-com/issues/865.

### Problem

The admin table is too congested.


### Proposal

@timnoah [said in the main issue's MR](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/858#note_269208798):

> As this is quite a congested table to relieve some of the pressure on wrapping headers could we change the date formatting on **created at** and **updated at** to `MM DD, YYYY hh:mm` Example, **Dec 20, 2019 15:34**?

@aalakkad said: 

> I'm not sure how easy it is to do that in rails_admin, for a quick search I found [a way](https://stackoverflow.com/a/32631342) to configure the date format, but I can't be sure if it has any implications for other parts of the system.


### Result

Comfortable tables in the admin panel.

### Next steps (if any)

Validate the issue and schedule.

### How will we measure success?",2
29460538,2020-01-09 18:58:32.215,Remove annotation gem or define process by which they are regularly updated.,"The following discussion from !870 should be addressed:

- [ ] @oswaldo started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/870#note_268272515):  (+5 comments)

    > My feeling at the moment is that [the annotations] will quickly become stale if we don't have someone taking care of it constantly :thinking:",1
29447215,2020-01-09 15:06:19.714,Update Zuora Sandbox creds for CI and customers.stg.gitlab.com to use an API account,"### Problem
It appears that we routinely (every 6 months?) have to update the Zuora API Sandbox password which is used for CI and for customers.stg.gitlab.com.  In the past, when we've updated these creds, there is confusion around the process as well as downtime in the CI Pipeline and at customers.stg.gitlab.com.  This can cause delays in deploys while the infrastructure team updates the password in the chef-vault.

More info can be found in [the Slack thread discussion](https://gitlab.slack.com/archives/CMJ8JR0RH/p1578582393061900?thread_ts=1578566280.044100&cid=CMJ8JR0RH).
### Proposal
We should update the Zuora sandbox credentials used for CI and staging to be an ""API account"" so that the credentials never expire and we don't have to update them routinely.

### Result
No downtime in CI and staging as a result of expired credentials.

### Next steps (if any)

### How will we measure success?",1
29438413,2020-01-09 10:49:40.128,500 error on staging - undefined method `find' for false:FalseClass,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

```
I, [2020-01-09T10:45:30.627978 #19373]  INFO -- : [eba979eb-44a4-4915-9977-a84d41a10652] Completed 500 Internal Server Error in 773ms (ActiveRecord: 0.0ms)
D, [2020-01-09T10:45:30.628546 #19373] DEBUG -- : [eba979eb-44a4-4915-9977-a84d41a10652] undefined method `find' for false:FalseClass excluded from capture: Not configured to send/capture in environment 'stg'
F, [2020-01-09T10:45:30.629413 #19373] FATAL -- : [eba979eb-44a4-4915-9977-a84d41a10652]
F, [2020-01-09T10:45:30.629477 #19373] FATAL -- : [eba979eb-44a4-4915-9977-a84d41a10652] ActionView::Template::Error (undefined method `find' for false:FalseClass):
F, [2020-01-09T10:45:30.629675 #19373] FATAL -- : [eba979eb-44a4-4915-9977-a84d41a10652]     1: - starter_plan = PlansFinder.find(Plan::GITLAB_EE_STARTER_1_YEAR_PLAN)
[eba979eb-44a4-4915-9977-a84d41a10652]     2: - premium_plan = PlansFinder.find(Plan::GITLAB_EE_PREMIUM_1_YEAR_PLAN)
[eba979eb-44a4-4915-9977-a84d41a10652]     3: - ultimate_plan = PlansFinder.find(Plan::GITLAB_EE_ULTIMATE_1_YEAR_PLAN)
[fb473b97-a019-4421-a380-5e80c3418c05]     4:
F, [2020-01-09T10:46:16.707317 #19370] FATAL -- : [fb473b97-a019-4421-a380-5e80c3418c05]
F, [2020-01-09T10:46:16.707397 #19370] FATAL -- : [fb473b97-a019-4421-a380-5e80c3418c05] app/models/plans_finder.rb:47:in `find'
[fb473b97-a019-4421-a380-5e80c3418c05] app/views/plans/index.html.haml:1:in `_app_views_plans_index_html_haml___173243987165318374_65993680'
[fb473b97-a019-4421-a380-5e80c3418c05] lib/zuora_proxy.rb:16:in `perform_request'
[fb473b97-a019-4421-a380-5e80c3418c05] app/middleware/basic_health_check.rb:20:in `call'
```

### Proposal

Investigate whether it's a legitimate error and put a fix

### Result

### Next steps (if any)

### How will we measure success?

cc @fulfillment-group @mkarampalas",0
29371996,2020-01-07 14:33:26.248,Salesforce lead service errors occurring after deploys following holiday break,"### Problem
Numerous errors similar to the one below have occurred since the deploys to production were fixed yesterday (1/6) following the holiday break.

```
#<Faraday::ClientError response={:status=>400, :headers=>{""date""=>""Tue, 07 Jan 2020 07:53:02 GMT"", ""strict-transport-security""=>""max-age=31536002; includeSubDomains"", ""public-key-pins-report-only""=>""pin-sha256=\""9n0izTnSRF+W4W4JTq51avSXkWhQB8duS2bxVLfzXsY=\""; pin-sha256=\""5kJvNEMw0KjrCAu7eXY5HZdvyCS13BbA0VJG1RSP91w=\""; pin-sha256=\""njN4rRG+22dNXAi+yb8e3UMypgzPUPHlv4+foULwl1g=\""; max-age=86400; includeSubDomains; report-uri=\""https://a.forcesslreports.com/hpkp-report/00D61000000JNOFm\"";"", ""expect-ct""=>""max-age=86400, report-uri=\""https://a.forcesslreports.com/Expect-CT-report/00D61000000JNOFm\"""", ""x-robots-tag""=>""none"", ""cache-control""=>""no-cache,must-revalidate,max-age=0,no-store,private"", ""set-cookie""=>""BrowserId=utYxfzEiEeqcR_fg1u8E2w;Path=/;Domain=.salesforce.com;Expires=Sat, 07-Mar-2020 07:53:02 GMT;Max-Age=5184000"", ""expires""=>""Thu, 01 Jan 1970 00:00:00 GMT"", ""sforce-limit-info""=>""api-usage=346137/965600"", ""content-type""=>""application/json;charset=UTF-8"", ""transfer-encoding""=>""chunked"", ""connection""=>""close""}, :body=>[{""message""=>""Newsletter: value not of required type: "", ""errorCode""=>""INVALID_TYPE_ON_FIELD_IN_RECORD"", ""fields""=>[""newsletterSegment__c""]}]}>
```

There are plenty of similar reports in Sentry:
https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1158625
https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1159399/?query=is:unresolved
https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1159395/?query=is:unresolved
https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1159394/?query=is:unresolved

### Proposal
Investigate and implement a fix.

### Result
A functional salesforce integration.

### Next steps (if any)

### How will we measure success?",2
29362569,2020-01-07 10:06:21.098,Add backtrace to gitlab logger when error type is Error,"### Problem

Currently when a log_error is called with the error object the Raven is called with `capture_exception` and the error is send as an inspect of the error object. 

### Proposal

When calling [Raven.capture_exception](https://github.com/getsentry/raven-ruby/blob/ad440b952de0f62b62c42433882887c2cb678caf/lib/raven/event.rb#L181), the method checks itself whether the parameter is a exception or a string and will add backtrace if exists.

 Call `message = message.is_a?(String) ? message : message.inspect` after `Raven.capture_exception(message, extra: extra)` 

### Result

This will help in backtrace all the custom exceptions raised by the application. 

@jameslopez",1
29348049,2020-01-06 21:06:16.798,Refactor the Subscription#trueup_info method to query within date range rather than filter in Ruby,"The following discussion from !866 should be addressed:

- [ ] @asubramanian1 started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/866#note_267778598):  (+1 comment)

    > I understand this is an existing logic, however is there a preference to use the ruby method `cover?` here over adding a clause while querying? 
    > 
    > Related to what's done for [REST](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/staging/lib/zuora/invoice.rb#L10) and [SOAP](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/staging/config/initializers/zuora.rb#L85) previously for similar instances.
    > 
    > In case you agree, am okay with creating a follow-up issue given it's a refactor.",1
29338371,2020-01-06 16:48:23.209,[Deprecate Zuora SOAP] Remove SOAP code from the Subscription model,"### Problem
Once the Zuora REST update is complete and the SOAP code is no longer needed, we will have plenty of unused legacy code that should be removed.

### Proposal
We can remove the Zuora SOAP API code and related feature flags.  This issue focuses on cleaning up the SOAP logic and feature flags related to the `Subscription` model which was added in #983.

### Result
A cleaner code base with less feature flags.

### Next steps (if any)

### How will we measure success?",1
29338363,2020-01-06 16:47:54.289,[Deprecate Zuora SOAP] Remove SOAP code from the PlansFinder,"### Problem
Once the Zuora REST update is complete and the SOAP code is no longer needed, we will have plenty of unused legacy code that should be removed.

### Proposal
We can remove the Zuora SOAP API code and related feature flags.  This issue focuses on cleaning up the SOAP logic and feature flags related to the `PlansFinder` which was added in #982.

Other things to remove:
- [Rescuing the `Savon::SOAP::Fault` error](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/2aa0226d267b655f87f9c30918d42917bc67348c/app/models/plans_finder.rb#L28)
- [Rescuing the DB errors in `Feature#enabled?`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/2aa0226d267b655f87f9c30918d42917bc67348c/lib/feature.rb#L53)

### Result
A cleaner code base with less feature flags.

### Next steps (if any)

### How will we measure success?",1
29338353,2020-01-06 16:47:26.196,[Deprecate Zuora SOAP] Remove SOAP code from the subscriptions_controller,"### Problem
Once the Zuora REST update is complete and the SOAP code is no longer needed, we will have plenty of unused legacy code that should be removed.

### Proposal
We can remove the Zuora SOAP API code and related feature flags.  This issue focuses on cleaning up the SOAP logic and feature flags related to the `SubscriptionsController` which was added in #981.

### Result
A cleaner code base with less feature flags.

### Next steps (if any)

### How will we measure success?",1
29338328,2020-01-06 16:46:14.228,[Deprecate Zuora SOAP] Remove SOAP code from mailers,"### Problem
Once the Zuora REST update is complete and the SOAP code is no longer needed, we will have plenty of unused legacy code that should be removed.

### Proposal
We can remove the Zuora SOAP API code and related feature flags.  This issue focuses on cleaning up the SOAP logic and feature flags related to Mailers which was added in #922.

### Result
A cleaner code base with less feature flags.

### Next steps (if any)

### How will we measure success?",1
29338295,2020-01-06 16:44:30.803,[Deprecate Zuora SOAP] Remove SOAP code related to invoice files in Payment History page,"### Problem
Once the Zuora REST update is complete and the SOAP code is no longer needed, we will have plenty of unused legacy code that should be removed.

### Proposal
We can remove the Zuora SOAP API code and related feature flags.  This issue focuses on cleaning up the SOAP logic and feature flags related to invoice files in the Payment History page, which was added in #921.

### Result
A cleaner code base with less feature flags.

### Next steps (if any)

### How will we measure success?",1
29338052,2020-01-06 16:35:01.174,[Deprecate Zuora SOAP] Remove SOAP code related to updating a Zuora contact,"### Problem

Once the Zuora REST update is complete and the SOAP code is no longer needed, we will have plenty of unused legacy code that should be removed.

### Proposal

We can remove the Zuora SOAP API code and related feature flags. This issue focuses on cleaning up the SOAP logic and feature flags related to updating a Zuora contact which was added in !813.

### Result

A cleaner code base with less feature flags.

### Next steps (if any)

### How will we measure success?",1
29338000,2020-01-06 16:32:21.815,[Deprecate Zuora SOAP] Remove SOAP code related to creating new subscriptions,"### Problem

Once the Zuora REST update is complete and the SOAP code is no longer needed, we will have plenty of unused legacy code that should be removed.

### Proposal

We can remove the Zuora SOAP API code and related feature flags. This issue focuses on cleaning up the SOAP logic and feature flags related to creating new subscriptions which was added in #833.

### Result

A cleaner code base with less feature flags.

### Next steps (if any)

### How will we measure success?",1
29335790,2020-01-06 15:18:45.134,Unify colors between @gitlab/ui and the project,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

There are conflicting colors between our project and the pajamas.

In our `variables.scss` we have:

```scss
$gray-400: #444;
$gray-500: #a1a1a2;
$gray-600: #d2d2d2;
$gray-700: #fafafa;
$gray-800: #dfdfdf;
$gray-900: #707070;
```

In pajamas `variables.scss`:

```scss
$gray-400: #bababa;
$gray-500: #a7a7a7;
$gray-600: #919191;
$gray-700: #707070;
$gray-800: #4f4f4f;
$gray-900: #2e2e2e;
```

### Proposal

Unify the colors code in our project so we will follow the same color convention as pajamas.

Which will need careful changing in our stylesheets that use any of the `$gray-*` variables.

### Result

### Next steps (if any)

- [ ] Validate proposal.
- [ ] Schedule the issue.

### How will we measure success?",1
29283732,2020-01-03 19:58:32.966,[REST Update] Update the Subscription model to use the REST API,"### Problem

The following are two references to the Zuora SOAP API that should be updated to use the REST API (with feature flags).

```
app/models/subscription.rb
  173,43:                    product_rate_plan_ids: Z::RatePlan.where(amendment_id: amendment_id).map(&:product_rate_plan_id) }
  185,19:       amendment = Z::Amendment.find_with_array(:id, amendment_ids).order(:created_date, :desc).detect do |a|
```

### Proposal

Update these references to optionally use the REST API based on the feature flag `zuora_rest_api`.

### Result

The eventual removal of dependence on the obsolete Zuora SOAP API.

### Next steps (if any)

### How will we measure success?",1
29283728,2020-01-03 19:58:08.094,[REST Update] Update the PlansFinder to use the REST API,"### Problem

The following are two references to the Zuora SOAP API that should be updated to use the REST API (with feature flags).

```
app/models/plans_finder.rb
  86,31:       @product_rate_plans ||= Z::ProductRatePlan.find_with_array(:id, PRELOAD_PLAN_IDS)
  90,38:       @product_rate_plan_charges ||= Z::ProductRatePlanCharge.find_with_array(
  96,43:       @product_rate_plan_charge_tiers ||= Z::ProductRatePlanChargeTier.find_with_array(
```

### Proposal

Update these references to optionally use the REST API based on the feature flag `zuora_rest_api`.

### Result

The eventual removal of dependence on the obsolete Zuora SOAP API.

### Next steps (if any)

### How will we measure success?",1
29283645,2020-01-03 19:52:26.263,[REST Update] Update the subscriptions_controller to use the REST API,"### Problem
The following are two references to the Zuora SOAP API that should be updated to use the REST API (with feature flags).

```
app/controllers/subscriptions_controller.rb
  129,5:     Z::ProductRatePlanChargeTier.select(:id, :currency, :price)
  139,22:     z_subscription = Z::Subscription.find(zuora_response[:subscription_id])
```

### Proposal
Update these references to optionally use the REST API based on the feature flag `zuora_rest_api`.

### Result
The eventual removal of dependence on the obsolete Zuora SOAP API.

### Next steps (if any)

### How will we measure success?",1
29277599,2020-01-03 14:47:57.131,"Hide ""Zuora User and Hosts"" admin section in Production","### Problem
It's confusing to see the ""Zuora User and Hosts"" Admin section in Production.  This section will always be empty in Production as it's only intended to be used in Staging to allow engineers to interact with Zuora callbacks in their local development environment.
![Screen_Shot_2020-01-02_at_1.47.31_PM](/uploads/7f4be14ddd71d19fb3ef4d60e0c8081b/Screen_Shot_2020-01-02_at_1.47.31_PM.png)

### Proposal
We should consider hiding this section in Production to help avoid this confusion.  It may also be beneficial to document this section in the README and/or in code so to increase awareness of its purpose.

### Result
Clearer understanding of this feature.",1
29248942,2020-01-03 00:03:04.092,Remove usage of map once .empty? support is added to IronBank objects,"The following discussion from !806 should be addressed:

- [x] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/806#note_266198562):  (+3 comments)

    > Oh, I see why you are using the `map` function before calling `.empty?`.  It [looks like IronBank doesn't delegate `empty?`](https://github.com/zendesk/iron_bank/blob/master/lib/iron_bank/collection.rb#L9) like it does some other related methods.  That's unfortunate.  Maybe I'll submit a patch for that today.  If they accept it, we can go back later to update these (maybe by the time we remove the feature flags :fingers_crossed:).

### Steps

Current gem version in the app is `4.3.1`, to address this suggestion we will have to:

1. Update the `iron_bank` gem
2. Update the discussion for the relevant places to use the `IronBank::Collection` new `empty?` method",1
29205786,2019-12-31 08:23:34.992,Upgrade bundler to 2.1.2 version,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

We use outdated (a bit) Bundler: `1.17.3` when [version 2 is available](). Current version also emits the following warning: `lib/ruby/gems/2.6.0/gems/bundler-1.17.3/lib/bundler/rubygems_integration.rb:200: warning: constant Gem::ConfigMap is deprecated`.

### Proposal

Upgrade Bundler to 2.1.2: `gem update bundle && bundle update --bundler`

### Result

* Up to date Bundler
* No more this warning

### Next steps (if any)

We also should check our staging and production environments are ready for the updated Bundler. So consider adding ~""production::blocker"" label to a merge request that updates Bundler.

### Additional information

https://bundler.io/guides/bundler_2_upgrade.html

https://bundler.io/blog/2019/01/03/announcing-bundler-2.html",1
29034158,2019-12-24 18:31:53.739,Count in admin portal isn't always accurate,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
Because we're using `.find` in https://gitlab.com/gitlab-org/customers-gitlab-com/blob/953786c214559b2562506c8809a8416e4a9ac77e/app/views/rails_admin/main/list_gitlab_namespaces.html.haml#L29 and not doing any further processing, we're reading a `quantity` from something that may, or may not, be a license count in accounts with multiple `Order` objects.

See: https://gitlab.com/gitlab-com/support/dotcom/dotcom-internal/issues/1302 for an example.

### Proposal
Correctly determine the number of license seats by either:
- querying the group on GitLab.com directly (this count is usually right)
- be potentially inaccurate in a different way (e.g. `max` of the quantity in all the orders)
- add a check that the `Order` returned has the right type of subscription for the quantity to make sense in this context
- ... something else?

### Result

### Next steps (if any)

### How will we measure success?

### Affected customers:
- https://gitlab.zendesk.com/agent/tickets/142172
- https://gitlab.zendesk.com/agent/tickets/141976",2
29030163,2019-12-24 12:29:46.215,Error messages from Zuora are not being displayed,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you're about to submit isn't a duplicate.

Do not include confidential information! 
--->

### Summary

Error messages from Zuora are not being displayed due to a JavaScript error.

### Steps to reproduce

* Try to purchase a new subscription with the expired card.

![image](/uploads/eb26f76491ad578351ebc34ee27942f7/image.png)

### What is the current *bug* behavior?

* Nothing happens and the page will show `Please wait while we process your request...` forever.

### What is the expected *correct* behavior?

The customer should receive and be able to see the error visually on the page.

### Relevant logs and/or screenshots

[Link to the screencast ""How to reproduce""](https://monosnap.com/file/vJYPxPmqP1E2pTO3O2UqqEATeNs558)

### Workarounds

(Ways to get around the issue)

### Reported examples

None. Because we don't have Sentry enabled there.

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",1
29010355,2019-12-23 16:26:21.490,Follow-up: update reviewer roulette json file with GitLab's version,"We got a [MR](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/844) that reads roulette.json from https://gitlab.com/aalakkad/roulette-ooo as a proof of concept.

Once !844 has been tested without issues and https://gitlab.com/gitlab-org/gitlab/issues/121583 got implemented on the original `roulette.json`, we need to change the `roulette.json` path to use the original version on `https://about.gitlab.com/roulette.json`


/cc @asubramanian1",1
29001028,2019-12-23 10:53:58.250,Improve namespace td  elements test by adding css class,"

> Probably outside the scope of this MR but instead of accessing `td` elements by exact order, why not add a custom class for each `%td` in `app/views/rails_admin/main/list_gitlab_namespaces.html.haml` and then use that to query nodes and match the value? As this approach works but now, but will require change again if new column is added and order is changed. Wdyt?

https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/845#note_264215206",2
28973919,2019-12-21 11:04:08.118,Support optional chaining operator in JS,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Proposal

How about port this to the customers portal and make our code more readable and tidier?

https://gitlab.com/gitlab-org/gitlab/merge_requests/21621

add support for `?.` - closes https://gitlab.com/gitlab-org/frontend/rfcs/issues/11

before: `gon && gon.current_user && gon.current_user.name`  
now: `gon?.current_user?.name`


### Next steps (if any)

- [ ] Evaluate the suggestion
- [ ] Schedule the issue

### How will we measure success?",3
28968831,2019-12-20 22:11:10.180,[REST Update] Datetime bug occurs in ZuoraCallbacksController#update using Zuora REST API,"https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1133145/

```
NoMethodError: undefined method `utc' for ""2019-12-20T13:28:29.000-08:00"":String
  app/services/gitlab/hosted_plans/extra_ci_minutes_service.rb:24:in `block in recently_purchased_ci_minutes'
    product.created_at.utc > @order.last_extra_ci_minutes_sync_at
  app/services/gitlab/hosted_plans/extra_ci_minutes_service.rb:23:in `select'
    purchased_packs.select do |product|
  app/services/gitlab/hosted_plans/extra_ci_minutes_service.rb:23:in `recently_purchased_ci_minutes'
    purchased_packs.select do |product|
  app/services/gitlab/hosted_plans/extra_ci_minutes_service.rb:33:in `extra_ci_minutes_to_sync'
    return if recently_purchased_ci_minutes.blank?
  app/services/gitlab/hosted_plans/extra_ci_minutes_service.rb:11:in `execute'
    minutes: extra_ci_minutes_to_sync.to_i,
...
(84 additional frame(s) were not displayed)

NoMethodError: undefined method `utc' for ""2019-12-20T13:28:29.000-08:00"":String
```",2
28956710,2019-12-20 16:36:55.286,Remove legacy license retrieval logic,"### Problem
As part of #658, we introduced new logic to the customers-app and license-app to retrieve licenses using the `zuora_subscription_name`.  The logic in the customers-app is behind a feature flag `license_lookup_by_subscription_name`.  Once we've verified that the new logic is working well, there is no need to keep the old logic.

### Proposal
- [x]  Verify the new logic is working as intended.
- [x] Create an MR in the customers-app to remove the old retrieval logic and remove the references to the `license_lookup_by_subscription_name` feature flag.  Reference !818 for more information.  This is the MR where the new logic was introduced.
  - https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2887
- [x] Create an MR in the license-app to review the old retrieval logic.  Reference https://gitlab.com/gitlab-org/license-gitlab-com/merge_requests/131 for more information.  This is the MR where the new logic was introduced.
  - https://gitlab.com/gitlab-org/license-gitlab-com/-/merge_requests/254
- [x] Remove the feature flag `license_lookup_by_subscription_name` from https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags.

### Result
Cleaner code by removing unnecessary code.

### Next steps (if any)

### How will we measure success?
No errors when downloading licenses from the customers app.",2
28952891,2019-12-20 14:22:00.997,Refactor CreateAmendmentWorker,"The following discussion from !810 should be addressed:

- [x] @shreyasagarwal started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/810#note_263573184):  (+1 comment)

    > What you think of changing this to `params.with_indifferent_access`

- [x] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/810#note_263573191):

    > I definitely agree with you there. I don't typically write tests for private methods but ended up doing it in this file since there were other private method tests going on.

    > That said, I'll work this one into the tests for the `#zuora_perform` method instead and add a note to revisit the others in that refactor issue #964.",1
28931263,2019-12-19 19:48:09.778,"Follow-up from ""Add REST API compatibility for creating a new subscription""","The following discussion from !833 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/833#note_263219731):  (+5 comments)

    > Also, not a blocker and I realize it was like this previously, but I wonder if it's necessary to do the formatting on the date.  It think `.to_s` would be called on it implicitly and would convert to that same format.  Here's a console example:
    > 
    > ```
    > [12] pry(main)> conditions[""TermStartDate <""] = Date.today.last_week
    > => Mon, 09 Dec 2019
    > [13] pry(main)> Zuora::Subscription.where(conditions).max_by(&:created_date)
    > query: select AccountId,AutoRenew,CancelledDate,ClickthroughEULArequired__c,ContractAcceptanceDate,ContractEffectiveDate,CpqBundleJsonId__QT,CreatedById,CreatedDate,CreatorAccountId,CreatorInvoiceOwnerId,CurrentTerm,CurrentTermPeriodType,End_Customer_Details__c,Id,InitialTerm,InitialTermPeriodType,InvoiceOwnerId,IsInvoiceSeparate,Name,Notes,OpportunityCloseDate__QT,OpportunityID__c,OpportunityName__QT,OriginalCreatedDate,OriginalId,PreviousSubscriptionId,Purchase_Order__c,QuoteBusinessType__QT,QuoteNumber__QT,QuoteType__QT,RecurlyID__c,RenewalSetting,RenewalTerm,RenewalTermPeriodType,ServiceActivationDate,Status,SubscriptionEndDate,SubscriptionStartDate,TermEndDate,TermStartDate,TermType,UpdatedById,UpdatedDate,Version from Subscription where AccountId='2c92c0f86ed661d0016eeb5c2cf457f8' AND Name='test' AND TermStartDate <'2019-12-09'
    > ```
    > 
    > I'm fine if you want to leave it though.",1
28923073,2019-12-19 16:06:14.115,Add  find_by method support for IronBank records,"The following discussion from !837 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/837#note_263188513):  (+2 comments)

    > @asubramanian1 Thanks for jumping on this!  I had a few comments for your consideration but this looks good.
    > 
    > >  Am hoping that we could get going with this approach, and write a patch the [find method in Queryable class](https://github.com/zendesk/iron_bank/blob/master/lib/iron_bank/queryable.rb#L8) to rescue such operations in a follow-up MR. Let me know what you think.
    > 
    > It's definitely different behavior from `active_zuora`.  I'll throw this out for your consideration as well.  The `IronBank` behavior isn't all that different from `ActiveRecord`, right?  For example, if you use `find` on a model with a bad id, you get an error:
    > 
    > ```
    > > Customer.find(nil)
    > ActiveRecord::RecordNotFound: Couldn't find Customer without an ID
    > from /Users/tyler/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/activerecord-5.2.3/lib/active_record/relation/finder_methods.rb:433:in `find_with_ids'
    > > Customer.find(123123123123123123123) # invalid id
    > ActiveRecord::RecordNotFound: Couldn't find Customer with an out of range value for 'id'
    > from /Users/tyler/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/activerecord-5.2.3/lib/active_record/core.rb:182:in `rescue in find'
    > Caused by ActiveModel::RangeError: 123123123123123123123 is out of range for ActiveModel::Type::Integer with limit 4 bytes
    > from /Users/tyler/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/activemodel-5.2.3/lib/active_model/type/integer.rb:53:in `ensure_in_range'
    > ```
    > 
    > And with `IronBank` you have something like this:
    > ```
    > > Zuora::Account.find('123123123')
    > IronBank::NotFoundError: Body: {""records""=>[], ""size""=>0, ""done""=>true}
    > from /Users/tyler/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/iron_bank-4.3.1/lib/iron_bank/faraday_middleware/response/raise_error.rb:15:in `on_complete'
    > > Zuora::Account.find(nil)
    > IronBank::NotFoundError: IronBank::NotFoundError
    > from /Users/tyler/.rbenv/versions/2.6.5/lib/ruby/gems/2.6.0/gems/iron_bank-4.3.1/lib/iron_bank/queryable.rb:9:in `find'
    > ```
    > Notice that ids that are not found also throw errors.
    > 
    > I'd honestly be ok leaving the `find` method as is, but we could implement a `find_by` method on `Zuora::Resource`.  This would be similar to the `active_find_by` on `Zuora::Subscription` (without the additional active condition).  So if we didn't want an error thrown, we could use something like `Zuora::Account.find_by(id: id)` which would be consistent with Rails.  WDYT?

As part of this work, we could review the codebase to look for places where the new `find_by` method could be used instead of `where().first`.  Also, if we implement a `find_by!` method, similar to [the `active_find_by!` method](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/87b0228b135dca04a53e151307fcdbb9cb5ba37c/lib/zuora/subscription.rb#L18), which throws a `Zuora::RecordNotFound` error, we could clean up the implementation in a few places. For example, in [`CreateSalesforceOpportunityWorker#payment_amount`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/deeef4d1b6dd715f276b46a8b27c738ee7e6d634/app/workers/create_salesforce_opportunity_worker.rb#L54).",2
28901604,2019-12-19 04:33:03.434,"Pajamas Update: Portal ""Manage Purchases/Buy more CI minutes"" Page","#### GitLab.com Designs
| Interface | Description |
| ------ | ------ |
| **Buy more CI minutes**<br>![Manage_Purchases_8_2x](/uploads/6a633df4e65d0e46d1e10124816cbc9f/Manage_Purchases_8_2x.png) | **Updates**<br>- Removed the dropdown field for the CI minute pack<br>- Added the ability to change the group the purchase applies to |

### Design Specs

https://gitlab-org.gitlab.io/gitlab-design/hosted/tim/&1886-customers-portal-pages-redesigns/buy-ci-minutes",5
28901425,2019-12-19 04:17:45.712,"Pajamas Update: Portal ""Manage Purchases/Change Namespace"" Page","## Feature flag

The change will be under [`pajamas_purchase_change_group`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/11/edit) feature flag.

#### GitLab.com Designs
| Interface | Description |
| ------ | ------ |
| **Change group**<br>![Manage_Purchases_7_2x](/uploads/2ddf1e5346dc6e47f9370edeeccf6c16/Manage_Purchases_7_2x.png) | ... |",5
28901293,2019-12-19 04:05:53.168,"Pajamas Update: Portal ""Manage Purchases/Renew Subscription"" Page","## Proposed Designs


### Designs
2 columns layout - [Figma](https://www.figma.com/file/yjusTZF6Qgr4DzXkvE5bK2/Customers-Portal-Templates?node-id=57%3A1023) 

| Interface | Description |
| ------ | ------ |
| ![Manage_Purchases_6_2x](https://gitlab.com/gitlab-org/customers-gitlab-com/uploads/54d7dd4dc2334a97edf3e0af7490b44e/Manage_Purchases_6_2x.png) | Collapsed |
| ![Self-Managed_-_Renew_subscription](/uploads/f19f6224b75a8d73d365bf65c22eeabd/Self-Managed_-_Renew_subscription.png) | Expanded |



### Feature flag

This change will be used under [`pajamas_purchases_renew_subscription`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/20/edit) feature flag.",5
28901228,2019-12-19 03:59:05.094,"Pajamas Update: Portal ""Manage Purchases/Add More Seats"" Page","## Proposed Designs

[`pajamas_add_seats`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/13/edit)

#### Self-Managed Designs
| Interface | Description |
| ------ | ------ |
| **Add more seats**<br>![Manage_Purchases_5_2x](/uploads/f27c67d2e717b1d644de6a19ffddcf68/Manage_Purchases_5_2x.png) | ... |

### Testing and Availability

This issue seems to be from a pure frontend perspective. UI tests to add (page rendering validation and purchase flow):
#### On manage purchase page:
- user with a current active subscription has an option to `add more seats`

#### On Manage Purchase -> Add more seats page
- verify current subscription and expiration days shows
- verify number of current seats
- user can choose additional seats in input field
   - prevent user from entering invalid numbers/strings
   - purchase summary table updated with user’s input
- verify new seats total, new seats, unit price with correct expiration date in price note
- verify sub-total
    - verify price if there is active coupon
- use default payment on file or create new payment method
- on successful purchase
     - purchase successful modal shows
     - redirect back to manage purchase page, with number of seats updated in subscription info
- purchase failed
   - shows error messages
   - current subscription status won’t change",3
28900953,2019-12-19 03:37:17.774,"Pajamas Update: Portal ""Manage Purchases/Add new Credit Card "" Page","#### Self-Managed Designs
| Interface | Description |
| ------ | ------ |
| **Add new Credit Card**<br>![Manage_Purchases_5.1_2x](/uploads/addb702e5d3efe66da9ffc66583d6c8a/Manage_Purchases_5.1_2x.png) | **Key Points**<br>- Instead of the radio options we currently have, @timnoah has opted to place the ability to an add additional payment card via the `Payment menthod` dropdown. |

**Design specs**<br>
https://gitlab-org.gitlab.io/gitlab-design/hosted/tim/&1886-customers-portal-pages-redesigns/add-new-credit-card/",3
28894465,2019-12-18 19:33:09.341,Add tests covering renewing subscriptions with true-ups,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

We rolled out a fix for #950 in https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/834 but we didn't add any tests.

### Proposal

* Add specs that cover `SubscriptionsController#update`;
* Add features specs that cover the functionality mentioned in the title.

### Result

Problems like #950 can be detected on running tests.

### Next steps (if any)

### How will we measure success?",1
28840104,2019-12-17 20:19:51.470,VCR not matching Zuora SOAP query requests properly,"### Problem
On occasion, we have noticed mysterious problems when re-recording VCR files.  

Here's an example error:
```
1) Upgrade Subscriptions when Zuora REST API feature is enabled Loads page with a plan already on the user
     Failure/Error: @zuora_subscription = Z::Subscription.find(subscription[:subscription_id])
     NoMethodError:
       undefined method `code=' for #<Z::Subscription:0x00007fe2cb5e3188>
```

On the surface, this seems very strange.  Especially strange, when the spec passing during the recording, but not when using the previously recorded cassettes.

### Proposal
Investigate a problem with the VCR request matching strategy.

### Result
More reliable VCR request matching and overall test suite reliability.

### Next steps (if any)

### How will we measure success?",2
80089961,2021-03-02 12:59:53.781,Refactor Gitlab::HostedPlans::PurchasedAddOns::StorageService specs,"### Problem
There was a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2847#note_519236368) in the review of !2847 to refactor the specs for `Gitlab::HostedPlans::PurchasedAddOns::StorageService.for_namespace`.

There's a lot of repetition for all the examples. But with the current test setup it's hard to use more `let_it_be` and the provided patch added more complexity to it.

### Proposal
Evaluate to refactor the mentioned specs to remove repetition. Also try to use `let_it_be` to create objects only once and not for each spec. There are a [few suggestions](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2847#note_519236368) and a [patch](https://gitlab.com/gitlab-org/customers-gitlab-com/uploads/3d5bc7203f8e5cb03b2bf2995a4899dc/refactoring.patch) in the original discussion that can provide some ideas.

### Result
Faster specs and avoiding repetition.

### Next steps (if any)

### How will we measure success?",2
79818272,2021-02-25 15:58:28.357,Cap subscriptions ge 25 seats only,"### Problem

As part of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2668 we introduced a seats cap of 25 for Silver / Premium subscriptions that are not at list price (228 per user per year).

As a result of this, sales assisted subscriptions that were already processed at a price other than list price WITH over 25 seats are not able to add further seats using the Add Seats action.

### Proposal

Update the cap validation eligibility from:

> Premium / Silver subscription NOT at list price

To:

> Premium / Silver subscription NOT at list price and current total <= 25

### Result

Sales assisted users in Silver / Premium whose subscriptions where initially created  by sales with over 25 seats will be able to purchase.",2
79800129,2021-02-25 12:15:16.930,"Follow-up from ""Refactor a few Salesforce services""","Within the specs for the Salesforce services, `double` is used to quickly define an object. In a review the suggestion came up to use `instance_double` instead:

The following discussion from !2856 should be addressed:

- [ ] @rpereira2 started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2856#note_516921357):  (+2 comments)

    > **minor (non-blocking)**: Is it possible to use `instance_double` here?",2
79726052,2021-02-24 16:01:06.080,Update customer's salesforce account id when falling back to the contact,"### Problem
In https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2816 the fallback to the contact in case the customer's `salesforce_account_id` is empty was evaluated along the way and it resulted in [this comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2816#note_512834833). **TLDR:** it might be a good idea to update the customer's `salesforce_account_id` in case there was a fallback to the contact (this can be an existing one or even a newly created one). So here's the issue to suggest this:

When looking for the Salesforce account id of a customer and the `salesforce_account_id` field is empty, there is a fallback to the Salesforce contact in place ([here](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/b9203079a4bf620a915c46eca0b9012842dfdccd/app/services/create_salesforce_account_service.rb#L32)). But the customer object is not updated with that information in case the contact returns it.

This is also the case when creating a new contact as a fallback in the [Salesforce::BaseOpportunityService](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/b9203079a4bf620a915c46eca0b9012842dfdccd/app/services/salesforce/base_opportunity_service.rb#L29) that is used by `Salesforce::CreateOpportunityService` and `Salesforce::UpdateOpportunityService`.

`@jbrennan1` also [provided this information](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2816#note_515380804):

> a quick overview / thoughts on how SFDC Account, Contact, Opportunity and Opportunity Contact Roles all work:
>
> 1. Establish the SFDC Account Id that ALL of the remaining objects will relate up to. @cwiesner the improvement you made to make sure we are ensuring the Account Id is populated looks great! We need to make sure that all steps use the same Account Id.
> 1. Insert the Contact with AccountId = the Account's Id.
> 1. Insert the Opportunity with the AccountId = the Account's Id.
> 1. Insert the Opportunity Contact Role with OpportunityId = Inserted Opp's Id and ContactId = Inserted Contact's Id.
>
> Technically parts 2 and 3 can be switched in the order. Tell me if there are any more questions.

### Proposal
After falling back to the Salesforce contact when the customer's `salesforce_account_id` is empty, update it with the contact's `AccountId`.

### Result
Consistent data and less queries since the field will be updated.

### Next steps (if any)

### How will we measure success?

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

We should consider writing an automated test to test detection of these cases and test the resulting action(s).",2
79658839,2021-02-23 18:46:18.111,Remove `ZUORA_API_USER` and `ZUORA_API_PASSWORD` env vars,"### Problem

`ZUORA_API_USER` and `ZUORA_API_PASSWORD` are environment variables that were used to authenticate with the Zuora SOAP API and a few other places that called the Zuora API directly.  With the removal of the Zuora SOAP API code in favor of the REST API using IronBank (which uses oAuth client credentials `ZUORA_CLIENT_ID` and `ZUORA_CLIENT_SECRET`), it appears we might be able to remove these environment variable if they are no longer used.

### Proposal

1. Remove these environment variables from [`config/secrets.yml.example`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/cc90989177d14c939ef838a11cc084bb9173a326/config/secrets.yml.example#L49).
1. Remove references in [`doc/installation_steps.md`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/e866d4e7523c6a6940ab0fa1261062f52cf025d6/doc/installation_steps.md#L78).
1. Remove references in [VCR configuration](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/6baf97b35be798d23e934ee358d0606633ee7695/spec/support/vcr.rb#L16).
1. Remove references from [`.gitpod.yml`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/3d5c51c04a147a8bebbe4b98a2dafe6ed11d3bfe/.gitpod.yml#L8).

After the MR merges:
1. Send a reminder to the team via Slack letting them know to remove the envirionment variables from their `config/secrets.yml` file.
1. Get a CustomersDot maintainer to remove these environment variables from the CI settings.
1. Open a cookbook-customers-gitlab-com MR to remove [references in this project](https://gitlab.com/search?utf8=%E2%9C%93&search=zuora_api_user&group_id=650153&project_id=1755794&scope=&search_code=true&snippets=false&repository_ref=master&nav_source=navbar).
1. Open a [infrastructure issue](https://gitlab.com/gitlab-com/gl-infra/infrastructure/issues) to remove these environment variables from chef-vault and ping `@gitlab-com/gl-infra/managers` to get it prioritized/scheduled.",1
79656032,2021-02-23 17:58:04.530,[UX] Community subscriptions should be able to self-checkout renewals,"This is the UX design issue for https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2746

### Designs

- See design section
- [Figma link](https://www.figma.com/file/bEv8vTbhUUEfnDL8dXbevE/Community-Programs-Self-Checkout?node-id=206%3A1579)
     - Use Figma to get the design specs you need! (Sizing, spacing, color, copy, etc) You don't need any special access, just sign up for a free account and click the link above.",3
79655929,2021-02-23 17:55:55.016,[FE] Breakdown: Community subscriptions should be able to self-checkout renewals,"## Summary 

In https://gitlab.com/groups/gitlab-org/-/epics/5068 we are building self-service checkout of new community program subscription. We now need to build a renewal flow for these subscribers.

The general process flow described in the parent epic is the same for new and renewal subscriptions however when the user enters CustomersDot, they will need to select a `Renew` cta.

## Development plan
* Build landing page for CE renewal https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3601
  * add a new route `/subscriptions/community_program/renew`
  * re-use templates that we build for CE subscription `community_subscription_landing_page.vue`
* Update the CE subscription cards on `/subscriptions` page
  * Add info banner for renewal alert that would show up 3 month before before expiration https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3574
  * enable renew buttons with correct path https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3575
* Build a renewal page for CE
  * add a new route `/subscriptions/community_program/renew/A-SXXXXXX` with basic titles https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3576
  * add purchase description https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3577
    * mind that we need two different versions of it: for SaaS and for SelfManaged
    * for SelfManaged version add a collapsible element with a hint from [subscription_renew.vue](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/a8d38ed9bd91be182e6288ff341a0c736713788f/app/frontend/javascripts/subscription/components/subscription_renew.vue#L337). We already have this element glued in the `subscripton_renew` component so it is a good time to extract it and use in two places
  * add customer information [component](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/76db4040e6294daa2da5ae813f667c54d34781a5/app/frontend/javascripts/subscription/components/customer_information.vue) https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3578
  * add coupon input [component](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/fa85e92d41afbdd97d324d6a4a37f0cba16529e5/app/frontend/javascripts/subscription/components/coupon_code_input.vue) https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3602
  * add purchase confirmation [component](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/f86054a4cb83d5536a2f5093830b4b47d7a55ff0/app/frontend/javascripts/purchase/components/purchase_confirmation_card.vue) https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3603
  * show success message if transaction is successful [modal](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/75adc85589a351f9aa523a4ca2f1bd46e7c3d09a/app/frontend/javascripts/purchase/components/purchase_success_modal.vue) https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3604
    * We would also need two version here for SaaS and for Selfmanaged

#### Design
See [design issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2747/)",3
79622800,2021-02-23 10:23:24.817,Refactor RSpec::Parameterized::TableSyntax inclusions,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

We currently require `rspec-parameterized` [here](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/6e5df55d8add9945f2c9348263511d1c30098362/spec/spec_helper.rb#L6), which means we don't need to require it inline in specs when not using the table syntax, e.g.

```ruby
using RSpec::Parameterized::TableSyntax
```

So we should consider refactoring existing uses of the above (or removing the global require)

Affected spec files at time of writing:

- spec/services/gitlab/hosted_plans/purchased_add_ons/storage_service_spec.rb

This is a follow-up from the discussion here: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2791#note_514334639",1
79368879,2021-02-18 20:31:29.969,Remove deprecated tasks from package.json,"Remove the following deprecated tasks from `package.json`:

```
""eslint"": ""echo 'Please use yarn lint:eslint instead' && exit 1"",
""eslint-fix"": ""echo 'Please use yarn lint:eslint:fix instead' && exit 1"",
""eslint-staged"": ""echo 'Please use yarn lint:eslint:staged instead' && exit 1"",
""eslint-staged-fix"": ""echo 'Please use yarn lint:eslint:staged:fix instead' && exit 1"",
""eslint-report"": ""echo 'Please use yarn lint:eslint:report instead' && exit 1"",
""markdownlint"": ""echo 'Please use yarn lint:markdown instead' && exit 1"",
""markdownlint-staged"": ""echo 'Please use yarn lint:markdown:staged instead' && exit 1"",
""markdownlint-staged-fix"": ""echo 'Please use yarn lint:markdown:staged:fix instead' && exit 1"",
""stylelint"": ""echo 'Please use yarn lint:stylelint instead' && exit 1"",
```",1
79365555,2021-02-18 18:58:23.482,UX: Allow users to create a Premium trial,This is the UX design issue for https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2728,3
79210883,2021-02-16 17:17:29.618,Confirm migration happens as expected,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

We saw https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2714 miss a migration on staging leading to [this internal thread](https://gitlab.slack.com/archives/CMJ8JR0RH/p1613493001291300)

We managed to resolve the migration, however the cause of the failure is unknown, and https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2714 is scheduled to deploy to production in ~1.5 hours.

Since the missed migration didn't cause any breaking issues, we do not see a reason to block the deploy. However we want to keep an eye on this.",1
79145107,2021-02-15 21:27:04.921,EoA: User cap message not displaying for the Add Seats flow,"## Summary

In the EoA Bronze/Starter project we implemented a screening to prevent customers from taking advantage of the discounted offers for more than 25 users via CustomersDot and instead, send them to sales.

Although [the backend is preventing this](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2668#note_506408261) for the Add Seats purchase flow, the frontend is not displaying the proper ""You have exceed the 25 seat .... Contact sales..."" message which we display in the upgrade and renewal flows. Instead, we are showing an unhelpful ""unknown error"" message.",2
79143282,2021-02-15 20:53:20.836,Security Essentials Training SKU,"# SKU Request Summary

<!---
Provide a brief description of what this SKU will be used for.
--->



## SKU Requirements

In order to expedite your request, please complete all of the following information.
Any questions about this template or this request can be directed to @amandarueda in the comments of this issue.

* [x] SKU Name: GitLab Security Essentials Training - Remote
* [x] SKU Code/ID: See Production/API Sandbox export
* [x] Zuora Plan Name: [See Production/API Sandbox export](https://docs.google.com/spreadsheets/d/1_fCY2Vswd6i1sgJpXe5OQIrv7GSKIejCPVic1ZyhWeA/edit?usp=sharing)
* [x] Zuora Plan ID: [See Production/API Sandbox export](https://docs.google.com/spreadsheets/d/1_fCY2Vswd6i1sgJpXe5OQIrv7GSKIejCPVic1ZyhWeA/edit?usp=sharing)
* [x] Service type: `add-on`
* [x] Does this need to be purchase-able via CustomersDot? `No`
* [x] Does this service renew? `No`
     * [ ] If yes, what is the renewal cadence? `monthly | annually | other`
* [x] Should an email be sent indicating the subscription is coming to an end?: `No`
* [x] Is there a unit of measure, if so what? `Yes  Education Service`
* [x] Does this service provision anything? `No`
     * [ ] If yes, please describe in detail what should be provisioned including the systems affected:
* [x] How soon do you need this SKU ? Timeline:ASAP
* [x] Who in Sales-Ops approved this request: @dhong  
* [x] Link to originating Finance issue: https://gitlab.com/gitlab-com/Finance-Division/finance/-/issues/3589
* [ ] Apply the appropriate `BTG Priority` label to this issue.",2
79107590,2021-02-15 11:57:16.628,[CI Minutes] Migrate purchase subscription steps to GraphQL,"Migrate the existing [subscription checkout](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/app/assets/javascripts/subscriptions/new/components/checkout/) to use the GraphQL based `step.vue`, `step_header.vue`, `step_summary.vue`, and `progress_bar` components and the GraphQL based `Subscriptions::CreateService.new(...)`",2
79107567,2021-02-15 11:56:34.379,[CI Minutes] Migrate purchase subscription details to GraphQL,Migrate the existing [`subscription_details.vue`](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/app/assets/javascripts/subscriptions/new/components/checkout/subscription_details.vue) and [`summary_details.vue`](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/app/assets/javascripts/subscriptions/new/components/order_summary/summary_details.vue) to use GraphQL.,2
79107468,2021-02-15 11:54:27.977,[CI Minutes] Create a banner to display success from purchasing CI Minutes,Create a banner to display success from purchasing CI Minutes,2
79106816,2021-02-15 11:48:09.077,[CI Minutes] Implement GraphQL fetch of CI plan minutes data,"Implement GraphQL fetch of CI plan minutes data:
 - See BE ticket here: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2628#note_506935713

Details in the Epic: https://gitlab.com/groups/gitlab-org/-/epics/5391",3
78993332,2021-02-12 19:11:24.249,Custom PS Education Services SKU,"# SKU Request Summary

<!---
Provide a brief description of what this SKU will be used for.
--->



## SKU Requirements

In order to expedite your request, please complete all of the following information.
Any questions about this template or this request can be directed to @amandarueda in the comments of this issue.

* [x] SKU Name:  Custom PS Education Services
* [x] SKU Code/ID:  See Production/API Sandbox export
* [x] Zuora Plan Name:  [See Production/API Sandbox export](https://docs.google.com/spreadsheets/d/1hFp2LnIN1a1nCJ9sjuSeqa0IGqn19pXIuVS83M6KciY/edit?usp=sharing)
* [x] Zuora Plan ID:  [See Production/API Sandbox export](https://docs.google.com/spreadsheets/d/1hFp2LnIN1a1nCJ9sjuSeqa0IGqn19pXIuVS83M6KciY/edit?usp=sharing)
* [x] Service type: `add-on`
* [x] Does this need to be purchase-able via CustomersDot? `No`
* [x] Does this service renew? `No`
     * [ ] If yes, what is the renewal cadence? `monthly | annually | other`
* [x] Should an email be sent indicating the subscription is coming to an end?: `No`
* [x] Is there a unit of measure, if so what? `Yes`  `Education Service`
* [x] Does this service provision anything? `other`
     * [ ] If yes, please describe in detail what should be provisioned including the systems affected:
* [x] How soon do you need this SKU ? Timeline:  ASAP
* [x] Who in Sales-Ops approved this request: @c.yoshida 
* [x] Link to originating Finance issue:  https://gitlab.com/gitlab-com/Finance-Division/finance/-/issues/3428
* [ ] Apply the appropriate `BTG Priority` label to this issue.

[Customer PS Education Services](https://docs.google.com/spreadsheets/d/1hFp2LnIN1a1nCJ9sjuSeqa0IGqn19pXIuVS83M6KciY/edit?usp=sharing)",2
78930301,2021-02-11 18:27:23.367,Invalid user input during purchase should not raise Sentry errors,"### Problem

We've seen some Sentry errors (shown below) which were triggered from invalid user input like entering an invalid quantity during a EoA upgrade at renewal.  These types of errors are displayed on the page in order for the user to fix the problem on their own.  They don't represent an error in the code that needs to be addressed so we should not raise these types of errors in Sentry, which adds extra noise.

1. [You have exceeded the 25 seat allowance for this offer](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2486996/?referrer=slack)
2. [Enter a number of active users greater than or equal to your current number of active users (12)](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2487120/?referrer=slack)

[Slack thread](https://gitlab.slack.com/archives/CL7SX4N86/p1613068673149300?thread_ts=1613065859.148000&cid=CL7SX4N86) (internal) for context.

### Proposal

These errors are handled in [the `AmendSubscriptionService#execute` method](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/e390ecbe3fde96d1747056b9bd3f05c88958aac9/app/services/amend_subscription_service.rb#L35).  Some errors (`PaymentMethodUpdateError`, `NotUpgradableError`, `NotDowngradableError`, `MaxAdditionalSeatsExceededError`) are rescued without logging an error to Sentry.  

The first error above (`MaxAdditionalSeatsExceededError`; [raised here](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/eaedf03b86463244a458f9bf1d63c3fe9424d0ea/app/services/amendment_base_service.rb#L262)) should be handled this way without logging in Sentry but it must be somehow.  This might be coming from the frontend as errors are raised [from here](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/e3560a9d6787bf155672380f7b3a9da5ff00928b/app/frontend/javascripts/subscription/components/upgrade_subscription_app.vue#L238) as well.

The second error ([raised here](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/e390ecbe3fde96d1747056b9bd3f05c88958aac9/app/services/amend_subscription_service.rb#L245) is logged to Sentry because it's raised as a `RenewalError` which [rescued here](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/e390ecbe3fde96d1747056b9bd3f05c88958aac9/app/services/amend_subscription_service.rb#L36) and logged to Sentry.

### Result

Less noise in the #s_fulfillment_status Slack channel.",2
78839751,2021-02-10 17:34:42.345,"Follow-up from ""Drop :drop_custom_encoding feature flag""","The following discussion from !2765 should be addressed:

- [ ] @cwiesner started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2765#note_506200531): 

    > **nitpick:** This method serves as an alias only now. We should remove it and use `name` directly for its usages. I'm okay with addressing this in a follow-up as well.",1
78739218,2021-02-09 17:32:55.884,Remove custom eager loading in PlansFinder is possible,"### Problem

In the `PlansFinder` currently, plans are eager loaded during [app initialization](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/13b85a3f5e28800634da970972c3bc5313b2d37c/config/application.rb#L72).  This is done as an optimization to reduce the number of requests to Zuora to fetch common products from the catalog.  However, now that we are using [IronBank's local products cache feature](https://github.com/zendesk/iron_bank#local-records) (with a slight [customization to store in the db](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/45f5dedbb4fa803d19827472214ea0b5b0ce1861/lib/gem_extensions/iron_bank/local_records.rb#L6) instead of filesystem), we might not need this eager-loading mechanism anymore.

Removing eager loading would have some nice benefits:
- Removes complexity in the app loading logic.
- Removes a few [class variables](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/aa13252af0a6e69a58c8ac2bc645afaf36d7b12c/app/models/plans_finder.rb#L12) from our codebase which in general should be avoided.
- Removes the [eager-loading step](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/fe13e488edc07ced567e0b64d6b560b83b2ccf0d/spec/support/eager_load_plan_finder.rb#L10) from Rspec configuration.  This would be a huge benefit because `plans_finder` has its own VCR cassette for this eager loading that frequently causes merge conflicts since it is a very commonly updated file.  Fixing this should improve our velocity and generally the engineers quality of life.

### Proposal

Remove the `PlansFinder` eager-loading logic and make sure nothing breaks.  The `PlansFinder.find` method could be updated to find a Product Rate Plan directly using IronBank (e.g. `Zuora::ProductRatePlan.find`) rather than looping over `eager_loaded_plans`.  The key difference here is we would build the `Plan` object on the fly instead of returning a `Plan` object that was [built during start up](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/aa13252af0a6e69a58c8ac2bc645afaf36d7b12c/app/models/plans_finder.rb#L31).

We should take benchmarks of important features before and after this change to make sure there is no negative impact.  Here are some ideas of things to benchmark:
- Loading the Rails app.
- Loading the Plans page.
- Loading the Manage subscriptions page.
- Making a subscription purchase.

### Result

A simpler codebase that hopefully isn't any less performant but easier to maintain.",5
78683241,2021-02-09 02:27:14.707,FE: Prevent deletion of groups/namespaces when they have a subscription,"This is the ~frontend issue for: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1879

Designs https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1923/designs/Group___Settings___General.png

* Propagate if group has a subscription attached to the view
* Display inline alert from design if subscription is attached
* Make `Remove group` button disabled",3
78680964,2021-02-09 00:47:38.248,subscription should only allow to transfer to namespaces not currently associated with a paid plan,"`change linked namespace` allows selecting some namespace that already purchased services. This is a bug.

### Problem

slack discussion https://gitlab.slack.com/archives/CMJ8JR0RH/p1612432937066900

TLDR: When a namespace has a free trial and then purchased a paid plan, it will have this issue.

The problem is: in `app/helpers/gitlab_plans_helper.rb`, it uses `namespace.trial_ends_on.nil?` to determine whether a subscription is `in trial`. This is not safe.

**Snapshot (some namespace with paid subscriptions like g300, is allowing to link to another subscription, which is wrong)** ![Screenshot_from_2021-02-08_09-46-05](https://gitlab.com/gitlab-org/customers-gitlab-com/uploads/1f399fa44f70f1edd5fda900fed8efe6/Screenshot_from_2021-02-08_09-46-05.png)

### Proposal

TLDR: uses `!namespace.trial` to replace `namespace.trial_ends_on.nil?` in `app/helpers/gitlab_plans_helper.rb`

**More details explained below**

The information we saved for trial subscription:

* trial_starts_on
* trial
* trial_ends_on.

It is not safe to use `trial_ends_on` to determine whether a subscription is `in trial`. Because when a trial finished, `trial_ends_on` value is not cleared.

Scenarios related to `trial subscription`:

1. in active trial: `trial = true`, `trial_starts_on <= today`, `trial_ends_on >= today`
1. trial expired: `trial = true`, `trial_starts_on <= today`, `trial_ends_on < today`
1. trial terminated due to a paid subscription purchased: `trial = false`, `trial_starts_on <= today`, `trial_ends_on has value ( it >= date when trial was terminated; but while time flies, it will < today eventually)`
1. trial expired, and then a paid subscription purchased: `trial = false`, `trial_starts_on <= today`, `trial_ends_on < today`

From the above-listed scenarios:

* if a namespace's latest subscription is `trial`, it has `trial = true`, no matter the trial expired or not
* if a namespace's latest subscription is a paid subscription, it has `trial = false`

**NOTE**: today, even when a namespace's trial expired, we still show it as `Trial` in GUI, though the Gold features are disabled since we checked `trial_ends_on` in the logic.

From another perspective, in our code logic, as of today, there are 3 types namespaces:

* free : not link to a subscription, no matter trial subscription or paid subscription
* trial : link to trial subscription(it can be active or expired), but not link to a paid subscription
* paid subscription : link to a paid subscription

So if a namespace is linked to a subscription, we can use `trial` to determine it is trial subscripton or paid subscription.

### Result

### Next steps (if any)

### How will we measure success?",1
78674597,2021-02-08 22:01:22.142,Update messaging in CustomersDot add-ons section to be more clear and consistent,See requirements for this update in the completed design issue: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2175,2
78388182,2021-02-03 21:40:10.648,Testing/Feedback from mapping of Zuora invoice to Salesforce CPQ Items,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

The purpose of this issue is to gather the feedback resulting from testing the changes implemented for https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2097.

Sync session scheduled for Feb 4.",1
78375199,2021-02-03 17:10:08.105,Remove ExpireTrialCronJob worker class,"The following discussion from !2303 should be addressed:

- [ ] @krasio started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2303#note_467690103):  (+4 comments)

    > Probably over defensive but just in case there are such jobs in the queue during deployment.",1
78367971,2021-02-03 15:18:27.143,"Updates to ""Cancelled"" label","## Summary

In https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2637 we implemented a label to draw attention to the customer that the subscription is set to cancel. 

This issue is an iteration of that implementation to:

1. Change the `Cancelled` label to include a humanized date as suggested in [this comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2637#note_500615444)
1. Change the `Cancelled` label for expired subscriptions (where subscription end date is in the past) to read `Expired`",1
78273656,2021-02-02 11:54:57.770,Copy to clipboard or download license throws 404 error,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you're about to submit isn't a duplicate.

Do not include confidential information!
--->

### Summary

- Given a customer with a self-managed subscription 
- And a valid license in license.gitlab.com
- When I click on download license on the subscription card in customers.gitlab.com
- Then I am redirected to `https://customers.gitlab.com/licenses/CCV%20Group%20B.V.-%2035%20Starter`
- And I see a 404 error with the following text: 

```
This customers.gitlab.com page can’t be found
No web page was found for the web address: https://customers.gitlab.com/licenses/CCV%20Group%20B.V.-%2035%20Starter
HTTP ERROR 404
```

- Given a customer with a self-managed subscription 
- And a valid license in license.gitlab.com
- When I click on `Copy license to clipboard` on the subscription card in customers.gitlab.com
- An error appears in the bottom left corner of the screen, with text:
```
An error occurred, please try again later
```

### What is the current *bug* behavior?

I suspect the cause is related to the special characters in the subscription name which is causing the error.

### What is the expected *correct* behavior?

The license should download or copy to clipboard

### Relevant logs and/or screenshots

- [Customers account](https://customers.gitlab.com/admin/customer/109681/edit)
- [Valid license](https://license.gitlab.com/licenses/154675)
- Screenshot:
![Screenshot_2021-02-02_at_13.51.06](/uploads/17a2021e801619d03e61ac74558944f5/Screenshot_2021-02-02_at_13.51.06.png)

### Workarounds

(Ways to get around the issue)

### Reported examples

1. https://gitlab.zendesk.com/agent/tickets/191611
1.
1.

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",2
78209450,2021-02-01 14:09:11.806,Add route to purchase self-managed plan on the lowest tier,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

For new purchases of self-managed plans we currently use the URL schema

`https://customers.gitlab.com/subscriptions/new?plan_id=[PLAN_ID]&test=capabilities`

This means that external routes like [a subscribable in-app banner](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2582) need to know the planId for the lowest tier in order to link to ""lowest possible purchase""

### Proposal

Add a route like `/subscriptions/new?lowest_tier_plan_for=[self_managed|saas]` which puts the responsibility of knowing the planId on CustomerDot. This way the consumers (in-app banners) have a static URL they can consume.",5
78177097,2021-02-01 07:04:28.508,Follow-up: unify terminology - rename yearly to annual,"### Problem

In #2618 we unified the terminology in the renew and upgrade pages.

### Proposal

Rename `yearly` to `annually` in:

- [x] `./app/frontend/javascripts/subscription/components/add_seats_invoice.vue`
- [x] `./app/frontend/javascripts/subscription/components/new_ee_subscription_form.vue`

![Screenshot_2022-01-25_at_12.42.41_PM](/uploads/5bca0390996d4e99bb3ca2a37779ba7f/Screenshot_2022-01-25_at_12.42.41_PM.png)

And update tests as needed.

### Result

Consistent terminology

### Next steps (if any)

Schedule

### How will we measure success?",2
78007784,2021-01-28 15:06:31.178,EoA: Cancelled subscription is not obvious,"## Summary

We no longer show the autorenew toggle/cancel button since we updated all Bronze/Starter to autocancel. This has increased user confusion (pre-existing issue) over how to cancel their subscription.

In the subscription header, it states the expiration date which implies it will cancel but I think we need something more eye-catching.

In this iteration, I'd like to ship a quick solution to the CustomersDot subscription card for subscriptions set to cancel. This should be applicable to all subscriptions which are not set to autorenew, not just Bronze/Starter.

Perhaps a colored badged that says ""cancelled"" and when you hover over it there is text along the lines of ""this subscription will not automatically renew and will cancel on the expiration date. Please select the renew button to continue your subscription for another year."" ... ish?

I'm totally open to alternative ideas, whatever it is, would be good to ship asap.

![Screen_Shot_2021-01-28_at_9.11.43_a.m.](/uploads/40e3272e97b8461dc04fd6a18b9c3644/Screen_Shot_2021-01-28_at_9.11.43_a.m..png)",1
77993447,2021-01-28 11:55:01.480,Follow-up: Clean up old account settings page,"## Cleaning up 🧹

In !2669 we cleaned up the old account settings, however, there are still some things that need to be done:

* [x] Remove the marked as deprecated route and controller for getting countries and states.
* [x] Remove the old JS code for toggling VAT field.
* [x] Ensure `vue_account_details_page` feature flag is cleaned-up from the source code
* [x] Verify then remove `vue_account_details_page` from feature flags
* [x] Ensure `pajamas_account_page` feature flag is cleaned-up from the source code
* [x] Verify then remove `pajamas_account_page` from feature flags",2
77937086,2021-01-27 14:49:44.820,Increase test coverage to include tax responses,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

In https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2623 we identified that subtotal was showing total + tax.

This should have been caught by automated tests, not in production.

### Proposal

Cover this path with tests to guard the fix",1
77929357,2021-01-27 12:47:51.810,Add GraphQL support to send CI plans,"As mentioned here https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2346#note_493198951, we need to send CI plans too to the GL.com to allow the GL.com show the plan and the values associated with it and extend the current implementation to include the CI minutes plan.

We need to have an GraphQL endpoint to send the CI plans.",1
77928081,2021-01-27 12:28:58.144,EoA: Free upgrade flow license doesn't generate with trueups,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

- When the customer has a current Starter subscription with trueups
- And they choose the free upgrade to Premium (without renewal)
- Then the upgrade license generated doesn't include the trueups in their subscription

### Proposal

Upgrade licenses should include trueups from the original subscription

### Reported examples:
1. https://gitlab.zendesk.com/agent/tickets/190385
1. https://gitlab.zendesk.com/agent/tickets/190745
1. https://gitlab.zendesk.com/agent/tickets/190523
1. https://gitlab.zendesk.com/agent/tickets/190511
1. https://gitlab.zendesk.com/agent/tickets/190793
1. https://gitlab.zendesk.com/agent/tickets/190933
1. https://gitlab.zendesk.com/agent/tickets/191146",2
77912398,2021-01-27 08:29:07.942,Upgrade offer is visible for Bronze subscription not associated with a namespace,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

# Q: I have a Bronze subscription and want to take this offer, however I'm blocked by this behaviour

You need to [Change the linked namespace](https://docs.gitlab.com/ee/subscriptions/#change-the-linked-namespace) to unblock yourself

1. Log in to the [Customers Portal](https://customers.gitlab.com/customers/sign_in) with a linked GitLab.com account.
1. Navigate to the Manage Purchases page.
1. Select Change linked namespace.
1. Select the desired group from the This subscription is for dropdown.
1. Select Proceed to checkout. 

If this doesn't work see below :point_down: 

# Q: I tried to Change the linked namespace however my intended group is greyed out

Then it's a data-integrity issue. Quickest way to resolve this is to open [a support ticket](https://support.gitlab.com/hc/en-us/requests/new?ticket_form_id=360000071293)

---

# Development on UI bug

### Problem

![Screenshot_2021-01-27_at_08.22.34](/uploads/f14def69aa9eead0dbaec1cb878d3717/Screenshot_2021-01-27_at_08.22.34.png)

On the `/subscription` overview, we show the Upgrade offering for Bronze subscriptions.

However some subscriptions do not have namespaces associated with them, for example if the namespace was deleted.

### Proposal

Only show the upgrade offer banner if Subscription is associated and active. We can check this with `upgradeSubscriptionPath` for example.

### Result

We do not confuse our users with a banner prompting them to action and then they can't take action.

### Setting up local development for this case

Follow [How to create a subscription, generate an invoice and post the invoice in Zuora sandbox](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob)/staging/doc/resource_videos.md#resource-video-library",1
77711476,2021-01-22 23:10:11.795,Disable Salesforce lead generation in development mode,"I just tried registering an account with my local environment and ran into this:

![image](/uploads/b342a7d38fd935ccc12ab739ec1811c8/image.png)

The account created, so it works now. But I wonder if we should disable this in development mode, or if Salesforce is not configured.",2
77541074,2021-01-20 12:57:01.995,"Follow-up from ""Allow users to manually renew subscription up to 30 days post expiration""","The following discussion from !2408 should be addressed:

- [ ] @asubramanian1 started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2408#note_485659990):  (+3 comments)

    > **question:** Should we also consider restricting in the ~backend api? If yes, I'm okay if you want to do it as a follow up.",2
77486868,2021-01-19 16:09:46.678,Inconsistent error response structure,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

In our frontend [we look for a human-readable error to present to the user](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/c330e163096f2968413a4f76cd64c9c28ce248bf/app/frontend/javascripts/parse_responses.js#L15-26) so the user can correct what's erroring out if possible.

The format the frontend expects is

```
{ 
  gateway_response: ""Insufficient funds"" // this structure we inherit from Zuora
}

// OR
{
  errors : {
    message: ""Can't renew for less than current user count"",
    code: ""RENEW_COUNT_FAILURE"" // optional field if something special should be flagged on the frontend
  }
}

```

However we're not always following this structure. Below are instances of `{ error: ""Something went wrong"" }` in our codebase

```
~/workspace/customers-gitlab-com staging ⇣
❯ git grep ""render json: { error:""
app/controllers/application_controller.rb:        render json: { error: 'We were unable to process this transaction.' }, status: :unprocessable_entity
app/controllers/orders_controller.rb:          render json: { error: ""Error when processing subscription: #{params[:subscription_name]}"" },
app/controllers/plans_controller.rb:        render json: { error: e.message }, status: :internal_server_error
app/controllers/subscriptions_controller.rb:    render json: { error: 'We were unable to process this transaction.' }, status: :unprocessable_entity
app/controllers/zuora_callbacks_controller.rb:      render json: { error: result[:error] }, status: :internal_server_error
```

### Proposal

Update the instances to the proper error structure.

### Result

Users do not get hit with a generic error message that will trigger a Support ticket.",2
77470292,2021-01-19 12:11:49.435,Follow-up - add EDU and OSS plans to gitlab_ee_edu_oss_plans,"The following discussion from !2560 should be addressed:

- [ ] @ebaque started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2560#note_488467260):  (+7 comments)

    > @vij Can you please review this MR?",2
77403091,2021-01-18 12:21:10.225,Display of credit card iframe looks broken for narrow viewport widths,"



<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

The Zuora credit card iframe layout breaks when the viewport (browser window) size gets narrower.

| Wide viewport width - looks good | Narrow viewport width - layout breaks |
| --- | --- |
| ![Screenshot_2021-01-18_at_12.23.09](/uploads/faa15172b94e10a6a463b78dcd53b411/Screenshot_2021-01-18_at_12.23.09.png) | ![Screenshot_2021-01-18_at_12.23.37](/uploads/98def1c9e039a75afd568d38e375699d/Screenshot_2021-01-18_at_12.23.37.png)|

### Proposal

We need to tweak the styles so the iframe looks good no matter the viewport width.",2
77284340,2021-01-15 11:31:41.365,"Unhelpful error message: Could not purchase subscription, if the problem persists please contact support.","<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

From [our logs](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1778206/?query=user%3A230063), we can see that the purchase is failing because of the credit card, however, the error message is not helpful.

![Screen_Shot_2021-02-08_at_10.55.45_a.m.](/uploads/72bd47b43f392094015e2a3717532718/Screen_Shot_2021-02-08_at_10.55.45_a.m..png)

[In the last 30 days, there has been 408 users affected by this message](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1896180/?query=user%3A230063)

### Proposal

When a card has insufficient funds or the card is declined, we should be a displaying an error message to indicate that the card being used is causing the purchase failure.

### When possible show the `message` from backend

We're throwing away the human readable error message we get from the backend and from Zuora.

Replace the instances of throwing away the error message with the following:

```
diff --git a/app/frontend/javascripts/subscription/components/add_seats_form.vue b/app/frontend/javascripts/subscription/components/add_seats_form.vue
index c18bf3c15..5eb3ba124 100644
--- a/app/frontend/javascripts/subscription/components/add_seats_form.vue
+++ b/app/frontend/javascripts/subscription/components/add_seats_form.vue
@@ -130,7 +130,7 @@ export default {
           Sentry.captureException(error);
           this.$emit(
             'error',
-            'Could not add seats for the subscriptions, if the problem persists please contact support.',
+            error.message
           );
         })
         .finally(() => {
```

### New error message text

We should replace the current message with the following text [received from technical writing](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2536#note_504340966)

>This credit card transaction could not be processed. Please verify the information or try another card.

### Reported examples:

1. https://gitlab.zendesk.com/agent/tickets/188236
1. https://gitlab.zendesk.com/agent/tickets/200402",3
77186452,2021-01-13 20:49:35.501,Clean-up:  new_upgrade_subscription_page feature flag,"In #2339 we introduced a change behind [`new_upgrade_subscription_page`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/80/edit) feature flag.

After about 1 month of having it in use without problems, we need to graduate the feature flag.",2
77175012,2021-01-13 16:18:15.559,Follow-up: add tests to cover state in upgrade app,"We want to add tests for the new vue upgrade app, covering any change in `isLoading` and in `purchaseButtonEnabled()`.

The following discussion from !2500 should be addressed:

- [ ] @agulina started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2500#note_484333481): 

    > **tests (non-blocking)**: we need a follow-up to add tests that cover the transitions of this state.

- [ ] @agulina started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2500#note_484333483): 

    > **tests (non-blocking)**: we need a follow-up to add tests that cover the transitions of this state.",1
77174408,2021-01-13 16:09:38.755,"Follow-up from ""Follow-up new upgrade app""","The following discussion from !2500 should be addressed:

- [ ] @agulina started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2500#note_484333448):  (+2 comments)

    > **suggestion (non-blocking)**: I'd like to follow-up on this as I think there's space for some simplification (e.g., separating the concern of having a `selectedUpgrade` and `updatingPreviewData`) and especially for leveraging Vue reactivity.
    > 
    > I will produce a patch for a later iteration, if you agree with it :smile:",1
77167694,2021-01-13 15:01:55.060,/spec/features/renew_subscriptions_spec.rb can not be re-recorded,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Running 

```
VCR=all bundle exec rspec spec/features/renew_subscriptions_spec.rb
```

causes a number of failures locally.

<details>

```
Failures:

  1) Renew Subscriptions when renewing subscriptions with :eoa_starter_bronze feature flag disabled does not show a downgrade option
     Failure/Error: params[:change_product_id].present? && main_product.product_rate_plan_id != params[:change_product_id]

     NoMethodError:
       undefined method `product_rate_plan_id' for nil:NilClass
     Shared Example Group: ""does not show a downgrade option"" called from ./spec/features/renew_subscriptions_spec.rb:416
     # ./app/services/amend_subscription_service.rb:49:in `changing_products?'
     # ./app/services/amend_subscription_service.rb:23:in `execute'
     # ./app/controllers/subscriptions_controller.rb:61:in `update'
     # ./app/middleware/health_check_responder.rb:12:in `call'
     # ------------------
     # --- Caused by: ---
     # Capybara::CapybaraError:
     #   Your application server raised an error - It has been raised in your test code because Capybara.raise_server_errors == true
     #   ./spec/support/vcr/zuora_time_traveller.rb:16:in `block (2 levels) in apply'

  2) Renew Subscriptions when renewing subscriptions with :eoa_starter_bronze feature flag enabled showing EoA banners in renew page with SaaS subscription behaves like showing EoA banners when subscription is eligible for self-serve discount shows self-serve success banner and hides warning banner when discounted plan is selected
     Failure/Error: params[:change_product_id].present? && main_product.product_rate_plan_id != params[:change_product_id]

     NoMethodError:
       undefined method `product_rate_plan_id' for nil:NilClass
     Shared Example Group: ""showing EoA banners"" called from ./spec/features/renew_subscriptions_spec.rb:337
     # ./app/services/amend_subscription_service.rb:49:in `changing_products?'
     # ./app/services/amend_subscription_service.rb:23:in `execute'
     # ./app/controllers/subscriptions_controller.rb:61:in `update'
     # ./app/middleware/health_check_responder.rb:12:in `call'
     # ------------------
     # --- Caused by: ---
     # Capybara::CapybaraError:
     #   Your application server raised an error - It has been raised in your test code because Capybara.raise_server_errors == true
     #   ./spec/support/vcr/zuora_time_traveller.rb:16:in `block (2 levels) in apply'

  3) Renew Subscriptions when renewing subscriptions with :eoa_starter_bronze feature flag enabled showing EoA banners in renew page with self-managed subscription behaves like showing EoA banners when subscription is eligible for sales-assisted discount shows sales-assisted discount banners
     Failure/Error: params[:change_product_id].present? && main_product.product_rate_plan_id != params[:change_product_id]

     NoMethodError:
       undefined method `product_rate_plan_id' for nil:NilClass
     Shared Example Group: ""showing EoA banners"" called from ./spec/features/renew_subscriptions_spec.rb:348
     # ./app/services/amend_subscription_service.rb:49:in `changing_products?'
     # ./app/services/amend_subscription_service.rb:23:in `execute'
     # ./app/controllers/subscriptions_controller.rb:61:in `update'
     # ./app/middleware/health_check_responder.rb:12:in `call'
     # ------------------
     # --- Caused by: ---
     # Capybara::CapybaraError:
     #   Your application server raised an error - It has been raised in your test code because Capybara.raise_server_errors == true
     #   ./spec/support/vcr/zuora_time_traveller.rb:16:in `block (2 levels) in apply'

  4) Renew Subscriptions when renewing subscriptions with :eoa_starter_bronze feature flag enabled when subscription is EoA Starter and Bronze offer active shows the correct prices
     Got 4 failures:

     4.1) Failure/Error: expect(page).to have_selector(plan_selector, text: 'Bronze $4', normalize_ws: true)
            expected to find visible css ""[data-testid=\""product-radio-item\""]"" with text ""Bronze $4"" but there were no matches. Also found ""Silver\n$19"", ""Gold\n$99"", which matched the selector but not all filters.
          # ./spec/features/renew_subscriptions_spec.rb:267:in `block (5 levels) in <top (required)>'
          # ./spec/support/vcr/zuora_time_traveller.rb:16:in `block (2 levels) in apply'
          # ./spec/support/vcr/zuora_time_traveller.rb:68:in `block in freeze_example'
          # ./spec/support/vcr/zuora_time_traveller.rb:67:in `freeze_example'
          # ./spec/support/vcr/zuora_time_traveller.rb:15:in `block in apply'
          # ./spec/support/vcr/zuora_time_traveller.rb:14:in `apply'
          # ./spec/support/vcr.rb:83:in `block (2 levels) in <top (required)>'

     4.2) Failure/Error: expect(page).to have_selector(user_subtotal_selector, text: '$72.00')
            expected to find visible css ""[data-testid=\""user-subtotal\""]"" with text ""$72.00"" but there were no matches. Also found ""$228.00"", which matched the selector but not all filters.
          # ./spec/features/renew_subscriptions_spec.rb:268:in `block (5 levels) in <top (required)>'
          # ./spec/support/vcr/zuora_time_traveller.rb:16:in `block (2 levels) in apply'
          # ./spec/support/vcr/zuora_time_traveller.rb:68:in `block in freeze_example'
          # ./spec/support/vcr/zuora_time_traveller.rb:67:in `freeze_example'
          # ./spec/support/vcr/zuora_time_traveller.rb:15:in `block in apply'
          # ./spec/support/vcr/zuora_time_traveller.rb:14:in `apply'
          # ./spec/support/vcr.rb:83:in `block (2 levels) in <top (required)>'

     4.3) Failure/Error: expect(page).to have_selector(plan_selector, text: 'Silver $19 $6', normalize_ws: true, class: selected_class)
            expected to find visible css ""[data-testid=\""product-radio-item\""]"" with text ""Silver $19 $6"" with classes [product-radio-panel-selected] but there were no matches. Also found ""Silver\n$19"", which matched the selector but not all filters.
          # ./spec/features/renew_subscriptions_spec.rb:269:in `block (5 levels) in <top (required)>'
          # ./spec/support/vcr/zuora_time_traveller.rb:16:in `block (2 levels) in apply'
          # ./spec/support/vcr/zuora_time_traveller.rb:68:in `block in freeze_example'
          # ./spec/support/vcr/zuora_time_traveller.rb:67:in `freeze_example'
          # ./spec/support/vcr/zuora_time_traveller.rb:15:in `block in apply'
          # ./spec/support/vcr/zuora_time_traveller.rb:14:in `apply'
          # ./spec/support/vcr.rb:83:in `block (2 levels) in <top (required)>'

     4.4) Failure/Error: expect(page).to have_selector(total_selector, text: '$72.00')
            expected to find visible css ""[data-testid=\""total-price\""]"" with text ""$72.00"" but there were no matches. Also found ""$228.00"", which matched the selector but not all filters.
          # ./spec/features/renew_subscriptions_spec.rb:272:in `block (5 levels) in <top (required)>'
          # ./spec/support/vcr/zuora_time_traveller.rb:16:in `block (2 levels) in apply'
          # ./spec/support/vcr/zuora_time_traveller.rb:68:in `block in freeze_example'
          # ./spec/support/vcr/zuora_time_traveller.rb:67:in `freeze_example'
          # ./spec/support/vcr/zuora_time_traveller.rb:15:in `block in apply'
          # ./spec/support/vcr/zuora_time_traveller.rb:14:in `apply'
          # ./spec/support/vcr.rb:83:in `block (2 levels) in <top (required)>'

  5) Renew Subscriptions when renewing subscriptions with :eoa_starter_bronze feature flag enabled when subscription is EoA Starter and Bronze offer active successfully downgrades and renews at the same time
     Got 5 failures:

     5.1) Failure/Error: expect(page).to have_selector(plan_selector, text: 'Bronze $4', normalize_ws: true, class: selected_class)
            expected to find visible css ""[data-testid=\""product-radio-item\""]"" with text ""Bronze $4"" with classes [product-radio-panel-selected] but there were no matches. Also found ""Silver\n$19"", which matched the selector but not all filters.
          # ./spec/features/renew_subscriptions_spec.rb:238:in `block (5 levels) in <top (required)>'
          # ./spec/support/vcr/zuora_time_traveller.rb:16:in `block (2 levels) in apply'
          # ./spec/support/vcr/zuora_time_traveller.rb:68:in `block in freeze_example'
          # ./spec/support/vcr/zuora_time_traveller.rb:67:in `freeze_example'
          # ./spec/support/vcr/zuora_time_traveller.rb:15:in `block in apply'
          # ./spec/support/vcr/zuora_time_traveller.rb:14:in `apply'
          # ./spec/support/vcr.rb:83:in `block (2 levels) in <top (required)>'

     5.2) Failure/Error: expect(page).to have_selector(user_subtotal_selector, text: '$48.00')
            expected to find visible css ""[data-testid=\""user-subtotal\""]"" with text ""$48.00"" but there were no matches. Also found ""$228.00"", which matched the selector but not all filters.
          # ./spec/features/renew_subscriptions_spec.rb:239:in `block (5 levels) in <top (required)>'
          # ./spec/support/vcr/zuora_time_traveller.rb:16:in `block (2 levels) in apply'
          # ./spec/support/vcr/zuora_time_traveller.rb:68:in `block in freeze_example'
          # ./spec/support/vcr/zuora_time_traveller.rb:67:in `freeze_example'
          # ./spec/support/vcr/zuora_time_traveller.rb:15:in `block in apply'
          # ./spec/support/vcr/zuora_time_traveller.rb:14:in `apply'
          # ./spec/support/vcr.rb:83:in `block (2 levels) in <top (required)>'

     5.3) Failure/Error: expect(page).to have_selector(plan_selector, text: 'Silver $19 $6', normalize_ws: true)
            expected to find visible css ""[data-testid=\""product-radio-item\""]"" with text ""Silver $19 $6"" but there were no matches. Also found ""Silver\n$19"", ""Gold\n$99"", which matched the selector but not all filters.
          # ./spec/features/renew_subscriptions_spec.rb:240:in `block (5 levels) in <top (required)>'
          # ./spec/support/vcr/zuora_time_traveller.rb:16:in `block (2 levels) in apply'
          # ./spec/support/vcr/zuora_time_traveller.rb:68:in `block in freeze_example'
          # ./spec/support/vcr/zuora_time_traveller.rb:67:in `freeze_example'
          # ./spec/support/vcr/zuora_time_traveller.rb:15:in `block in apply'
          # ./spec/support/vcr/zuora_time_traveller.rb:14:in `apply'
          # ./spec/support/vcr.rb:83:in `block (2 levels) in <top (required)>'

     5.4) Failure/Error: expect(page).to have_selector(total_selector, text: '$48.00')
            expected to find visible css ""[data-testid=\""total-price\""]"" with text ""$48.00"" but there were no matches. Also found ""$228.00"", which matched the selector but not all filters.
          # ./spec/features/renew_subscriptions_spec.rb:243:in `block (5 levels) in <top (required)>'
          # ./spec/support/vcr/zuora_time_traveller.rb:16:in `block (2 levels) in apply'
          # ./spec/support/vcr/zuora_time_traveller.rb:68:in `block in freeze_example'
          # ./spec/support/vcr/zuora_time_traveller.rb:67:in `freeze_example'
          # ./spec/support/vcr/zuora_time_traveller.rb:15:in `block in apply'
          # ./spec/support/vcr/zuora_time_traveller.rb:14:in `apply'
          # ./spec/support/vcr.rb:83:in `block (2 levels) in <top (required)>'

     5.5) Failure/Error: expect(page).to have_content('Bronze Plan')
            expected to find text ""Bronze Plan"" in ""Manage purchases\nView invoices\nMy account\nManage purchases\nBuy new subscription\nsome awesome namespace\nSilver Plan A-S00069329\nRenews on January 13, 2023\nUpgrade\nRenew\nBuy more CI minutes\nChange linked namespace\nCancel subscription\nCollapse\nStart date Purchase date Product Quantity\nJanuary 13, 2022 January 13, 2021 Silver Plan 1""
          # ./spec/features/renew_subscriptions_spec.rb:257:in `block (5 levels) in <top (required)>'
          # ./spec/support/vcr/zuora_time_traveller.rb:16:in `block (2 levels) in apply'
          # ./spec/support/vcr/zuora_time_traveller.rb:68:in `block in freeze_example'
          # ./spec/support/vcr/zuora_time_traveller.rb:67:in `freeze_example'
          # ./spec/support/vcr/zuora_time_traveller.rb:15:in `block in apply'
          # ./spec/support/vcr/zuora_time_traveller.rb:14:in `apply'
          # ./spec/support/vcr.rb:83:in `block (2 levels) in <top (required)>'

  6) Renew Subscriptions when renewing subscriptions with :eoa_starter_bronze feature flag enabled when subscription is EoA Starter and Bronze eligible shows the next stair step renewal price and no downgrade option after renewing at the discounted price
     Failure/Error: amendments = Zuora::Amendment.where(subscription_id: versions.map(&:id))

     IronBank::BadRequestError:
       Body: {""detail""=>{""MalformedQueryFault""=>{""FaultMessage""=>""You have an error in your ZOQL syntax"", ""FaultCode""=>""MALFORMED_QUERY""}}, ""faultcode""=>""fns:MALFORMED_QUERY"", ""faultstring""=>""You have an error in your ZOQL syntax""}
     # ./app/services/eoa_offer_renewals_count_service.rb:22:in `amend_descriptions'
     # ./app/services/eoa_offer_renewals_count_service.rb:13:in `execute'
     # ./app/services/eoa_offer_renewals_count_service.rb:5:in `execute'
     # ./app/services/eoa_calculate_next_price_service.rb:29:in `eoa_renewals_count'
     # ./app/services/eoa_calculate_next_price_service.rb:17:in `next_price'
     # ./app/models/subscription.rb:21:in `eoa_starter_bronze_next_price'
     # ./app/services/amend_subscription_service.rb:214:in `block in eoa_starter_bronze_renewal_price'
     # ./lib/utils/strong_memoize.rb:27:in `strong_memoize'
     # ./app/services/amend_subscription_service.rb:213:in `eoa_starter_bronze_renewal_price'
     # ./app/services/amend_subscription_service.rb:219:in `build_eoa_price_uplift_amendment'
     # ./app/services/amend_subscription_service.rb:131:in `check_subscription_updates'
     # ./app/services/amend_subscription_service.rb:28:in `execute'
     # ./app/controllers/subscriptions_controller.rb:61:in `update'
     # ./app/middleware/health_check_responder.rb:12:in `call'
     # ------------------
     # --- Caused by: ---
     # Capybara::CapybaraError:
     #   Your application server raised an error - It has been raised in your test code because Capybara.raise_server_errors == true
     #   ./spec/support/vcr/zuora_time_traveller.rb:16:in `block (2 levels) in apply'

Finished in 11 minutes 42 seconds (files took 4.7 seconds to load)
20 examples, 6 failures

Failed examples:

rspec './spec/features/renew_subscriptions_spec.rb[1:1:6:1]' # Renew Subscriptions when renewing subscriptions with :eoa_starter_bronze feature flag disabled does not show a downgrade option
rspec './spec/features/renew_subscriptions_spec.rb[1:1:5:3:1:1:1:2]' # Renew Subscriptions when renewing subscriptions with :eoa_starter_bronze feature flag enabled showing EoA banners in renew page with SaaS subscription behaves like showing EoA banners when subscription is eligible for self-serve discount shows self-serve success banner and hides warning banner when discounted plan is selected
rspec './spec/features/renew_subscriptions_spec.rb[1:1:5:3:2:1:2:1]' # Renew Subscriptions when renewing subscriptions with :eoa_starter_bronze feature flag enabled showing EoA banners in renew page with self-managed subscription behaves like showing EoA banners when subscription is eligible for sales-assisted discount shows sales-assisted discount banners
rspec ./spec/features/renew_subscriptions_spec.rb:260 # Renew Subscriptions when renewing subscriptions with :eoa_starter_bronze feature flag enabled when subscription is EoA Starter and Bronze offer active shows the correct prices
rspec ./spec/features/renew_subscriptions_spec.rb:233 # Renew Subscriptions when renewing subscriptions with :eoa_starter_bronze feature flag enabled when subscription is EoA Starter and Bronze offer active successfully downgrades and renews at the same time
rspec ./spec/features/renew_subscriptions_spec.rb:394 # Renew Subscriptions when renewing subscriptions with :eoa_starter_bronze feature flag enabled when subscription is EoA Starter and Bronze eligible shows the next stair step renewal price and no downgrade option after renewing at the discounted price

Randomized with seed 43705

Coverage report generated for RSpec to /Users/ragnarhardarson/workspace/customers-gitlab-com/coverage. 2689 / 9084 LOC (29.6%) covered.
SimpleCov failed with exit 1
```

</details>

This is seriously hindering development, as engineers are debugging unrelated specs when specs fail on CI.

### Proposal

Make `renew_subscriptions_spec` re-recordable. This kind of feels like a race-condition in the spec.

### Result

### Next steps (if any)

### How will we measure success?",1
77017664,2021-01-11 11:14:59.337,Exclude danger job from deployment stages,"### Problem

We want the Danger job to run only in MRs, where it's the most useful, but not in other places like the deploy stages where it's just redundant and its feedback won't be used. 

Related Slack discussion: https://gitlab.slack.com/archives/CMJ8JR0RH/p1610355001054300

### Proposal

Make Danger job run only on MRs only.",2
77010920,2021-01-11 09:33:19.112,Investigate possibility of using GitLab UI variables in Rails mailers,"The following discussion from !2439 should be addressed:

- [ ] @jakeburden started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2439#note_479902567): 

    > **nitpick (non-blocking)**:
    > 
    > We only have two variables defined, but there are a few more repeated values in the rest of the file.  Since this is a copy of the scss found in [LicenseDot](https://gitlab.com/gitlab-org/license-gitlab-com/-/blob/e5f92740731119d8236c53d571b06befba287ab5/app/assets/stylesheets/mailers/customer_mailer.scss), I don't think it should a blocker here, but rather we should open a follow-up issue to define specific values as scss variables.",2
77003072,2021-01-11 07:13:50.547,Purchase form stuck in processing when a payment is not completed,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you're about to submit isn't a duplicate.

Do not include confidential information!
--->

### Summary

A customer report that when making a purchase on [customers portal](https://customers.gitlab.com/customers/sign_in), the payment was blocked because the bank thought the payment was suspicious which cause the payment page on customer portal to stuck as if it's still processing the payment.

### Steps to reproduce

(How one can reproduce the issue - this is very important)

1. Make a purchase on [customers portal](https://customers.gitlab.com/customers/sign_in)
1. Get the transaction to be blocked by the bank
1. See the payment form stuck in the processing state

### What is the current *bug* behavior?

The payment form stuck in processing state without providing any useful information

### What is the expected *correct* behavior?

If there's an error, we should provide an error message and reason why the error happened.

### Relevant logs and/or screenshots

(Paste any relevant logs - please use code blocks (```) to format console output,
logs, and code as it's tough to read otherwise.)

`payment_method:17 Uncaught SyntaxError: Unexpected token '&'`

The code is as follows:
```
<script>
window.parent.dispatchEvent(new CustomEvent('zuora-errors', {
detail: {
page: window.parent.document.body.dataset.page,
errors: [&quot;Transaction declined.do_not_honor - Your card was declined.&quot;]
}
}));
</script>
```

![gitlab-failed-payment](/uploads/ab5782a222d12ee4a96027f2e63f5b03/gitlab-failed-payment.png)


### Workarounds

(Ways to get around the issue)

### Reported examples

1. https://gitlab.zendesk.com/agent/tickets/187119
1.
1.

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",1
76937907,2021-01-08 17:07:21.642,Combine FindCurrentSubscriptionVersionService logic into Subscription.current_subscription class method,"# Purpose

In https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2460, we've introduced a way to find the current version of a subscription record via the `FindCurrentSubscriptionVersionService`.  In the past we also introduced a class method on the `Subscription` model called `current_subscription` which finds the current rate plans and rate plan charges for a given subscription (but didn't find the current subscription version).  It was our intention when that class method was introduced to go back when we were able to find the current subscription version and incorporate that logic.

The following discussion from !2460 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2460#note_481241444): 

    > I was thinking that once we had the strategy for getting the current version of the subscription, we could incorporate that into [the `Subscription.current_subscription` method](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/7db573eb22a7f877e9ea4eaa6a442499f16d7b11/app/models/subscription.rb#L31).  When we did that, we could use that here if we wanted (but not sure if it makes sense).  This sounds like a good candidate for a follow-up issue.  I'll go ahead and create it, assuming you are on-board with it, but let me know if you have concerns.",2
76930384,2021-01-08 14:27:25.747,Unable to Reset Password in GitLab Customer Portal,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you're about to submit isn't a duplicate.

Do not include confidential information!
--->

### Summary

An existing GitLab customer cannot reset their password in the GitLab customer portal from within their account.  It shows successfully completed but still uses the old password.  This has been repeated by the customer in different browsers without ad blockers running and in private modes so no cached data might interfere somewhere.  I gave it a severity 4 since it's a single customer and they can still use their account they just can't change the password at the moment.

### Steps to reproduce

The customer enters the old and new passwords and the system shows completed but no change is made.

### What is the current *bug* behavior?

The password never changes.

### What is the expected *correct* behavior?

The password should update.

### Relevant logs and/or screenshots
There are no records of any error newer than a year ago for this customer in Sentry.

### Workarounds

None known.

### Reported examples

1. Ticket [186667](https://gitlab.zendesk.com/agent/tickets/186667)

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",2
76832788,2021-01-06 18:36:44.839,"Follow-up from ""Avoid UpdateProduct amendment for upgrade@renewal""","# Purpose

Refactor the expression [found here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2449/diffs#c74f9d3b85ffdd0e8a6b0d43ea9b111d8e09f1ff_73_70) in the `AmendSubscriptionService` class.  We could move the logic to a method to help with readability and comprehension.  There may also be an opportunity to simplify part of the expression here: `seat_increase? || (renewing? && quantity_has_changed?)`.  

## Follow-up from:

The following discussion from !2449 should be addressed:

- [ ] @cwiesner started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2449#note_479704182):  (+1 comment)

    > **suggestion:** The amount of conditions are making it harder to put a name to what's the context here. What do you think about moving them to one or multiple methods for easier readability? I know that naming things is hard, I can think of something like `increase_seat_for_same_product` but I'm not too happy about that name either :sweat: 
    > 
    > We can also address this in a follow-up if you think it's worth addressing.",1
76822041,2021-01-06 14:03:28.653,Change default branch name to main,"### Problem

Related to https://gitlab.com/gitlab-com/gl-infra/delivery/-/issues/1357

Master isn't an inclusive word and Git has decided to adopt `main` as what was previously known as `master`.

### Proposal

Set the default branch as `main` and remove any references to `master`.

This will impact deployment and we'll better wait for https://gitlab.com/gitlab-com/gl-infra/infrastructure/-/issues/11464 so we don't have to change the cookbooks and deployment tools.

### Result

`main` will be the default branch",3
76746252,2021-01-05 10:15:53.793,Rename Zuora Subscription custom field perform_reconciliations__c to PerformReconciliations__c,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

The IronBank gem, which the CustomersDot app uses, automatically converts field names like `perform_reconciliations__c` to `PerformReconciliations__c` before calling the Zuora API. Due to this, trying to update the `perform_reconciliations__c` field from the CustomersDot app fails.

### Proposal

1. Create a new custom field in production Zuora with the same details as https://apisandbox.zuora.com/apps/CustomField.do?method=viewDetail&id=2c92c0f87688a09601768ac3019f7cc5&objectType=Subscription. Note that the field label is  `Perform reconciliations1?` on sandbox just to visually distinguish it from the existing custom field during testing. On production Zuora, the label can be `Perform reconciliations?`.

1. Update the CustomersDot app to use the new custom field and remove the old (`perform_reconciliations__c`) one.

1. Delete the existing `perform_reconciliations__c` field once the production CustomersDot app has been updated.

#### Steps

- [X] Add new custom field to Zuora sandbox.
- [X] Add new custom field to sandbox schema files - https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2443.
- [x] Remove old custom field from sandbox schema files - https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2502.
- [x] Remove the old custom field from Zuora sandbox.
- [x] Observe staging to see if there are any problems.
- [x] Remove old custom field from production schema files - !2613.
- [x] Ask `@mquitevis` to rename the custom field in production Zuora.
- [x] Add the new custom field to production schema files: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2688

### Result

The CustomersDot app is able to update the value of the `PerformReconciliations__c` field.

<!-- ### Next steps (if any) -->

<!-- ### How will we measure success? -->",3
76743655,2021-01-05 09:22:20.146,Stop converting symbols to strings in Zuora::Resource,"The following discussion from !2414 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2414#note_473217243): 

    > Nice catch with this!  Thanks for adding the detailed comment too.  Do you think it's worth creating a follow-up issue for revisiting this after rails is updated?  It could be linked to https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/498.   This is pretty minor though so not a must-have.

ActiveJob in Rails 6 supports serializing symbols. So, once we upgrade to Rails 6, we can remove the `.map(&:to_s)` from this line: [lib/zuora/resource.rb#L81](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/73847ee8ef0a74d81dcc02dea4d47728c8ab9003/lib/zuora/resource.rb#L81)",2
76590187,2020-12-30 15:25:02.660,[Exception] Invoice not present in Salesforce::CreateOpportunityObjectsService,"The following discussion from !2388 should be addressed:

- [ ] @asubramanian1 started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2388#note_473231381):  (+1 comment)

    > **question:** This seems be [failing](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2382820/?query=is%3Aunresolved%20Zuora%3A%3ARecordNotFound%20Sidekiq) quite often in the past month. Should we [rescue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/4571495130f3e77ea5bc91336f11f95385e17ca9/app/services/salesforce/create_opportunity_objects_service.rb#L49) and return the response appropriately?",2
76341226,2020-12-21 13:47:40.208,Add loading indicator to price per user in renew pages,"### Problem

In subscription renew pages, we're changing the price `per user yearly` according to the selected plan.

However, when the plan changed and before the request is complete, we show a loading spinner on all soon-to-change parts (e.g. invoice, total, etc.).

But we are missing the loading spinner on the price per user part.

![screencapture-subscriptions-A-S00061735-renew-2020-12-17-12_09_13](/uploads/49faeb847687b0d6dc7309ad8a082424/screencapture-subscriptions-A-S00061735-renew-2020-12-17-12_09_13.png)

### Proposal

Add loading spinner to that part of the renew page.

That part can be found inside 2 components: `SubscriptoinRenewForm.vue` and `DotComSubscriptoinRenewForm.vue`.

Thanks to @cwiesner for catching this!",2
76211887,2020-12-17 22:55:10.754,More efficient implementation for current_customer_has_subscription? method,"### Problem

The [`current_customer_has_subscription?` helper method](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/890901f02954ecf2b7cc4520303c184ec29d83b8/app%2Fhelpers%2Fcustomer_helper.rb#L7) is used to simply return a boolean for whether a customer has at least one active subscription.  However, this method using the following logic, which queries for all subscriptions in Zuora, then subsequently all rate plans and rate plan charges, and initializes `Subscription` objects for each one.  This is very inefficient, especially for customers with more than one subscription.

```
  def current_customer_has_subscription?
    return unless current_customer

    SubscriptionsFinder.for_customer(current_customer).present?
  end
```

This seems like an easy win to speed up almost all our page loads because this helper is called in the navigation partial which is used in the application layout (IOW most pages).

### Proposal

Instead of using `SubscriptionsFinder`, here are a few alternatives:

- A simple fix would be to pull `raw_subscriptions` directly from the customer and return if any are found.  This bypasses the queries for rate plans rate plan charges.  This could be something like: `current_customer.raw_subscriptions.any?`.
- Even better would be to limit the query to Zuora to only pull the first subscription.  Something like `current_customer.raw_subscriptions(limit: 1).any?`.  This would require a few modifications but IronBank supports limits in `where` (e.g. `Zuora::Subscription.where({status: 'Active', account_id: cus.zuora_account_id}, limit: 1)`.

### Result

Faster page loads.",2
76192728,2020-12-17 14:50:48.943,Clean-up: graduate saas_manual_renew feature flag,"### Problem

On 2020-12-17 we enabled [`saas_manual_renew`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/76/edit) on production, which has been introduced as part of #2132.

After 2 milestones of running without problems, we need to graduate the feature flag and make the change permanent.",2
76173451,2020-12-17 09:07:39.884,Flaky invoice spec does not use VCR,"### Problem
One of the specs for `Zuora::Invoice` is flaky because of a 502 Bad Gateway error ([example](https://gitlab.com/gitlab-org/customers-gitlab-com/-/jobs/910417018)). The spec in question sends out a real request and would also fail when running the spec without an internet connection.

```
Failures:
  1) Zuora::Invoice.between creates a Zuora query string using the given start and end dates
     Failure/Error: query_result = client.query(query_string) # up to 2k records from Zuora
     IronBank::ServerError:
       Body: <html>
       <head><title>502 Bad Gateway</title></head>
       <body>
       <center><h1>502 Bad Gateway</h1></center>
       </body>
       </html>
     # ./lib/zuora/invoice.rb:18:in `between'
     # ./spec/lib/zuora/invoice_spec.rb:9:in `block (3 levels) in <top (required)>'
     # ./spec/lib/zuora/invoice_spec.rb:26:in `block (3 levels) in <top (required)>'
Finished in 5 minutes 54 seconds (files took 9.43 seconds to load)
3125 examples, 1 failure, 1 pending
Failed examples:
rspec ./spec/lib/zuora/invoice_spec.rb:16 # Zuora::Invoice.between creates a Zuora query string using the given start and end dates
```

### Proposal
Use VCR for this spec to stub the http request.

### Result
No flaky spec for this.",1
76145505,2020-12-16 15:22:53.768,Change midterm keyword argument to something more meaningful,"# Purpose

The keyword argument `midterm` defined [here](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/4d6db5ed2e483281c0545db679debd626dbe5755/app%2Fservices%2Famendment_base_service.rb#L32) could be clearer.  Some suggestions for improving are:
- `effective_date` and pass the date to the method.  The default would be `Date.current`.
- `effective_immediately` or `effective_now`: boolean defaulting to `true`

## Followup from

The following discussion from !2348 should be addressed:

- [ ] @vshumilo started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2348#note_467696479):  (+3 comments)

    > **non blocking**
    > 
    > :thumbsup: 
    > 
    > How do you feel about calling it something inline with `effective_immediately: false`... it is longer :( but it feels more specific.",1
76105115,2020-12-15 21:23:48.154,Refactor discount percentages logic for easier interpretation,"# Purpose

In https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2354, we introduce a method, `SubscriptionHelper#eoa_starter_bronze_discount_percentages` which returns an array of discount percentages for the remaining renewal uplifts, assuming the subscrpition is participating in an EoA offer.  In the review, a comment was made (see below) that we could clean this logic up to be clearer by moving into a service (or something similar).

## Follow-up for:

The following discussion from !2354 should be addressed:

- [ ] @vshumilo started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2354#note_467549506):  (+1 comment)

    > I understand this but it is not very straightforward.
    > 
    > What do you think about creating a ~""🍎"" follow up to move this into a EoA service or dedicated method for the math only? so it is easier to follow.
    > 
    > We also might process the `uplifts` set directly given for the last item (list_price) the discount will be 0 given by:
    > 
    > `(1 - (price.to_f / list_price)) * 100`",2
76095946,2020-12-15 16:38:49.982,New Gold/Ultimate subscription does not charge the right amount,"### Summary

Gold subscription does not charge for any guest users in the targetted namespace. But when buying a new Gold subscription for an existing group that already has guests in it, this exception is not taken into consideration.

### Steps to reproduce

The steps below include screenshots taken on https://customers.stg.gitlab.com and https://staging.gitlab.com

1. In GitLab, create a group with one guest in it - which bring the total of members to 2:

   ![2020-12-15_15-24](/uploads/1c87758ee43b636e3a5719fe24609065/2020-12-15_15-24.png)

1. In CustomersDot, purchase a Gold subscription for that group:

   ![2020-12-15_15-25](/uploads/f0b086a05e60a965c03ddfc1812d6f44/2020-12-15_15-25.png)

! For local development don't forget to turn on `move_gitlab_purchases_to_gitlab` `71` FF, all the UI is moved to GitLab

### What is the current *bug* behavior?

The minimum number of users for this purchase is 2.

### What is the expected *correct* behavior?

At minimum, only the group owner should be charged. So the minimum number of users selectable should be 1.

### Relevant logs and/or screenshots

See screenshots above",3
76057432,2020-12-15 00:13:03.076,Community Programs Self-Checkout: BE logic to recognize coupon code,"## Summary

This issue is to create the BE logic to recognize coupon code as per the details found in: https://gitlab.com/groups/gitlab-org/-/epics/5068

## Success Criteria

1. When a user enters a [coupon code](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2361) at New Subscription checkout, the subscription is charged at $0.00
1. The subscription must be created using the applicable Community Programs Sku (OSS, EDU, YCombinator)
1. The user should not be prompted to enter a credit card since the net is $0.00 _(note research done here: https://gitlab.com/groups/gitlab-org/-/epics/5068#note_468450428)_

## Process overview

https://gitlab.com/groups/gitlab-org/-/epics/5068#process-overview",3
76057268,2020-12-15 00:07:42.281,Community Programs Self-Checkout: Create Coupon Code Generator,"## Summary

This issue is to create the Coupon Code generator as per the details found in: https://gitlab.com/groups/gitlab-org/-/epics/5068",5
76036140,2020-12-14 14:00:25.248,Test Custom Auto Renew on Staging environment,"Turn on the Unleash flag 'custom_auto_renew' and monitor the cron and run the rake command. 
 
### Next steps (if any)

Edit the environment and add `customer-production` in the Feature flags. 

### How will we measure success?",1
75978313,2020-12-11 23:14:19.851,FE: Allow users to manually renew subscription up to 30 days post expiration,This is the FE dev issue for https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1393,2
75977881,2020-12-11 22:52:02.416,BE: Move CI Minutes purchase flows to GitLab.com UI,"## Summary

This is the BE version of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1990. 

## Problem
During the CI minutes purchase process, depending on how the user entered the purchase flow, they may be asked which namespace the CI minutes should be applied to. This is an over complication as a result of disparate systems.



## Proposal

Move the CI Minutes purchase flows to GitLab.com CTAs. 

### Success Criteria

- The user should remain in GitLab.com from a UI perspective
- The user should not be prompted to log into the Web Store
- The user should not be prompted to enter a namespace for the purchase

### Testing & Availability
- User redirect to checkout page when clicking on `buy more CI minutes` on Usage Quota page
- Namespace field default to personal/group namespace
- User able to change quantity during purchase
- Invalid quantity value is not allowed
- User able to enter billing info for new payment method or use an existing one
- User able to verify order summary before proceeding to purchase
- User be prompted with successful purchase/purchase error message
- User be redirected back to Usage Quota page after purchase",8
75976988,2020-12-11 22:04:15.487,New customer purchase workflow prevents purchases on groups with expired subscriptions,"### Summary

The new customer purchase workflow that occurs on the GitLab.com side (rather than customers.gitlab) prevents users from selecting a group to apply a new purchase on if that desired group currently has an expired subscription which is still within the 14-day grace period. For example, purchasing a new Bronze plan to replace the expired Gold plan is not possible.

### Steps to reproduce

Have a group with an expired subscription, but which is still within the grace period before the system automatically downgrades the group to Free.  Attempt a new purchase workflow from customerDot, which redirects to gitlab.com/susbcriptions. The dropdown when choosing a group for the new subscription is not populated with desired group

### What is the expected *correct* behavior?

Customer should be able to make a new purchase for a group with an expired subscription

### Relevant logs and/or screenshots

1. Customer has 3 groups, one of which is currently on Gold with expired subscription:

![groups-in-cd-admin](/uploads/cb742a718edfc6e1216826c2b7e94320/groups-in-cd-admin.png)

2. From customers.gitlab.com, when attempting to purchase a new plan, the workflow redirects to `gitlab.com/subscriptions` and the form only displays 2 groups, neither are the desired group:

![new-workflow](/uploads/798787d697b430b8086118fc967410ae/new-workflow.png)

3. There are no available plans for purchase when viewing group billing page:

![dotcom-billing](/uploads/5a7678f87301c39ed50be570b998bff2/dotcom-billing.png)


**However**, Circumventing the new process (see below) shows the group with the expired subscription as available for applying a new purchase:

![cd-workflow](/uploads/e7cec93ab357447fef6f0a5a28e7452f/cd-workflow.png)

### Workarounds

Circumventing the redirect to gitlab.com and going directly to the customerDot URL and entering the `plan_id` allows the purchase to continue from customers.gitlab.com, and the group is available.  For example, bronze plan id `2c92a0ff5a840412015aa3cde86f2ba6`:

`https://customers.gitlab.com/subscriptions/new?plan_id=2c92a0ff5a840412015aa3cde86f2ba6&transaction=create_subscription`

Purchase workflow can then continue directly from customerDot.

Alternatively, manually downgrading the group to free should also allow the new purchase to proceed.

### Reported examples

1. Customer ticket: https://gitlab.zendesk.com/agent/tickets/183643
1. https://gitlab.zendesk.com/agent/tickets/181064 [Rotanak's ticket](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2344#note_465828943)
1. https://gitlab.zendesk.com/agent/tickets/185862",3
75794377,2020-12-09 02:15:37.139,Subscription indicator in Customers Admin based on active subscription in Zuora,"## Summary

In https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2141 we created a `Subscription` designation for internal admins viewing customers.gitlab.com admin search results to allow them to easily distinguish which of the customer records are associated with a Zuora subscription.

The criteria for the work was solely the presence of a `Zuora account` id associated with the customer record. While this covers the majority of cases, there will be edge cases where an id is present but no valid subscription exists. We made the trade off to implement with this known constraint as it was a fast and low cost implementation.

## Proposal

Update the label display logic to ensure the customer record is actually tied to an active subscription in Zuora.",2
75727766,2020-12-07 19:15:36.890,Follow-up: Add frontend specs for upgrading a GitLab.com subscription during renewal,"Add frontend specs for upgrading a GitLab.com subscription during renewal to cover `upgrade_product_id` (will be renamed to `change_product_id` in !2309).

The following discussion from !2309 should be addressed:

- [ ] @jakeburden started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2309#note_461771562): 

    > **Follow-up Suggestion (non-blocking):**
    > 
    > Noticed we don't test for this prop in [dotcom_subscription_renew_form_spec.js](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/spec/frontend/subscription/components/dotcom_subscription_renew_form_spec.js). We should create a follow-up issue to add a test case for this on the frontend.

We also need to add tests to cover this in `subscription_renew_form_spec.js` if needed.",2
75562600,2020-12-03 16:23:27.093,STORAGE BUG: A storage purchase didn’t unlock a project for a customer,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug


Do not include confidential information!
--->


### Summary


A storage purchase for the client didn't unblock the project. The purchase was successful and the `Usage Quotas` page was showing  Purchased storage available as 28.3 out of 30 Gib. Despite that, the customer's project was blocked in read-only mode. 

The project in question is nested under another namespace. Not sure if that is related though. 


### Steps to reproduce

Issue is reproducible for locked projects in a sub-group:

* Create sub-group
* Create a project in the sub group with at least one file (e.g. 2mb file)
* Set a low repo size limit (e.g. 1mb) so that the storage limit is reached by that repo (via Admin > Settings > General > Account and limit > Size limit per repository)
* Purchase a storage pack to unlock the namespace
* Attempt to create a new branch in the project - error shown as below

### What is the current *bug* behavior?

The project wasn't unblocked.

### What is the expected *correct* behavior?

Once the storage purchase is completed all the project over 10Gb should be unlocked if there is anough additional storage.

### Relevant logs and/or screenshots

Kibana logs about rejecting push: https://log.gprd.gitlab.net/goto/f086203335b19efeed4424ea34a39682. There you can see the POST attempting to create the branch `test_test` and then a reply back when querying `/api/:version/internal/allowed` with a status code of 401

The error message in UI was:
![image](/uploads/bf0d88b6dd94d90d81491436b3356da2/image.png)


### Workarounds

An admin user can manually adjust [storage limit](https://docs.gitlab.com/ee/user/admin_area/settings/account_and_limit_settings.html#how-it-works) for the specific project.

### Reported examples

1. https://gitlab.zendesk.com/agent/tickets/182522 
1. https://gitlab.zendesk.com/agent/tickets/185258
1. https://gitlab.zendesk.com/agent/tickets/184715
1. https://gitlab.zendesk.com/agent/tickets/186346
1. https://gitlab.zendesk.com/agent/tickets/185306
1. https://gitlab.zendesk.com/agent/tickets/186907
1. https://gitlab.zendesk.com/agent/tickets/190409

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",3
75550798,2020-12-03 13:55:29.750,Support more than one true up SKU,"<!-- The first four sections: ""Problem to solve"", ""Intended users"", ""User experience goal"", and ""Proposal"", are strongly recommended, while the rest of the sections can be filled out during the problem validation or breakdown phase. However, keep in mind that providing complete and relevant information early helps our product team validate the problem and start working on a solution. -->

### Problem to solve

As part of the RevPro implementation, multiple true-up SKUs will be added (https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2098).

During the discussion `@rhardarson` noted:

> I actually think we might need some code changes to make those live, as all true-up roads lead to the singular True-up SKU currently. That's probably worth a dedicated issue.


### Intended users

Unsure.

<!-- Who will use this feature? If known, include any of the following: types of users (e.g. Developer), personas, or specific company roles (e.g. Release Manager). It's okay to write ""Unknown"" and fill this field in later.

Personas are described at https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/

* [Cameron (Compliance Manager)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#cameron-compliance-manager)
* [Parker (Product Manager)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#parker-product-manager)
* [Delaney (Development Team Lead)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#delaney-development-team-lead)
* [Presley (Product Designer)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#presley-product-designer)
* [Sasha (Software Developer)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#sasha-software-developer)
* [Devon (DevOps Engineer)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#devon-devops-engineer)
* [Sidney (Systems Administrator)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#sidney-systems-administrator)
* [Sam (Security Analyst)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#sam-security-analyst)
* [Rachel (Release Manager)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#rachel-release-manager)
* [Alex (Security Operations Engineer)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#alex-security-operations-engineer)
* [Simone (Software Engineer in Test)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#simone-software-engineer-in-test)
* [Allison (Application Ops)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#allison-application-ops)
* [Priyanka (Platform Engineer)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#priyanka-platform-engineer)
* [Dana (Data Analyst)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#dana-data-analyst)
-->

### Proposal

<!-- How are we going to solve the problem? Try to include the user journey! https://about.gitlab.com/handbook/journeys/#user-journey -->

We'll need to modify whereever we handle true up plans to support the possibility of there being multiple, for example:
https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/78c7c5ab8bca8e84ff31197c1ce45a989057f36e/app/services/amend_subscription_service.rb#L121

### Further details

I'm unfamiliar with how this process works, so at the moment I don't have further details to add, but perhaps someone else can contribute.
<!-- Include use cases, benefits, goals, or any other details that will help us understand the problem better. -->",2
75449081,2020-12-01 20:19:58.978,Create slack notification for end-to-end test report for CustomersDot,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Currently we notify failed test runs in the [#s_fulfillment_status](https://gitlab.slack.com/archives/CL7SX4N86/p1606248137066300) and in [#qa-staging](https://gitlab.slack.com/archives/CBS3YKMGD/p1606248136454400) as part of each deployment. Along with test status, it will be helpful to have an overview of **E2E Quarantined report** similar to how we have for GitLab QA. The objective being, as we continue to add more test cases and add the capabilities to identify and marking a test case as flaky or bug, this report will provide a consolidated view of the health of our end-to-end test.  

### Proposal

Initially lets go with what we have for GitLab QA e2e - https://gitlab.slack.com/archives/CGZQCTU8J/p1606785178174300
![Screen_Shot_2020-12-01_at_3.34.00_PM](/uploads/1a76c17b5b86d9a4ef6a05f295e93f64/Screen_Shot_2020-12-01_at_3.34.00_PM.png)

### Result
Consolidated view of the health of our end-to-end test.  

### How will we measure success?
More awareness!!!",2
75423351,2020-12-01 12:27:56.665,Create RAKE command to run to migrate auto_renew__c,"As part of the parent issue https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2081, we need to migrate the auto renew from the Zuora field to the custom auto renew `AutoRenew__c`. To avoid problem where we do not have issues when we turn off Zuora and some issue arises then it would be nice to create another column in orders and mark the order as auto_renew.

Also create another reverse flow to read the `AutoRenew__c` and mark the auto_renew as true and do not do the auto renew from the CustomersDot",3
75376429,2020-11-30 17:07:49.908,Upload source-maps to sentry as part of release,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

We shut off source-map fetching on the frontend for security reasons.

This means that we get minified stack traces like https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2397046/?referrer=slack

### Proposal

As part of our pipeline, upload source-maps to Sentry: https://docs.sentry.io/platforms/javascript/sourcemaps/

### Result

Sentry reports have stack traces we can make sense of.",3
75370035,2020-11-30 15:20:50.213,Holistic approach to frontend errors,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

We're currently using generic error messages to let the user know something went wrong.

![Screenshot_2020-11-30_at_14.54.00](/uploads/d64d4282ba81c156e630c6581dd1cdfa/Screenshot_2020-11-30_at_14.54.00.png)

These error message strings are scattered throughout the codebase, and not consistent between each other.

```
❯ git grep ""A unexpected error occurred""
app/frontend/javascripts/subscription/components/add_seats_form.vue:          this.$emit('error', 'A unexpected error occurred');
app/frontend/javascripts/subscription/components/change_namespace_form.vue:          this.$emit('error', 'A unexpected error occurred');
app/frontend/javascripts/subscription/components/change_namespace_form.vue:          this.$emit('error', 'A unexpected error occurred');
spec/frontend/subscription/components/add_seats_form_spec.js:      expect(wrapper.emitted().error).toStrictEqual([[''], [''], ['A unexpected error occurred']]);
```

Due to the use of `Sentry.captureException` on objects instead of `Error`s we're also getting unhelpful Sentry messages like 

* https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2459991/?referrer=slack

### Proposal

Create a standard way for purchase flows to show error messages to the user and log to Sentry.

* De-duplicate shared code between pages. Use mixins, generic helper functions, [composition api](https://github.com/vuejs/composition-api)
* Provide as specific an error message to the user as possible. Fall back to generic error message

More background details here https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2080",5
75106803,2020-11-27 13:25:33.433,SaaS manual renew: Ensure CTA for Renew is not displayed for addon only purchases,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

We've recently introduced SaaS manual renew. However a user can have subscriptions with only addon products (CI minutes and Storage), and those subscriptions can not be renewed. Leading to an empty page if the user tries to push the renew button.

Note that this currently sits behind the feature flag `saas_manual_renew `

![Screenshot_2020-11-27_at_13.16.05](/uploads/c34068ac75255f6294f7f174cd725477/Screenshot_2020-11-27_at_13.16.05.png)

### Proposal

Do not render a Renew button for addon-only subscriptions.

I _think_ we can use a check like `subscription.belongs_to_gitlab_com_without_add_ons_plan?` as per this: https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/123eb8b641b25657798feaf2391e72af16cfbcbd/app/presenters/subscription_presenter.rb#L97 

### Result

Users do not get a button urging them to hit a page that is broken",2
75105797,2020-11-27 13:07:11.476,Checkmark in input field for add more seats,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

![Screenshot_2020-11-27_at_13.01.12](/uploads/fc8e54df7e0bf7f4892c0f3da952f97c/Screenshot_2020-11-27_at_13.01.12.png)

![Screenshot_2020-11-27_at_12.54.38](/uploads/8c8a433c27931e1d774016d8732cea2c/Screenshot_2020-11-27_at_12.54.38.png)

When hitting ""Add more seats"" for subscriptions, we see a green checkmark in the input field

### Proposal

1. Figure out why the green checkmark is there
2. Fix the issue
3. If this is a systematic issue fix other occurrences

### Result

Input fields contain numbers and no checkmarks

### Next steps (if any)

### How will we measure success?",2
75053110,2020-11-26 14:57:15.150,Angelo @ Codemotion Italy,"### Workshop plan

The demo will walk over those steps (broadly taken from here), roughly what I have in mind:
- forking a project / creating a project form a template
- set up AutoDevops and deploy to a Kubernetes cluster
- create an Issue
- set up a Board to manage the workflow (displaying the Issue in various states)
- create a MR linked to the Issue and merge it
- review the generated pipeline and deploy the changes

### Follow-up

* [ ] Present experience (sync or async) to the Fulfillment team (FE only or to the entire team)
* [ ] Present experience to FE department",5
74937010,2020-11-24 21:20:24.945,[UX] Move the GitLab.com storage purchase flow to GitLab.com,"This is the UX issues for https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1994

## Designs

[Figma link](https://www.figma.com/file/aE37P8UXh9svMN2G8bJMJQ/Moving-SaaS-purchase-flows-in-app?node-id=19%3A1281)",3
74927804,2020-11-24 17:50:03.895,Some products in Zuora production are missing from Sandbox,"# Background

Zuora sandbox has been maintained separately from Zuora production for a while.  The product catalog in Zuora sandbox does not reflect that of Zuora production, both in the amount of products offered and the structure of the products, rate plans, and rate plan charges.

For example, many of the support plans (sold via sales-assisted deals) are not part of sandbox, and therefore are not listed in [the `config/application.yml`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/a7e53acf6a9c04c20be85de28175433e36d6a690/config%2Fapplication.yml).  Any plans like this are not covered in automated tests and not able to be tested manually.

Also, the structure of the product catalog is different which can lead to confusion.  For example, the Silver Plan is [listed here in Sandbox](https://apisandbox.zuora.com/apps/Product.do?method=view&id=2c92c0f85aac66b3015aaea7163344f7) as a top-level product.  However, it is nested inside of [the Product ""GitLab.com"" in production](https://www.zuora.com/apps/Product.do?method=view&id=2c92a0fe5a83f009015aa3ccb71426ff).

# Purpose

The purpose of this issue is to clean-up these inconsistencies and allow us to test all types of products that are supported in Production.  This will require a lot of coordination with engineers to pull off successfully as Sandbox is used by engineers for local development/testing, CI, and Staging.

Note: There is a related task, https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/655, to create a production-copy for sandbox.

## Follow-up from:

The following discussion from !2257 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2257#note_453002903):  (+2 comments)",8
74918458,2020-11-24 15:17:34.690,Evaluate using TransactionLineItem vs extracting invoice item to its own component,"We've some repeated code in `renew subscription form`, `dotcom subscription form` and in `add seats invoice` where we show the invoice data.

We need to consider using [`TransactionLineItem`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/4b10b9b77811eb6d2da74f7d13d40dedd7212419/app/frontend/javascripts/purchase/components/transaction_line_item.vue) vs extracting the repeated code into its own component.

The idea started in [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2197#note_453393036) from !2197 

### `TransactionLineItem`

```
  <div>
    <hr v-if=""topBorderEnabled"" class=""gl-my-5"" />
    <div class=""gl-display-flex gl-justify-content-space-between"">
      <strong data-testid=""label"">{{ label }}</strong>
      <div class=""gl-my-auto"">
        <gl-loading-icon v-if=""isLoading"" />
        <span v-else-if=""value"" data-testid=""value"">{{ value }}</span>
      </div>
    </div>
    <div v-if=""description && !isLoading"" data-testid=""description"" class=""text-muted gl-mt-3"">
      {{ description }}
    </div>
  </div>
```

![Screenshot_2020-11-24_at_15.39.36](/uploads/95b0cec30d518b467b9ea98bd440b0fe/Screenshot_2020-11-24_at_15.39.36.png)


### [what's used in the renew transactions]

```
<div class=""d-flex justify-content-between py-3 border-top border-light"">
  <h3 class=""gl-text-black-normal gl-my-auto"">Sub-total</h3>
  <gl-loading-icon v-if=""isLoading"" inline />
  <p v-else-if=""subTotal"" class=""gl-text-gray-900 gl-font-lg gl-my-auto"">
    {{ formatMoney(subTotal) }}
  </p>
</div>
```

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

![Screenshot_2020-11-24_at_15.24.20](/uploads/3f265ffd95c42d2d92eddf5afb4d3f02/Screenshot_2020-11-24_at_15.24.20.png)",2
74905160,2020-11-24 11:37:29.164,Fix lefthook failing on danger commit_messages rule,"### Problem

When rebasing local changes on staging, we get error messages from dangerbot complaining about commit from staging that does not belong to the local changes we made, and we end up disabling lefthook to continue pushing the code `LEFTHOOK=0 git push`.

The same commit_messages rule will show on GitLab MRs as a warning, but locally it shows as an error.

Error sample:

``` 
Lefthook v0.7.2
RUNNING HOOKS GROUP: pre-push
  EXECUTE > danger
Results:
Errors:
- [ ] 059b45b4581d988ecdbc2cf81c30262d5a176907: The commit subject must contain at least 3 words. For more information, take a look at our [Commit message guidelines](https://docs.gitlab.com/ee/development/contributing/merge_request_workflow.html#commit-messages-guidelines).
Warnings:
- [ ] This merge request is definitely too big (more than 11051 lines changed), please split it into multiple merge requests.
- [ ] This merge request includes more than 10 commits. Each commit should meet the following criteria:
```
### Proposal

Update `danger/commit_messages/Dangerfile` to handle commit_messages offenses as warnings, not failures.

### Result

No blocking for team members when pushing changes after rebasing on `staging` to get the latest changes.",2
74900941,2020-11-24 10:17:27.676,Clean up unused Zuora dev pages,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

## I've got a development page and I'd like to keep it

Great! Just make a comment here below with `I want to keep [name-of-page]`.

## I've got a development page and it is safe to remove it

Great! You don't need to do anything here.

### Problem

We have 67 (at the time of writing) hosted pages in our [Zuora sandbox](https://apisandbox.zuora.com/apps/HostedPageLite.do) which makes it difficult to get an overview of which pages are in use and not.

### Proposal

Announce that pages are scheduled to be deleted and give engineers a chance to respond here if they want to keep their page around.

### Result

Less noise in the sandbox.


### Current pages

<details>
<summary>List of current pages</summary>

```
ACH - Test
Aish ACH test
Aish's test page
Alex' test page
Alina's test page
Alper Test Zuora & Customers
Ammar CC page
Amparo Luna Test Page
Andrei's Hosted Page
Angelo Gulina CC Payment
appsec-testpage
AppSecTest
Baus test page
Brandon Labs
CC osw-customers-app.serveo.net
CC Payment
CC waldo.ngrok.io test
Chris CC Page
CI Pipelines
CI Pipelines (New)
Corinna's CC page
CreditCard HPM
Dallas’s Test Page
ddavison CC Payments
Dennis' Test Page
Design Team
Design Team ACH
Dhiraj's CC Payment
DParker's CC Page
DParker's GDK Page
Emilys Test Page
Etienne's CC Page
https://waldo.ngrok.io CC test
Jacki Test Page
Jackie F's Test CC Page
jagood CC Payment
Jake's CC Payment
Jeremy Test Gateway
Jerome's Test Page
jjackson - Test Hosted Page
Josie's CC Payment
jswain - Test Hosted Page
Kirstie CC Page
Krasimir Angelov CC Payment
Lena's Test Page
Mark Chao Test Page
Nicolas - Test Page
Paid Signup Flow Dev
Paid Signup Flow Staging
pcalder - test hosted page
Production ACH Hosted Page
Production CC Hosted Page
Qingyu CC payment
Ragnar's CC Page
rcobb - cc payment
Reuben's CC payment
Ruben's test page
Shreyas' Credit card
Taurie's Test HPP
Terri's Hosted Page
Tim CC page
Tyler's CC Page
Vij's CC Payment
Vitaly's Test Page
yliu payment page
Staging ACH
Staging CC
```
</details>",1
74897516,2020-11-24 09:22:56.363,Angelo @ Open Source Week 2020 (Italian Field Marketing Collab),"This Issue is a pin for the work @agulina is doing with @ccasella for the OSW 2020. A list of tasks and busy day tbd soon!

### Tasks
- [x] Work on the workshop repo: `THU 2020/11/24 14:00 - TBD`
- [ ] Workshop recording: `THU 2020/11/26 9:00 - 12:00`

### Follow-up (optional)

- [ ] Present experience (sync or async) to the Fulfillment team (FE only or to the entire team)
- [ ] Present experience to FE department

/cc @rhardarson",2
74863624,2020-11-23 19:31:19.685,OSS - allow subscribers to purchase discounted support,"## Summary

When a community member is approved for one of GitLab's free Gold/Ultimate programs (OSS/EDU/Startups), we create a $0.00 subscription utilizing a specific program-based sku for the 12 month term applicable for the subscription.

We want to allow community members participating in these programs the ability to purchase support at a discounted rate.

## Proposal

Conditionally display `purchase support` button on the subscription card based on the sku associated with the active subscription.

For example, for active subscription utilizing the EDU/OSS $0.00 Gold/ULtimate skus, display a new button which would kick off a paid purchase flow for paid (discounted) support service.

Designs: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2345/

## Success Criteria

1. [ ] The discount should be coded as part of the sku and not required to be calculated by CustomersDot
1. [ ] The user should be able to check out in customers.gitlab.com using a credit card
1. [ ] The paid support add-on should coterm with the existing EDU/OSS subscription
1. [ ] The purchase support information should be sent to SFDC so the support level can be updated in SFDC",5
74863604,2020-11-23 19:30:27.880,Allow EDU and OSS to self-serve add-on users,"## Summary

Allow EDU and OSS program members to add seats during the subscription term.

## Success Criteria

1. [ ] The add seats button should be added to the `Manage purchases` page
1. [ ] The add-on amendment should net $0.00 (noting associated skus are already set to $0.00 in Zuora)
1. [ ] ~~For EDU, we should not allow more than `x` total subscribed users~~
1. [ ] ~~For OSS, we should not allow more than `y` total subscribed users~~
1. [ ] ~~If the cap is reached, pop message (tbd) and block sale~~

2021-02-25 updating to remove 3-5 due to confirmation that a user cap is not needed here: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2247#note_517560855",2
74853197,2020-11-23 15:45:41.742,Ensure Zuora iframe load fail does not block the user,"https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2387703/?referrer=gitlab_plugin

```
TypeError: Cannot read property 'includes' of undefined
  at Object.prepopulate (/packs/js/application-ea6950edbe9eacff9e63.chunk.js:2:30298)
  at HTMLIFrameElement.<anonymous> (/packs/js/application-ea6950edbe9eacff9e63.chunk.js:2:34727)
  at HTMLIFrameElement.r (/packs/js/20-a0d8eb0d718eefc7c67d.chunk.js:2:59241)
```

We've got a handful of users where the initial load of the zuora iframe fails.

* https://gitlab.zendesk.com/agent/tickets/181197

The failure happens in this line of our 3rd party code https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/4beaa415df8cbba6898cdfe88967be1ce9c761b1/vendor/assets/javascripts/zuora/index.js#L255

There aren't any reproduction steps for this error as it's not clear _what_ causes this, and this doesn't happen all the time (which sort of suggests a race condition or failed HTTP call).

### TODO

- [ ] Investigate if we're misusing the 3rd party code (iframe hasn't been mounted to the DOM before we make the iframe params fetch)
- [ ] Make the UI resilient against this error (a failure should show an alert to the user, not just stay on the loading spinner)",3
74681523,2020-11-19 18:04:07.046,Update healthcheck fields,"## Problem
In order to properly rotate self-managed users that request to speak with the sales from in-app healthchecks we need to update the form fields that the user submits on the customers app form. 
 
![image](/uploads/fa23827bbe5043ec20d9f99c715a289e/image.png)
  
## Solution
We update the form fields on this form to add the following: 
 
* Country (picklist below)
* State if US or Canada (picklist below)
* Employee Range (picklist below)
* Opt-in Language (provided above)
* Make Company **required**
* Making Phone # required will help with contact rates.
 
[Picklist values can be found here](https://docs.google.com/spreadsheets/d/1cV_hI2wAzLxYYDI-NQYF5-FDDPXPXH0VV5qRBUJAQQk/edit#gid=439131791)

And remove the following fields:

* Address (in favor of country which is included in the newly added fields above)
 
These newly added fields should sync in the same manner to SFDC. 
 
Technical details: 
* Jerome located the code associated with ""healthcheck"" moment here https://gitlab.com/gitlab-org/gitlab/-/issues/208291#note_295737482
* We increased the rollout on EE here https://gitlab.com/gitlab-org/gitlab/-/issues/231512
* And increased the rollout on CE here https://gitlab.com/gitlab-org/gitlab/-/issues/247634

## Merge requests
- ~database - Add new columns to `instance_reviews` field: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2714
- Align list of countries: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2731
- Align list of US states and Canada provinces: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2791
- ~database - Add optin column to instance_reviews table: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2854
- Add new field to the form: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2842",5
74635874,2020-11-19 13:24:22.052,Update gitlab-styles to 5.3.0,"The following discussion from !2182 should be addressed:

- [ ] @dstull started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2182#note_450160791): 

    > bug in gitlab-styles where the empty line wasn't being alerted on for `let_it_be` - we should upgrade to [5.1.0](https://gitlab.com/gitlab-org/gitlab-styles/-/tags/v5.1.0) - just a note so I can spawn an issue here.",1
74350890,2020-11-13 21:56:17.459,Move SaaS purchase flows carryover placeholder for Milestone Board,This is a placeholder issue reserving space for carryover/newly created issues for `Move SaaS purchase flows`,3
74350173,2020-11-13 21:25:35.896,Cloud License Placeholder for Milestone Board,This is a placeholder issue reserving space for carryover/newly created issues for Cloud License Sync.,15
74209369,2020-11-11 15:14:18.054,New subscription purchase flow for Trial namespaces should follow new path,"## Summary

When a namespace is on a trial and it is active, a user trying to purchase a new subscription for that namespace is pointing to a the legacy new subscription flow. Not only does this cause an inconsistent user experience, but it causes the user to receive an error during checkout due to not having a stored address.

## Proposal

Update the path for this use case to point to the new subscription purchase flow (via GitLab.com) so that address is collected during the purchase process.

## Reference

Additional details of this change request is described here: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1236#note_442674321",3
74167126,2020-11-10 20:17:04.328,Community Programs Self-Checkout,"## Summary

The Communities teams (OSS, Start-Ups, EDU) will be working with a vendor to create an automated application process - webform to interact with the applicant which screens through the qualification process. Once the applicant is approved, they will receive a coupon code and be prompted to self-checkout on customers.gitlab.com to complete the subscriptions creation and provisioning processes.

### Process overview
1. Upon approval, the applicants receive a coupon code
1. The applicant navigates to customers.gitlab.com, selects new subscription flow
1. User enters the code at checkout and the subscription is booked at $0.00
     1. The subscription must be created using the applicable Community Programs sku
     1. The user should not be prompted to enter a credit card since the net is $0.00
1. Normal provision process follows

### Coupon Code Generator Features
1. We need to store the generated codes so they can be referenced during checkout
1. The coupon code should relate to product sku (info received from the vendor call) which when applied to a purchase flow, would dictate which product sku we are selling
1. The code can not be reused; once redeemed, we invalidate the code in our DB for future use
1. The code will provide a specific discount per sku
1. The vendor presenting the coupon code after successful application cannot utilize an API to receive the coupon from us. We will need to provide the vendor with bulk codes via a file upload periodically.

## Tasks

1. [ ] Introduce the Coupon Code on the FE (New subscription flow)
     1. There is a coupon code field which was hidden via https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/662; let's just reveal that field again.
1. [ ] Build the coupon code generator
1. [ ] Build BE logic to recognize coupon code
1. [ ] Determine how to handle Renewal Process
1. [ ] Determine how to handle Add-On users midterm",5
73996350,2020-11-07 00:27:40.500,Notify users with instructions to associate their subscription if they haven't associated it `n` days after provisioning,"<!-- The first four sections: ""Problem to solve"", ""Intended users"", ""User experience goal"", and ""Proposal"", are strongly recommended, while the rest of the sections can be filled out during the problem validation or breakdown phase. However, keep in mind that providing complete and relevant information early helps our product team validate the problem and start working on a solution. -->

### Problem to solve

There are users who purchase a subscription (often sales assisted), but for some reason never link it up. 

### Intended users

* [Sidney (Systems Administrator)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#sidney-systems-administrator)

### User experience goal

A user who purchases a GitLab.com Subscription knows if they haven't linked it, and gets a notice some days after provisioning reminding them to take the necessary actions.


### Proposal

Send email to subscription contact (CustomersDot contact).",3
73975582,2020-11-06 14:13:56.009,Add weights to sidekiq queues,"# Purpose

Add weights for all the queues in [the Sidekiq config file](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/c7265500ef31b5258e314c7e2ecccf1a58855e18/config/sidekiq.yml#L20-29).  The weights will determine the priority of the queues to be processed.

## Followup from:

The following discussion from !2152 should be addressed:

- [ ] @rpereira2 started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2152#note_442861095):  (+1 comment)

    > Thanks @tyleramos, LGTM! :+1:
    > 
    > On a related note, we might need to add weights to the [queues in the sidekiq config file](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/c7265500ef31b5258e314c7e2ecccf1a58855e18/config/sidekiq.yml#L20-29). Without the weights, sidekiq will only execute jobs from queues lower in the list when the queues higher in the list are empty (ref: https://github.com/mperham/sidekiq/wiki/Advanced-Options#queues).
    > 
    > @asubramanian1 Would you please do the maintainer review?",1
73951998,2020-11-06 05:35:32.517,Checkout box design refinement,"### Proposal

In #2133, @timnoah is suggesting the following changes:

![](https://gitlab.com/gitlab-org/customers-gitlab-com/uploads/a077bb414b44ca76eb5e8a3aa2e6ebd1/Checkout-box.png)

1. Increase the text size of the total amount in the checkout component.
1. Include a field label `Payment method` for the payment dropdown.

The changes above should be applied to all checkout pages.",2
73931026,2020-11-05 17:58:01.063,Update ruby to match GitLab version (currently 2.7.2),"### Problem

CustomersDot is using [ruby version 2.6.6](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/3a65e65af4796e8b04d7ce1d9159a80c9c81920d/.ruby-version#L1) at the moment but GitLab is using 2.7.2.

### Proposal

We should evaluate if we can upgrade to the same version as GitLab and perform the upgrade if possible.",2
73881624,2020-11-04 21:32:55.450,Storage: Remove `storage_plan` feature flag,"Once the [storage feature has been enabled](https://gitlab.com/gitlab-org/gitlab/-/issues/255166) and considered stable, we should remove the `storage_plan` feature flag checks in the CustomersDot repo.  Once the MR has been deployed to production, we can safely remove [the `storage_plan` feature flag](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/62/edit) from CustomersDot.",2
73860530,2020-11-04 13:47:53.785,"Follow-up from ""Add tests and patch company assignment issue""","The following discussion from !2141 should be addressed:

- [ ] @dstull started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2141#note_440927997):  (+3 comments)

    > @jameslopez only real ~bug I have found so far and it was [pre-existing](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2021/diffs#df783448a783e84dbb83b07691fed5e3a2259693_54_44) before the refactor - so I *think* this is a bug and we should fix it here - WDYT?",1
73567432,2020-10-29 10:14:36.847,Modify application to use auto renew based on the Zuoras auto_renew custom field,"As part of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2081, we are creating new custom field to replace the auto_renew from Zuora. 

Use the new custom field in the codebase to turn on and off the auto renew and also use it while showing in the UI the toggle button.",3
73566745,2020-10-29 10:02:04.399,Create cron service to read orders for renewal,"As part of the issue https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2081, we need to run a cron service every midnight of the server which will pick the orders which have their end date within last 30 days.

After fetching these orders we make a call to Zuora to determine whether the auto_renew custom field has been turned on and there are no auto_renew_errors. 
If these conditions are met then we will call the AutoRewew Service with the order for it to perform the renew.",2
73547459,2020-10-29 00:43:39.761,Create Auto renew service to perform renewal,"The auto renewal service takes an order and makes a call to Zuora to perform the _Manual_ renewal 

The Auto Renewal service would simulate checkout process and attempt to charge the default credit card on file

1. if payment fails, cancels the transaction
   1. do not send any change to zuora
1. if payment success, copy amendment process from manual renewal flow to zuora. 

After the amendment to Zuora the service exits without doing anything else. The Zuora will send in the callback to ZuoraCallbacksController which in turn will either send a new license ( for SM ) or will update GL.com

Part of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2081",3
73546932,2020-10-29 00:17:54.473,Create custom fields in the Zuora to save the auto renew boolean,"As part of the major issue https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2081, we are going to save the custom field `auto_renew` within the Zuora which will act as in future part of SSOT as well. 

As of now whenever a customer creates a new subscription then apart from (EDU/OSS/YCombinator & Stand alone CI minutes plan) the auto renew feature is turned on and instead of setting the auto renew we will toggle the custom field in Zuora. 

This issue will only create new custom field in Staging ( for development purpose ) on Zuora and later in production Zuora ( a follow up issue will follow later )

https://knowledgecenter.zuora.com/Central_Platform/Manage_Custom_Fields

cc: @chris_baus @tyleramos",1
73535435,2020-10-28 18:02:36.770,Procurement | REMOVE Support SKU for the Education Program,"# SKU Request Summary
The ability to purchase support separately for the free GitLab for Education Program was deprecated as part of the [Education Pricing and Packaging Initiative](https://gitlab.com/groups/gitlab-com/packaging-and-pricing/-/epics/2). The SKUs need to be removed.

[Additional details here](https://gitlab.com/gitlab-com/marketing/community-relations/education-program/general/-/issues/54#support)

[See e-group approval here.](https://gitlab.com/groups/gitlab-com/packaging-and-pricing/-/epics/2#approvals-required)


## SKU Requirements

In order to expedite your request, please complete all of the following information.
Any questions about this template or this request can be directed to @amandarueda in the comments of this issue.

* [x] SKU Name:  Ultimate - 1 year EDU with Support and Gold - 1 year EDU with Support`
* [ ] SKU Code/ID:
* [ ] Zuora Plan Name: `enter plan name`
* [ ] Zuora Plan ID: `enter plan ID`
* [ ] Service type: `subscription | add-on | stand-alone`
* [ ] Does this need to be purchase-able via CustomersDot? `Yes | No`
* [ ] Does this service renew? `Yes | No`
     * [ ] If yes, what is the renewal cadence? `monthly | annually | other`
* [ ] Should an email be sent indicating the subscription is coming to an end?: `Yes | No`
* [ ] Is there a unit of measure, if so what? ` Yes | No`  `Users | Qty | other`
* [ ] Does this service provision anything? `Self-managed license | Gitlab.com entitlement | other`
     * [ ] If yes, please describe in detail what should be provisioned including the systems affected:
* [x] How soon do you need this SKU ? Timeline: This request is not urgent, but it would great if it could be completed with the other existing requests. [See add SKUs for Edu PnP here. ](Procurement | Add new SKUs for the Education Enterprise Subscription)
* [ ] Who in Sales-Ops approved this request: [See approval list on Edu PnP](https://gitlab.com/groups/gitlab-com/packaging-and-pricing/-/epics/2#approvals-required)
* [ ] [Link to originating Finance issue](https://gitlab.com/gitlab-com/Finance-Division/finance/-/issues/3490)
* [ ] Apply the appropriate `BTG Priority` label to this issue.",1
73499784,2020-10-28 07:09:15.992,No server-side validation on purchasing an add-on for a subscription,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

We don't validate subscription on purchasing an add-on for it. Grab the correct URL for purchasing an add-on: `http://localhost:5000/subscriptions/new?plan_id=2c92c0f9699eca030169a2f1f117045f&subscription_id=A-S00048152&transaction=ci_minutes` and change the query key `subscription_id` to anything else, for example `subscriptio_id`.
Now open it in your browser. I expect a redirect to the subscription list page but instead I see the purchase screen which does not work.

### Proposal

We should validate the subscription and redirect the customer to the `/subscriptions` path if invalid subscription was provided.

### Result

### Next steps (if any)

### How will we measure success?",2
73308601,2020-10-24 22:00:38.320,Add indicator of active subscription in Customers Admin,"## Summary

As an internal team member who frequently searches the Customers admin, it is very time consuming to select the `Edit` icon in search results to identify which of the returned results are related to a customer record with an active subscription.

## Proposal

Create some sort of quick reference indicator (visual or label) which allows me to discern which of the search results have an active subscription.

![Screen_Shot_2020-10-24_at_16_54_04](/uploads/4e5ca02d1d209f6f2562eae42ab277fb/Screen_Shot_2020-10-24_at_16_54_04.png)",2
73273322,2020-10-23 20:41:14.100,GitLab.com and customers.gitlab.com linkage broken,"## Summary

The linkage between customers.gitlab.com and gitlab.com is displaying `No account linked` for accounts which have been linked. I was in this area on production within the last 48 hours so a regression must have occurred within that timeframe.

UPDATE: I was able to make a purchase of CI minutes in spite of the system appearing as if the gitlab.com account is linked, so I _think_ this is just a frontend visual issue, and not a backend connection issue but would like confirmation from engineering on that.

![Screen_Shot_2020-10-23_at_15.38.46](/uploads/78d4301547e054048572185c94fb811e/Screen_Shot_2020-10-23_at_15.38.46.png)",1
73237912,2020-10-23 09:41:14.081,Graduate pajamas_upgrade_subscription feature flag,"In #958 we introduced a change under [`pajamas_upgrade_subscription`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/45/edit) feature flag.

The change has been in production since Spt 7, 2020.

We should graduate the feature flag if there's no issue with the change.",2
73237176,2020-10-23 09:27:10.247,Graduate move_gitlab_purchases_to_gitlab feature flag,"In #1986 we introduced a change under [`move_gitlab_purchases_to_gitlab`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/71/edit) feature flag.

We need to graduate the feature flag and clean up old code after 2 months if there are no issues with the shipped change.",1
73221257,2020-10-23 02:25:43.218,UX: Create manual renew feature for SaaS subscriptions,"This is the UX design issue for https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2132

## Proposal

| Manage Purchases| Manage Purchases | Renew SaaS Subscription |
| ------ | ------ | ------ |
| ![Billing_Page](/uploads/7d1dec021717844f321b00efbce0c141/Billing_Page.png) | ![Manage_Purchases](/uploads/f402470df8c480c6424818e2f2f8b9c5/Manage_Purchases.png) | ![Renew_-_Silver_-_page](/uploads/5a7058e6026d04952973581ceb115e31/Renew_-_Silver_-_page.png) |
| Added a `Renew` button to the subscription card table. | Added a `Renew` button to the subscription card. This would take a user directly into the Renewal flow. | This borrows heavily from templates already in production for renewing a self-managed license with one main addition.<br>This also gives users the ability to upgrade a subscription in the flow of renewing. Since https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2134 is reliant on this work, I thought it was beneficial to start thinking about how this might work now, to get us ready for that issue. |

[**Design Specs**](https://www.figma.com/file/ba0dDaAgQ7uhet8W7SkQf8/Create-manual-renew-feature-for-SaaS-subscriptions?node-id=27%3A103)

### Notable template refinements

<img width=""400"" src=""/uploads/a077bb414b44ca76eb5e8a3aa2e6ebd1/Checkout-box.png"" />

1. Increase the text size of the total amount in the checkout component.
2. Include a field label `Payment method` for the payment dropdown.",2
73198626,2020-10-22 19:16:56.844,"New Order from .com billing page results in {""last_name"":[""can't be blank""]}","### Summary

[Customer](https://gitlab.zendesk.com/agent/tickets/176452) (internal link) attempted to purchase a new Bronze SaaS subscription _from within GitLab.com_ group billing page. Upon attempting to complete the order, they received the error:

> {""last_name"":[""can't be blank""]}

This prevents the purchase, and resulted in a support ticket. The workaround was for customer to create a customerDot account, and proceed with purchase in the traditional manner.

I'm opening this bug on the gitlab-org/customers-gitlab-com project for now because it's not fully clear to me yet where exactly the bug is at, though I suspect it's on the .com side. We can move it as needed.

My suspicion that this is a .com bug is based on a few factors:

1. [Quite some time ago](https://gitlab.com/gitlab-org/gitlab/-/issues/13661), gitlab.com began [experimentally](https://gitlab.com/gitlab-org/growth/engineering/-/issues/64) requiring a ""Last Name"" field for new user registration
   1. A [separate MR](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/42346) recently began to ""split"" legacy names into a first and last name field. If I understand the design in that MR, it *can* cause an empty string for a last name
1. [Kibana log](https://log.gprd.gitlab.net/goto/7e98fff77a38dda1a9a7ed869137d7d2) of the customer hitting `SubscriptionsController#create` via `/-/subscriptions/new` on GitLab.com.  There is no associated Sentry errors for customer.gitlab.com that I can locate
1. Prior to the support ticket being created, customer never had a customersDot account, so it's not possible that they would have attempted a purchase from customer portal. However, I'm unfamiliar with the behind-the-scenes code, so it's possible group billing page is calling out to customerDot to process the transaction. To the best of my knowledge, purchases from customersDot do require a `last_name` field.

### Steps to reproduce

Presumably using any GitLab.com user without a `last_name` (or a blank one), from any group not currently on a paid tier, navigate to Settings > Billing page, click ""Upgrade"" under any of the 3 paid tiers. Note, ""Upgrade"" is displayed regardless if it's a new subscription or an actual upgrade from a lower tier.

Proceed normally by filling in details.

Purchase fails.

### What is the current *bug* behavior?

New purchase workflow from GitLab.com UI results in inability to purchase.

### What is the expected *correct* behavior?

A successful transaction

### Workarounds

* Use customersDot.
* *Possibly* edit GitLab.com user profile `name` field to be two ""words"", causing the name to split into a first and last name. This was not confirmed
  * It is currently [not possible](https://gitlab.slack.com/archives/CDLCBGEDV/p1603382908188600?thread_ts=1603381169.185600&cid=CDLCBGEDV) to edit one's profile and manually enter a Last Name, nor is it possible for an admin to enter one.

### Related Issues / Epics

1. [Move SaaS purchasing and account management into GitLab.com](https://gitlab.com/groups/gitlab-org/-/epics/1888)  
1. [[UX/Design] Move all SaaS billing from the portal to GitLab.com](https://gitlab.com/gitlab-org/gitlab/-/issues/31849)  
1. [New checkout flow improvements](https://gitlab.com/gitlab-org/gitlab/-/issues/247463)  
1. [Move New GitLab.com Subscription flows to GitLab.com UI](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1986)
1. [Slack conversation](https://gitlab.slack.com/archives/CDLCBGEDV/p1603381169185600)",3
73186941,2020-10-22 17:34:58.590,Correct bug in Order#latest_reconciliation,"The following discussion from !2080 should be addressed:

- [ ] @rpereira2 started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2080#note_430324728):  (+2 comments)

    > I think this result is wrong. I think the latest reconciliation should be `reconciliation1`, but I'll correct the implementation of `latest_reconciliation` in a separate MR.",1
73117115,2020-10-21 17:42:54.469,Remove deprecated code related to `vue_account_details_page`,"The integrated component from https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1261 is completed, and is enabled with the `:vue_account_details_page` Feature Flag in production. :thumbsup:

![Screen_Shot_2020-10-21_at_1.43.53_PM](/uploads/cf81072efe9351ed4a67ccdd95346f89/Screen_Shot_2020-10-21_at_1.43.53_PM.png)

![before-after](/uploads/2a6f2f3c652a186f200399258490ffcc/before-after.png)

### Proposal

Remove deprecated code and feature flags after enabled in production

### Result

### Next steps (if any)

Monitor Sentry for 30 days and clean up the old code in `app/views/shared/customer/_edit.html.haml` once there are no further issues.

In addition to cleaning up the old haml code and the `:vue_account_details_page` Feature Flag afterwards, the following feature flags could then be removed:

* pajamas_account_page
* account_page_vue_personal_details
* account_page_vue_company_details
* account_page_vue_change_password
* account_page_vue_link_gitlab_account

### How will we measure success?",1
73056987,2020-10-20 20:44:06.795,Custom Zuora attributes should be synced in local cache,"### Problem

If custom attributes as added in Zuora for Product objects, these will need to be synced as part of IronBank's local cache feature.  We started using this local cache, storing the products in the database, as part of https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1762.

### Proposal

Investigate if custom attributes are captured in the local cache.  If so, then there shouldn't be anything else required.  If not, determine a plan for including these custom attributes.",2
73044297,2020-10-20 18:31:12.966,"Remove ""Sign in"" CTA when on sign in pages","### Details

In the sign in pages, there is no need to show the **Sign in** link in the top nav bar. Having the link there can add unneeded redundancy, as this way there are two ""sign in"" options in different graphical formats, with no clear way for the user to see how they differ or are alike other than clicking on both to see. Also, as the hamburger menu for the narrow views only contains the **Sign in** item, it would be recommended to remove that as well.

| gitlab.com Narrow | gitlab.com Wide | cust sign in Narrow | cust sign in Wide |
| --- | --- | --- | --- |
|![Screenshot_2020-10-20_at_18.26.27](/uploads/b0abc3d33a0c15ef1f80331ac207c568/Screenshot_2020-10-20_at_18.26.27.png) | ![Screenshot_2020-10-20_at_18.26.42](/uploads/6d55a9a90f6f880def229f8b0161e219/Screenshot_2020-10-20_at_18.26.42.png)| ![Screenshot_2020-10-20_at_18.27.08](/uploads/f48134d1ff9f5887de8814e0db99d029/Screenshot_2020-10-20_at_18.27.08.png)| ![Screenshot_2020-10-20_at_18.27.21](/uploads/06f3f00c75086d8855bab02c234dae02/Screenshot_2020-10-20_at_18.27.21.png)|

A simple solution that comes to mind might be that of removing the sign in link / hamburger menu on those views:

| Narrow | Wide |
| --- | --- |
| ![Screenshot_2020-10-20_at_18.44.22](/uploads/62fda2a08b3826ee37d7844eda8e4fdc/Screenshot_2020-10-20_at_18.44.22.png) | ![Screenshot_2020-10-20_at_18.44.40](/uploads/95bdbbca3c223543e713aa117c95b732/Screenshot_2020-10-20_at_18.44.40.png)|",2
72955254,2020-10-19 11:43:58.331,Spike: Move Salesforce calls to background job,"### Problem

Related to https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/486

The call for `CreateSalesforceLeadFromCustomerService` in the [RegistrationsController](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/controllers/registrations_controller.rb#L16) can be moved to a background job. There might be other Salesforce calls that can be moved to a background job.

### Proposal
Evaluate Salesforce calls and move them to a background job if possible.

### Result
Actions can proceed without failing of third party calls.

### Next steps (if any)

### How will we measure success?

### Availability & Testing

The tests surrounding this feature likely will need to move from a Controller unit spec, to an ActiveJob spec which requires a bit of change to the test.

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->",1
72928971,2020-10-19 05:37:13.512,Clean-up: graduate pajamas_new_subscription feature flag,"### Problem

In #1473 we introduced changes under [`pajamas_new_subscription`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/43/edit) feature flag.

### Proposal

Changes from #1473 have been deployed to production on Sept 19, 2020.

Around Nov 19, 2020, we need to graduate the code from the feature flag and clean up the old code if there's no issue.

### Result

Less legacy code and less moving parts.",3
72920941,2020-10-19 00:25:25.829,Spike: Identify what would occur if we didn't clear start/end dates,"## Summary

In [this research issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1907), Corinna identified [where we reset subscription start/end dates in GitLab.com](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1907#note_408555499). The retention team would like us to stop clearing out the subscription dates.

This issue has been created to identify if making such a change will have any negative downstream process affects.",1
72855342,2020-10-16 21:00:39.228,Investigate Quarterly Co-terms from License Sync data,"### Problem

With the Cloud License Sync epic, we will be gathering license information from self-managed instances, similar to how we gather Seat Link data.  Both will be gathered on a routine basis (daily) and contain information on max historical user count and license key.  Given that there is this duplication, we should be able to retire Seat Link eventually in favor of License Sync.

We don't have all the specifics worked out yet but we feel confident that we can get quarterly co-terms working with license sync. Basically the idea would be to use the data from the license sync requests to feed the Reconciliation model, instead of using the seat link requests. It's a pretty simple concept from that standpoint, but there are still some details to be worked out such as:

* Ensure the license sync data contains the data points that are required by Reconciliation (e.g. report date, license start date, license end date, max historical user count)
* For seat link requests, the request received on day X contains data from day X-1. For license sync requests, I'm not sure it necessarily has to be that way, but there are good ways to keep with that same method. A day offset gives the rake task the opportunity to capture the user count information from HistoricalData after it has a chance to retry if necessary.
* Figure out the handoff for which data input feeds the reconciliations (seat link vs license sync). Maybe both would be fine as it should be the same data, but that needs some thought.
* Seat Link has been on for a while (introduced in an earlier version of GL) and by default SM instances opted in.  For License Sync, this has to be activated so we might not be gather as much data through this method, at least to begin with.  Determine if the business is okay with this. The handoff discussed int the above bullet point might inform this decision too.

### Proposal

This issue is dedicated to sorting out some of these details and adding it to the proposal document to be added in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2100.",3
72794787,2020-10-15 18:15:38.114,New SKUs for RevPro Implementation,"# SKU Request Summary

As part of Revpro implementation, we are creating a range of new SKUs, the details are available in this [finance issue](https://gitlab.com/gitlab-com/Finance-Division/finance/-/issues/3367)


## SKU Requirements

Details of the new SKUs are available [here](https://docs.google.com/spreadsheets/d/1WK2K6pE7QPGmZJrOOZ8dgJ2bOhY4130XpaBhBNR381I/edit#gid=0)",3
72792070,2020-10-15 16:57:19.030,Mapping of Zuora Invoice to Salesforce CPQ Items.,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
After learning that our Web direct code is based entirely off the generated invoice of a Zuora transaction we need to convert the Zuora Invoice Id to its related Invoice Items and then to the correct Amendment, Rate Plan and Rate Plan Charges. The data sent differes for the different transaction types.

### Proposal

Here is how we will map invoice items to the data to be created:

#### New Orders

| Invoice Item    | Amendment to Create | Rate Plan To Create                                 | Rate Plan Charge To Create              |
|-----------------|---------------------|-----------------------------------------------------|-----------------------------------------|
| Positive Charge | NewProduct          | Invoice Item's Related Rate Plan Charge's Rate Plan | Invoice Item's related Rate Plan Charge |

#### Additional Seats

| Invoice Item    | Amendement to Create | Rate Plan To Create                                 | Rate Plan Charge To Create              |
|-----------------|----------------------|-----------------------------------------------------|-----------------------------------------|
| Positive Charge | UpdateProduct        | Invoice Item's Related Rate Plan Charge's Rate Plan | Invoice Item's related Rate Plan Charge |

#### Product Upgrade

| Invoice Item                  | Amendement to Create | Rate Plan To Create                                 | Rate Plan Charge To Create              |
|-------------------------------|----------------------|-----------------------------------------------------|-----------------------------------------|
| Positive Charge (New Product) | NewProduct           | Invoice Item's Related Rate Plan Charge's Rate Plan | Invoice Item's related Rate Plan Charge |
| Negative Charge (Old Product) | RemoveProduct        | Invoice Item's Related Rate Plan Charge's Rate Plan | **No Charge, but the Zuora Id of the Rate Plan that is being removed must be entered into the Quote Rate Plan Charge's zqu__SubscriptionRatePlanZuoraId__c field**                                    |

#### Renewal

| Invoice Item                       | Amendement to Create | Rate Plan To Create                                 | Rate Plan Charge To Create              |
|------------------------------------|----------------------|-----------------------------------------------------|-----------------------------------------|
| Positive Charge (Renewal)          | RenewProduct         | Invoice Item's Related Rate Plan Charge's Rate Plan | Invoice Item's related Rate Plan Charge |
| Positive Charge (Additional Seats) | UpdateProduct        | Invoice Item's Related Rate Plan Charge's Rate Plan | Invoice Item's related Rate Plan Charge |
| Postive Charge (True Up)           | NewProduct           | Invoice Item's Related Rate Plan Charge's Rate Plan | Invoice Item's related Rate Plan Charge |

For all of the Rate Plan and Rate Plan Charge data we will create a 1:1 mapping of the Zuora Fields to the Zuora CPQ fields in Salesforce. @jpetr I will ask you to just make a simple table to map: 

#### Amendment

SFDC: https://gitlab.my.salesforce.com/01I61000001QLnk?setupid=CustomObjects

Zuora: https://knowledgecenter.zuora.com/Billing/Subscriptions/Subscriptions/E_Changing_Subscriptions_Amendments

#### Quote Rate Plan

SFDC: https://gitlab.my.salesforce.com/01I61000001QLnr?setupid=CustomObjects

Zuora:https://knowledgecenter.zuora.com/Central_Platform/API/G_SOAP_API/E1_SOAP_API_Object_Reference/RatePlan

#### Quote Rate Plan Charge

SFDC: https://gitlab.my.salesforce.com/01I61000001QLnq?setupid=CustomObjects

Zuora: https://knowledgecenter.zuora.com/Central_Platform/API/G_SOAP_API/E1_SOAP_API_Object_Reference/RatePlanCharge",2
72733380,2020-10-14 20:05:10.825,Identify idempotency issues on gitlab.com provisioning job retries,"In https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1440 we found a few cases where we retry jobs when an error occurs in the gitlab.com provisioning process. 

* https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/services/gitlab/namespace/update_plan_info_service.rb#L30
* https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/services/gitlab/namespace/update_plan_info_service.rb#L46
* https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/services/gitlab/namespace/update_plan_info_service.rb#L92
* ...

Nothing jumped out at me that I think would cause an issue on retries but I'm also not sure that the retries actually help anything. It's possible we are just polluting the retry queue with jobs that failed and will never succeed. We should verify:

1. We are not causing idempotency issues when we retry.
2. Retries have the potential to succeed instead of just continuing to error.

### Problem

### Proposal

### Result

### Next steps (if any)

### How will we measure success?",3
72733080,2020-10-14 19:56:37.610,Retry gitlab.com api calls when provisioning,"In https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1440 we discovered that we don't retry calls when an gitlab api call fails during provisioning. Instead, we swallow the error, return `{ success: false }` and don't do anything with the result. 

* https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/services/gitlab/namespace/update_service.rb#L17
* https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/services/gitlab/subscription/update_service.rb#L26
* ...

Rather than restart the whole job on cases when the api fails, I think it would probably be best to keep the retries synchronous so we don't cause any idempotency issues.

For example

```ruby
def update_namespace
  tries = 0 
  max_tries = 3
  begin
    response = Client::GitlabApp.put(...)
    raise unless response.success?
  retry
    unless tries > max_tries
      log_error
      sleep(5) # some time for the api to recover
      retry
    end
  end
end
```

### Problem

### Proposal

### Result

### Next steps (if any)

### How will we measure success?",3
72716593,2020-10-14 14:01:54.079,Add test coverage for renewals at list price,"# Background

In https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2057, we added the ability to use the list price instead of the original discounted price when performing renewals.  However, as mentioned in the discussion below, it was difficult to add test coverage for this case because it required creating some test objects in Zuora (products, rate plan charges, etc) rather than mocking. This is because the [`amend_subscription_service_spec.rb`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/755f660e602579136967dd818dc9049e782c2eaa/spec/services/amend_subscription_service_spec.rb) and [`renew_subscriptions_pajamas_spec.rb`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/a8eea433e2c8d5a2ae9cc8f4c94711ee22d62f7c/spec/features/renew_subscriptions_pajamas_spec.rb) use VCR.

# Proposal

Ensure proper test coverage for renewals in scenarios that should use list price and discounted price.

## Follow-up from Discussion

The following discussion from !2057 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2057#note_429012271):  (+2 comments)

    > **Question:** Should we add some additional tests to cover these new cases?  I see the change [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2057/diffs#bc237849f35c4d92a46f1ea439edb1da0b5d2b13_199_199) but it's not clear to me that it's testing the renewal case. I was thinking it might be good to have a scenario where the `main_product.renewal_price` actually uses the latest product catalog price (e.g. where [this line](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/49bb3d9b1311700c7d8ffdcdc5085e28c5424af3/app/models/product.rb#L38) is true).  We might want to add a similar test case in `spec/features/renew_subscriptions_pajamas_spec.rb` as well.
    > 
    > WDYT?",2
72704317,2020-10-14 10:52:12.732,Community Programs Self-Checkout - Extract customer's information component,"### Problem

We have got a hard-coded piece of code to render customer's information, that is being used in 2 pages, [usage example](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/e5f349b7cbcdc2ceeaa35d699fc851df42c19eaf/app/frontend/javascripts/subscription/components/new_ee_subscription_form.vue#L194-209).

Original discussion https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2003#note_428777133.

### Proposal

We have an opportunity to extract a component that is being used in `new_ee_subscription_form.vue` and `new_gitlab_subscription_form.vue` where we show a customer's information.

The new component would accept a `customer` parameter and output a rendered information.

### Result

Cleaner and consistent code

### Next steps (if any)

Schedule",2
72677275,2020-10-14 00:02:29.474,UX: Introduce ability to update address during the checkout process,This is the UX design issue for Epic: https://gitlab.com/groups/gitlab-org/-/epics/4465. Note the Epic includes issues for each of the checkout flows.,1
72676260,2020-10-13 23:00:55.331,Invalid quantity error not showing during CI purchase when user has an active subscription or add-on purchase,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

If a user has an active subscription, or has CI minutes packs as add-ons, when the user purchases more CI minutes, error message will not show with an invalid quantity. Purchase will go through with '0' on manage purchase page :point_down: 

**No error message shows**

![image](/uploads/675f9cc40b2ace1472ddb07c295571d7/image.png)

**Purchase go through**
![ci](/uploads/9a3254401ce7eae932f73a0b00018a67/ci.gif)

**Purchase quantity shows 0**
![image](/uploads/49ca50e041616fb97d4c68e5592b3357/image.png)

### Proposal

**Expected behavior**
![image](/uploads/4b0d420f38d512337c4fe21ccbb75d1e/image.png)

### Result

### Next steps (if any)

### How will we measure success?",2
72673827,2020-10-13 21:16:12.314,Remove ability to resend EULA from admin panel,"### Problem

As mentioned in [the epic](https://gitlab.com/groups/gitlab-org/-/epics/4225), we no longer require the manual EULA process. As part of this work, we should not need to resend EULA request email from the Admin panel.

This was first attempted as part of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1836, but we realized that we needed to keep this functionality around a bit longer as we sunset customers on the legacy EULA process.  We should tackle this in a future milestone similar to when we start work on https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1841.  In that issue, we determined we should start the work 90 days after the existing Eula process was turned off (2020-10-13).  Exact date TBD.

### Proposal

Remove the components related to resending EULAs via the admin panel.

Here's a patch that outlines what should be changed: [resend_eula.patch](/uploads/3dfc04a50e3d23eefbfebc9d7a7db069/resend_eula.patch)",1
72371426,2020-10-08 08:25:34.753,Document and describe columns in the DB (and perhaps add a Danger check),"We should start describing the fields we have in the CustomersDot DB and probably follow the guidelines of https://gitlab.com/gitlab-org/database-team/team-tasks/-/issues/88

It might be best to add another reminder similar to the DB ERD one to Danger so we can ping the engineer every time the DB is updated.

Related to https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1128#note_424516562 and https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1128#note_424541144",3
72284282,2020-10-06 21:15:03.628,Do not show sign in / sign up error on the sign in page,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

When a user is not signed into the Customers Portal, they get redirected to the sign in / register page and are shown a scary-looking red alert at the top telling them to sign in or sign up for the customers portal to continue. This is jarring to the user and makes them feel like they've made an error, even though they are just on the signin/signup step of the flow.

![browser_screen__57_](/uploads/2029d2734005af8217513b70bc91c7a9/browser_screen__57_.png)

### Proposal

Remove the error message about needing to sign in / sign up. The sign in / registration page is already pretty straightforward and the user doesn't need additional instructions.",2
72269752,2020-10-06 16:14:21.115,React to Zuora errors by fixing orders,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Orders within Subscription App are meant to be a 1:1 mapping to Zuora Subscriptions and be in sync.

However some times the orders and the subscription that originated them diverge, whether because the subscription was cancelled/refunded and our app was lacking the logic to react to that scenario or because the callouts from Zuora never happened or all failed, Zuora is down, Subscription App is down... (so many possibilities)

So although we can create better mechanisms to account for each of this origins (and we are and should continue to do so), these are two independent systems and keep them in sync is not possible:100:% of the time.

That is why we want to put up for consideration to proactively fix these sync gaps when those are uncovered.

By:
- Identifying a set of Zuora errors we get consistently.
- Set up corrective reactions within the Subscription App.

### :warning: Sync no more, soon...

Our final goal is to make Zuora the Single Source of Truth (SSoT) for CustomersDot and we want to keep that present and work towards that whenever possible. This translates into us writing any future code considering to actually rely on Zuora instead of reusing what is saved in `orders`. *Not only for this but all issues.*

[Transition to Zuora as the SSoT Epic](https://gitlab.com/groups/gitlab-org/-/epics/4664) will group all the effort to accomplish this, it aims ""to reduce the data duplication in CustomerDot with Zuora and move us closer to calling Zuora the SSoT"". This is a big effort and in the meanwhile we want to still alleviate some of sales blockers if possible and that is what this issue is about.

### What we want to solve

**SITUATION:** Customer is purchasing a .com plan for a namespace that has a refunded subscription associated to this.

**WHAT HAPPENS TODAY:** Customer is unable to proceed, contacts support, support deals manually with the order's state, support creates a ticket, the ticket is prioritized and ultimately an engineer will pick it up and try to find out the cause for this out of sync state (this cause is at this point not relevant, maybe the order is for a moment in time we didnt have logic to reset the order, maybe Zuora's profile was in silence mode, maybe callouts failed...) This is a lot of effort.

**WHAT THIS ISSUE PROPOSES:**
When Subscriptions App gets an error that **looks like the one for that **might** be related to this case, instead of raising right away and triggering all the response above, we can take a step to the side and:
- Attempt to fix! In this case: Query Zuora for the state of the subscription associated to the order
- **IF** it is cancelled
  - Reset the order's subscription data via `ProcessInactiveSubscriptionService`
  - Reattempt the user action (best case scenario customer purchased and it is happy)
- **ELSE** fail like we do today


### Result

By ""closely"" reacting to the identified (known) errors such as the one outlined and correcting the data we are saving a lot of time to support and removing many future duplicated issues that are created as a result.",2
72221388,2020-10-05 22:59:50.613,UX: Improve self-managed purchase success screen,This is the UX issue for https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2059,1
72221366,2020-10-05 22:59:00.396,UX: Improve copy on email confirmation step,This is the UX issue for https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2058,1
72199010,2020-10-05 15:10:46.254,Further refactor customers creation,"The following discussion from !2021 should be addressed:

- [ ] @shreyasagarwal started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2021#note_423635493):  (+1 comment)

    > @dstull Can we please use `self.where` ... I probably never had a habit of reading it without a Customer.where or self.where and makes me cringe a bit. Just a personal preference, if you leave it then I would try hard to get use to it :smile:",2
72097572,2020-10-02 20:26:34.205,Improve self-managed purchase success modal,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

When a customer has just purchased a self-managed subscription, the success modal gives them no actionable steps about what to do next to get their license or upload it to their instance.

![Screenshot_2020-10-05_at_10.14.27](/uploads/5de5bff344e1f99bc5e069f06b23b785/Screenshot_2020-10-05_at_10.14.27.png)

### Proposal

- Add copy on the purchase success modal to tell the user to check their email for the license file and instructions on how to apply it or download it from the manage purchases page. 
- Change the button to ""Get license file"" and have it link to the manage purchases page.",3
72097364,2020-10-02 20:15:39.872,Improve copy on email confirmation step,"## Problem

Webstore registration requires email confirmation, but the screen asking the user to confirm their email emphasizes resending the confirmation email, not the the main action of checking your email to click the confirmation link. 

It also doesn't tell user why confirmation is required (because we send the license to that email and we need to make sure it's right).

![browser_screen__9__1](/uploads/dd7ed617f0e91e9fc6fcb6850805d519/browser_screen__9__1.png)

## Proposal

- Move the info that's currently hidden in the alert down into the main body. 
- Add a value prop for the user to tell them why confirming their email is important (something like ""We need you to confirm your email so that we send your license to the right place."") 
- Give less emphasis to ""Resend confirmation instructions"" and more emphasis to the action that they really need to take which is ""Check your email.""

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

> Add a value prop for the user to tell them why confirming their email is important

Any associated Vue changes should also be accompanied by frontend Jest test changes to test the new prop, or any other modifications.",3
92195219,2020-10-02 05:31:45.827,SUBSCRIPTIONS_URL refactorings,"The following discussion from gitlab!43812 should be addressed:

- [ ] @brodock started a [discussion](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/43812#note_422480752): 

    > On a different note, I'm curious why we decided to start storing all those globals here instead of a more dedicated location. 
    > 
    > Looking at `SUBSCRIPTIONS_URL` usage, I found we are ""building URLs"" all over the place, literally hard-codding and concatenating things when needed with at least 28 matches. It suggests me that we should move those to a dedicated place.
    > 
    > An obvious refactor here could start with moving constants to another level and building URL specific methods:
    > 
    > ```ruby
    > module EE
    >   module Subscriptions
    >     SUBSCRIPTIONS_URL = ENV.fetch('CUSTOMER_PORTAL_URL', ::Gitlab.dev_or_test_env? ? 'https://customers.stg.gitlab.com' : 'https://customers.gitlab.com').freeze
    > 
    >     def self.customer_portal_url(path)
    >       ""#{SUBSCRIPTIONS_URL}/#{path}"".freeze
    >     end
    > 
    >     def self.customer_portal_more_minutes_url
    >       custmer_portal_url('buy_pipeline_minutes')
    >     end
    > 
    >     def self.customer_portal_more_storage_url
    >       custmer_portal_url('buy_storage')
    >     end
    >   end
    > end
    > ```
    > 
    > and so on

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

As this refactor is recommending a nice generic library to determine the URLs, a unit spec should accompany the new module to ensure quality.

- If CUSTOMER_PORTAL_URL is set to `the_url` ... `EE::Subscription`
  - `#customer_portal_url('/test')` is `https://the_url/test`
  - `#customer_portal_more_minutes_url` is `https://the_url/buy_pipeline_minutes`
  - `#customer_portal_more_storage_url` is `https://the_url/buy_storage`
- If CUSTOMER_PORTAL_URL is not set ...
  - When dev env ...
    - `#customer_portal_url('/test')` is `https://customers.stg.gitlab.com/test`
    - `#customer_portal_more_minutes_url` is `https://customers.stg.gitlab.com/buy_pipeline_minutes`
    - `#customer_portal_more_storage_url` is `https://customers.stg.gitlab.com/buy_storage`
  - When test env ...
    - `#customer_portal_url('/test')` is `https://customers.gitlab.com/test`
    - `#customer_portal_more_minutes_url` is `https://ccustomers.gitlab.com/buy_pipeline_minutes`
    - `#customer_portal_more_storage_url` is `https://customers.gitlab.com/buy_storage`",2
71968275,2020-09-30 17:35:23.166,Stub Salesforce calls in testing,"The following discussion from !1998 should be addressed:

- [ ] @dstull started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1998#note_420627415):  (+3 comments)

    > what is perplexing here is not why this is needed now - but why it wasn't needed before, as every test under this context needs it.",1
71964953,2020-09-30 16:16:24.904,Move cron job into jobs area,"The following discussion from !2012 should be addressed:

- [ ] @dstull started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2012#note_419823396):  (+1 comment)

    > The name(no worker suffixed) and placement of this class and the one that is called in the perform is suspicious.
    > 
    > I see it is really a [cronjob](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/9cb507bd42ed3f31b760ed8c35d7b80087cef67a/config/sidekiq.yml#L11), so perhaps it should move under `app/jobs` and be refactored a bit?
    > 
    > note: will spawn issue if feedback confirms this",2
71958315,2020-09-30 14:28:18.468,Upstream spec schema migration before settings,"The following discussion from !2000 should be addressed:

- [ ] @shreyasagarwal started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2000#note_418608156):  (+2 comments)

    > @dstull Can we replace `:each` with `:example`. RSpec wants to deprecate the use of 'each' and 'all' in later versions and the new ones which came from 3.0 are these ones listed here https://relishapp.com/rspec/rspec-core/v/3-9/docs/hooks/before-and-after-hooks",1
71851930,2020-09-29 07:11:44.303,Danger suggests backend review for frontend changes,"### Problem

With aligning Danger to the GitLab updates (https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1974), some changes trigger the wrong review as the fallback review category is triggered. For [example](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2010#note_419750732) changes in `app/frontend` fell back to a backend review since it wasn't explicitly checked for frontend anymore.

### Proposal
Add some categories back to trigger a frontend review.

### Result
Danger suggests the correct review category.",1
71849355,2020-09-29 06:41:39.316,Align overcommit.yml with GitLab,"### Problem
While reviewing https://gitlab.com/gitlab-org/license-gitlab-com/-/merge_requests/212, I looked at the `.overcommit.yml.example` for [GitLab](https://gitlab.com/gitlab-org/gitlab/blob/master/.overcommit.yml.example) and the [Subscriptions App](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/.overcommit.yml.example). The Subscriptions App's file is much smaller, so we should check if we should add a few checks that are in place for GitLab here as well. For example, in the last few months we added a lot more docs, so it might make sense to add checks like `MarkdownLint` and `Vale` to hold the Subscriptions App to the same standard as GitLab.

### Proposal
Compare `.overcommit.yml.example` of GitLab and Subscriptions App and update the latter one with useful checks.

### Result
Aligning overcommit checks with GitLab and have the same standard in those checks.",1
71823263,2020-09-28 19:06:55.940,[UX] Improve provisioning and onboarding of new sales-assisted GitLab.com subscribers - MVC,"This is the UX design issue for https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2272

Video walkthrough of current flow: https://youtu.be/Wex_YD37Dkk


### Designs
SSOT
- See design section
- [Figma link](https://www.figma.com/file/MIQZb8jhi5gA33yFbaREou/Improve-provisioning-and-onboarding-of-new-sales-assisted-SaaS-subscribers?node-id=23%3A2943)

- [Walkthrough video](https://www.loom.com/share/dc875e6e39e64c20b48cb07fd9a9d8a1) - Some edits were made to designs after this video was made.",3
71786131,2020-09-28 09:11:39.832,Follow-up: Allow creating new group in new GitLab purchase page,"### Problem


We need to allow the user to create a new group while they're in ""New GitLab Subscription"" and assign the new subscription to that group.

A follow-up to #1970.

### Proposal

Use the following design for the new GitLab.com subscription page

![](https://gitlab.com/gitlab-org/customers-gitlab-com/uploads/9e3428a617b31972d66f521917c42fce/GitLab.com_-_Buy_subscription.png)",3
71705280,2020-09-25 18:50:41.143,SaaS upgrade flow should charge for users over license,"## Summary

When a SaaS customer with user overages upgrades their tier, we don't charge seats over their current subscribed amount. This causes issues at renewal for sales.


## Proposal

When the customer enters the Upgrade purchase flow, we should dynamically update the `seats` field with the greater of the `Seats currently in use` or `Seats in subscription`. Today the value defaults to the prior `subscription` Seats in subscription` quantity.

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

> dynamically update the `seats` field with the greater of the `Seats currently in use` or `Seats in subscription`

This will require tests to ensure that one value takes precedence over the other, as well as a front-end test that ensures that the value is rendered in the field as expected.",2
71680053,2020-09-25 10:39:40.520,Subscriptions buttons spec ToolTip needs fixing,"The following discussion from !1983 should be addressed:

- [ ] @dreedy started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1983#note_418325959):  (+3 comments)

    > **question:** I’m a little confused by the description & setup of this test. Are we actually testing what the description says?
    > 
    > > when `hasSeatLinkData` is `true`
    > 
    > ```ruby
    > factory({ /*…*/ hasSeatLinkData: false})
    > ```

The spec in question is broken in it's current state. It needs some setup code to be able to assert on the tooltip it is supposed to be asserting on.

```
diff --git a/spec/frontend/subscription/components/subscription_buttons_spec.js b/spec/frontend/subscription/components/subscription_buttons_spec.js
index f350736d..2f38f2e2 100644
--- a/spec/frontend/subscription/components/subscription_buttons_spec.js
+++ b/spec/frontend/subscription/components/subscription_buttons_spec.js
@@ -327,8 +327,44 @@ describe('SubscriptionButtons', () => {
         });

         describe('when hasSeatLinkData is true', () => {
+          const originalCreateRange = document.createRange;
+          const origGetBCR = Element.prototype.getBoundingClientRect;
+
+          beforeEach(async () => {
+            // https://github.com/FezVrasta/popper.js/issues/478#issuecomment-407422016
+            // Hack to make Popper not bork out during tests.
+            // Note popper still does not do any positioning calculation in JSDOM though.
+            // So we cannot test actual positioning... just detect when it is open.
+            document.createRange = () => ({
+              setStart: () => {},
+              setEnd: () => {},
+              commonAncestorContainer: {
+                nodeName: 'BODY',
+                ownerDocument: document,
+              },
+            });
+            // Mock getBCR for visibility checks of trigger element
+            Element.prototype.getBoundingClientRect = jest.fn(() => ({
+              width: 24,
+              height: 24,
+              top: 0,
+              left: 0,
+              bottom: 0,
+              right: 0,
+            }));
+
+            // factory({ autoRenew: false, hasSeatLinkData: false });
+            factory({ autoRenew: true, hasSeatLinkData: true });
+            jest.runOnlyPendingTimers();
+            await wrapper.vm.$nextTick();
+          });
+
+          afterEach(() => {
+            // Reset overrides
+            document.createRange = originalCreateRange;
+            Element.prototype.getBoundingClientRect = origGetBCR;
+          });
           it('does not show autorenew tooltip on hover', async () => {
-            factory({ autoRenew: true, hasSeatLinkData: false });
             await wrapper.vm.$nextTick();

             expect(findGlTooltip()).toBeNull();
```

There is similar setup code in the test suite already, so let's refactor this into something helpful.",2
71657834,2020-09-25 01:44:45.117,Make CreateSalesforceAccountWorker retryable with Sidekiq,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

> Well spotted. @rdavila looks like an easy fix, would you be able to submit that on a separate MR for `CreateSalesforceAccountWorker`?

Derived from: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1479#note_416471108

### Proposal

Send a fix similar to the one sent for `CreateSalesforceOpportunityWorker`

### Result

### Next steps (if any)

### How will we measure success?",2
71646408,2020-09-24 18:47:04.627,Make context an optional argument to Unleash.enabled?,"## Proposal

Update the [`Unleash` initializer](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/c8b54841a8706b289bb3a518082c31feb7cbbb14/config/initializers/unleash.rb#L17) so that the `enabled?` method has a default argument for `context` of an empty hash.

`def enabled?(feature, context = {}, *args)`

There are so many place within the code where we already pass the empty hash.  Updating it would make it more convenient to use and clean up existing references.

## Followup

The following discussion from !1979 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1979#note_418344696): 

    > We have so many places that send an empty hash for the context to the `enabled?` helper.  It's probably time we make that an optional argument and default it to an empty hash.  I might tackle that as a follow-up when I have downtime. :smile:",1
71641477,2020-09-24 16:23:16.912,SPIKE: Migrate Autorenewal process to automated process flow in customers.gitlab.com,"## Summary

When a self-managed or GitLab.com subscription is set to autorenew, the process is driven by Zuora. Currently, this Zuora process requires manual intervention. While there is a possibility of automating this in Zuora, we may find that the timing and LOE is so large that we will not see manual process relief for some time.

### Manual effort estimation

Currently the billing team is spending an average of 110 hours monthly processing autorenewals (just those which actually renew, not those which must be cancelled due to non-payment) with a volume of over 560 subscriptions per month.

## Proposal

Let's explore what the dev effort would be to automatically process the renewal via customers.gitlab.com similar to what we will do with [Quarterly Coterms](https://gitlab.com/groups/gitlab-org/-/epics/27470) so that customers.gitlab.com processes the renewal and charging of credit card.

### Considerations

1. Where the original subscription was sourced by Web Store, we should only process and offer the autorenew feature for subscriptions with a valid credit card on file.
1. Where the original subscription was sourced by a sales-assisted order form, we should allow autorenew in any case. For those which have no credit card on file, we should generate the subscription and send an invoice.
1. Where the original subscription was sourced by a sales-assisted order form, we should identify if there is an open renewal opportunity in SFDC and if so, do not process autorenewal. (this can be follow-up iteration)",1
71573844,2020-09-23 15:03:53.544,CI minute purchase totals do not update,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

https://customers.gitlab.com/subscriptions/new?plan_id=2c92a0086a07f4a8016a2c0a1f7b4b4c&transaction=ci_minutes

When hitting the above link the total isn't updated.

![ci_minutes_stuck](/uploads/2c4d983212b5881cfd521762f67897c8/ci_minutes_stuck.gif)

Zendesk ticket https://gitlab.zendesk.com/agent/tickets/173687

### Proposal

### Result

### Next steps (if any)

### How will we measure success?",2
71565458,2020-09-23 12:14:49.444,Cleanup unused secret variable,"Follow-up of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1657 

## Problem
With changes for https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1657 a variable (`finance_cc_email`) from the application's secrets is not needed anymore and should be removed. This should be addressed after the work for https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1657 is completed.

### Proposal
These steps are required to complete this issue:
- Remove the value in the [`secrets.yml.example`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/staging/config/secrets.yml.example) for all environments
- Create infrastructure issue to remove the value from the chef vault of customers.gitlab.com
- Create merge request in the [CustomersDot's cookbooks](https://gitlab.com/gitlab-cookbooks/cookbook-customers-gitlab-com) to remove the variable from [`secret.yml.erb`](https://gitlab.com/gitlab-cookbooks/cookbook-customers-gitlab-com/-/blob/master/templates/default/secrets.yml.erb) and the default in [`default.rb`](https://gitlab.com/gitlab-cookbooks/cookbook-customers-gitlab-com/-/blob/master/attributes/default.rb)

### Result
Removal of unused secret variable",1
71558004,2020-09-23 09:42:42.619,Ensure project setup covers GDK refusing to connect to HTTPS with invalid license,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

@astoicescu recently updated their GDK, and due to security concerns the GDK now drops HTTPS calls if the certificate is invalid.

This is obviously a good thing.

This can cause issues for our local development though.

We recommend ngrok for local development, and their wildcard is `*.eu.ngrok.io `.

However if one creates a ngrok url with `.` like https://ragnar.zuora-payment.eu.ngrok.io/ it'll be two subdomains and the license will be invalid.

A workaround is to drop from `https` to `http`.

### Proposal

Document this gotcha.",1
71553697,2020-09-23 08:24:59.308,Rename .rb to .rb.tt for templates used in templates folder,"In the [generator folder](https://gitlab.com/gitlab-org/customers-gitlab-com/-/tree/staging/generator_templates/active_record) we have few templates which we are using for [migration](https://gitlab.com/gitlab-org/customers-gitlab-com/-/tree/staging/generator_templates/active_record/migration).

As it contains the ERB codebase the files are having a `.rb` extension instead of `.rb.tt`

The same is being used by Bundler and also Rails in their project. https://github.com/rails/rails/blob/master/activerecord/lib/rails/generators/active_record/migration/templates/create_table_migration.rb.tt

The corresponding issue for GitLab extension change is here https://gitlab.com/gitlab-org/gitlab/-/issues/251122",1
71531898,2020-09-22 20:10:57.631,"Remove ""HostedPlans"" from namespace of Gitlab::HostedPlans::UpgradeSubscriptionPlanService","### Problem
Now that `Gitlab::HostedPlans::UpgradeSubscriptionPlanService` is used to upgrade both hosted and self-hosted plans, the namespace `HostedPlans` is misleading.

### Proposal
We should remove the `HostedPlans` namespace for this class and move the file under `app/services/gitlab/` instead.

### Result
Clearer class name for this service.",1
71507644,2020-09-22 13:48:05.332,Add Invoice balance and due date to Web Store,"## Summary

As a follow up to https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/503 and to get us closer to delivering https://gitlab.com/groups/gitlab-org/-/epics/4372, we'd like to provide customers with `Invoice Due Date` and `Invoice Balance` within the Web Store.



### Additional Reference

1. See pertinent conversation: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/503#note_416662993

### UX

There shouldn't be a material change to the existing UX but will obtain sign-off/review on this assumption.

## Actions

1. [x] Pull invoice balance from Zuora
1. [x] Pull invoice due date from Zuora
1. [x] Create new `Invoice Due Date` column in FE of Web Store>Invoices page and display values
1. [x] Create new `Invoice Balance` column in FE of Web Store>Invoices page and display values",1
71466534,2020-09-21 18:58:17.350,Sign in view. Use gitlab-ui utility classes.,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Description

This issue contains the follow-ups derived from https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1865/

- [x] Replace margins on `.signin-register-page` with utility classes added to gitlab-ui (after https://gitlab.com/gitlab-org/gitlab-ui/-/merge_requests/1733 gets merged)",1
71457632,2020-09-21 15:32:37.578,Fine tune ci file settings,"The following discussion from !1974 should be addressed:

- [ ] @dstull started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1974#note_416047723): 

    > So this can really be cured, and I started down this path, but when I was finished, it was too much for this MR and would've caused it to become unfocused...so I kept this for now.
    > 
    > However, I will create a follow up with these thoughts:
    > 
    > <details>
    > 
    > <summary>.gitlab-ci.yml</summary>
    > 
    > ```yml
    > stages:
    >   - test
    >   - deploy
    >   - test-staging
    >   - deploy-production
    >   - post-deploy
    > 
    > default:
    >   image: 'registry.gitlab.com/gitlab-org/gitlab-build-images:ruby-2.6.6-golang-1.14-git-2.26-lfs-2.9-chrome-73.0-node-12.x-yarn-1.21-postgresql-10-graphicsmagick-1.3.34'
    >   tags:
    >     - gitlab-org
    >   services:
    >     - postgres:latest
    >     - redis:latest
    >   cache:
    >     key:
    >       files:
    >         - Gemfile.lock
    >         - yarn.lock
    >     paths:
    >       - vendor/ruby
    >       - .yarn-cache/
    > 
    > variables:
    >   POSTGRES_DB: 'payment_app_test'
    >   POSTGRES_HOST_AUTH_METHOD: trust
    >   RAILS_ENV: 'test'
    >   SIMPLECOV: 'true'
    >   REDIS_URL: 'redis://redis:6379/0/session'
    > 
    > include:
    >   - local: .gitlab/ci/global.gitlab-ci.yml
    >   - local: .gitlab/ci/danger.gitlab-ci.yml
    >   - template: Security/SAST.gitlab-ci.yml #https://docs.gitlab.com/ee/user/application_security/sast/
    >   - template: Security/Dependency-Scanning.gitlab-ci.yml #https://docs.gitlab.com/ee/user/application_security/dependency_scanning/
    > 
    > rubocop:
    >   extends:
    >     - .default-only
    >   stage: test
    >   before_script:
    >     - bundle install --without=production --jobs=$(nproc) --path=vendor --retry=3 --quiet
    >   script:
    >     - bundle exec rubocop
    >   except:
    >     - tags
    > 
    > linting:
    >   extends:
    >     - .default-before_script
    >     - .default-only
    >   stage: test
    >   script:
    >     - yarn lint
    > 
    > frontend_test:
    >   extends:
    >     - .default-before_script
    >     - .default-only
    >   stage: test
    >   script:
    >     - yarn test --ci --coverage
    >   artifacts:
    >     name: coverage-frontend
    >     expire_in: 31d
    >     when: always
    >     paths:
    >       - coverage-frontend/
    >       - junit_jest.xml
    >       - tmp/tests/frontend/
    >     reports:
    >       junit: junit_jest.xml
    > 
    > rspec:
    >   extends:
    >     - .default-before_script
    >     - .default-only
    >   stage: test
    >   script:
    >     - bundle exec rspec
    >   artifacts:
    >     expire_in: 31d
    >     when: always
    >     paths:
    >       - log/
    >       - coverage/
    >       - tmp/capybara/
    > 
    > pages:
    >   extends:
    >     - .default-before_script
    >   stage: deploy
    >   script:
    >     - mv public/ .public/
    >     - mkdir public/
    >     - mv coverage/ public/coverage-ruby/ || true
    >     - cp .public/assets/application-*.css public/application.css || true
    >     - cp .public/assets/application-*.css.gz public/application.css.gz || true
    >   artifacts:
    >     paths:
    >       - public
    >     expire_in: 30 days
    >   only:
    >     - master
    > 
    > deploy-staging:
    >   extends:
    >     - .default-before_script
    >   stage: deploy
    >   variables:
    >     NODE_ENV: 'production'
    >   script:
    >     - yarn install --check-files
    >     - ./bin/webpack
    >     - bundle exec bin/deploy staging
    >   only:
    >     - staging
    > 
    > end-to-end:
    >   stage: test-staging
    >   before_script:
    >     - cd qa
    >     - bundle install
    >   script:
    >     - bundle exec rspec spec --format progress --format RspecJunitFormatter --out rspec.xml
    >     - touch tmp/success
    >   after_script:
    >     - gem install httparty
    >     - |
    >       if [ -e qa/tmp/success ]; then
    >         bin/notify qa_success
    >       else
    >         bin/notify qa_failure
    >       fi;
    >   allow_failure: true
    >   variables:
    >     STAGING: 'true'
    >     QA_BROWSER: :chrome_headless
    >   when: delayed
    >   start_in: 40 minutes
    >   only:
    >     - staging
    >   artifacts:
    >     expire_in: 30d
    >     when: always
    >     paths:
    >       - qa/tmp/
    >     reports:
    >       junit: qa/rspec.xml
    > 
    > deploy-production:
    >   extends:
    >     - .default-before_script
    >   stage: deploy-production
    >   script:
    >     - git checkout $CI_COMMIT_REF_NAME
    >     - 'bundle exec bin/deploy production && git push https://customers-gitlab-com:$DEPLOY_API_TOKEN@gitlab.com/gitlab-org/customers-gitlab-com.git $CI_COMMIT_REF_NAME:master'
    >   when: delayed
    >   start_in: 2 hours
    >   only:
    >     - staging
    > 
    > notify-failure:
    >   extends:
    >     - .default-before_script
    >   stage: post-deploy
    >   script:
    >     - bundle exec bin/notify
    >   when: on_failure
    >   only:
    >     - staging
    > 
    > ```
    > 
    > </details>
    > 
    > 
    > <details>
    > <summary>.gitlab/ci/global.gitlab-ci.yml</summary>
    > 
    > ```yml
    > .default-before_script:
    >   before_script:
    >     - bundle install --without=production --jobs=$(nproc) --path=vendor --retry=3 --quiet
    >     - yarn install --frozen-lockfile --cache-folder .yarn-cache --prefer-offline
    >     - cp config/database.yml.ci config/database.yml
    >     - cp config/secrets.yml.example config/secrets.yml
    >     - RAILS_ENV=test bundle exec rake db:setup assets:precompile
    > 
    > .default-only:
    >   only:
    >     refs:
    >       - master
    >       - staging
    >       - merge_requests
    >       - tags
    > ```
    > 
    > </details>
    > 
    > <details>
    > <summary>danger.gitlab-ci.yml</summary>
    > 
    > ```yml
    > danger-review:
    >   stage: test
    >   image: registry.gitlab.com/gitlab-org/gitlab-build-images:danger
    >   dependencies: []
    >   retry:
    >     max: 2  # This is confusing, but this means ""3 runs at max"".
    >     when:
    >       - unknown_failure
    >       - api_failure
    >       - runner_system_failure
    >       - job_execution_timeout
    >       - stuck_or_timeout_failure
    >   script:
    >     - git version
    >     - node --version
    >     - yarn install --frozen-lockfile --cache-folder .yarn-cache --prefer-offline
    >     - danger --fail-on-errors=true --verbose
    >   rules:
    >     - if: '$DANGER_REVIEW_DISABLED'
    >       when: never
    >     - if: '$CI_COMMIT_BRANCH =~ /^(master|staging)$/'
    >       when: never
    >     - if: '$DANGER_GITLAB_API_TOKEN == null || $DANGER_GITLAB_API_TOKEN == """"'
    >       when: never
    >     - if: '$CI_COMMIT_TAG || $CI_COMMIT_BRANCH'
    > ```
    > 
    > </details>
    > 
    > also - the current `default:` `before_script` is a bit wild here as it is being ran for almost all the jobs and is really needed only on about 1/2 of them. We are building almost the entire app on every single job for test and that takes time and resources we don't need to spend.",3
71446625,2020-09-21 12:54:06.077,Guide the user to login page when purchasing a subscription,"### Problem

When the user wants to purchase a new subscription, the current HAML implementation allows visiting the new subscription page without having an account, and inside that page, the user will not see anything but a ""Sign in"" link.

#### Current flow

![](https://gitlab.com/gitlab-org/customers-gitlab-com/uploads/360236ea7a114aa0d2a7b674b581ce9c/guides_through_login.gif)

In the pajama's implementation #1473 and #1970, we need to redirect the user to the login page if they're not logged in.

Caught by @rhardarson :thumbsup: 

### Proposal

Redirect the user to the sign in page when they try to purchase a new subscription without having an active session.

### Result

No errors when the user trying to access the page without having an active session.

### Next steps (if any)",2
71423029,2020-09-21 02:23:51.358,"Update the renewal banner copy to say ""Purchase a new subscription""","<!-- The first four sections: ""Problem to solve"", ""Intended users"", ""User experience goal"", and ""Proposal"", are strongly recommended, while the rest of the sections can be filled out during the problem validation or breakdown phase. However, keep in mind that providing complete and relevant information early helps our product team validate the problem and start working on a solution. -->

### Problem to solve

<!-- What problem do we solve? Try to define the who/what/why of the opportunity as a user story. For example, ""As a (who), I want (what), so I can (why/value)."" -->

GitLab.com allow 14 days of grace period before a namespace is downgraded to free. The banner state that the user has 14 days to **renew** the subscription with a `Renew subscription` button. When the customer goes to [customers portal](https://customers.gitlab.com/customers/sign_in) to renew the subscription, the renew button doesn't exist because the Bronze/Silver/Gold subscription has already expired.

### Intended users

<!-- Who will use this feature? If known, include any of the following: types of users (e.g. Developer), personas, or specific company roles (e.g. Release Manager). It's okay to write ""Unknown"" and fill this field in later.

Personas are described at https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/

* [Parker (Product Manager)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#parker-product-manager)
* [Delaney (Development Team Lead)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#delaney-development-team-lead)
* [Presley (Product Designer)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#presley-product-designer)
* [Sasha (Software Developer)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#sasha-software-developer)
* [Devon (DevOps Engineer)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#devon-devops-engineer)
* [Sidney (Systems Administrator)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#sidney-systems-administrator)
* [Sam (Security Analyst)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#sam-security-analyst)
* [Rachel (Release Manager)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#rachel-release-manager) 
* [Alex (Security Operations Engineer)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#alex-security-operations-engineer)
* [Simone (Software Engineer in Test)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#simone-software-engineer-in-test)
* [Allison (Application Ops)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#allison-application-ops) 
* [Priyanka (Platform Engineer)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#priyanka-platform-engineer)
-->

Unknown

### User experience goal

<!-- What is the single user experience workflow this problem addresses? 
For example, ""The user should be able to use the UI/API/.gitlab-ci.yml with GitLab to <perform a specific task>""
https://about.gitlab.com/handbook/engineering/ux/ux-research-training/user-story-mapping/ --> 


### Proposal

<!-- How are we going to solve the problem? Try to include the user journey! https://about.gitlab.com/handbook/journeys/#user-journey -->

~~Allow the renew button to persist during the (grace period) so that customer can renew their subscription without confusion.~~

Update the button copy to speak to purchasing a new subscription vs. renewing",2
71414733,2020-09-20 16:39:59.917,SaaS users should be able to indicate the desired quantity of users during purchase,"## Problem
Users purchasing GitLab.com subscriptions are not prompted to enter a number of seats they would like to purchase during the new subscription purchase flow. Instead, we read the number of seats active at the time of purchase and charge them accordingly. This limits growth and doesn’t give purchasing control to the user.

## Proposal

Allow users to enter a number of seats during the GitLab.com purchase flow.

### Success Criteria

- The user should be able to manually enter the number of seats desired for purchase
- The system should provide a message if the user enters a number less than `Seats currently in use`
- If the number entered is less than `Seats currently in use` do not block the purchase
- The user should be able to enter a quantity of users greater than `Seats currently in use`",2
71414473,2020-09-20 16:21:53.337,Move New GitLab.com Subscription flows to GitLab.com UI,"## Problem

When a new GitLab.com subscriber enters the purchase flow from our pricing page or from the Web Store, if they do not already have a group created, they are blocked from continuing their purchase.


## Proposal

Move the GitLab.com New Subscription purchase flow to follow the same flow introduced if the user attempts to purchase via a GitLab.com CTA. 

It's managed under [`move_gitlab_purchases_to_gitlab`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/71/edit) feature flag.

### Success Criteria

- The user should remain in GitLab.com from a UI perspective
- The user should not be prompted to log into the Web Store
- If a group is not yet created, one should be created for them",2
71414151,2020-09-20 16:00:25.583,SPIKE: Move all purchasing flows to GitLab.com,"## Summary

This is a research issue to break down the work to move SaaS purchase flows to GitLab.com. The expected output includes creating applicable BE and FE issues and providing an estimated weight where possible.

Please see epic: https://gitlab.com/groups/gitlab-org/growth/-/epics/36

## Options Comparison

| Option                           | Pros | Cons | Notes | Supporters |
| -------------------------------- | ---- | ---- | ----- | ---------- |
| Move components to GitLab                   | <ol><li>We have full control over how components behave inside GitLab</li></ol>    | <ol><li>Duplicated code between 2 projects</li><li>Harder to maintain 2 copies of the same component</li></ol> | |
| Move components to shared package then use in GitLab | <ol><li>Easier to reuse components between 2 projects</li><li>Reduce the components code used in each project by extracting it to external one</li></ol>   |  <ol><li>One extra project to maintain</li></ol>  | | |
| Compose new components for GitLab | <ol><li>Easy to adopt new UX/UI design</li><li>More control over SaaS specific purchase flows</li></ol> | <ol><li>New components to maintain</li><li>Not reusing existing components</li><li>We need to rewrite all JS tests to accommodate new components</li></ol> |  | @esybrant, @rhardarson, @vitallium, @aalakkad |
| ~~Serve pages through an iframe from CustomersDot~~    | <ol><li>No need to create another project or to duplicate components</li><li>Faster MVP</li></ol>    | <ol><li>Ambiguity on how to implement</li><li>Uncertainty on how to handle user sessions and data passed from HTML to Vue</li></ol>     | [invalidated](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1985#note_440724423) by @vitallium | |


## Action points

- [x] ask UX if they expect any change in the components when we move flows to GitLab or it will stay the same",5
71330188,2020-09-17 20:10:21.307,Follow up: Update additional fields on SFDC Quote creation,"### Problem

Upon SFDC **Opportunity** creation we will also create a set of associated objects, **Quote** being one of these.

When creating a Quote [we also pass subscription data](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/8b9502d8c6f216de3e8287590fee1b14d3ef0145/app/services/salesforce/create_quote_service.rb#L55-56)

The current fields we are populating in SFDC are resulting in some confusion and duplication error. We would like to update the fields where we store this data on the SFDC end.

### Proposal

Update [these fields](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/8b9502d8c6f216de3e8287590fee1b14d3ef0145/app/services/salesforce/create_quote_service.rb#L55-56) with some custom fields TBDed.

### Result

No error on the SFDC upon **Quote** creation.",1
71314470,2020-09-17 14:00:21.622,Remove FF for adding seats to a dotcom subscription,"### Problem
With the feature to add seats to dotcom subscriptions (https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1098), a new feature flag named `add_seats_for_dotcom ` was introduced. The feature has been tested and the feature flag is no longer needed.

### Proposal
Remove the feature flag from the code and the [feature flag page](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/64/edit).

### Result
Less complex code because of a removed condition and cleanup after feature flag removal.

### Next steps (if any)

### How will we measure success?

### Availability & Testing

Tests (including end-to-end) must run and pass before and after this FF is removed. 

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->",1
71314255,2020-09-17 13:58:30.610,Remove FF for self-serve upgrades for self-managed subscriptions,"### Problem
With the feature for self-serve upgrade for self-managed subscriptions (https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/107), a new feature flag named `upgrade_self_managed_subscription` was introduced. The feature has been tested and the feature flag is no longer needed.

### Proposal
Remove the feature flag from the code and the [feature flag page](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/65/edit).

### Result
Less complex code because of a removed condition and cleanup after feature flag removal.

### Next steps (if any)

### How will we measure success?",1
71300939,2020-09-17 10:05:02.169,"Pajamas Update: GitLab.com ""New Subscription"" Page","Similar to #1473.

The change is managed under [`pajamas_new_gitlab_com_subscription`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/67/edit) feature flag.

### Problem

In order to match Pajama's design that we follow we should migrate the `New GL.com Subscription` page.


## Follow-up issue

- https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2039
- https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2110

### Proposal

Use the following design for the new GitLab.com subscription page

![](/uploads/9e3428a617b31972d66f521917c42fce/GitLab.com_-_Buy_subscription.png)",3
71295724,2020-09-17 09:07:16.277,Error on subscription upgrade with no plan,"### Problem
Upgrading a subscription for which no plan can be found results in [an error](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1845056):

```
NoMethodError
undefined method `any?' for nil:NilClass
```

### Proposal
Add check for plan presence on upgrade.

### Result
Resolve error for upgrades.

### Next steps (if any)

### How will we measure success?
No more erros on subscription upgrades.",1
71128053,2020-09-14 17:11:52.841,Analyze/modify ZuoraWorker use,"The following discussion from !1954 should be addressed:

- [ ] @dstull started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1954#note_412412150): 

    > I was looking into this and thinking - oh, the workers that include this must define this then.... However that is not the case.
    > 
    > In the 4 classes that include this concern, 2 define this method that is referenced by the `perform` method in this module and 2 do not, and redefine the `perform` method. 
    > 
    > So as a follow up, we need to see if this concern really is leveraged in an optimal manner and refactor a bit.",2
71126167,2020-09-14 16:28:23.930,Procurement | Add separate OSS and EDU SKUs,"# SKU Request Summary

We currently have a single SKU for EDU/OSS. Now that our programs are expanding, we need to differentiate those in order to accurately track metrics for each of our programs. It will also help us automate some parts of the process as per this issue around automating renewal titles: https://gitlab.com/gitlab-com/sales-team/field-operations/sales-operations/-/issues/1596

This is a request to create two separate SKUs: 
 * EDU
 * OSS

[Note on a requirement from the data team. ](https://gitlab.com/gitlab-com/sales-team/field-operations/sales-operations/-/issues/1400#note_429775874)

cc/ @c_hupy 

## SKU Requirements

In order to expedite your request, please complete all of the following information.
Any questions about this template or this request can be directed to @amandarueda in the comments of this issue.

1. [ ] SKU Names:
     * `EDU` 
     * `OSS`
1. [ ] SKU Code/ID:
1. [ ] **Zuora Plan Name: `enter plan name`**
1. [ ] **Zuora Plan ID: `enter plan ID`**
1. [ ] **Service type: `subscription`** -- need to double check
1. [ ] Does this need to be purchase-able via the customers portal? `No` -- users should not be able to renew on their own.
1. [ ] Does this service renew? `Yes` -- but via a manual process. Customers must email opensource@gitlab.com or education@gitlab.com
     * [ ] If yes, what is the renewal cadence? `annually`
1. [ ] Should an email be sent indicating the subscription is coming to an end?: `Yes`
1. [ ] **Is there a unit of measure, if so what?** ` Yes | No`  `Users | Qty | other`
1. [ ] Does this service provision anything? `Gold or Ultimate for 1 year`
     * [ ] If yes, please describe in detail what should be provisioned including the systems affected:
1. [ ] How soon do you need this SKU ? Timeline: ASAP, no hard deadline
1. [ ] Who in Sales-Ops approved this request: @username -- Discussion happening with @tav_scott and @jrabbits on: https://gitlab.com/gitlab-com/sales-team/field-operations/sales-operations/-/issues/1596 
1. [ ] Link to originating Finance issue: https://gitlab.com/gitlab-com/Finance-Division/finance/-/issues/3368
1. [ ] Apply the appropriate `BTG Priority` label to this issue.",1
71095714,2020-09-14 07:48:31.445,BE: Check for `Seats currently in use` when seats are added for GL.com,"We are implementing [GitLab.com users should be able to purchase additional users without adding members](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1098), which allows users to add seats to their subscription as they go. The functionality is limited to updating the subscription and we do not check their current usage.

For this iteration, we should check the `Seats currently in use` count on gitlab.com. 

With this check, we are trying to encourage the customer to pay for their current usage, instead of just adding the seats they think they need. The customer is not obliged or guided to settle their usage during their subscription period, so this check is an opportunity to settle their true usage of seats. 

Because there is no automatic trueup charge on gitlab.com today (December 2020), we forfeit any seat usage money above their paid seats if the customer does not take any action to add and pay for seats. By checking for their current usage, there is a better chance that those seats will be accounted for.

**Happy path:**
1. Given the user has a subscription 
1. And the subscription is linked to the group namespace
1. When the user selects the `Add more seats` button on their subscription card
1. Then a check for the `Seats currently in use` count on gitlab.com will be triggered
1. The user should be prompted to purchase a minimum number of seats to cover their current use

#### Example

1. Current subscription seat quantity = `10`
1. Current seats in use = `15`
1. When user selects `Add more seats`, the default the minimum `Add additional seats` quantity should be `5`
1. The user should not be able to enter less than `5` additional seats and be able to checkout

----

Considerations for the check failing:
- the group and subscription are no longer linked because the group has been deleted
- the group and subscription are no longer linked because the gitlab.com user no longer has Owner access to the group

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

This may require tests that mock the response from GitLab.com returning the ""Seats currently in use"" properly, as well as tests that check to ensure that the BE code handles both valid and invalid responses from GL.com.",1
71095590,2020-09-14 07:46:23.272,"Prefill ""Add additional seats"" input field with unpaid seats number for GL.com","## Summary

As part of the flow for [adding additional seats for gitlab.com subscriptions](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1098), we should prefill the input field for adding additional seats with the difference between seats in use and seats in subscription, and prevent the user from inputting a number less than their seats owed.

| Scenario | Image |
| --- | --- |
|_I'm a customer with 20 seats in my subscription. I currently have 30 seats in use. When I click `Add more seats`, the number `10` will be prefilled into the additional seats field. The user will be able to increase this amount, but not put in a smaller quantity._ | ![Screenshot_2020-11-27_at_14.07.41](/uploads/d28210e54e4ea2b5e5cc49aba87b2395/Screenshot_2020-11-27_at_14.07.41.png)|

## Proposal

To make this clear to the user, we'll add this copy as description text to the field (not sure if the form field component we use in CDot puts the description text above or below the field itself, but either is fine):

`This number must be 10 (your owed seats) or more.`

----

Considerations for possible errors:
- the group and subscription are no longer linked because the group has been deleted
- the group and subscription are no longer linked because the gitlab.com user no longer has Owner access to the group

If the check fails, should we error out or should we allow them to update the subscription, without the connection to gitlab.com?",2
71083688,2020-09-13 23:50:11.094,Consume Countries GraphQL Endpoint,"As a simple test case, consume the new Countries GraphQL endpoint in the FE",3
71083587,2020-09-13 23:36:57.216,Create Namespace GraphQL endpoint,Create an authenticated GraphQL API which returns the namespaces associated with the current customer,3
71083285,2020-09-13 23:07:25.400,Create Countries GraphQL endpoint,"This endpoint can be unauthenticated. 

```graphql
   query {
      country(id: ""USA"") {
        id
        states {
            id
            code
            name
        }
      }
   }
   ```",2
71083211,2020-09-13 22:56:35.881,Add GraphQL Authentication,"The common way for authentication is by tokens. Luckily, we have `authentication_token` for both models `Admin` and `Customers`. We can use either classic method with sending signed cookies or modify our sign in process to use tokens. For MVC I propose the first way: the classic method with signed cookies.",2
71083181,2020-09-13 22:53:51.674,"Create ""Do Nothing"" test GraphQL endpoint",Create an GraphQL which does nothing to test the infrastructure on the FE and BE.,2
71083176,2020-09-13 22:53:21.711,Add GraphQL NPM Packages to Customers Portal,"The following NPM packages need to be added to support graphQL

- [apollo-client](https://www.npmjs.com/package/apollo-client)
- [apollo-cache-inmemory](https://www.npmjs.com/package/apollo-cache-inmemory)
- [vue-apollo](https://www.npmjs.com/package/vue-apollo)
- [jest-transform-graphql](https://www.npmjs.com/package/jest-transform-graphql)",1
71083171,2020-09-13 22:52:44.174,Add GraphQL Gems to Customer Portal,"The following gems need to be added to Customers Portal to support GraphQL

- [graphql](https://rubygems.org/gems/graphql)
- [graphiql-rails](https://rubygems.org/gems/graphiql-rails)
- [graphql-docs](https://rubygems.org/gems/graphql-docs)",1
71017226,2020-09-11 09:11:39.245,Upgrade success page headings need more spacing,"<!-- The first four sections: ""Problem to solve"", ""Intended users"", ""User experience goal"", and ""Proposal"", are strongly recommended, while the rest of the sections can be filled out during the problem validation or breakdown phase. However, keep in mind that providing complete and relevant information early helps our product team validate the problem and start working on a solution. -->

### Problem to solve

At the moment, there is too little space between the top two headings of the upgrade success page. We should ensure that our UI is consistent with the Pajamas UX guidelines.

![Screenshot_2020-09-11_at_12.03.52](/uploads/38c37e3eba4fe695925d474f9bfa1b67/Screenshot_2020-09-11_at_12.03.52.png)

### Intended users

<!-- Who will use this feature? If known, include any of the following: types of users (e.g. Developer), personas, or specific company roles (e.g. Release Manager). It's okay to write ""Unknown"" and fill this field in later.

Personas are described at https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/

* [Cameron (Compliance Manager)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#cameron-compliance-manager)
* [Parker (Product Manager)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#parker-product-manager)
* [Delaney (Development Team Lead)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#delaney-development-team-lead)
* [Presley (Product Designer)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#presley-product-designer)
* [Sasha (Software Developer)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#sasha-software-developer)
* [Devon (DevOps Engineer)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#devon-devops-engineer)
* [Sidney (Systems Administrator)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#sidney-systems-administrator)
* [Sam (Security Analyst)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#sam-security-analyst)
* [Rachel (Release Manager)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#rachel-release-manager) 
* [Alex (Security Operations Engineer)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#alex-security-operations-engineer)
* [Simone (Software Engineer in Test)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#simone-software-engineer-in-test)
* [Allison (Application Ops)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#allison-application-ops) 
* [Priyanka (Platform Engineer)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#priyanka-platform-engineer)
* [Dana (Data Analyst)](https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/#dana-data-analyst)
-->

### User experience goal

<!-- What is the single user experience workflow this problem addresses? 
For example, ""The user should be able to use the UI/API/.gitlab-ci.yml with GitLab to <perform a specific task>""
https://about.gitlab.com/handbook/engineering/ux/ux-research-training/user-story-mapping/ --> 


### Proposal

<!-- How are we going to solve the problem? Try to include the user journey! https://about.gitlab.com/handbook/journeys/#user-journey -->

### Further details

<!-- Include use cases, benefits, goals, or any other details that will help us understand the problem better. -->

### Permissions and Security

<!-- What permissions are required to perform the described actions? Are they consistent with the existing permissions as documented for users, groups, and projects as appropriate? Is the proposed behavior consistent between the UI, API, and other access methods (e.g. email replies)?-->

### Documentation

<!-- See the Feature Change Documentation Workflow https://docs.gitlab.com/ee/development/documentation/workflow.html#for-a-product-change

* Add all known Documentation Requirements in this section. See https://docs.gitlab.com/ee/development/documentation/feature-change-workflow.html#documentation-requirements
* If this feature requires changing permissions, update the permissions document. See https://docs.gitlab.com/ee/user/permissions.html -->

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

### What does success look like, and how can we measure that?

<!-- Define both the success metrics and acceptance criteria. Note that success metrics indicate the desired business outcomes, while acceptance criteria indicate when the solution is working correctly. If there is no way to measure success, link to an issue that will implement a way to measure this. -->

### What is the type of buyer?

<!-- What is the buyer persona for this feature? See https://about.gitlab.com/handbook/marketing/product-marketing/roles-personas/buyer-persona/
In which enterprise tier should this feature go? See https://about.gitlab.com/handbook/product/pricing/#four-tiers -->

### Is this a cross-stage feature?

<!-- Communicate if this change will affect multiple Stage Groups or product areas. We recommend always start with the assumption that a feature request will have an impact into another Group. Loop in the most relevant PM and Product Designer from that Group to provide strategic support to help align the Group's broader plan and vision, as well as to avoid UX and technical debt. https://about.gitlab.com/handbook/product/#cross-stage-features -->

#### Conditional release requirements

<!-- Are there any conditional release requirements which prevent us from releasing to the entire user population? For example, the new feature can only be available to new users and users at renewal.
* Is this feature `opt-in`, `opt-out`, or `required for all users`?
* Is a [feature flag](https://docs.gitlab.com/ee/development/feature_flags/index.html) needed for this feature? -->

#### How should this feature impact existing customers?
<!-- Describe what the experience for existing customers should be in light of the release of this new feature. -->

#### Billing constraints or considerations 
<!-- Complete this section for new products/services only._

* What is the billing frequency of this product? (monthly/annual/one-time)
    * If monthly, what is the desired bill date?
* How are mid-month purchases handled? 
* Should the product renew annually?
* Can the product be cancelled?
* Should this product related to GitLab subscriptions? (ex. Starter/Bronze)
* Can this be sold via the Customers Portal?
* Can this be sold via sales-assisted order forms?
* Does this product require any Zuora modifications in order to bill?
* What is the refund policy of this product?
* Is a new SKU needed for this product/service?
   * If yes, please link to SKU issue request (in customers portal issue tracker):
* Can customers downgrade this product/service?
     If yes, can it be done at any time or only at renewal?
* Are there any payment method exceptions for this product/service? (ex. must be paid via credit card) -->

### Links / references",1
71014255,2020-09-11 08:10:59.527,Replace newSubscription with purchaseSubscription,"The following discussion from !1941 should be addressed:

- [ ] @dbodicherla started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1941#note_410733506):  (+3 comments)

    > **question:** We seem to be doing a very similar thing within the `createOrUpdateSubscription` method. Do we plan to update that method eventually or are these two different code flows?

    > So after some digging, I found out that changing namespace and addon transactions use the `createOrUpdateSubscription` method which hits the same endpoint as `newSubscription` and I believe the payloads look same as well.

### Update

After a chat with @rhardarson, he told me that we should be used `purchaseSubscription` instead of `newSubscription`.

Using `newSubscription` does not wait for the new credit card to be stored and processed before continue the request to purchase the subscription.

Another interesting thing he mentioned:

> When purchasing a subscription for an account without any previous purchases (e.g. CI minutes) we'll be hitting the endpoint using `PUT` while we'll use `POST` for purchasing a subscription without any previous purchases.",2
70977546,2020-09-10 12:22:38.390,Error in feature VCR cassette for upgrading a subscription,"While working on https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1281, I noticed that a VCR cassette included a 500 code for a pending migration. As this is not supposed to be there, let's fix it by rerecording that VCR cassette.

https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/ac07762fec2ee9bc0dff55dbd19f98e9979a1272/spec/fixtures/vcr_cassettes/upgrading_subscriptions/with_pajamas_upgrade_subscription_enabled/successfully_upgrades_plan.yml#L2211:
```
string: ""ActiveRecord::PendingMigrationError at /api/v4/namespaces/70\n============================================================\n\n>
        Migrations are pending. To resolve this issue, run:\n\n        rails db:migrate
        RAILS_ENV=development\n\n\n\nlib/gitlab/middleware/basic_health_check.rb,
        line 25\n----------------------------------------------------\n\n``` ruby\n
        \  20         def initialize(app)\n   21           @app = app\n   22         end\n
        \  23   \n   24         def call(env)\n>  25           return @app.call(env)
        unless env['PATH_INFO'] == HEALTH_PATH\n   26   \n   27           # We should
        be using ActionDispatch::Request instead of\n   28           # Rack::Request
        to be consistent with Rails, but due to a Rails\n   29           # bug described
        in\n   30           # https://gitlab.com/gitlab-org/gitlab-foss/issues/58573#note_149799010\n```\n\nApp
        backtrace\n-------------\n\n - lib/gitlab/middleware/basic_health_check.rb:25:in
        `call'\n - lib/gitlab/middleware/handle_ip_spoof_attack_error.rb:25:in `call'\n
        - lib/gitlab/middleware/request_context.rb:23:in `call'\n - config/initializers/fix_local_cache_middleware.rb:9:in
        `call'\n - lib/gitlab/middleware/static.rb:11:in `call'\n - lib/gitlab/webpack/dev_server_middleware.rb:27:in
        `perform_request'\n - lib/gitlab/metrics/requests_rack_middleware.rb:60:in
        `call'\n - lib/gitlab/middleware/release_env.rb:12:in `call'\n\nFull backtrace\n--------------\n\n
        - activerecord (6.0.3.1) lib/active_record/migration.rb:586:in `check_pending!'\n
        - activerecord (6.0.3.1) lib/active_record/migration.rb:564:in `call'\n -
        actionpack (6.0.3.1) lib/action_dispatch/middleware/callbacks.rb:27:in `block
        in call'\n - activesupport (6.0.3.1) lib/active_support/callbacks.rb:101:in
        `run_callbacks'\n - actionpack (6.0.3.1) lib/action_dispatch/middleware/callbacks.rb:26:in
        `call'\n - actionpack (6.0.3.1) lib/action_dispatch/middleware/executor.rb:14:in
        `call'\n - actionpack (6.0.3.1) lib/action_dispatch/middleware/actionable_exceptions.rb:17:in
        `call'\n - better_errors (2.7.1) lib/better_errors/middleware.rb:84:in `protected_app_call'\n
        - better_errors (2.7.1) lib/better_errors/middleware.rb:79:in `better_errors_call'\n
        - better_errors (2.7.1) lib/better_errors/middleware.rb:57:in `call'\n - actionpack
        (6.0.3.1) lib/action_dispatch/middleware/debug_exceptions.rb:32:in `call'\n
        - actionpack (6.0.3.1) lib/action_dispatch/middleware/show_exceptions.rb:33:in
        `call'\n - lib/gitlab/middleware/basic_health_check.rb:25:in `call'\n - railties
        (6.0.3.1) lib/rails/rack/logger.rb:37:in `call_app'\n - railties (6.0.3.1)
        lib/rails/rack/logger.rb:26:in `block in call'\n - activesupport (6.0.3.1)
        lib/active_support/tagged_logging.rb:80:in `block in tagged'\n - activesupport
        (6.0.3.1) lib/active_support/tagged_logging.rb:28:in `tagged'\n - activesupport
        (6.0.3.1) lib/active_support/tagged_logging.rb:80:in `tagged'\n - railties
        (6.0.3.1) lib/rails/rack/logger.rb:26:in `call'\n - sprockets-rails (3.2.1)
        lib/sprockets/rails/quiet_assets.rb:13:in `call'\n - actionpack (6.0.3.1)
        lib/action_dispatch/middleware/remote_ip.rb:81:in `call'\n - lib/gitlab/middleware/handle_ip_spoof_attack_error.rb:25:in
        `call'\n - lib/gitlab/middleware/request_context.rb:23:in `call'\n - request_store
        (1.5.0) lib/request_store/middleware.rb:19:in `call'\n - actionpack (6.0.3.1)
        lib/action_dispatch/middleware/request_id.rb:27:in `call'\n - rack (2.0.9)
        lib/rack/method_override.rb:22:in `call'\n - rack (2.0.9) lib/rack/runtime.rb:22:in
        `call'\n - rack-timeout (0.5.2) lib/rack/timeout/core.rb:123:in `block in
        call'\n - rack-timeout (0.5.2) lib/rack/timeout/support/timeout.rb:19:in `timeout'\n
        - rack-timeout (0.5.2) lib/rack/timeout/core.rb:122:in `call'\n - config/initializers/fix_local_cache_middleware.rb:9:in
        `call'\n - actionpack (6.0.3.1) lib/action_dispatch/middleware/executor.rb:14:in
        `call'\n - actionpack (6.0.3.1) lib/action_dispatch/middleware/static.rb:126:in
        `call'\n - lib/gitlab/middleware/static.rb:11:in `call'\n - lib/gitlab/webpack/dev_server_middleware.rb:27:in
        `perform_request'\n - rack-proxy (0.6.0) lib/rack/proxy.rb:57:in `call'\n
        - rack (2.0.9) lib/rack/sendfile.rb:111:in `call'\n - actionpack (6.0.3.1)
        lib/action_dispatch/middleware/host_authorization.rb:82:in `call'\n - lib/gitlab/metrics/requests_rack_middleware.rb:60:in
        `call'\n - sentry-raven (2.9.0) lib/raven/integrations/rack.rb:51:in `call'\n
        - railties (6.0.3.1) lib/rails/engine.rb:527:in `call'\n - railties (6.0.3.1)
        lib/rails/railtie.rb:190:in `method_missing'\n - lib/gitlab/middleware/release_env.rb:12:in
        `call'\n - rack (2.0.9) lib/rack/urlmap.rb:68:in `block in call'\n - rack
        (2.0.9) lib/rack/urlmap.rb:53:in `call'\n - gitlab-puma (4.3.3.gitlab.2) lib/puma/configuration.rb:228:in
        `call'\n - gitlab-puma (4.3.3.gitlab.2) lib/puma/server.rb:691:in `handle_request'\n
        - gitlab-puma (4.3.3.gitlab.2) lib/puma/server.rb:481:in `process_client'\n
        - gitlab-puma (4.3.3.gitlab.2) lib/puma/server.rb:335:in `block in run'\n
        - gitlab-puma (4.3.3.gitlab.2) lib/puma/thread_pool.rb:138:in `block in spawn_thread'\n\n""

```",1
70964515,2020-09-10 08:00:03.884,Be explicit in plan order when upgrading subscriptions,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

We're iterating over available plans to upgrade to. However we're not forcing any order.

This makes for a discrepancy between environments

| Order in production | Order in development and on staging |
| ------ | ------ |
| ![](https://gitlab.com/gitlab-org/customers-gitlab-com/uploads/5b75d901a6cb2581106dffac67aad176/Screenshot_2020-09-07_at_10.24.49.png) | ![](https://gitlab.com/gitlab-org/customers-gitlab-com/uploads/32437d3ed5479e134702beb8ab62243a/Screenshot_2020-09-09_at_07.38.37.png) |


### Proposal

We should be explicit on the order of the plans. Let's make a decision and enforce it with code.",2
70953275,2020-09-09 23:58:08.062,Sentry capture for certain user actions is malformed,"### Summary
User actions like add seats and change namespace wires malformed message to Sentry (check the screenshot)

### Steps to reproduce
No real steps but check the `Extra steps` section in the Sentry issue https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1774487/?query=is%3Aunresolved%20user%3A129432

### What is the current *bug* behavior?

(What actually happens)

### What is the expected *correct* behavior?

(What you should see instead)

### Relevant logs and/or screenshots
![image](/uploads/c3061188c63cc88f22e96363836244d5/image.png)

### Workarounds

(Ways to get around the issue)

### Reported examples

1.
1.
1.

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",2
70946860,2020-09-09 18:59:31.115,Follow-up: change admin history table dates format,"This is a follow-up to https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1009#note_410094661

### Problem

The admin views are too congested.


### Proposal

@timnoah [said in the main issue's MR](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/858#note_269208798):

> As this is quite a congested table to relieve some of the pressure on wrapping headers could we change the date formatting on **created at** and **updated at** to `MM DD, YYYY hh:mm` Example, **Dec 20, 2019 15:34**?

@aalakkad said: 

> I'm not sure how easy it is to do that in rails_admin, for a quick search I found [a way](https://stackoverflow.com/a/32631342) to configure the date format, but I can't be sure if it has any implications for other parts of the system.

An update to the List of Customers view was made in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1009, this follow-up issue is to make a similar change in the History view.",2
70946762,2020-09-09 18:57:01.807,Spike: Investigate using OriginalId for Zuora Subscriptions,"### Problem

In Zuora, Subscriptions ID change throughout the life of the subscription as amendments are made.  We used to track subscriptions in the Customer Portal primarily using subscription IDs but changed to preferring the subscription name as the ID would change.  We've discovered an attribute called `OriginalId` which is advertised an immutable id for the life of the subscription.  This idea was raised as part of [this discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1926#note_410082430).

More information in the [Zuora Docs](https://knowledgecenter.zuora.com/Billing/Subscriptions/Subscriptions/A_Subscription_Introduction).

### Proposal

We should look into using this `OriginalId` to track subscriptions in the Portal instead of using subscription name or id.  If this is indeed a fixed ID, it would simplify logic in our system that does lookup by name or id.

If it looks like it will work as we expect, create an epic or issues to outline a transition plan to using the new `OriginalId` attribute",2
70753029,2020-09-04 21:45:18.849,Follow-up from Web Direct Opportunities Need Quote and Product Data,"## Summary

As a follow-up from work related to #911 , we need to make the following adjustments:

1. [x] Add Country and State to Salesforce Contacts created during checkout. This is required for Zuora and should use the same logic we asked for when creating accounts.
     - Location: https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/services/create_salesforce_contact_service.rb#L21
     - Logic used at Account Level: https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/services/create_salesforce_account_service.rb#L61
1. [x] Set Quantity of seats in Quote Rate Plan Charge equal to the Quantity of the Order. We had set it to 1 for testing. Lets expand it to the full value.
     - Location: https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/services/salesforce/create_quote_rate_plan_charge_service.rb#L71
1. [x] Set additional fields on Quote with on hand subscription Data.
     - Location: https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/services/salesforce/create_quote_service.rb#L45
     - Please set `zqu__Hidden_Subscription_Name__c` to the Zuora Subscription Name Please set `zqu__ZuoraSubscriptionID__c` to the Zuora Subscription ID (Current ID, NOT Original ID)
1. [x] Append ""Type"" data down to more objects based on the Amendment Type of the Order or Opportunity Type of the Opportunity created (those are all ready tied together, use which ever is easiest). See the following Chart.

|  | zqu__SubscriptionType__c | zqu__Type__c | zqu__AmendmentType__c |
|--|--------------------------|--------------|-----------------------|
| Opportunity Type | Quote | Quote Amendment | Quote Rate Plan |
| -------------------------- | -------------------- | ----------------------- | ----------------- |
| New Business | New Subscription | NewProduct | NewProduct |
| Add-On Business | Amend Subscription | UpdateProduct | UpdateProduct |
| Renewal | Renew Subscription | Renewal | Renewal |",2
70750153,2020-09-04 19:27:52.333,UX: Prevent deletion of groups/namespaces when they have a subscription,"This is the UX design issue for https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1879

UX ask: we need placement and text for the reason why the ability to delete the group is removed.",1
70744173,2020-09-04 16:04:35.076,Investigate missing props in subscriptions list component,"### Problem

I noticed in `subscription_list.vue` we're using `subscription` component with 3 missing props.

![Screen_Shot_2020-09-04_at_19.00.23](/uploads/be218db5d0196cd1e12c646713b2c78a/Screen_Shot_2020-09-04_at_19.00.23.png)

### Proposal

We should either add the missing props or update the `subscription` component props to be optional.

### Result

Consistent code base and fewer potential errors in the future.

### Next steps (if any)

Schedule for development

### How will we measure success?",2
70737460,2020-09-04 13:24:09.199,Refactor plans setup with keys(POC),"The following discussion from !1893 should be addressed:

- [ ] @dstull started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1893#note_406260952):  (+3 comments)

    > **thought (non-blocking):** 
    > 
    > This is starting to feel like it doesn't scale too well as we keep adding to it.
    > 
    > A possible alternative would be to add a table to store all of these `product_rate_plan_id` along with a `type` column to the table and leverage that to determine the actual plan zuora is sending back - by changing the way we store this data for retrieval, we could simplify things here a bit.
    > 
    > For instance:
    > 
    > Adding a table with `product_rate_plan_id` as `id` and `type` and `year`(1, 2, 3 or 5 if needed).  We could then have STI models where we have `StarterRatePlan`, `UltimateRatePlan`, etc... with a `RatePlan` model that base off of this one - we could also create multiple tables if wanted instead of STI and have a similar concept.
    > 
    > 
    > We then would be able simplify the case statement you have below - probably change the concept a bit more here by leveraging something like `RatePlan.find_by(id: product_rate_plan_id).type`, where type would be `starter`, `premium`, etc
    > 
    > food for thought as an alternative here...could likely also achieve similar code simplification perhaps be a slight restructure of the plans in the `application.yml` and then leverage includes and other enumerable tools.",3
70694537,2020-09-03 15:27:44.778,"Follow-up from ""Add UI for adding seats to a dotcom subscription""","The following discussion from !1830 should be addressed:

In a review comment for https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1830#note_406673174 it was brought up that the partial names that are rendered in the `subscriptions#edit` action can be misleading. Therefore renaming them would make their purpose clearer when reading them.

Let's rename these two partials in `app/views/subscriptions/`:

* `edit_ee_subscription` -> `add_more_seats`
* `edit_gitlab_com_subscription` -> `change_linked_namespace`",1
70691136,2020-09-03 14:54:36.665,Upgrade PG to v12 (or latest version matching GitLab),"### Problem

In a [recent Slack conversation](https://gitlab.slack.com/archives/CMJ8JR0RH/p1599142834248400), the idea of upgrading the PG version for CI was raised.  However, it would not be compatible with staging and production.  In fact, staging and production (v9.5) are already out of sync with CI (v10).

### Proposal

We should upgrade PG to at least v12 (or the latest version GitLab is using) and ensure all environments and all documentation are updated accordingly.

### Result
More modern version of PG with consistency across environments.",2
70665190,2020-09-03 05:51:26.639,"Follow-up from ""Disable sync to GitLab for self-managed subs""","The following discussion from !1894 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1894#note_406268457): 

    > **Suggestion (non-blocking):** In a future iteration, we could probably break this out into a separate method to reduce the amount of conditionals and nesting in this method.  It's very minor but might help with readability.

Move code regarding syncing the plan to GitLab in the `Gitlab::HostedPlans::UpgradeSubscriptionPlanService` to an extra method.",1
70649695,2020-09-02 19:03:33.639,Resolve dependent destroy exceptions,"The following discussion from !1889 should be addressed:

- [ ] @dstull started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1889#note_405612134):  (+2 comments)

    > I believe we should resolve these - perhaps in a follow up.",2
70645822,2020-09-02 17:32:11.579,Align migration helper dir structure with GitLab's,"The following discussion from !1879 should be addressed:

- [ ] @dstull started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1879#note_404886055): 

    > we should try and move this and the migration helper code under a dir structure that more closely mirrors where we need to sync it from for ease of updating - `spec/lib/gitlab/database/migrations_helper_spec.rb` and `lib/gitlab/database/migrations_helper.rb`. - I'll spawn a follow up as well once MR is reviewed a bit.",1
70645693,2020-09-02 17:27:58.672,"Add ""Max Seats Used"" to the Customers Portal Admin view","## Summary

Currently we display `Seats currently in use` for SaaS subscriptions in the Customers Portal admin view on the `GitLab Groups` page. Sales needs to view the `Max Seats Used` as well. 

Let's add this to the view next to the `Seats Currently in Use` column.

![max](/uploads/66c79aaead68d251a78039d69b85bfde/max.png)",3
70644881,2020-09-02 17:06:54.061,Create test plan for Web Direct Opportunities Need Quote and Product Data,"## Summary

As https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1379 and https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1380 have closed, we need to test the integration prior to shipping to production.

[These action](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/911#note_406203237) are the next steps to test in order to gain approval for deploying to production:

* [ ] Clone [customers.gitlab.com](https://gitlab.com/gitlab-org/customers-gitlab-com)
* [ ] Work with @vshumilo and @cwiesner to get Ruby and the IRB working with customers, please tell us if there is existing documentation
* [ ] Point your local environment at our Sandbox, using your creds (so we can tell our tests apart from others)
* [ ] Put together a test script of the IRB commands you are firing and then checking the results in Salesforce sandbox.
* [ ] **Stretch Goal:** Be able to do a complete purchase via the Portal App running locally and verify results.

Noting that @jpetr will be the lead from the SFDC side.",2
70644848,2020-09-02 17:05:26.637,Refactor CreateSalesforceLeadService code paths to be more declarative,"Do not trigger off of merge 2 times.  We know when we call this class what 'type' we are, but then we try to 'figure it out' again inside the class.

The following discussion from !1879 should be addressed:

- [ ] @dstull started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1879#note_404893174):  (+3 comments)

    > I marked this one as a `todo` because I see why it is needed in the current condition of this class - However, I think this could be improved from the code side.
    > 
    > For instance, this seems to be called only a handful of places and could be broken up into 2-3 classes instead of one and each called from the outside correctly - that would greatly reduce the switching/conditional logic in the current class and therefore simplify the tests and eventually make this logic unneeded....
    > 
    > I'll generate a follow up issue once this has passed through reviews a bit more.",2
70642663,2020-09-02 16:04:57.500,Discussion: Why do we reset the subscription start/end date when we downgrade someone to free?,"# Overview
As part of the .com downgrade effort, we have a banner that is intended to display if the customer is past their subscription end date AND on a free plan. 

During testing we realized that the downgrade code initiated through Zuora as well as the Customers Portal reset the subscription start date to the date of the downgrade and clears out the end date. 


We would like to understand why this is the case and if there would be any unforeseen consequences if we were to change it. 

Please discuss. 

CC @amandarueda @chris_baus @jameslopez @pcalder @jejacks0n @jayswain",1
120526365,2022-12-16 10:59:18.708,Add CI mins product details section in subscription-v2 component,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->
### Proposal
Similar to https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5379, create a new section to show CI minutes product details.  
![image](/uploads/0fc3203cf90b9c8068a518b04fb61f01/image.png)

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?

Design: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3916",2
120525854,2022-12-16 10:48:03.260,Add storage product details section in subscription-v2 component,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->
### Proposal
Similar to https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5379, create a new section to show storage product details.  
![image](/uploads/0639894b42be02fbd4652fb6434c17f5/image.png)

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?

Design: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3916",2
120525080,2022-12-16 10:30:45.915,Add main product details section in subscription-v2 component,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->
### Proposal
Add the section to show main product details in the `subscription-v2` component that will be created in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5376. This section will be used to display the main product details only (and not addon products like CI mins and storage since they have a slightly different UI).
![image](/uploads/09e1d83139f1ffbdc4556de0fbb3093e/image.png)

Design: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3916

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",2
120515941,2022-12-16 07:59:24.426,Add subscription level details to new subscription card for ramp subscriptions,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->
### Proposal
Add subscription level details section as per the [new designs](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3916/) for the subscription card for ramp subscriptions.  
Note: The side menu bar to modify the subscription is out of scope of this issue and will be tackled in a separate issue.
![image](/uploads/07b664d40eb1063bb68cc441307fa8c9/image.png)

The new component should be behind the `display_ramp_subscriptions` feature flag which will be added in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5373.

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)
| Task | MR | Status |
| ------ | ------ |------ |
|   Introduce card & storybook     | https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6244       | ~""workflow::complete""    | 
| Tooltip content | https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6269 | ~""workflow::complete"" 
|    UI tweaks    |    https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6318    | ~""workflow::complete"" | 
### How will we measure success?

**Design:** https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3916/ and https://www.figma.com/file/U9JvYVy1Ls9IKrrPw1vt38/Subscription-management?node-id=239%3A10609&t=RFsPIuAGNurLWCJB-0",3
120515591,2022-12-16 07:50:27.754,Add ramp details in SubscriptionPresenter,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
Currently the ramp details are not sent to the frontend under the products.  
![image](/uploads/ea5af87826e42aaecbf911d30d707916/image.png)

### Proposal
Add a new attribute `ramps` for each subscription in `subscription_presenter.rb` which will return the list of ramps in that subscription. Details needed in every ramp are - 
1. Start date
2. End Date
3. Quantity
4. Price per unit
5. Product Name
6. Rate Plan Id

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",3
120514935,2022-12-16 07:29:10.540,Add `is_ramp_subscription` flag in SubscriptionPresenter,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Proposal
Add `is_ramp_subscription` flag in `subscription_presenter.rb` which can be used on the frontend to identify whether the subscription is a ramp subscription. 


<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",1
120512343,2022-12-16 05:46:06.579,[Feature flag] Create new feature flag `display_ramp_subscriptions`,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
Create a [new feature flag](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags) `display_ramp_subscriptions` which can be used to control the display of the [new card design](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3916/) for ramp subscriptions.  

Rollout issue: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5385

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",1
120505940,2022-12-15 23:31:09.511,[FF cleanup] Subscription update Preview: use_orders_api_to_preview_amendment,"### Problem

The scope of this issue is to perform cleanup tasks for FF `use_orders_api_to_preview_amendment` ([original rollout issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4774)).

### Proposal

Perform `Release the feature` tasks:

* [ ] Create a merge request to remove `<feature-flag-name>` feature flag
  * [ ] Remove all references to the feature flag from the codebase
* [ ] Ensure that the cleanup MR has been deployed to both staging and production
* [ ] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
* [ ] Ensure production environment is still working as expected
* [ ] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
* [ ] Close this issue.",1
120505915,2022-12-15 23:28:50.197,[FF cleanup] Subscription upgrade Preview: use_orders_api_to_preview_upgrade,"### Problem

The scope of this issue is to perform cleanup tasks for FF `use_orders_api_to_preview_upgrade` ([original rollout issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5051)).

### Proposal

Perform `Release the feature` tasks:

* [x] Create a merge request to remove `<feature-flag-name>` feature flag
  * [x] Remove all references to the feature flag from the codebase
* [x] Ensure that the cleanup MR has been deployed to both staging and production
* [x] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
* [x] Ensure production environment is still working as expected
* [x] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
* [x] Close this issue.",1
120505670,2022-12-15 23:15:24.020,"[FF cleanup] Auto renewal, Reconciliation Preview and Order Preview GraphQL endpoint","### Problem

The scope of this issue is to perform cleanup tasks for  Auto renewal, Reconciliation Preview and Order Preview GraphQL endpoint feature flags noted below:

- [x] `use_orders_api_to_preview_quoted_invoice_amount` ([link to original rollout issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5068)) - [Cleanup MR](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6254)
- [x] `use_orders_api_preview_in_upcoming_saas_mailer` ([link to original rollout issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5070)) - [Cleanup MR](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6266)
- [x] `use_orders_api_in_preview_graphql_resolver ` ([link to original rollout issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5072)) - [Cleanup MR](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6278)

### Proposal

Perform `Release the feature` tasks:

1. **FF `use_orders_api_to_preview_quoted_invoice_amount`**

* [x] Create a merge request to remove `<feature-flag-name>` feature flag
  * [x] Remove all references to the feature flag from the codebase
* [x] Ensure that the cleanup MR has been deployed to both staging and production
* [x] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
* [x] Ensure production environment is still working as expected
* [x] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
* [ ] Close this issue.

2. **FF `use_orders_api_preview_in_upcoming_saas_mailer`**

* [x] Create a merge request to remove `<feature-flag-name>` feature flag
  * [x] Remove all references to the feature flag from the codebase
* [x] Ensure that the cleanup MR has been deployed to both staging and production
* [x] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
* [x] Ensure production environment is still working as expected
* [x] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
* [ ] Close this issue.

3. **FF `use_orders_api_in_preview_graphql_resolver`**

* [x] Create a merge request to remove `<feature-flag-name>` feature flag
  * [x] Remove all references to the feature flag from the codebase
* [x] Ensure that the cleanup MR has been deployed to both staging and production
* [x] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
* [x] Ensure production environment is still working as expected ([related log](https://console.cloud.google.com/logs/query;cursorTimestamp=2023-01-12T18:37:45.384Z;query=%22OrderPreview%22%0Atimestamp%3D%222023-01-12T18:37:45.384Z%22%0AinsertId%3D%22wha5a5fctxmgw%22?project=gitlab-subscriptions-prod))
* [x] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
* [ ] Close this issue.",3
120504603,2022-12-15 22:46:54.939,[FF cleanup] Reconciliation: use_orders_api_reconciliation_workflow,"### Problem

The scope of this issue is to perform cleanup tasks for FF `use_orders_api_reconciliation_workflow` [QSR original rollout issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5066)).

### Proposal

Perform `Release the feature` tasks:

* [x] Create a merge request to remove `<feature-flag-name>` feature flag
  * [x] Remove all references to the feature flag from the codebase
* [x] Ensure that the cleanup MR has been deployed to both staging and production
* [x] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
* [x] Ensure production environment is still working as expected
* [x] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
* [x] Close this issue.",1
120504584,2022-12-15 22:46:19.822,[FF cleanup] Auto renewal: use_orders_api_auto_renew_workflow,"### Problem

The scope of this issue is to perform cleanup tasks for FF `use_orders_api_auto_renew_workflow` ([AR original rollout issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5064).

### Proposal

Perform `Release the feature` tasks:

* [x] Create a merge request to remove `<feature-flag-name>` feature flag
  * [x] Remove all references to the feature flag from the codebase
* [x] Ensure that the cleanup MR has been deployed to both staging and production
* [x] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
* [x] Ensure production environment is still working as expected
* [x] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
* [x] Close this issue.",1
120504502,2022-12-15 22:43:01.905,[FF cleanup] Subscription update: use_orders_api_subscription_update_workflow,"### Problem

The scope of this issue is to perform cleanup tasks for FF `use_orders_api_subscription_update_workflow` ([original rollout issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4775)).

### Proposal

Perform `Release the feature` tasks:

* [x] Create a merge request to remove `<feature-flag-name>` feature flag
  * [x] Remove all references to the feature flag from the codebase
* [x] Ensure that the cleanup MR has been deployed to both staging and production
* [x] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
* [x] Ensure production environment is still working as expected (verified [logs](https://console.cloud.google.com/logs/query;query=resource.type%3D%22gce_instance%22%0A%22Zuora::Orders::OrderManagerService%22;timeRange=2023-03-08T15:43:43.199Z%2F2023-03-09T19:33:43.199Z;cursorTimestamp=2023-03-09T19:29:09.244Z?project=gitlab-subscriptions-prod) for subscription update)
* [x] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
* [x] Close this issue.",1
120504359,2022-12-15 22:37:15.224,[FF cleanup] Subscription upgrade: use_orders_api_upgrade_workflow,"### Problem

The scope of this issue is to perform cleanup tasks for FF `use_orders_api_upgrade_workflow` ([original rollout issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5050)).

### Proposal

Perform [`Release the feature`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5050#release-the-feature) tasks:

* [x] Create a merge request to remove `<feature-flag-name>` feature flag
  * [x] Remove all references to the feature flag from the codebase
* [x] Ensure that the cleanup MR has been deployed to both staging and production
* [x] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
* [x] Ensure production environment is still working as expected
* [x] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
* [x] Close this issue.",1
120504112,2022-12-15 22:30:42.504,[FF cleanup] New subscription preview: use_orders_api_preview_subscription,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

The scope of this issue is to perform cleanup tasks for FF `use_orders_api_preview_subscription` ([original rollout issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4648)).

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Perform [`Release the feature`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4648#release-the-feature) tasks:

* [x] Create a merge request to remove `<feature-flag-name>` feature flag
  * [x] Remove all references to the feature flag from the codebase
* [x] Ensure that the cleanup MR has been deployed to both staging and production
* [x] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
* [x] Ensure production environment is still working as expected
* [x] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
* [x] Close this issue.

### Result

### Next steps (if any)

### How will we measure success?",2
120442288,2022-12-15 02:19:55.811,Improve the spec file spec/workers/workato/create_lead_worker_spec.rb,"
There are two improvments suggested during the MR review:
1. https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5984#note_1209853648
> question: Do we actually care about the return value for this worker?  I think this is fine to test, but if we don't care what it returns, then maybe it's enough to assert that it executes the service.

2. https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5984#note_1209861342
> If it is necessary, do we have a test covering this demonstrating why we need to do this?

Proposal:
  Improve the spec file spec/workers/workato/create_lead_worker_spec.rb to address the above suggestions.",1
120440606,2022-12-15 00:38:46.454,Upgrading from Starter to Premium for above 25 seats does not display error message,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you're about to submit isn't a duplicate.

Do not include confidential information!
--->

# Bug

When upgrading Starter to Premium as part of Renewal, and the number of seats is greater than 25, the subscription card is no longer in view and the message `Could not get the data properly. If the problem persists, contact support.` is displayed:

https://www.loom.com/share/ff16c192dd4343a5a51d3cf7c52fe5d6

[Logs](https://console.cloud.google.com/logs/query;cursorTimestamp=2022-12-15T00:32:47.977Z;query=%22A-S00174606%22%0Atimestamp%3D%222022-12-15T00:32:47.977Z%22%0AinsertId%3D%221gqh0gdf2gqgbx%22;timeRange=PT15M?project=gitlab-subscriptions-staging) indicate exceeded 25 seats maximim:

![Screen_Shot_2022-12-14_at_6.43.39_PM](/uploads/49ff0d3d1db6c1ac3d6ce3fed917b5ac/Screen_Shot_2022-12-14_at_6.43.39_PM.png)

When I tried locally, I got the following error message. I could have a few FF disabled, so I'm not sure if this is the expected behavior.

![Screen_Shot_2022-12-14_at_6.40.09_PM](/uploads/5a575efcebc1f765f611dad96788e2f4/Screen_Shot_2022-12-14_at_6.40.09_PM.png)

25 is the max. seat limit, not sure if the expected behavior shows a better error message with the subscription card. Since the FF `use_orders_api_to_preview_amendment ` is globally enabled, I did not disable on staging and test it out the behavior on staging.

## Summary

(Summarize the bug encountered concisely)

Compare with Amend API workflow, and ensure both behave the same in EoA upgrade subscription preview.

## Steps to reproduce

1. Purchase Starter self managed subscription with end date in the last 3 days ([example request](https://gitlab.com/gitlab-org/customers-gitlab-com/-/snippets/2469063) to create subscription via API)   
3. Access the subscription card in CDot   
4. Select 'Renew', select 'Premium' plan and set quantity to `26`. Observe the error

## What is the current *bug* behavior?

(What actually happens)

## What is the expected *correct* behavior?

(What you should see instead)

## Relevant logs and/or screenshots

(Paste any relevant logs - please use code blocks (```) to format console output,
logs, and code as it's tough to read otherwise.)

## Workarounds

(Ways to get around the issue)

## Reported examples

1.
1.
1.

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",2
120439578,2022-12-14 23:33:03.081,Subscriptions with multiple rate plans should not auto-renew (temporary),"### Problem

Subscriptions that have multiple rate plans (for the same renewable plan) are auto-renewing incorrectly. See [this comment](https://gitlab.com/gitlab-com/Finance-Division/finance/-/issues/5399#note_1209871296) for additional context. 

### Proposal

Do not auto-renew subscriptions with multiple rate plans. We are [already doing it for EOA subscriptions](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5226), but this should be extended to all subscription.

### Result

Subscriptions with multiple rate plans do not auto-renew.

### Next steps (if any)

Fix the auto-renewal functionality to account for multiple rate plans.

### How will we measure success?",2
120431033,2022-12-14 18:37:14.693,Fix blank (not nil) zuora_account_id for customers,"### Summary

There are `Customer` records in production where the `zuora_account_id` is blank (not nil)

```
Loading production environment (Rails 6.1.7)
irb(main):001:0> Customer.where(zuora_account_id: '').count
=> 132
```

We want to evaluate if this is worth fixing given we are planning to get rid of the column soon.

### Related discussion

The following discussion from !5998 should be addressed:

- [ ] @vshumilo started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5998#note_1199010692):  (+2 comments)

    > **question:** Is this a double check for if there is a last minute change for the record and the `zuora_account_id` is cleared?",2
120423451,2022-12-14 16:21:21.546,Document license key and activation code generation,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

It is currently not documented how these processes work. We should add documentation for GitLab stakeholders to figure this out.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Add this to the docs in this repository:

1. [This is the code](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/9ae796fa8060281378ff6800f2ad0aefa582821b/app/models/license.rb#L218) that creates a `GitLab::License` (that’s the object from the `gitlab-license` gem). We use this object within our `License` model. The referenced code is called on [creation](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/9ae796fa8060281378ff6800f2ad0aefa582821b/app/models/license.rb#L84) of a `License` object only.
1. [This is the code](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/1219d82057ecc80468e9c515587ee24a185b9111/app/models/subscription.rb#L441-457) that creates the activation code which is stored in our `CloudActivation` model. This code is called during a Zuora callback [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/4e3b474803252e89bc46ac679932fa836f7acf6c/app/workers/zuora_callback_worker.rb#L23) and also when the [controller action](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/74259337a9748b56e2412d98d016704810b63d4b/app/controllers/subscriptions_controller.rb#L104) `subscriptions#create` is used (which comes down to this code).",1
120392120,2022-12-14 09:54:47.978,Upgrade rails_admin gem to version 3,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

`rails_admin` gem is blocking our upgrade to Rails 7:

```shell
Bundler could not find compatible versions for gem ""rails"":
  In Gemfile:
    rails (~> 7.0.4)

    rails_admin (~> 2.2.0) was resolved to 2.2.1, which depends on
      rails (< 7, >= 5.0)
```

In order to upgrade CustomersDot to Rails 7 we have to upgrade `rails_admin` gem to version 3. We use version `2.2.0` but version `3.1.0` is available and supports Rails 7 - https://github.com/railsadminteam/rails_admin/blob/master/rails_admin.gemspec#L13

Unfortunately there is not straightforwad upgrade path for this gem as new version has [many breaking changes](https://github.com/railsadminteam/rails_admin/blob/master/CHANGELOG.md#300beta---2021-12-20). Attempting to perform an upgrade in a dumb way:

```shell
### Upgrading RailsAdmin from 2.x.x to 3.x.x ###

    Due to introduction of Webpack/Webpacker support, some additional dependencies and configuration will be needed.
    Running `bin/rails g rails_admin:install` will suggest required changes, based on the current setup of your app.
```

Results in a missing method `assets`:

```shell
/Users/vslobodin/.asdf/installs/ruby/2.7.7/lib/ruby/gems/2.7.0/gems/railties-6.1.7/lib/rails/railtie/configuration.rb:97:in `method_missing': undefined method `assets' for #<Rails::Application::Configuration:0x0000000128e96ca8>
Did you mean?  asset_host (NoMethodError)
```

Which indicates we have to load `sprockets`. Applying a small patch for that:

```diff
diff --git a/config/application.rb b/config/application.rb
index cb0b3a821..1a4fc7e26 100644
--- a/config/application.rb
+++ b/config/application.rb
@@ -13,6 +13,7 @@
 require 'active_job/railtie'
 require 'active_storage/engine'
 require 'prometheus/client'
+require 'sprockets/railtie'
 
 # Require the gems listed in Gemfile, including any gems
 # you've limited to :test, :development, or :production.
```

Results in a missing `sassc`:

```shell
cannot load such file -- sassc
```

Adding it (`gem 'sassc-rails'`) makes the application starting at least but attempting to visit any admin page result in:

```
Showing /Users/vslobodin/.asdf/installs/ruby/2.7.7/lib/ruby/gems/2.7.0/gems/rails_admin-3.1.0/app/views/rails_admin/main/_dashboard_history.html.erb where line #22 raised:

uninitialized constant RailsAdmin::Adapters::ActiveRecord::AbstractObject
Did you mean?  RailsAdmin::AbstractModel
```

This happens because `AbstractObject` was deprecated in favour of plain ActiveRecord https://github.com/railsadminteam/rails_admin/commit/af88091d11590dc95df4866c62fba0c49a7bb9a8

To sum up, to achieve this upgrade we need to:

- apply all patches above or find another way to workaround mentioned issues.
- validate we load all JS and CSS correctly
- validate the whole RailsAdmin works with new version
- check and fix our tests in `spec/feature/rails_admin`

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

It is imperative to monitor Staging end-to-end test runs once this gets merged.",4
120359277,2022-12-13 19:02:09.120,Hide tooltip and term duration for CI minutes purchase,"### Problem

On customers staging, when purchasing CI minutes, the date of purchase is displayed as 1 day. 

The tooltip information next to it displays, `Your storage subscription has the same term as your main subscription, and the price is prorated accordingly.`

Additional CI minute purchases are added onto your existing subscription (if available), the duration of the term is for the existing subscription. But CI minutes are valid for 1 year after the purchase date, so the start date of the subscription is irrelevant and confusing making the term duration incorrect.

![image](/uploads/90d1625971575eb01a41dc43c62dfceb/image.png)


_PS - The error might also be occurring on the Production server._ 

### Proposal

Tooltip and the term duration shouldn't be displayed for CI minutes purchase flow. They apply only for Storage purchase. (similar to how we handle this on GitLab.com)


### Result

### Next steps (if any)

### How will we measure success?",1
120258061,2022-12-12 11:45:28.878,[Placeholder] Implementation of displaying ramps subscriptions,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
Placeholder issue to indicate the tentative weight for implementation of displaying ramps subscriptions.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",0
120257760,2022-12-12 11:41:14.565,Issue breakdown to display ramps subscriptions,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
Placeholder issue to breakdown the implementation to display ramps subscriptions.
### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",3
120186383,2022-12-10 01:46:32.422,Subscription sync alert banner no longer presents after clicking on Sync subscription details button,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you're about to submit isn't a duplicate.

Do not include confidential information!
--->

# Bug

## Summary

Subscription sync alert banner no longer presents after clicking on Sync subscription details button

This is causing self-managed e2e test job to fail - https://gitlab.com/gitlab-org/customers-gitlab-com/-/pipelines/717640365


## Steps to reproduce

1. Activate local gdk with an valid cloud activation code
2. Click `Sync subscription details` button
3. Subscription sync alert banner shows and disappears

## Screenshot
![sync_banner](/uploads/bec336cfab997516e80a05c28e1f698e/sync_banner.gif)

## Proposal
Resolve banner issue to ensure it is displayed correctly.",5
120167293,2022-12-09 17:01:14.402,POD for Partners: Add Invoice Owner CC to SaaS Vouchers,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3372+ implemented CC's to partners on all Self Managed mailers to improve visibility into the license process. We should do this same thing for SaaS mailers, as partners have an interest in this as well.

### Proposal

- Introduce a voucher email to be sent along the notification about SaaS purchases initiated in SFDC ([`CustomerMailer#gl_com_purchase_from_sf`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/b54a3198a732d5b2662928acd86f4fba6d45a9f8/app/mailers/customer_mailer.rb#L35)). 

- Include the `Sold To Contact` email address of the quote's `Invoice Owner` as CC as well.


<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result
Partners are aware of their customer's SaaS provisioning real-time.",2
120138877,2022-12-09 07:55:18.079,[Feature flag] Enable through_version_manager,"# Summary

This issue is to rollout [Order#current_subscription to use version manager](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6094) on CustomersDot production,
that is currently behind the [`through_version_manager`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/185/edit) feature flag.

This is for issue https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4884

## Owners

- Team: ~""group::provision"" 
- Most appropriate Slack channel to reach out to: `#g_provision`
- Best individual to reach out to: @lulalala 
- PM: @courtmeddaugh
- EM: @mlunoe 

## Stakeholders

<!--
Are there any other stages or teams involved that need to be kept in the loop?

- GITLAB_HANDLE of a PM
- The Support Team
- The Delivery Team
-->

## The Rollout Plan

- Rollout Feature for everyone as soon as it's ready

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? Sentry errors reports can also be useful to review -->

## Testing User/Customer IDs

<!--
List any Customer IDs for Customers that are happy to have this feature turned on early.

Remove if not applicable
-->

## Expectations

### What are we expecting to happen?

No behavior change

### What might happen if this goes wrong?

Reconciliation and SeatLink uses wrong subscription

### What can we monitor to detect problems with this?

- Sentry
- Grafana health score

## Rollout Steps

### Rollout on non-production environments

- [x] Ensure that the feature MRs have been deployed to non-production environments, i.e. `customers-staging`.
- [x] Consider announcing that the flag will be enabled to potentially impacted groups, e.g. `#s_fulfillment_engineering`
- [x] Enable the feature globally on non-production environments by applying the appropriate environment, e.g. `customers-staging` and `customers-development`.
- [x] Notify the Software Engineers in Test (SETs) for Fulfillment via Slack and in a comment in this issue when enabling a feature flag in `customers-staging` as it can impact the QA pipeline.
- [x] Verify that the feature works as expected. Posting the QA result in this issue is preferable.

### Preparation before production rollout

- [x] Ensure that the feature MRs have been deployed to production
- [-] Check if the feature flag change needs to be accompanied with a
  [change management issue](https://about.gitlab.com/handbook/engineering/infrastructure/change-management/#feature-flags-and-the-change-management-process).
  Cross link the issue here if it does.
- [x] Ensure that you or a representative in Fulfillment can be available for at least 2 hours after feature flag updates in production.
  If a different developer will be covering, or an exception is needed, please inform the Fulfillment team in #s_fulfillment_engineering
- [-] Ensure any documentation has been updated
- [-] Announce on [the feature issue](ISSUE LINK) an estimated time this will be enabled on production if applicable
- [-] If the feature might impact the user experience, notify `#s_fulfillment` and potentially `#support_gitlab-com`, as well as your team channel ([more guidance when this is necessary in the dev docs](https://docs.gitlab.com/ee/development/feature_flags/controls.html#communicate-the-change)).

### Global rollout on CustomersDot production

- [x] Confirm the feature flag is enabled on `staging` without incident
- [-] Roll out the feature to targeted testing users first (if applicable)
- [-] If applicable, [incrementally roll out](https://docs.gitlab.com/ee/operations/feature_flags.html#percent-rollout) the feature.
- [-] Verify the change has the desired outcome with the limited rollout before enabling the feature globally on production.
- [x] Enable the feature globally on production environment
- [x] Announce on [the feature issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4884) that the feature has been globally enabled.
- [x] Wait for [at least one day for the verification term](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release).

### Release the feature

After the feature has been [deemed stable](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release),
the clean up should be done as soon as possible to permanently enable the feature and reduce complexity in the codebase.

<!-- The checklist here is to help stakeholders keep track of the feature flag status -->
- [x] Create a merge request to remove `<feature-flag-name>` feature flag
  - [x] Remove all references to the feature flag from the codebase
- [x] Ensure that the cleanup MR has been deployed to both staging and production
- [x] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [x] Ensure production environment is still working as expected
- [x] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [x] Close this rollout issue.

## Rollback Steps

- [ ] This feature can be disabled by performing the following actions:
  - [ ] Disable the Unleash flag on the [feature flag page](LINK TO THE FEATURE FLAG EDIT PAGE)",1
120123355,2022-12-08 23:02:17.080,Orders created without some subscription data,"### Problem

It was discovered, as discussed in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5249#note_1197338320, that there are many Orders in production associated with a subscription (e.g. have `subscription_name` present) but are missing many subscription-related attributes like `start_date`, `end_date`, and `subscription_id`.

We [determined the problem](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5249#note_1200272445) to be with [this line](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/70d456ed746c25b659f2b70052f28df936353b42/app/controllers/subscriptions_controller.rb#L63) in the `SubscriptionsController#edit` action.  If the order was not already created at this point, one would be created but not with all the necessary subscription info.

### Proposal

We should replace this logic in the controller to use the `CreateOrderService` which we know creates an order with all the necessary subscription data points.  This is used in other places in the app to create orders.",1
119991392,2022-12-07 09:12:37.882,Clean up portal_price_before_proration & portal_proration_credit calculation from backend,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

After https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5106 we will no longer be using these values in the frontend in CustomerDot and Gitlab. We can remove these calculations so that we don't have dead code.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

1. These values are being passed in `orderPreview` graphql query to gitlab. Remove these values from the endpoint (& from schema in gitlab)
2. Remove the calculations from `amendment_base_service.rb` & `preview_service.rb`

### Result

### Next steps (if any)

### How will we measure success?",2
119967619,2022-12-06 20:40:30.103,Refactor Customer/Account form,"## Proposal

Once the `account_data_structure` flag is enabled/stable and we start working towards https://gitlab.com/groups/gitlab-org/-/epics/8951+, the Account/Customer form in CustomersDot should be in a position to be refactored in a few ways.  Please see https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6037#note_1196864310 for more background.

Here are a few things we can consider:
1. ~~Avoid showing or updating `Customer.company` in this form.  At this point, `BillingAccount.zuora_account_name` should be the attribute used across the app.  There should be no need to maintain `company`~~. EDIT: follow-up in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5656
2. `UpdateContactService` is called only from a Customer model callback. It's only triggered when the virtual attr `sync_with_zuora` is set, which only happens [in the RegistrationsController](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/37933553209ad5c0b13c33ab2a786200c2aa4d27/app/controllers/registrations_controller.rb#L36). It would be nice to avoid this callback altogether and move this logic to the `RegistrationsController`. This service could be refactored (and renamed) to clarify it's scope. 

### Follow up

The following discussion from !6037 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6037#note_1196864310):  (+4 comments)

    > **Suggestion:** What do you think about updating the BillingAccount last (or at least after the Zuora account?  Just want to avoid a situation where the BillingAccount is updated but something fails updating the ZuoraAccount and the two are not in sync.

The following discussion from !6355 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6355#note_1246463812):

    > **Thought (non-blocking):** There are some known problems with this service, one of which is that it's not transactional. If the zuora account update fails on this line, it seems like it will continue to update the billing account and zuora contacts, but that might not be ideal.",3
119760980,2022-12-02 15:30:28.580,Drop PSQL 10.17 from supported tools,"We migrated all our environments to CloudSQL on GCP. Both production and staging environments are on PSQL 12 now.
That means we can safely drop PSQL 10 from the list of supported runtimes and tools. Currently we have it in the `.tool-versions` file and in order to remove it from this file we should create or document convenient way for upgrading existing databases of team members (located in `./db/postgesql`).

## How to upgrade local PSQL database from 10 to 12

Given the database is running in `./db/postgresql` we can perform the following steps to upgrade it:

1. Stop the application
2. Stop the PSQL master:

   ```shell
   asdf exec pg_ctl stop -D ./db/postgresql
   ```

3. Demote the data folder to old cluster:

   ```shell
   mv ./db/postgresql ./db/postgresql-10
   ```

3. Activate PostgreSQL 12 binaries:

   ```shell
   asdf shell postgres 12.12
   ```

   Verify it with `psql --version`. This command must output `psql (PostgreSQL) 12.12`

4. Check the upgrade path:

   ```shell
   asdf exec pg_ctl initdb -D ./db/postgresql-12
   asdf exec pg_upgrade --old-bindir=$(asdf where postgres 10.17)/bin --new-bindir=$(asdf where postgres 12.12)/bin --old-datadir=./db/postgresql-10 --new-datadir=./db/postgresql-12 --check
   ```
   
   Look for the `*Clusters are compatible*` line at the end. If not, please report in this issue.

5. Do the upgrade:

   ```shell
   asdf exec pg_upgrade --old-bindir=$(asdf where postgres 10.17)/bin --new-bindir=$(asdf where postgres 12.12)/bin --old-datadir=./db/postgresql-10 --new-datadir=./db/postgresql-12
   ```

6. Start the new PSQL 12 master:

   ```shell
   asdf exec pg_ctl start -D ./db/postgresql-12
   ```

7. Generate minimal optimizer statistics to verify the new database: `./analyze_new_cluster.sh`
8. Run the script to delete the old database data: `./delete_old_cluster.sh`
9. Move the new database cluster to the old location `./db/postgresql`:

   ```shell
   asdf exec pg_ctl stop -D ./db/postgresql-12 && mv ./db/postgresql-12 ./db/postgresql
   ```

10. Remove migration files: `rm analyze_new_cluster.sh delete_old_cluster.sh update_extensions.sql`
11. Start the new database cluster and verify your local copy of CustomersDot still works:

   ```shell
   asdf exec pg_ctl start -D ./db/postgresql
   ```",1
119743087,2022-12-02 10:06:57.035,Add logging in CloudActivations::ActivateService when seat link creation failed,"### Problem

When an activation of a self-managed instance with an activation code failed because of an error while creating the seat link data, the error is [logged by the SeatLinkCreateService](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/e9eaf1283947f750b763c9e179626f0bbb341284/app/services/seat_link_create_service.rb#L24-27). The `SeatLinkCreateService` is used in other workflows like the daily seat link sync. This makes debugging for errors during an activation a little bit harder since the `CloudActivations::ActivateService` [does not log anything](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/e9eaf1283947f750b763c9e179626f0bbb341284/app/services/cloud_activations/activate_service.rb#L89) about this with its own context and the errors have to be looked up with a `SeatLinkCreateService` context. 

### Proposal

Even though the [`SeatLinkCreateService` has logging for an unsuccessful processing](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/e9eaf1283947f750b763c9e179626f0bbb341284/app/services/seat_link_create_service.rb#L24-27), it might make sense to add additional logging in the 
`CloudActivations::ActivateService` when the [response of the `SeatLinkCreateService` is unsuccessful](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/e9eaf1283947f750b763c9e179626f0bbb341284/app/services/cloud_activations/activate_service.rb#L89). This could make debugging errors during an activation a bit easier and quicker since we would be able to actually find error loggings for the `CloudActivations::ActivateService` even when the actual error happened in the `SeatLinkCreateService`.

### Result

Additional error logging that helps with debugging errors during activation quicker since we'll be able to find something specifically linked to the activation when the seat link creation failed.",2
119742259,2022-12-02 09:49:33.222,Ensure to log service class name in `log_warn` and `log_error`,"When checking logs, sometimes it is tricky to know where does an error come from. One example is https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5264#note_1194023547.


ATM we only log service class name in [log_info](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/96fcaba30e1df12ecf6f5ddd1cb88923455fd56b/lib/gitlab/logger_helpers.rb#L7-9). 

```
    def log_info(message, extra: {})
      log(:info, ""#{self.class.name}: #{message}"", extra: extra)
    end
```

I think we should ensure we log the `self.class.name` for [log_warn](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/96fcaba30e1df12ecf6f5ddd1cb88923455fd56b/lib/gitlab/logger_helpers.rb#L11-14) and [log_error](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/96fcaba30e1df12ecf6f5ddd1cb88923455fd56b/lib/gitlab/logger_helpers.rb#L16-18) as well.


### Problem

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",2
119736543,2022-12-02 08:17:40.529,Update iron_bank gem to fix known vulnerabilities,"We should update `iron_bank` to the latest version so we can fix some Security vulnerabilities.

See https://github.com/zendesk/iron_bank/pull/90",1
119680789,2022-12-01 09:23:42.910,Purchase fails with error: <PaymentMethodID> is not a valid hosted payment method.,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you're about to submit isn't a duplicate.

Do not include confidential information!
--->

# Bug

## Summary

Sometimes purchases fail with the generic error `An error occurred in the purchase step. If the problem persists please contact support at https://support.gitlab.com.` but when we check the logs we find an error log that states:

```
<PaymentMethodID> is not a valid hosted payment method.
```

## Relevant logs and/or screenshots

Example [GCP Logs (internal)](https://console.cloud.google.com/logs/query;cursorTimestamp=2022-12-01T08:57:39.987Z;query=%22A-S00041396%22%0Atimestamp%3D%222022-12-01T08:57:39.987Z%22%0AinsertId%3D%228lrda1g2ua8331%22;timeRange=P7D?project=gitlab-subscriptions-prod)

## Workarounds

1. Use an incognito window to make the purchase (worked for 1)
2. Use a different device i.e. mobile phone (worked for 4)

## Reported examples

1. https://gitlab.zendesk.com/agent/tickets/335749
1. https://gitlab.zendesk.com/agent/tickets/346748
1. https://gitlab.zendesk.com/agent/tickets/350388
2. https://gitlab.zendesk.com/agent/tickets/356964 (Purchase via Chrome incognito/private mode didn't work for this customer; trying on Chrome Mobile worked)


<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",5
119663561,2022-12-01 00:18:26.785,Enable `try it` on marketplace openAPI document page,"We have openAPI document for marketplace: 
- internally viewable from gitlab blob viewer: https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/doc/api/openapi.yaml. This requires CustomersDot repository access, as CustomersDot is a private project
- publicly viewable from https://customers.staging.gitlab.com/openapi_docs/marketplace and https://customers.gitlab.com/openapi_docs/marketplace

For the publicly document(https://customers.staging.gitlab.com/openapi_docs/marketplace and https://customers.gitlab.com/openapi_docs/marketplace), it will be helpful to allow `Try it out` from this page. I think this will be convenient for marketplace partners, and it will help to reduce the integration frictions.

### Problem

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",2
119658060,2022-11-30 21:07:42.343,[SM] Use term end date for all ramp enabled subscription licenses,"### Background
Historically, all ramp licenses were generated for term start date + 1 year. With Zuora Ramps, we are establishing automated provisioning of licenses for the entire ramp subscription period, so this shortened term is no longer necessary.

With the Zuora workflow being setup by EntApps, callouts will be sent from Zuora to CDot whenever a new ramp interval starts in order to provision additional seats at the start at each ramp interval.

### Problem

As discussed in this thread https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4295#note_1189876785, ramped subscriptions where cloud licensing is enabled have licenses generated for the full subscription term.  For example, if a subscription has a 3 one year ramps, the full subscription term is 3 years, and therefore has a license generated for the full 3 years.  If the quantity changes when a new ramp begins, a callout will be sent to CDot to generate a new license with the new quantity for the full term.

The logic for determining the license end date can be [found here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/ec6b3cc9dca0e511568ba86c0b3d6db99cfdcd19/app/models/concerns/license_creation.rb#L15).  Currently, this logic only applies to Subscriptions with cloud licensing enabled, but we need it for Subscriptions with legacy licenses too.

### Proposal

Update the `LicenseCreation#license_end_date` method to determine the license end date consistently for all ramp enabled subscriptions, using the term end date.


### Proposal Summary

Generate the initial license for a ramp subscription for the entire 3 year subscription term (and then send a new license for only the additional users at the start of each year).

Reason for this proposal, rather than generating the initial license for 1 year and sending a new license for the full user amount at the start of each year:
1. We are moving towards generating all licenses for the entire subscription term, not just ramps ([example](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4816)), as it requires less manual intervention. Option 2 is consistent with this motion.
1. There is no risk of the customer losing access entirely if there is any provision failure at the start of years 2/3 - only not having access to the additional seats. Seems this could result in fewer support escalations.
1. This was the plan with cloud license enabled subscriptions, so to me it makes sense to keep both types consistent.

### Proposal Details
https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4879 updated the existing license end date logic to generate ramp enabled licenses for the full subscription term for cloud enabled subscriptions _only_. We should remove this condition on cloud enabled by updating [this line](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/ec6b3cc9dca0e511568ba86c0b3d6db99cfdcd19/app/models/concerns/license_creation.rb#L15).

I think we want to update this:
> `# If Subscription is cloud and (reconciliations or ramps enabled), we issue it for the full term`

To this:
> `# If Subscription is (cloud and reconciliations) or ramps enabled, we issue it for the full term`

Side note, once https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4816 is implemented, the logic will actually be:
> `# If Subscription is cloud or ramps enabled, we issue it for the full term`

### Result
All ramp licenses (whether cloud or not) are created for the full term.",1
119653137,2022-11-30 19:07:07.068,Deprecate Unified License mailers & remove SS aware check,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Background
We currently have 4 mailers that can be sent to customers when a Self Managed subscription is purchased - a legacy specific mailer, an offline license specific mailer, a cloud license specific mailer, and a unified mailer.

The unified mailer was initially established in the early days of Cloud Licensing and contained _both_ the legacy license and a cloud license activation code. This was sent to customers who had `TurnOnCloudLicensing` set to `null`. As part of SCL, we removed the legacy license from this mailer as we began to treat `TurnOnCloudLicensing` = `null` customers the same as `TurnOnCloudLicensing` = `Yes`. Therefore it is now a duplicate of the activation code mailer.

In addition, the check for `super_sonics_aware` is no longer necessary. Since we are over 1 year past the launch of Super Sonics (August 2021), all new or renewal subscriptions will now be super sonics aware. This can be removed as unnecessary logic.

Related part of code:
![image](/uploads/c8fad86be7698188a6258e238c1f69ca/image.png)

### Proposal
Deprecate the unified license mailer and simplify the existing mailer logic to send only the legacy, offline or activation code mailer as is appropriate based on the license type the customer will receive, with no dependency on `super_sonics_aware`.

Rough suggestion:
* If legacy, send legacy mailer
* If offline, send offline mailer
* Else, must be online, so send online mailer (reordered as I think online mailer should be the default)

In addition, we should deprecate the related [unified voucher email](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/spec/mailers/unified_license_voucher_mailer_spec.rb), as this will no longer be needed.

### Result
Simplification in our customer mailers.

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

This refactor change will likely result in a lot of changed files and tests. On hand-hand, this should be a simple consolidation however on the other hand, we risk breaking something. 

We should be able to move all existing tests from our other mailers into one mailer as proposed, but it's possible more will have to be done to ensure everything works properly.  

From a ~Quality perspective, let's make sure these MRs are reviewed from the ~test perspective and that we don't suffer test coverage loss due to this change.",2
119634264,2022-11-30 14:55:00.495,[SM] Avoid license notification when provisioning is not needed when ramps begin,"### Problem

Once https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5247 is completed, all ramp subscriptions will have licenses generated for the full subscription term.  For example if a 3 year subscription might have 3 one year ramps.  Any licenses generated for this subscription would be created for the full 3 years.

However, as discussed in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4295#note_1190124058, there may be times when nothing changes to the subscription when a new ramp starts that affects provisioning (e.g. the quantity does not change).  If that's the case, a callout will still be sent to CDot to provision for the new ramp.  An identical license would generated and notification sent to the customer, leading to confusion as a new license would not be necessary.

### Proposal

Let's update CDot to avoid generating a new license and avoid notifying the customer when this scenario arises.  

This filtering logic probably will need to be done when processing the callout. It might be similar to what CDot for [the Seat Link Service](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/4ae39fa629f11d88d5575837412df990e624b9a5/app/services/seat_link_create_service.rb#L193). The service [compares the most recent license to the new license](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/3e8889422f9bc05f57cb205fb025364b28ccdcef/app/services/build_license_from_subscription_service.rb#L45) and only generates the new one if needed.",3
119555172,2022-11-29 12:30:52.043,[Follow up] Update usage of allow_buy_subscription method,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
Follow up issue from this MR conversation - https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5958#note_1188823085.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",0
119466630,2022-11-28 08:27:35.774,Simplify support of multiple class objects in VoucherMailer,"### Problem

As part of https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5929#note_1180208624, the logic to find the email, name and company of the recipient as well as the log info in the `VoucherMailer` was getting too complex. This is because there are now three classes (`License`, `Subscription` and `Customer`) that are supported by the `VoucherMailer`. In the linked thread there were a few options that were discussed. But [one](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5929#note_1182039949) seemed like the way to go.

### Proposal

All three classes, `License`, `Subscription` and `Customer`, used in the `VoucherMailer` should respond to the same methods. E.g. currently only `License` and `Customer` respond to an `email` method and `Subscription` has to use the `sold_to_contact&.work_email` methods to get to the same info. If all three classes respond to the same method name, a single object could be provided to the VoucherMailer and removes all the current complexity by calling the method names that are supported by all three classes.

### Result

Remove complexity around the logic to find the email, name and company of the recipient as well as the log info in the `VoucherMailer`.",2
119465391,2022-11-28 08:06:16.681,Use constants for mailer subject,"### Problem

In a [review comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5929#note_1182039948), it was suggested to use constants for the mailer subject to reuse them in voucher mailer counterparts. This will ensure that the email subject is always the same for the voucher email (the email that goes to SFDC) as in the actual email that goes out to the customer.

### Proposal

Replace hard coded subjects in mailers with constants and reuse them in existing voucher mailers.

### Result

Consistency in mailer subjects.",2
119404411,2022-11-25 22:18:01.268,"Follow-up from ""Persist billing account via FindOrCreateCustomerService""","The following discussion from !5807 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5807#note_1164663028):  (+3 comments)

    > **Suggestion (non-blocking):** I suppose we could add some specs for if the `UpdateBillingAccountService` service returns an error result, just to make sure the compose works as we'd expect.  Maybe something to think about for a follow-up?",1
119403121,2022-11-25 21:04:26.913,Update billing account on customer salesforce_account_id update,"The following discussion from !5660 should be addressed:

- [ ] @vshumilo started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5660#note_1153053368):  (+4 comments)

    > **context:** I will layer in the `salesforce_account_id` in a follow up.
    > 
    > I know there will be some feedback on this one given I think I want to propose to favor Zuora's value given the changes in CDot reflect in Zuora but manual SFDC account merges that are synced to Zuora currently do not sync back to CDot.
    > 
    > On the other hand we might want to create the Account with the exact information that the user has and I want to gather some thoughts around what is the best approach therefore don't want to delay this MR with this:
    > 
    > ```ruby
    > # option 1
    > salesforce_account_id: zuora_account.crm_id || customer.salesforce_account_id
    > 
    > # option 2
    > salesforce_account_id: customer.salesforce_account_id
    > ```
    > 
    > Plus the billing account too needs to be updated every time the `salesforce_account_id` for the customer changes -> I think we might use a separate issue to handle this SFDC value in the `BillingAccount`. Do you think another issue will better separate this update @tyleramos

### Acceptance criteria

- [x] Agree on a strategy to populate the billing account's `salesforce_account_id`. 
- [ ] ~~Update the code so every time the `salesforce_account_id` is updated for the `customer`, its associated billing account is updated as well.~~
- [x] Hide the `salesforce_account_id` from the Customer's Admin show and edit views when the `:account_data_structure` feature flag is enabled: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6134

As part of this we want to also question if with the current setup we are willing to trust the `customer.salesforce_account_id` or we want to always fetch it from the zuora account associated to the `customer`. Note we don't have a callback that will sync back to CDot changes on the Zuora account `crm_id` that result from merging SFDC accounts and manually updated the references to the surviving account. [Opional context here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4822#note_1166606063)",2
119388177,2022-11-25 14:03:55.085,"A couple of follow-ups from ""Set urgency class attribute""","The discussions from !5979 should be addressed. Two points:
- Rename `FeatureCategorizable` as its scope now broadened with the introduction of the `urgency` class attributes.
- The body of `Metrics::RequestCollector#controller` is the same as another method in `Metrics::RequestEndpoints`. Extract that shared logic.

cc @qzhaogitlab",1
119015936,2022-11-18 23:54:48.539,CloudLicenseMailer notifications do not send a voucher,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

The recently created CloudLicense mailers for [`renewal_notification`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/3cbef4c4b31ea7553f33165166e5dcef3f09e7d6/app/mailers/cloud_license_mailer.rb#L19) (introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4542) and [`subscription_update_notification`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/3cbef4c4b31ea7553f33165166e5dcef3f09e7d6/app/mailers/cloud_license_mailer.rb#L12) (introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4543) do not implement a voucher mailer, so no notification to the SFDC BCC or the reseller email is sent.

Both mailers send a [BCC](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/3cbef4c4b31ea7553f33165166e5dcef3f09e7d6/app/mailers/cloud_license_mailer.rb#L10) to the revenue team email address (licenses@gitlab.com). 

Since we are trying to improve our Proof of License Delivery mechanisms for resellers, ensuring that Cloud Licensing renewals and subscription updates are available for them seems like a logic next step.

### Proposal

Introduce a new `CloudLicenseVoucherMailer` with two methods (one for renewals and another for subscription updates) and call those methods from the corresponding notification.

### Result

* The vouchers provide better visibility for the Sales and Order Management teams by storing them in SFDC
* The vouchers provide better visibility for resellers by sending them to the `Invoice Owner` of the partner

### Reported Examples
1. https://gitlab.zendesk.com/agent/tickets/351040 - OM team requesting copy of renewal on CL
2.",3
118998012,2022-11-18 14:49:43.125,Document interactions between GitLab User / CustomersDot User / Zuora Contact / SFDC Contact,"### Proposal

As mentioned in the [Architecture Review: Fulfillment Platform meeting on 2022-11-16](https://docs.google.com/document/d/1_YbxNCo3KXK1-KdIZTgSvmU9kIslYjQnFZAmmu1DSqQ/edit#heading=h.1nmnr3rsvzrk), we want to document the workflows involving interactions between GitLab Users, CustomersDot Users, Zuora Contacts, and SFDC Contacts.

This is important for the following reasons:
- Help to understand how to keep all these related “User/Contact"" objects in sync 
- Help to understand what we should do with the CustomersDot `customers` (to be renamed `users`) table
- Help to understand how to tie the work from https://gitlab.com/groups/gitlab-org/-/epics/8331+ in with https://gitlab.com/groups/gitlab-org/-/epics/8905+",1
118934040,2022-11-17 18:53:54.609,🎄 Suspend deployments during December 2022 holidays,"We will suspend all production deployments during the holidays.  Here's a link to the handbook page describing Production Change Locks (PCL) and the timing of the upcoming lock.  Please raise any concerns or comments on this issue.

There will be limited coverage as most people will be away. This should effectively limit the need to have someone on call to resolve any development-related issues in production during the holidays period.

~~We'll need 2 volunteers from the teams to add/remove the label and notify Slack.~~

## Process

- [x] @tyleramos On **2022-12-23 23:00 UTC** add the ~""production::blocker"" label to this issue.
- [x] @tyleramos Then, notify #s_fulfillment, #s_fulfillment_engineering, #s_fulfillment_fyi, #support_licensing-subscription, and #production about the freeze
- [x] @cwiesner On **2023-01-03 09:00 UTC** remove the ~""production::blocker"" label from this issue.
- [x] @cwiesner Then, notify #s_fulfillment, #s_fulfillment_engineering, #s_fulfillment_fyi, #support_licensing-subscription, and #production about the freeze

Please keep this issue public.

cc @fulfillment-group",0
118903404,2022-11-17 10:56:45.501,Implement Auto renewal payment method changes in Orders API,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5034 implemented a few changes in the update payment method workflow during auto renewal. This issue is to apply in Orders API workflow as well.

Related MRs:
- https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5748
- https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5806

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",2
118892547,2022-11-17 09:02:24.434,Invoice item created in inconsistent order causes mismatch in few SalesForce object attributes,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

**Context**:

When upgrading a subscription from `Premium` to `Ultimate` plan (for example), there are two invoice items generated:

1. Remove Premium plan
2. Add Ultimate plan

In Zuora staging environment, the order in which the invoice items generated are different for Amend and Orders API:

- When using Amend API: `Remove Premium plan`, `Add Ultimate plan`
- When using Orders API: `Add Ultimate plan`, `Remove Premium plan`

The order of Order actions is: `RemoveProduct`, `AddProduct` (see example [Order object](https://test.zuora.com/apps/newlogin.do?retURL=/orders#/view/O-00150386))

**Problem statement**:

When creating SalesForce objects, a [single Quote Rate Plan](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/4beb9cee77c7b495c0bd9e3f543599c919beaadf/app/services/salesforce/create_quote_objects_service.rb#L168) is created for an invoice (based on the first invoice item).

The order of the invoice items therefore becomes significant, as it causes [`zqu__ProductRatePlan__c`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/a83ed49dff1dc0dddce7105d26af4244fbf0de72/app/services/salesforce/create_quote_rate_plan_service.rb#L80) and [`zqu__ProductRatePlanZuoraId__c`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/a83ed49dff1dc0dddce7105d26af4244fbf0de72/app/services/salesforce/create_quote_rate_plan_service.rb#L81) attributes to be different in both cases.

In the case of Amend API, `zqu__ProductRatePlanZuoraId__c` is associated with Premium Plan, while in Orders API it is associated with Ultimate Plan.

This [spreadsheet](https://docs.google.com/spreadsheets/d/1ltJBcLwOau3-95CuHCwlXiZP200XkCqdeKtdpoYNUBI/edit?usp=drive_web&ouid=113070913643997337994) documents the comparison.
In the case of sandbox environment, I observed the order of the invoice items to be the same (see [spreadsheet, tab 1](https://docs.google.com/spreadsheets/d/1mydR5iZd4709tLkKRal30vE3Xad1dsxGOzCwhiwB7HQ/edit)).

The scope of this issue is to understand:

- Should a single Quote Rate Plan OR multiple Quote Rate Plans (one for each invoice item) be created
- Based on the answer to the above question, if a single Quote Rate Plan needs to be created, should it be created for `RemoveProduct` or `AddProduct` or if it does not have a significance.

Related Slack conversation: https://gitlab.slack.com/archives/C043J3R2L9F/p1668494901620589

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Summarizing the [comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5193#note_1179678115), the following changes need to be applied when creating objects using Orders API:

1. Based on SalesForce package, for each order action type, 1 Quote Amendment, 1 Quote Rate Plan and 1 Quote Rate Plan Charge needs to be created. This approach will also resolve the inconsistent order detailed in this issue.

   In the existing Amend API workflow, 1 Quote Amendment is created for each amendment type. For every invoice, 1 Quote Rate Plan is created, and for every invoice item, 1 Quote Rate Plan Charge is created. No change to be made in this workflow.

1. Additionally, charge summary needs to be created for each amendment type. Given this is not currently created in Amend API, created https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5211 to follow-up on the requirement.

1. `Amendment.Id` and `Amendment.Name` is `nil` in the case of Orders API. @sbaranidharan to confirm if these attributes can be determined from any other object in Zuora.

   -> The Zuora team mentioned the values will be `nil` since we have orders harmonization enabled.

### Result

With the above approach, the problem stated in this issue is resolved as we create Quote Rate plan for every order action type and are no longer dependent on the order of order action types.

### Next steps (if any)

### How will we measure success?",2
118807974,2022-11-16 08:31:48.435,Refactor feature specs for rails admin,"### Problem

In https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5886#note_1172520728, it was brought up that having 2 actions with 2 assertions in one example isn't usually best practice. The example in the merge request uses the search on an index page twice, the first assertion is for a result while the second is for no results. This is a pattern that is used throughout other feature specs for rails admin too. 

### Proposal

Evaluate all feature specs for rails admin and split up examples that cover more than one action. Some specs could even use `RSpec::Parameterized::TableSyntax`.

If needed this issue could be promoted to an epic.

### Result

Following best practices for RSpec.",3
118784327,2022-11-16 01:13:11.165,Use presenter for community renewals,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
As suggested in this [comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4372#note_865226482), it would be a good idea to move the logic block in `subscriptions/community_program/renew_subscription.html.haml` into a helper. With this we would get the additional advantage of being tested. The same helper could be used for `subscriptions/community_program/renew_subscription`(https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/602a40bbc66d0c353787fea9f56b9f8b6efea4e3/app/views/subscriptions/community_program/renew_subscription.html.haml#L1) too as it has similar logic.
 
### Proposal
Create a presenter with logic that can be shared with the `renew_subscription` file.",2
118760572,2022-11-15 16:42:11.330,Investigate high quantity for existing_renewal_error (auto-renew) SaaS,"### Problem

While reviewing [Subscription Management Performance dashboard](https://app.periscopedata.com/app/gitlab:safe-dashboard/1092507/WIP:-Fulfillment:-Subscription-Management-Performance-dashboard), I noticed that [Number of Auto-renew errors by Product type](https://app.periscopedata.com/app/gitlab:safe-dashboard/1092507/WIP:-Fulfillment:-Subscription-Management-Performance-dashboard?widget=15776195&udv=1803088) and [% split of  SaaS AutoRenew errors by error type](https://app.periscopedata.com/app/gitlab:safe-dashboard/1092507/WIP:-Fulfillment:-Subscription-Management-Performance-dashboard?widget=15776187&udv=1803088) look off.

![CleanShot_2022-11-22_at_16.22.55](/uploads/483be4a44888217b7648cbee8348b98b/CleanShot_2022-11-22_at_16.22.55.png)

![CleanShot_2022-11-22_at_16.23.28](/uploads/f83934192cb0823943f8aad7286ba0ba/CleanShot_2022-11-22_at_16.23.28.png)

We only had this many SaaS and SM subscriptions up for auto-renewal:

| Aug-2022 | Sep-2022 | Oct-2022 |
|----------|----------|----------|
| 585      | 755      | 881      |


It seems that `existing_renewal_error` is reporting way too many times. 

### Proposal

Investigate whether our tracking is working as expected.

### Result

### Next steps (if any)

### How will we measure success?",1
122355483,2022-11-15 16:39:06.272,Fulfillment Platform PI instrumentalization: Developer Productivity,"## Overview

We want to measure `MTTR` (mean time to recovery) as one of the ~""group::fulfillment platform"" performance indicators. This will help us to capture the state and progress of the developer productivity within the fulfillment infrastructure we provide.

## Details

The proposal and progress of the PI is captured in the [Fulfillment PI internal handbook section](https://internal-handbook.gitlab.io/handbook/company/performance-indicators/product/fulfillment-section/#fulfillment-platform---mean-time-to-recovery-mttr).

**Definition of MTTR: Measure time (in minutes) between interruption of service(s) due to deployment/system failure and full recovery**

After a [first feedback loop](https://gitlab.com/gitlab-org/fulfillment-meta/-/issues/876#note_1165028722), and a sync discussion we identified a way how to instrument this metric:

We capture events whenever CustomersDot enters and leaves maintenance mode. This is visible when the `HealthCheck::Zuora` and `HealthCheck::Gitlab` jobs are triggered and when they catch changes of availability of these third-party services.

Additionally, triggering the maintenance mode manually (through the `customers:maintenance_mode` rake task) should also capture such events for the creation of this metric.


## Outcome

We can measure and see MTTR as a first iteration in the ~""group::fulfillment platform"" Grafana Dashboard.


## High-level implementation

Below is an attempt to come-up with a plan to achieve the outcome highlighted above. This is likely to be refined before we start work.

This plan also takes into consideration requirements outlined in [this other issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5579), as there are overlaps between both issues:

1. Update our Prometheus collector
   - Our metrics collector is currently suited for Sidekiq jobs and app/api controllers. We'll have to update it so that it can also capture data when entering / leaving maintenance mode (and when raising Zuora error, wrt to this other issue)
2. Implement new Prometheus collection 
   - Apply actual collection of data in related Health cron jobs and the maintenance rake task.
3. Update [the Runbooks project](https://gitlab.com/gitlab-com/runbooks)
   - We need to do that so that we can bridge data from Prometheus to new graphs in Grafana

### Issue breakdown

The plan above led to the creation of the following issue breakdown:

1. [ ] [Allow Prometheus collection of maintenance events](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5718)
2. [ ] [Add Grafana dashboard to show new MTTR indicator](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5725)",8
118736303,2022-11-15 11:29:07.781,Search by subscription name does not work for License Seat Links in Admin,"### Problem

Searching by subscription name does not work on the License Seat Link index page in Admin.

### Proposal

Fix the search by subscription name.

### Result

Allow search by subscription name on the License Seat Link index page in Admin",1
118728270,2022-11-15 09:36:47.843,"Rename ZuoraAccountMixin#sold_to_contact (Follow-up from ""License model - use of account_data_structure feature flag"")","The following discussion from !5798 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5798#note_1171316453):  (+1 comment)

    > **Question:** With this MR, we have a new abstraction called `BillingAccountContact` and this method called `contact`, in addition to the existing method `sold_to_contact` in `ZuoraAccountMixin` [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/b834e92525d563dde9bd1fbb7175a11c4c5907a8/app/models/concerns/zuora_account_mixin.rb#L80).  I wonder if this will be a little confusing knowing what kind of object you get from these methods.  Perhaps, the `sold_to_contact` could be clarified as `sold_to_zuora_contact`?  That could be done as a follow-up to this to keep this change smaller.
    > 
    > Thoughts?",1
118718420,2022-11-15 07:02:48.146,Consolidate the openAPI doc into a single file,"Due to a security fix, the openAPI doc ref links are not supported by Gitlab. This might be fixed, but we do not know when. The tracking issue is gitlab-org/gitlab#381047+.

This impact [CDot openAPI doc](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/doc/api/openapi.yaml) rendering.

Since we do not have lots of endpoints in the api doc, I suggest we consolidate it into one single file.

This seems to be align with the new version of the [Optic cli tool](https://github.com/opticdev/optic) as well. ATM we are using the previous Optic version's `api` command, which seems to be deprecated by the latest Optic version.


### Problem

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",2
118675850,2022-11-14 14:13:22.492,[Spike] Investigate and break down work for Customer-Dot ruby version >=3.0,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

In order to plan the upgrade to Ruby version >=3.0 for `customers-gitlab-com` , we want to understand the work that needs to be done to do so. Therefore, we would like to get that understanding during this spike.

### Proposal

Let's break down the work in this spike, and add issues to https://gitlab.com/groups/gitlab-org/-/epics/5149.

Crafting a list of all blockers for the Ruby 3.0 upgrade will help a lot. This list could consist of changes in our code, gems we have to update or drop (or replace), etc.

We need to decide if we upgrade to Ruby version 3.0 and afterwards to a higher version or directly to a higher version.

### Result

As a result/outcome we will have:

- Decide for a ruby version to upgrade (3.0 or higher?)
- List for all blockers/dependencies for the upgrade
- Break down the work to upgrade the ruby version for `customers-gitlab-com` and add issues to https://gitlab.com/groups/gitlab-org/-/epics/5149",2
118673354,2022-11-14 12:18:33.017,[Spike] Investigate Upgrade to Rails 7.0,"### Problem

In order to [Upgrade rails to version 7.0](https://gitlab.com/groups/gitlab-org/-/epics/9235), we need to identify the work, places and steps where we need to take action to facilitate a smooth upgrade.

### Proposal

The outcome of this spike issue should be a plan, broken down in issues attached to the [epic](https://gitlab.com/groups/gitlab-org/-/epics/9235) that informs the person(s) handling the upgrade what steps need to be done and we can schedule the work in to corresponding milestone(s).",2
118645435,2022-11-14 06:08:36.522,Document the meaning of Super Sonics  flag,We have a need to explain the meaning of Super Sonic flag and what it does (see https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5619#note_1167360683),1
118729444,2022-11-10 16:53:11.534,Dos via lack of input validation ( customers.gitlab.com ),"**[HackerOne report #1765576](https://hackerone.com/reports/1765576)** by `mrhacker404` on 2022-11-08:

[Report](#report) | [Attachments](#attachments) | [How To Reproduce](#how-to-reproduce)

## Report

#####  Summary

(there is an lack of input validation via email parameter. giving high lenghts will prompt 500 Internal error. making fast requests to the internal server error will make the server down for everyone ! )

#####  Steps to reproduce

(Step-by-step guide to reproduce the issue, including:)

1. Register like any new user. use random details.  
1. The next page should be ( /email_confirmations )   
1. So now upload my payload from the attachement and use it on the email input.   
1. Make sure to send the request in repeater and you receive 500 internal error.  
1. Run turbo intruder or intruder. ( i used turbo-intruder ) good threads then start the attack. 

#####  Impact

(Summarize the impact on users)

No one will be able to login or navigate into Gitlab Customers . the server has been highly affected with only an test attack ! server has been down for long time ! and i believe the same issue will happen on gitlab.com ( official server ) i tried just to get the 500 internal error on the main website and yeah i got it !

####  Impact

A Denial-of-Service (DoS) attack is an attack meant to shut down a machine or network, making it inaccessible to its intended users. DoS attacks accomplish this by flooding the target with traffic, or sending it information that triggers a crash.

## Attachments

**Warning:** Attachments received through HackerOne, please exercise caution!

* [publicdown2.png](https://h1.sec.gitlab.net/a/30c9b9c4-4ea1-4f24-afbe-d8245063798f/publicdown2.png)
* [publiccheck1.png](https://h1.sec.gitlab.net/a/560bd0a6-d78b-48d5-8edc-48664cb78f02/publiccheck1.png)
* [DOWN.png](https://h1.sec.gitlab.net/a/fdb5a210-a03f-4fce-b48b-994ca130209d/DOWN.png)
* [500forall.png](https://h1.sec.gitlab.net/a/1d4cece0-ddf0-4d96-b59b-0673cf36f26e/500forall.png)
* [payload.txt](https://h1.sec.gitlab.net/a/21d12a27-9c3d-4f54-888f-4d142f06c8f6/payload.txt)
* [17min-idk.png](https://h1.sec.gitlab.net/a/ee1c1301-a8a4-4f86-866d-fdc72419654a/17min-idk.png)
* [2022-11-08_04-13-47.mkv](https://h1.sec.gitlab.net/a/535a4ab8-452a-4d1a-af07-5e551b0894a6/2022-11-08_04-13-47.mkv)

## How To Reproduce

Please add [reproducibility information] to this section:

1.
1.
1.

[reproducibility information]: https://about.gitlab.com/handbook/engineering/security/#reproducibility-on-security-issues",1
118429246,2022-11-09 13:58:21.462,Remove breadcrumbs,"### Problem

Long time ago we introduced breadcrumbs for CustomersDot but the application has changed a lot since then and I suggest we remove breadcrumbs from the application because of following reasons:

1. We don't have more than 2 level of nesting pages anywhere in the application. That means breadcrumbs always render two levels: `Manage purchases -> New Subscription`
2. We use them only on `Manage purchases` pages.
3. And they do not match our Pajamas Design https://design.gitlab.com/components/breadcrumb/ :smile: 

![image](/uploads/a64ec7590f1c4f6d94e6bf46a1819b3b/image.png)

### Proposal

Let's just remove them?

### Result

### Next steps (if any)

### How will we measure success?",1
118395820,2022-11-09 04:29:28.089,Port GL code for urgency setting for Rails controllers,"### Problem

CDot lacks ability to set `urgency` on controller. `urgency` is available in [gitlab repo](https://docs.gitlab.com/ee/development/application_slis/rails_request_apdex.html#how-to-adjust-the-urgency) to allow devs to specify a fairer expectation of acceptable request duration. This means our APDEX scores are less useful, treating low and hight priorities as the same.

Currently on CDot, I think [any request taking more than 0.4 seconds](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/e7dd35ba9aec7a01e4dc89dd4b15c0ed61dc826b/lib/metrics/request_collector.rb#L31-L31) are counted as failure.

This will help https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4884

We ported [feature categorization earlier](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5287), and this will be build on top of that.

### Proposal

We need to port [GitLab's `urgency` setting over](https://gitlab.com/gitlab-org/gitlab/blob/61750d46bc057c63b072f34b885679091ba1a35c/lib/gitlab/endpoint_attributes.rb#L20), so we can set different `urgency` on different controllers.

### Result

More useful APDEX score

### Next steps (if any)

### How will we measure success?",2
118393636,2022-11-09 02:58:11.680,Update billing account when setting customer zuora_account_id,"### Problem

As part of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4795 the `UpdateBillingAccountService` was introduced to find or create a billing account for the customer based on its `zuora_account_id`.

Basically every time the `zuora_account_id` is set for the customer we want to also call the `UpdateBillingAccountService` to keep the customer's associated billing account up to date. This includes when the `zuora_account_id` is set to `nil`.

Reference MRs that do this:
- https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5810+
- https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5808+
- https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5811+

### Proposal

Update the code within `qa` / `quality` that sets customer's `zuora_account_id` to also update the billing account in a similar way.

Some places that do this (might not be the entire set):
* `PostZuoraRefreshTask`
* `OrderApiClient`
* `QA::Resource::Subscription`",2
118367804,2022-11-08 16:31:59.165,Add BE tracking to the subscription cancelation,"Add BE tracking to cancel subscription transaction.

| Type | Description | Event Category | Event Label | Event Action |
|------|-------------|----------|----------------|----------------|
| Event | Cancel subscription transaction is successful | `SubscriptionsController` | `cancel_subscription_sm`/`cancel_subscription_saas` | `transaction_successful` |",2
118258759,2022-11-07 11:17:44.652,Replace btn-gitlab with pajamas buttons,Replace the [`btn-gitlab` style](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/main/app/assets/stylesheets/components.scss#L8) with relevant classes from GitLab UI library.,1
118258602,2022-11-07 11:14:42.170,Eliminate dead code in pages.scss,Out `pages.scss` contains some dead code (leftovers) like `.gitlab-com-notification` or `plan-info`. This issue is about going through all root selectors and removing ones we don't use in our application.,1
118258231,2022-11-07 11:08:38.125,Remove heading overrides,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Currently we override headings (h1, h2) styles in https://gitlab.com/gitlab-org/customers-gitlab-com/blob/main/app/assets/stylesheets/main.scss#L8 We need to remove these, add proper spacing anywhere if required. 

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",1
118203932,2022-11-05 20:59:51.258,Update CDot Storage purchase flow to behave like the one in gitlab.com,"### Problem

It has been identified that CDot Storage purchase flow is [incompatible with the new Orders API](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4891#note_1141305264), due to some missing parameters in the Orders Preview API response to enable the user experience.

<details><summary>Click to see a screenshot</summary>
![CleanShot_2022-11-05_at_14.56.47_2x](/uploads/b7ee99e1b702c85c5c814846f27a6d3a/CleanShot_2022-11-05_at_14.56.47_2x.png)
</details>

CDot Storage purchase flow is being used by customers purchasing Storage for their personal namespaces and [customers with no last name](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4891#note_1150817989).

This issue is a blocker to completing https://gitlab.com/groups/gitlab-org/-/epics/8665+.

For additional discussions about this issue, please see https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4891.


### Proposal

1. Update CDot Storage purchase flow to look like and behave like gitlab.com Storage purchase flow (reference in Emily's [comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4891#note_1141770681))
1. CDot flow uses some variables that are not available once we transition to Orders API
1. We want CDot flow not to use those variables, and one way to do it is to align it to gitlab.com flow (which doesn't use `unit_price` variable)

<details><summary>Click to see a screenshot</summary>
![gitlabcom_storage_purchase](/uploads/e1b41c518e0a8f0cc247a8d943a7f68d/gitlabcom_storage_purchase.png)

</details>",5
118127982,2022-11-04 08:12:25.357,Old licenses unable to seat link due to missing zuora_subscription_name,"### Problem

In 2021/03 [we started to add `zuora_subscription_name`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2985/diffs#e4b267ec5ccedfebb4a6917d5f020bb4a4162d1b_83_83) when generating licenses. 

However the current seat link requires `zuora_subscription_name` for the purpose of finding `Order`. Therefore old licenses would fail to seat link.

Example: https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/3443377/events/119391762/

~~This error counts towards our error budget.~~ Currently this cause 422 response and should not count as apdex failures.

### Proposal

Either of the following:

1. Old licenses still has `subscription_id`. We can use that to either find Order directly, or find the subscription name.
1. Or, we can make seat link skip these type of errors, so they won't count towards error budget. This may be preferable if we don't care about old license data too much, and they will be rarer as time goes by.

### Result

Old license can still seat link.

### Next steps (if any)

### How will we measure success?",2
118091441,2022-11-03 15:25:27.390,Whitespaces in contact email lead to validation error on customer creation,"### Problem

While looking into failed `Provision` records (e.g. https://customers.gitlab.com/admin/provision/10708 or https://customers.gitlab.com/admin/provision/10853), it turned out that they were audited as failed because a `Customer` record could not be created. It could not be created due to the used email already existing in the system in a `Customer` record.

The used workflow for the `Customer` record creation uses [FindOrCreateCustomerService](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/e9eaf1283947f750b763c9e179626f0bbb341284/app/services/find_or_create_customer_service.rb). This service first attempts to [find a `Customer` record](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/e9eaf1283947f750b763c9e179626f0bbb341284/app/services/find_or_create_customer_service.rb#L14) via email before [creating a new one](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/e9eaf1283947f750b763c9e179626f0bbb341284/app/services/find_or_create_customer_service.rb#L17) in case none was found. This doesn't add up with the error we are seeing though (since first no record was found but then on creation there suddenly was one). Looking closer into the used emails, it turns out that the two mentioned examples both have a `\t` (some kind of whitespaces) at the end of the email. While it's correct that no `Customer` record is found when looking for one by email, upon attempting to create one, I think devise will automatically strip the whitespace from the email ([code](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/e9eaf1283947f750b763c9e179626f0bbb341284/config/initializers/devise.rb#L56)). Which explains why the email already exists error shows up at that step.

### Proposal

Strip any whitespaces before looking for a `Customer` record by email in the `FindOrCreateCustomerService` ([code](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/e9eaf1283947f750b763c9e179626f0bbb341284/app/services/find_or_create_customer_service.rb#L45)).

### Result

Stripping the whitespace before the lookup will find the already existing `Customer` record and any workflow that is supposed to be executed along with this logic will succeed and not fail anymore.",1
117986550,2022-11-02 08:28:37.491,"Follow-up from ""Use orders api in order preview graphql resolver""","The following discussion from !5701 should be addressed:

- [x] @tvellishetty started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5701#note_1156798990):  (+2 comments)

    > That seems to be a fairly new change in AmendSubscriptionService, do you think we should consider doing the same in AmendmentManagerService instead of accepting a customer param?

# Proposal

use `subscription.sold_to_customer` in `AmendmentManagerService` instead of accepting a customer param to be consistent with `AmendSubscriptionService`",2
117767305,2022-10-28 17:12:06.748,Update Subject Line of SaaS Provisioning Email for more obvious CTA,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
Currently the SaaS provisioning subject line does not make it obvious that action needs to be taken.

A change in subject line was first proposed in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5003, but this issue is expected to take a long time to deploy given it is blocked by https://gitlab.com/groups/gitlab-org/-/epics/8941.

### Proposal

Update the subject line of the SaaS Provisioning email from `[GitLab Transactions] Thanks for purchasing our GitLab.com hosted plan!` to `[GitLab Transactions] Set up your new subscription to get started`.

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result
Email contains a more obvious CTA, customers know they need to open the email.

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

If we do not have one already, we should consider adding a Mailer spec to validate this subject text.

```ruby
expect(mailer.subject).to eq('[GitLab Transactions] Set up your new subscription to get started')
```",1
117728815,2022-10-28 07:41:08.427,[Reseller] Hide `Buy new subscription` button for customers who have purchased subscription through reseller,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
For customers who have purchased subscriptions through resellers, we should hide the ""Buy new subscription"" button.

![cdot-sm-subscription-card-crossed](/uploads/268a4f53a15dd0972e6512e9a0559ac0/cdot-sm-subscription-card-crossed.png)

Note: Subscription management buttons will be hidden for reseller subscriptions in this issue - https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4946. In the current issue we need to tackle hiding the `Buy new subscription` button.

### Proposal

1. If a customer has an active subscription that was purchased via a Reseller, they **should not be able** to buy a new subscription.
   * Add 30 days to the SubscriptionEndDate of `Active (reseller) subscription` to account for the renewal term
   * 30 days is based on https://about.gitlab.com/handbook/sales/field-operations/order-processing/#late-renewals
1. If a customer purchased via a reseller in the past, and no longer has an active (reseller) subscription, they **should be able** to buy a new subscription.

### Implementation
| MR | Description |
| ------ | ------ |
| https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5925       |  Add `managed_by_reseller` attribute to subscription presenter output       |
| https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5926       | Hide `Buy new subscription` button if any of the subscriptions have `managed_by_reseller` true      |

### Result

### Next steps (if any)

- [x] @tgolubeva: Respond to https://gitlab.com/gitlab-com/support/ticket-attention-requests/-/issues/3095#note_1166598959 once this issue is closed.

### How will we measure success?",2
117728333,2022-10-28 07:34:29.373,[Testing] Use of Orders API in Order Preview GraphQL endpoint,"### Problem

This issue is to track the verification process to enable the use of [Use of Orders API in Order Preview GraphQL endpoint](https://gitlab.com/groups/gitlab-org/-/epics/9118).

**Associated FF:** [`use_orders_api_in_preview_graphql_resolver`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5068)

### Testing scenarios
| Scenario | Steps | Expected result | Pass? (Staging environment) | Notes |
|----------|-------|-----------------|-----------------------------|-------|
| Preview storage purchase in Gitlab  | 1. In Gitlab open an existing group with a paid plan or create a one. <br> 2. Navigate to Group > Settings > Usage Quotas > Storage tab <br> 3. Click on Purchase more storage | We should see the correct prorated ""Total"" in the UI | yes |  |

### Result

### Next steps (if any)",1
117728046,2022-10-28 07:31:15.873,[Feature Flag] Enable use_orders_api_in_preview_graphql_resolver - Order Preview GraphQL endpoint,"<!-- Title suggestion: [Feature flag] Enable description of feature -->

# Summary

<!-- Short description of what the feature is about and link to relevant other issues. -->

This issue is to rollout [Use of Orders API in Order Preview GraphQL endpoint](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5024) on CustomersDot production,
that is currently behind the [`use_orders_api_in_preview_graphql_resolver`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/177/edit) feature flag.

## Owners

- Team: Fulfillment Platform
- Most appropriate Slack channel to reach out to: `#g_fulfillment_platform`
- Best individual to reach out to: @tvellishetty 
- PM: GITLAB_HANDLE

## Stakeholders

<!--
Are there any other stages or teams involved that need to be kept in the loop?

- GITLAB_HANDLE of a PM
- The Support Team
- The Delivery Team
-->

## The Rollout Plan

- Partial Rollout with specific Customers on CustomersDot, [via Unleash](https://docs.gitlab.com/ee/operations/feature_flags.html#user-ids)
- Rollout on CustomersDot for a certain period (How long)
- Percentage Rollout on CustomersDot
- Rollout Feature for everyone as soon as it's ready

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? Sentry errors reports can also be useful to review -->

## Testing User/Customer IDs

<!--
List any Customer IDs for Customers that are happy to have this feature turned on early.

Remove if not applicable
-->

## Expectations

### What are we expecting to happen?

<!-- Describe the expected outcome when rolling out this feature -->

### What might happen if this goes wrong?

<!-- Should the feature flag be turned off? Any MRs that need to be rolled back? Communication that needs to happen? What are some things you can think of that could go wrong - data loss or broken pages? -->

### What can we monitor to detect problems with this?

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? -->

## Rollout Steps

### Rollout on non-production environments

- [x] Ensure that the feature MRs have been deployed to non-production environments, i.e. `customers-staging`.
- [x] Consider announcing that the flag will be enabled to potentially impacted groups, e.g. `#s_fulfillment_engineering`
- [x] Enable the feature globally on non-production environments by applying the appropriate environment, e.g. `customers-staging` and `customers-development`.
- [x] Notify the Software Engineers in Test (SETs) for Fulfillment via Slack and in a comment in this issue when enabling a feature flag in `customers-staging` as it can impact the QA pipeline.
- [x] Verify that the feature works as expected. Posting the QA result in this issue is preferable.

### Preparation before production rollout

- [x] Ensure that the feature MRs have been deployed to production
- [ ] Check if the feature flag change needs to be accompanied with a
  [change management issue](https://about.gitlab.com/handbook/engineering/infrastructure/change-management/#feature-flags-and-the-change-management-process).
  Cross link the issue here if it does.
- [x] Ensure that you or a representative in Fulfillment can be available for at least 2 hours after feature flag updates in production.
  If a different developer will be covering, or an exception is needed, please inform the Fulfillment team in #s_fulfillment_engineering
- [x] Ensure any documentation has been updated
- [ ] Announce on [the feature issue](ISSUE LINK) an estimated time this will be enabled on production if applicable
- [ ] If the feature might impact the user experience, notify `#s_fulfillment` and potentially `#support_gitlab-com`, as well as your team channel ([more guidance when this is necessary in the dev docs](https://docs.gitlab.com/ee/development/feature_flags/controls.html#communicate-the-change)).

### Global rollout on CustomersDot production

- [x] Confirm the feature flag is enabled on `staging` without incident
- [ ] Roll out the feature to targeted testing users first (if applicable)
- [ ] If applicable, [incrementally roll out](https://docs.gitlab.com/ee/operations/feature_flags.html#percent-rollout) the feature.
- [ ] Verify the change has the desired outcome with the limited rollout before enabling the feature globally on production.
- [x] Enable the feature globally on production environment
- [x] Announce on [the feature issue](ISSUE LINK) that the feature has been globally enabled.
- [ ] Wait for [at least one day for the verification term](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release).

### Release the feature

After the feature has been [deemed stable](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release),
the clean up should be done as soon as possible to permanently enable the feature and reduce complexity in the codebase.

<!-- The checklist here is to help stakeholders keep track of the feature flag status -->
- [ ] Create a merge request to remove `<feature-flag-name>` feature flag
  - [ ] Remove all references to the feature flag from the codebase
- [ ] Ensure that the cleanup MR has been deployed to both staging and production
- [ ] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [ ] Ensure production environment is still working as expected
- [ ] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [ ] Close this rollout issue.

## Rollback Steps

- [ ] This feature can be disabled by performing the following actions:
  - [ ] Disable the Unleash flag on the [feature flag page](LINK TO THE FEATURE FLAG EDIT PAGE)",1
117726253,2022-10-28 07:21:27.181,[Testing] Auto renewal preview using Orders API,"### Problem

This issue is to track the verification process to enable the use of [Using Orders API when previewing ineligibility for auto renewal notification AND upcoming auto renewal notification job](https://gitlab.com/groups/gitlab-org/-/epics/9047).

**Associated FF:** [`use_orders_api_preview_in_upcoming_saas_mailer`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5070)

### Testing scenarios
| Scenario | Steps | Expected result | Pass? (Staging environment) | Notes |
|----------|-------|-----------------|-----------------------------|-------|
| Upcoming auto renewal notification | 1. Start the GDK, CustomersDot and ZSim if testing in local <br> 2. Create a subscription in Zuora that has a term end date next week (set order date to last year + 1 week) <br> 3. Change linked namespace to a group in gitlab <br> 4. Wait for the order to sync, then find the order in the console `order = Order.last` <br> 5. Run `AutoRenew::SendUpcomingNotificationService.new(order: order).execute` from the console |  Sends the notification email stating card will be charged | yes |  |
| Ineligibility for auto renewal notification | follow till step 4. from above <br> 5. Turn of autopay for zuora customer <br> 6. set `eligibility_response = ServiceResponse.error(message: 'Ineligible for custom auto renew',payload: { reasons: [:auto_pay_disabled], order_id: order.id })` <br> 7. run `AutoRenew::SendIneligibleForUpcomingRenewalNotificationService.new(order: order, eligibility_response: eligibility_response).execute` | Sends the notification email stating invoice will be sent | yes | Workflow might no longer be in use. <br> `enable_sales_assisted_autorenew` ff is enabled in prod so required condition `:auto_pay_disabled` [will not be satisfied](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/app/services/auto_renew/eligibility_service.rb#L79). <br> Manually creating response and testing this to make sure there's no regression if the ff is turned off |

### Result

### Next steps (if any)",2
117726196,2022-10-28 07:21:11.583,[Feature Flag] Enable use_orders_api_preview_in_upcoming_saas_mailer - Auto renewal preview,"<!-- Title suggestion: [Feature flag] Enable description of feature -->

# Summary

<!-- Short description of what the feature is about and link to relevant other issues. -->

This issue is to rollout [Using Orders API when previewing ineligibility for auto renewal notification AND upcoming auto renewal notification job](https://gitlab.com/groups/gitlab-org/-/epics/9047) on CustomersDot production,
that is currently behind the [`use_orders_api_preview_in_upcoming_saas_mailer`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/174/edit) feature flag.

## Owners

- Team: Fulfillment Platform
- Most appropriate Slack channel to reach out to: `#g_fulfillment_platform`
- Best individual to reach out to: @tvellishetty 
- PM: GITLAB_HANDLE

## Stakeholders

<!--
Are there any other stages or teams involved that need to be kept in the loop?

- GITLAB_HANDLE of a PM
- The Support Team
- The Delivery Team
-->

## The Rollout Plan

- Partial Rollout with specific Customers on CustomersDot, [via Unleash](https://docs.gitlab.com/ee/operations/feature_flags.html#user-ids)
- Rollout on CustomersDot for a certain period (How long)
- Percentage Rollout on CustomersDot
- Rollout Feature for everyone as soon as it's ready

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? Sentry errors reports can also be useful to review -->

## Testing User/Customer IDs

<!--
List any Customer IDs for Customers that are happy to have this feature turned on early.

Remove if not applicable
-->

## Expectations

### What are we expecting to happen?

<!-- Describe the expected outcome when rolling out this feature -->

### What might happen if this goes wrong?

<!-- Should the feature flag be turned off? Any MRs that need to be rolled back? Communication that needs to happen? What are some things you can think of that could go wrong - data loss or broken pages? -->

### What can we monitor to detect problems with this?

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? -->

## Rollout Steps

### Rollout on non-production environments

- [x] Ensure that the feature MRs have been deployed to non-production environments, i.e. `customers-staging`.
- [ ] Consider announcing that the flag will be enabled to potentially impacted groups, e.g. `#s_fulfillment_engineering`
- [x] Enable the feature globally on non-production environments by applying the appropriate environment, e.g. `customers-staging` and `customers-development`.
- [x] Notify the Software Engineers in Test (SETs) for Fulfillment via Slack and in a comment in this issue when enabling a feature flag in `customers-staging` as it can impact the QA pipeline.
- [ ] Verify that the feature works as expected. Posting the QA result in this issue is preferable.

### Preparation before production rollout

- [x] Ensure that the feature MRs have been deployed to production
- [ ] Check if the feature flag change needs to be accompanied with a
  [change management issue](https://about.gitlab.com/handbook/engineering/infrastructure/change-management/#feature-flags-and-the-change-management-process).
  Cross link the issue here if it does.
- [x] Ensure that you or a representative in Fulfillment can be available for at least 2 hours after feature flag updates in production.
  If a different developer will be covering, or an exception is needed, please inform the Fulfillment team in #s_fulfillment_engineering
- [ ] Ensure any documentation has been updated
- [x] Announce on [the feature issue](ISSUE LINK) an estimated time this will be enabled on production if applicable
- [ ] If the feature might impact the user experience, notify `#s_fulfillment` and potentially `#support_gitlab-com`, as well as your team channel ([more guidance when this is necessary in the dev docs](https://docs.gitlab.com/ee/development/feature_flags/controls.html#communicate-the-change)).

### Global rollout on CustomersDot production

- [x] Confirm the feature flag is enabled on `staging` without incident
- [ ] Roll out the feature to targeted testing users first (if applicable)
- [ ] If applicable, [incrementally roll out](https://docs.gitlab.com/ee/operations/feature_flags.html#percent-rollout) the feature.
- [ ] Verify the change has the desired outcome with the limited rollout before enabling the feature globally on production.
- [x] Enable the feature globally on production environment
- [x] Announce on [the feature issue](ISSUE LINK) that the feature has been globally enabled.
- [ ] Wait for [at least one day for the verification term](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release).

### Release the feature

After the feature has been [deemed stable](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release),
the clean up should be done as soon as possible to permanently enable the feature and reduce complexity in the codebase.

<!-- The checklist here is to help stakeholders keep track of the feature flag status -->
- [ ] Create a merge request to remove `<feature-flag-name>` feature flag
  - [ ] Remove all references to the feature flag from the codebase
- [ ] Ensure that the cleanup MR has been deployed to both staging and production
- [ ] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [ ] Ensure production environment is still working as expected
- [ ] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [ ] Close this rollout issue.

## Rollback Steps

- [ ] This feature can be disabled by performing the following actions:
  - [ ] Disable the Unleash flag on the [feature flag page](LINK TO THE FEATURE FLAG EDIT PAGE)",1
117725193,2022-10-28 07:14:31.414,[Testing] Preview reconciliation workflow using Orders API,"### Problem

This issue is to track the verification process to enable the use of [Use of Orders API when sending email for upcoming reconciliation AND validating quoted invoice during reconciliation](https://gitlab.com/groups/gitlab-org/-/epics/9048).

**Associated FF:** [`use_orders_api_to_preview_quoted_invoice_amount`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5068)

### Testing scenarios
| Scenario | Steps | Expected result | Pass? (Staging environment) | Notes |
|----------|-------|-----------------|-----------------------------|-------|
| Upcoming reconciliation email  | 1. In Gitlab create a new group with 1 billable user. <br> 2. Purchase a paid plan, with subscription quantity=1. <br> 3. In customer dot rails console run <br>`order = Order.find_by_gl_namespace_id(group.id)` <br> `reconciliation = order.reconciliations.first` <br> `SendUpcomingReconciliationEmailJob.perform_now(reconciliation.id)`  | Should receive an email regarding upcoming reconciliation | yes |  |
| Reconciliation  | above steps + <br> 4. In customer dot rails console run `ReconciliationService.new(reconciliation).execute` | Should send email regarding completed reconciliation and can see an amendment to the subscription in zuora | yes |  |

### Result

### Next steps (if any)",1
117724311,2022-10-28 07:07:27.381,[Feature Flag] Enable use_orders_api_to_preview_quoted_invoice_amount - Reconciliation preview,"<!-- Title suggestion: [Feature flag] Enable description of feature -->

# Summary

<!-- Short description of what the feature is about and link to relevant other issues. -->

This issue is to rollout [Use of Orders API when sending email for upcoming reconciliation AND validating quoted invoice during reconciliation](https://gitlab.com/groups/gitlab-org/-/epics/9048) on CustomersDot production,
that is currently behind the [`use_orders_api_to_preview_quoted_invoice_amount`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/169/edit) feature flag.

## Owners

- Team: Fulfillment Platform
- Most appropriate Slack channel to reach out to: `#g_fulfillment_platform`
- Best individual to reach out to: @tvellishetty 
- PM: GITLAB_HANDLE

## Stakeholders

<!--
Are there any other stages or teams involved that need to be kept in the loop?

- GITLAB_HANDLE of a PM
- The Support Team
- The Delivery Team
-->

## The Rollout Plan

- Partial Rollout with specific Customers on CustomersDot, [via Unleash](https://docs.gitlab.com/ee/operations/feature_flags.html#user-ids)
- Rollout on CustomersDot for a certain period (How long)
- Percentage Rollout on CustomersDot
- Rollout Feature for everyone as soon as it's ready

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? Sentry errors reports can also be useful to review -->

## Testing User/Customer IDs

<!--
List any Customer IDs for Customers that are happy to have this feature turned on early.

Remove if not applicable
-->

## Expectations

### What are we expecting to happen?

<!-- Describe the expected outcome when rolling out this feature -->

### What might happen if this goes wrong?

<!-- Should the feature flag be turned off? Any MRs that need to be rolled back? Communication that needs to happen? What are some things you can think of that could go wrong - data loss or broken pages? -->

### What can we monitor to detect problems with this?

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? -->

## Rollout Steps

### Rollout on non-production environments

- [x] Ensure that the feature MRs have been deployed to non-production environments, i.e. `customers-staging`.
- [x] Consider announcing that the flag will be enabled to potentially impacted groups, e.g. `#s_fulfillment_engineering`
- [x] Enable the feature globally on non-production environments by applying the appropriate environment, e.g. `customers-staging` and `customers-development`.
- [x] Notify the Software Engineers in Test (SETs) for Fulfillment via Slack and in a comment in this issue when enabling a feature flag in `customers-staging` as it can impact the QA pipeline.
- [x] Verify that the feature works as expected. Posting the QA result in this issue is preferable.

### Preparation before production rollout

- [x] Ensure that the feature MRs have been deployed to production
- [ ] Check if the feature flag change needs to be accompanied with a
  [change management issue](https://about.gitlab.com/handbook/engineering/infrastructure/change-management/#feature-flags-and-the-change-management-process).
  Cross link the issue here if it does.
- [x] Ensure that you or a representative in Fulfillment can be available for at least 2 hours after feature flag updates in production.
  If a different developer will be covering, or an exception is needed, please inform the Fulfillment team in #s_fulfillment_engineering
- [x] Ensure any documentation has been updated
- [ ] Announce on [the feature issue](ISSUE LINK) an estimated time this will be enabled on production if applicable
- [ ] If the feature might impact the user experience, notify `#s_fulfillment` and potentially `#support_gitlab-com`, as well as your team channel ([more guidance when this is necessary in the dev docs](https://docs.gitlab.com/ee/development/feature_flags/controls.html#communicate-the-change)).

### Global rollout on CustomersDot production

- [x] Confirm the feature flag is enabled on `staging` without incident
- [ ] Roll out the feature to targeted testing users first (if applicable)
- [ ] If applicable, [incrementally roll out](https://docs.gitlab.com/ee/operations/feature_flags.html#percent-rollout) the feature.
- [ ] Verify the change has the desired outcome with the limited rollout before enabling the feature globally on production.
- [x] Enable the feature globally on production environment
- [x] Announce on [the feature issue](ISSUE LINK) that the feature has been globally enabled.
- [ ] Wait for [at least one day for the verification term](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release).

### Release the feature

After the feature has been [deemed stable](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release),
the clean up should be done as soon as possible to permanently enable the feature and reduce complexity in the codebase.

<!-- The checklist here is to help stakeholders keep track of the feature flag status -->
- [ ] Create a merge request to remove `<feature-flag-name>` feature flag
  - [ ] Remove all references to the feature flag from the codebase
- [ ] Ensure that the cleanup MR has been deployed to both staging and production
- [ ] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [ ] Ensure production environment is still working as expected
- [ ] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [ ] Close this rollout issue.

## Rollback Steps

- [ ] This feature can be disabled by performing the following actions:
  - [ ] Disable the Unleash flag on the [feature flag page](LINK TO THE FEATURE FLAG EDIT PAGE)",2
117724130,2022-10-28 07:02:44.342,[Testing] Reconciliation workflow using Orders API,"### Problem

This issue is to track the verification process to enable the use of 'Orders API in Reconciliation workflow'.

**Associated FF:** [`use_orders_api_reconciliation_workflow`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5066)

### Testing scenarios
| Scenario | Steps | Pass? (Staging environment) with links | Expected result |
|----------|-------|-----------------|-----------------------------|
| Reconciliation of Self-managed subscription  | 1. Register a new user: asubramanian+qsrtest@gitlab.com <br/> 2. Purchase Self managed Ultimate license for 20 (or any qty) users <br/> 3. Modify reconciliation entry for the new order by updating the user count to new greater number (e.g. 22) `reconciliation.update!(user_count: 22)` <br/> 4. Set turn_on_cloud_licensing__c to Yes `order.z_subscription.update(turn_on_cloud_licensing__c: 'Yes')` <br> 5. `SendUpcomingReconciliationEmailJob.perform_now(reconciliation.id)` <br/> Invoke reconciliation service `ReconciliationService.new(reconciliation.reload).execute` | :white_check_mark: <br> <br/> - [Zuora subscription](https://test.zuora.com/apps/Subscription.do?method=view&id=8a8aa2a584f77d4e0184f91c0d402966) <br/> - [Zuora order](https://test.zuora.com/orders#/view/O-00167928) <br/> - [Zuora Invoice](https://test.zuora.com/apps/NewInvoice.do?method=view&invoiceKey=8a8aa2a584f77d4e0184f91c0e90297a&flag=1) <br/> - [SalesForce opportunity](https://gitlab--staging.sandbox.my.salesforce.com/00674000004nnAX) <br/> - [Quote for Opportunity 00674000004nnAXAAY](https://gitlab--staging.sandbox.my.salesforce.com/a1j74000000LGWz?srPos=1&srKp=a1j)  | 1. Once the upcoming reconciliation email is triggered, verify QSR opportunity is created in SalesForce. <br/> <br/> 2. After reconciliation: <br/> - verify seat count is updated <br/> - Order description is set to `Automated seat reconciliation` <br/> - `GeneratedByProcess__c` custom field in invoice is set to `Automated seat reconciliation` |
| Reconciliation of SaaS subscription | 1. Register a new user: asubramanian+orderssaasqsr@gitlab.com <br/> 2. Purchase Self managed Ultimate license for 1 (or any qty) user <br/> 3. Add new user to the group and refresh seats <br/> 4. Set turn_on_cloud_licensing__c to Yes `order.z_subscription.update(turn_on_cloud_licensing__c: 'Yes')` <br> 5. `SendUpcomingReconciliationEmailJob.perform_now(reconciliation.id)`. <br/> Invoke reconciliation service `ReconciliationService.new(reconciliation.reload).execute` |  :white_check_mark: <br> <br/> - [Zuora subscription](https://test.zuora.com/apps/Subscription.do?method=view&id=8a8aa35084f77d59018507a509c218b9) <br/> - [Zuora order](https://test.zuora.com/orders#/view/O-00168635) <br/> - [Zuora Invoice](https://test.zuora.com/apps/NewInvoice.do?method=view&invoiceKey=8a8aa35084f77d59018507a50b2918d4&flag=1) <br/> - [SalesForce opportunity](https://gitlab--staging.sandbox.my.salesforce.com/00674000004npv4AAA) <br/> - [Quote for Opportunity 00674000004nnAXAAY](https://gitlab--staging.sandbox.my.salesforce.com/a1j74000000LHCS) | 1. Once the upcoming reconciliation email is triggered, verify QSR opportunity is created in SalesForce. <br/> <br/> 2. After reconciliation: <br/> - verify seat count is updated  <br/>  - Order description is set to `Automated seat reconciliation` <br/> - `GeneratedByProcess__c` custom field in invoice is set to `Automated seat reconciliation` |

### Result

### Next steps (if any)

### How will we measure success?",2
117724067,2022-10-28 07:00:41.233,[Feature flag] Enable use_orders_api_reconciliation_workflow - Reconciliation,"<!-- Title suggestion: [Feature flag] Enable description of feature -->

# Summary

<!-- Short description of what the feature is about and link to relevant other issues. -->

This issue is to rollout [Transition Reconciliation (QSR) workflow to use Orders API](https://gitlab.com/groups/gitlab-org/-/epics/9048) on CustomersDot production,
that is currently behind the [`use_orders_api_reconciliation_workflow`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/173/edit) feature flag.

## Owners

- Team: Fulfillment Platform
- Most appropriate Slack channel to reach out to: `#g_fulfillment_platform`
- Best individual to reach out to: @aish.sub
- PM: @tgolubeva @mgass1 

## Stakeholders

<!--
Are there any other stages or teams involved that need to be kept in the loop?

- GITLAB_HANDLE of a PM
- The Support Team
- The Delivery Team
-->

## The Rollout Plan

- Partial Rollout with specific Customers on CustomersDot, [via Unleash](https://docs.gitlab.com/ee/operations/feature_flags.html#user-ids)
- Rollout on CustomersDot for a certain period (How long)
- Percentage Rollout on CustomersDot
- Rollout Feature for everyone as soon as it's ready

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? Sentry errors reports can also be useful to review -->

## Testing User/Customer IDs

<!--
List any Customer IDs for Customers that are happy to have this feature turned on early.

Remove if not applicable
-->

## Expectations

### What are we expecting to happen?

<!-- Describe the expected outcome when rolling out this feature -->

### What might happen if this goes wrong?

<!-- Should the feature flag be turned off? Any MRs that need to be rolled back? Communication that needs to happen? What are some things you can think of that could go wrong - data loss or broken pages? -->

### What can we monitor to detect problems with this?

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? -->

## Rollout Steps

### Rollout on non-production environments

- [x] Ensure that the feature MRs have been deployed to non-production environments, i.e. `customers-staging`.
- [x] Consider announcing that the flag will be enabled to potentially impacted groups, e.g. `#s_fulfillment_engineering`
- [x] Enable the feature globally on non-production environments by applying the appropriate environment, e.g. `customers-staging` and `customers-development`.
- [x] Notify the Software Engineers in Test (SETs) for Fulfillment via Slack and in a comment in this issue when enabling a feature flag in `customers-staging` as it can impact the QA pipeline.
- [x] Verify that the feature works as expected. Posting the QA result in this issue is preferable.: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5067

### Preparation before production rollout

- [x] Ensure that the feature MRs have been deployed to production
- [ ] Check if the feature flag change needs to be accompanied with a
  [change management issue](https://about.gitlab.com/handbook/engineering/infrastructure/change-management/#feature-flags-and-the-change-management-process).
  Cross link the issue here if it does.
- [x] Ensure that you or a representative in Fulfillment can be available for at least 2 hours after feature flag updates in production.
  If a different developer will be covering, or an exception is needed, please inform the Fulfillment team in #s_fulfillment_engineering
- [ ] Ensure any documentation has been updated
- [x] Announce on [the feature issue](ISSUE LINK) an estimated time this will be enabled on production if applicable
- [ ] If the feature might impact the user experience, notify `#s_fulfillment` and potentially `#support_gitlab-com`, as well as your team channel ([more guidance when this is necessary in the dev docs](https://docs.gitlab.com/ee/development/feature_flags/controls.html#communicate-the-change)).

### Global rollout on CustomersDot production

- [x] Confirm the feature flag is enabled on `staging` without incident
- [ ] Roll out the feature to targeted testing users first (if applicable)
- [ ] If applicable, [incrementally roll out](https://docs.gitlab.com/ee/operations/feature_flags.html#percent-rollout) the feature.
- [ ] Verify the change has the desired outcome with the limited rollout before enabling the feature globally on production.
- [ ] Enable the feature globally on production environment
- [ ] Announce on [the feature issue](ISSUE LINK) that the feature has been globally enabled.
- [ ] Wait for [at least one day for the verification term](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release).

### Release the feature

After the feature has been [deemed stable](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release),
the clean up should be done as soon as possible to permanently enable the feature and reduce complexity in the codebase.

<!-- The checklist here is to help stakeholders keep track of the feature flag status -->
- [ ] Create a merge request to remove `<feature-flag-name>` feature flag
  - [ ] Remove all references to the feature flag from the codebase
- [ ] Ensure that the cleanup MR has been deployed to both staging and production
- [ ] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [ ] Ensure production environment is still working as expected
- [ ] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [ ] Close this rollout issue.

## Rollback Steps

- [ ] This feature can be disabled by performing the following actions:
  - [ ] Disable the Unleash flag on the [feature flag page](LINK TO THE FEATURE FLAG EDIT PAGE)

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

Ensure regular runs of end-to-end tests (`qa-only:self-managed`, `qa-only:saas`) in MR phases of this Feature Flag rollout.  Ensure end-to-end tests pass.",1
117723855,2022-10-28 06:54:31.570,[Testing] Auto renewal workflow using Orders API,"### Problem

This issue is to track the verification process to enable the use of 'Orders API in Auto renewal workflow'.

**Associated FF:** [`use_orders_api_auto_renew_workflow`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5064)

### Testing scenarios
| Scenario | Steps | Expected result | Pass? (Staging environment) | Notes |
|----------|-------|-----------------|-----------------------------|-------|
| Auto renewing SaaS subscription | Create a SaaS subscription with the [subscription terms](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5065#subscription-terms) listed and fulfills [eligibility criteria](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5065#eligibility-criteria-based-on-autoreneweligibilityservice) <br/>  | - Subscription renews for 1 year <br/> - `order.description` in Zuora is set to `AutoRenew by CustomersDot` <br/> - Payment is processed using default payment method <br/> - Sets `invoice.GeneratedByProcess` custom field to `AutoRenew by CustomersDot` <br/> - Quantity equals namespace billable count <br/> <br/> **SalesForce verification**: The subscription generates Zuora Order with action types `RenewSubscription` and `UpdateProduct`. This should generate 1 Quote Amendment, 1 Quote Rate Plan and 1 Quote Rate Plan Charge each for the order action types. | :white_check_mark: <br/> <br/> - [Verification walkthrough video](https://drive.google.com/file/d/1UonG1pPtovu5eC5EGvnJwpm1xQuIBC4w/view?usp=share_link) <br/> <br/> - [Example subscription](https://test.zuora.com/apps/Subscription.do?method=view&id=8a8aa1b484ea9cec0184eecd7af24825) <br/> [Example SalesForce Quote](https://gitlab--staging.sandbox.my.salesforce.com/a1j74000000LFEk) | **Test setup** <br/> [Payload to create a subscription due for Auto renewal snippet](https://gitlab.com/gitlab-org/customers-gitlab-com/-/snippets/2469063). Replace values as appropriate. |
| Auto renewing self managed subscription | - Create a self-managed subscription with the [subscription terms](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5065#subscription-terms) listed and fulfills [eligibility criteria](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5065#eligibility-criteria-based-on-autoreneweligibilityservice) <br/> - Create `reconciliation` record that reconciles 3 months prior to order `end_date`, and has `reconciled_on` set.  | - Subscription renews for 1 year <br/> - `order.description` in Zuora is set to `AutoRenew by CustomersDot` <br/> - Payment is processed using default payment method <br/> - Sets `invoice.GeneratedByProcess` custom field to `AutoRenew by CustomersDot` <br/> - Quantity equals subscription's total quantity <br/> <br/> **SalesForce verification**: The subscription generates Zuora Order with action types `RenewSubscription`. This should generate 1 Quote Amendment, 1 Quote Rate Plan and 1 Quote Rate Plan Charge each for the order action types. | :white_check_mark: <br/> [Verification walkthrough video](https://drive.google.com/file/d/1MePcr8R-43zIBTRKmV6ASBUzCvepg-r9/view?usp=share_link) <br/> <br/> [Example subscription](https://test.zuora.com/apps/Subscription.do?method=view&id=8a8aa2ad84eaaa1e0184ef57f08b65e2) <br/> [Example SalesForce Quote](https://gitlab--staging.sandbox.my.salesforce.com/a1j74000000LFF9?srPos=1&srKp=a1j) | **Test setup** <br/> [Payload to create a subscription due for Auto renewal snippet](https://gitlab.com/gitlab-org/customers-gitlab-com/-/snippets/2469063). Replace values as appropriate. |

**Note**: Additional testing scenarios can be found in [this comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5065#note_1202037801). 

### Subscription terms

- `TermEndDate` is either `today (t)` or `t-1`
- `TurnOnAutoRenew__c` set to `Yes` <br/> - Status is `Active`
- Renew count is greater than 0


#### Eligibility criteria (based on [AutoRenew::EligibilityService](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/f24d2263af46165e290c65fc1d478fe091a350a9/app/services/auto_renew/eligibility_service.rb#L22))

- If EoA starter / bronze is accepted, the subscription should not have multiple main products 
- Subscription should not be an add-only only subscription
- `customer` is present in `order`
- For self-managed subscription, ensure `sm_auto_renew_enabled` is enabled AND cloud license is enabled for subscription
- Default payment method is valid
- Last reconciliation was successful
- No renewal errors present
- Auto pay is enabled

### Result

### Next steps (if any)

### How will we measure success?",2
117723779,2022-10-28 06:52:05.947,[Feature flag] Enable use_orders_api_auto_renew_workflow - Auto Renewal,"<!-- Title suggestion: [Feature flag] Enable description of feature -->

# Summary

<!-- Short description of what the feature is about and link to relevant other issues. -->

This issue is to rollout [Transition Auto renewal workflow to use Orders API
](https://gitlab.com/groups/gitlab-org/-/epics/9047) on CustomersDot production,
that is currently behind the [`use_orders_api_auto_renew_workflow`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/168/edit) feature flag.

## Owners

- Team: Fulfillment Platform
- Most appropriate Slack channel to reach out to: `#g_fulfillment_platform`
- Best individual to reach out to: @aish.sub 
- PM: @tgolubeva @mgass1 

## Stakeholders

<!--
Are there any other stages or teams involved that need to be kept in the loop?

- GITLAB_HANDLE of a PM
- The Support Team
- The Delivery Team
-->

## The Rollout Plan

- Partial Rollout with specific Customers on CustomersDot, [via Unleash](https://docs.gitlab.com/ee/operations/feature_flags.html#user-ids)
- Rollout on CustomersDot for a certain period (How long)
- Percentage Rollout on CustomersDot
- Rollout Feature for everyone as soon as it's ready

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? Sentry errors reports can also be useful to review -->

## Testing User/Customer IDs

<!--
List any Customer IDs for Customers that are happy to have this feature turned on early.

Remove if not applicable
-->

## Expectations

### What are we expecting to happen?

<!-- Describe the expected outcome when rolling out this feature -->

### What might happen if this goes wrong?

<!-- Should the feature flag be turned off? Any MRs that need to be rolled back? Communication that needs to happen? What are some things you can think of that could go wrong - data loss or broken pages? -->

### What can we monitor to detect problems with this?

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? -->

## Rollout Steps

### Rollout on non-production environments

- [x] Ensure that the feature MRs have been deployed to non-production environments, i.e. `customers-staging`.
- [x] Consider announcing that the flag will be enabled to potentially impacted groups, e.g. `#s_fulfillment_engineering`
- [x] Enable the feature globally on non-production environments by applying the appropriate environment, e.g. `customers-staging` and `customers-development`.
- [x] Notify the Software Engineers in Test (SETs) for Fulfillment via Slack and in a comment in this issue when enabling a feature flag in `customers-staging` as it can impact the QA pipeline.
- [x] Verify that the feature works as expected. Posting the QA result in this issue is preferable.

### Preparation before production rollout

- [x] Ensure that the feature MRs have been deployed to production
- [ ] Check if the feature flag change needs to be accompanied with a
  [change management issue](https://about.gitlab.com/handbook/engineering/infrastructure/change-management/#feature-flags-and-the-change-management-process).
  Cross link the issue here if it does.
- [x] Ensure that you or a representative in Fulfillment can be available for at least 2 hours after feature flag updates in production.
  If a different developer will be covering, or an exception is needed, please inform the Fulfillment team in #s_fulfillment_engineering
- [ ] Ensure any documentation has been updated
- [ ] Announce on [the feature issue](ISSUE LINK) an estimated time this will be enabled on production if applicable
- [ ] If the feature might impact the user experience, notify `#s_fulfillment` and potentially `#support_gitlab-com`, as well as your team channel ([more guidance when this is necessary in the dev docs](https://docs.gitlab.com/ee/development/feature_flags/controls.html#communicate-the-change)).

### Global rollout on CustomersDot production

- [x] Confirm the feature flag is enabled on `staging` without incident
- [ ] Roll out the feature to targeted testing users first (if applicable)
- [ ] If applicable, [incrementally roll out](https://docs.gitlab.com/ee/operations/feature_flags.html#percent-rollout) the feature.
- [ ] Verify the change has the desired outcome with the limited rollout before enabling the feature globally on production.
- [ ] Enable the feature globally on production environment
- [ ] Announce on [the feature issue](ISSUE LINK) that the feature has been globally enabled.
- [ ] Wait for [at least one day for the verification term](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release).

### Release the feature

After the feature has been [deemed stable](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release),
the clean up should be done as soon as possible to permanently enable the feature and reduce complexity in the codebase.

<!-- The checklist here is to help stakeholders keep track of the feature flag status -->
- [ ] Create a merge request to remove `<feature-flag-name>` feature flag
  - [ ] Remove all references to the feature flag from the codebase
- [ ] Ensure that the cleanup MR has been deployed to both staging and production
- [ ] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [ ] Ensure production environment is still working as expected
- [ ] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [ ] Close this rollout issue.

## Rollback Steps

- [ ] This feature can be disabled by performing the following actions:
  - [ ] Disable the Unleash flag on the [feature flag page](LINK TO THE FEATURE FLAG EDIT PAGE)",1
117723503,2022-10-28 06:43:11.320,[Testing] Preview subscription update workflow using Orders API,"### Problem

This issue is to track the verification process to enable the use of 'Orders API in Subscription Upgrade workflow'.

**Associated FF:** [`use_orders_api_to_preview_amendment`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4774)

### Testing scenarios
| Scenario | Steps | Expected result | Pass? (Staging environment) | Notes |
|----------|-------|-----------------|-----------------------------|-------|
| 1. Purchase additional seats | 1. Go to manage purchases <br> 2. Choose an active subscription or create one <br> 3. Click on Add more seats | Values match when ff is on and off | :white_check_mark: Verified. https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5063#note_1207670522. |  |
| 2. CI minutes purchase from customers app |  1. Go to manage purchases <br> 2. Choose an active subscription or create one <br> 3. Click on Buy more CI minutes | Values match when ff is on and off |  :white_check_mark: Verified. https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5063#note_1207693427 |  |
| ~CI minutes purchase from Gitlab app~ |  |  |  | N/A. Doesn't use amendments, fetches plans data via graphql. |
| 3. Storage purchase from customers app | 1. Go to manage purchases <br> 2. Choose an active subscription or create one <br> 3. Click on Buy more storage | Values match when ff is on and off | :white_check_mark: Verified. https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5063#note_1207697540 |  |
| ~Storage purchase from Gitlab app~ |  |  |  | N/A. Covered in preview graphql scenario|
| 4. Renew without upgrade | 1. Go to manage purchases <br> 2. Choose an active subscription thats up for renewal or create a subscription with activation date in the past via the API <br> 3. Click on Renew | Values match when ff is on and off | :white_check_mark: Verified. https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5063#note_1208808134 |  |
| 5. Renew with upgrade | 1. Go to manage purchases <br> 2. Choose an active subscription thats up for renewal or create a subscription with activation date in the past via the API <br> 3. Click on Renew <br> 4. On renewal page change plan to Ultimate | Values match when ff is on and off | :white_check_mark: Verified. https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5063#note_1208810015 |  |
| 6. Renew with purchase of true ups | 1. Go to manage purchases <br> 2. Choose an active subscription thats up for renewal or create a subscription with activation date in the past via the API <br> 3. Click on Renew <br> 4. On renewal page add additional seats | Values match when ff is on and off | :white_check_mark: Verified. https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5063#note_1208813697 |  |
| 7. Renew with purchase of true ups and upgrade | 1. Go to manage purchases <br> 2. Choose an active subscription thats up for renewal or create a subscription with activation date in the past via the API <br> 3. Click on Renew <br> 4. On renewal page add additional seats and upgrade option | Values match when ff is on and off | :white_check_mark: Verified. https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5063#note_1208814642 |  |
| 8. Change namespace to group with insufficient seats | 1. Go to manage purchases <br> 2. Choose an active gitlab.com subscription <br> 3. Click on Change namespace <br> 4. In the change namespace screen choose a group that is using more seats than the current one | Values match when ff is on and off | :white_check_mark: Verified. https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5063#note_1208815854 |  |

### Result

### Next steps (if any)

### How will we measure success?",2
117723497,2022-10-28 06:43:01.786,[Testing] Update subscription workflow using Orders API,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

This issue is to track the verification process to enable the use of 'Orders API in Subscription Update workflow'.

**Associated FF:** [`use_orders_api_subscription_update_workflow` ](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4775)

### Testing scenarios

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

|Scenario|Steps|Pass? (Staging environment) with links|Expected result|Notes|
|---|---|---|---|---|
| Add seats | 1. Purchase a SaaS or self-managed subscription <br/> 2. Access the subscription card in CDot <br/> 3.  Select 'Add more seats' <br/> 4. Enter billing and quantity details. Click submit | :white_check_mark: <br/> <br/> - [Zuora subscription](https://test.zuora.com/apps/Subscription.do?method=view&id=8a8aa38684f77d5401850917c88f443b) <br/> - [Zuora Order](https://test.zuora.com/orders#/view/O-00169074) <br/> - [SalesForce Opportunity](https://gitlab--staging.sandbox.my.salesforce.com/00674000004nr5r) <br/> - [SalesForce Quote object](https://gitlab--staging.sandbox.my.salesforce.com/a1j74000000LHW3) | 1. Verify the new quantity is updated in Zuora and CDot. <br/> 2. Zuora Order with order action type: `UpdateProduct` <br/> <br/> **SalesForce verification:** <br/> - Opportunity is created <br/> - Quote objects: 1 QA, 1 QRP and 1 QRPC for type `UpdateProduct` ||
|Buy CI minutes (from CDot) | 1. Purchase a SaaS or self-managed subscription <br/> 2. Access the subscription card in CDot <br/> 3.  Select 'Buy more CI minutes' <br/> 4. Enter billing and quantity details. Click submit | :white_check_mark: <br/> <br/> - [Zuora subscription](https://test.zuora.com/apps/Subscription.do?method=view&id=8a8aa2a5850b398901850ca9350f4d59) <br/> - [Zuora Order](https://test.zuora.com/orders#/view/O-00169926) <br/> - [SalesForce opportunity](https://gitlab--staging.sandbox.my.salesforce.com/00674000004nswd) <br/> - [SalesForce quote object](https://gitlab--staging.sandbox.my.salesforce.com/a1j74000000LIGO?srPos=0&srKp=a1j) | 1. Verify new version of subscription is created in Zuora with `AddProduct` type order action. <br/> 2. Verify the CI minute product was purchased with appropriate quantity. Invoice was generated and payment was processed.  <br/> <br/> **SalesForce verification:** <br/> - Opportunity is created <br/> - Quote objects: 1 QA, 1 QRP and 1 QRPC for type `NewProduct` ||
|Buy CI minutes (from gitlab.com)| 1. Create a group and project (within in it) in dot com. Upgrade to Premium or Ultimate subscription <br/> 2. Navigate to `Usage Quotas` <br/> 3. Select `Pipelines` and click `Buy additional minutes`. Enter billing and quantity details. Click submit | :white_check_mark: <br/> <br/> - [Zuora subscription](https://test.zuora.com/apps/Subscription.do?method=view&id=8a8aa13f850b2c3301850df39aeb18ac) <br/> - [Zuora Order](https://test.zuora.com/orders#/view/O-00170212) <br/> - [SalesForce opportunity](https://gitlab--staging.sandbox.my.salesforce.com/00674000004o57L) <br/> - [SalesForce quote object](https://gitlab--staging.sandbox.my.salesforce.com/a1j74000000LIUB?srPos=0&srKp=a1j) |1. Verify new version of subscription is created in Zuora with `AddProduct` type order action. <br/> 2. Verify the CI minute product was purchased with appropriate quantity. Invoice was generated and payment was processed.  <br/> <br/> **SalesForce verification:** <br/> - Opportunity is created <br/> - Quote objects: 1 QA, 1 QRP and 1 QRPC for type `NewProduct`||
|Buy additional storage (from CDot)|1. Purchase a SaaS or self-managed subscription <br/> 2. Access the subscription card in CDot <br/> 3.  Select 'Buy more storage' <br/> 4. Enter billing and quantity details. Click submit|:white_check_mark: <br/> <br/> - [Zuora subscription](https://test.zuora.com/apps/Subscription.do?method=view&id=8a8aa021850b2c3b01850df913ad2f17) <br/> - [Zuora Order](https://test.zuora.com/orders#/view/O-00170213) <br/> - [SalesForce opportunity](https://gitlab--staging.sandbox.my.salesforce.com/00674000004o57Q) <br/> - [SalesForce quote object](https://gitlab--staging.sandbox.my.salesforce.com/a1j74000000LIUG?srPos=0&srKp=a1j) |1. Verify new version of subscription is created in Zuora with `AddProduct` type order action. <br/> 2. Verify the additional storage was purchased with appropriate quantity in CDot and gitlab.com. Invoice was generated and payment was processed.  <br/> <br/> **SalesForce verification:** <br/> - Opportunity is created <br/> - Quote objects: 1 QA, 1 QRP and 1 QRPC for type `NewProduct`|---|
|Buy additional storage (from gitlab.com)|1. Create a group and project (within in it) in dot com. Upgrade to Premium or Ultimate subscription <br/> 2. Navigate to `Usage Quotas` <br/> 3. Select `Storage` and click `Purchase more storage`. Enter billing and quantity details. Click submit|:white_check_mark: <br/> <br/> - [Zuora subscription](https://test.zuora.com/apps/Subscription.do?method=view&id=8a8aa13f850b2c3301850dfdf8f906f3) <br/> - [Zuora Order](https://test.zuora.com/orders#/view/O-00170214) <br/> - [SalesForce opportunity](https://gitlab--staging.sandbox.my.salesforce.com/00674000004o57f) <br/> - [SalesForce quote object](https://gitlab--staging.sandbox.my.salesforce.com/a1j74000000LIUL?srPos=0&srKp=a1j)|1. Verify new version of subscription is created in Zuora with `AddProduct` type order action. <br/> 2. Verify the additional storage was purchased with appropriate quantity in CDot and gitlab.com. Invoice was generated and payment was processed.  <br/> <br/> **SalesForce verification:** <br/> - Opportunity is created <br/> - Quote objects: 1 QA, 1 QRP and 1 QRPC for type `NewProduct`|---|
|Renewal only|1. Create a group in dot com. Purchase Premium/Ultimate subscription with end date in the last 3 days ([example request](https://gitlab.com/gitlab-org/customers-gitlab-com/-/snippets/2469063) to create subscription via API) <br/> 3. Access the subscription card in CDot <br/> 4. Select 'Renew', enter quantity same as existing quantity. Fill in the billing details. Submit the form.|:white_check_mark: <br/> <br/> - [Zuora subscription](https://test.zuora.com/apps/Subscription.do?method=view&id=8a8aa2a5850fd41b018511dcf9d7129a) <br/> - [Zuora Order](https://test.zuora.com/orders#/view/O-00170813) <br/> - [SalesForce opportunity](https://gitlab--staging.sandbox.my.salesforce.com/00674000004peJZ) <br/> - [SalesForce quote object](https://gitlab--staging.sandbox.my.salesforce.com/a1j74000000LIaJ?srPos=0&srKp=a1j) |1. Verify new version of subscription is created in Zuora with `RenewSubscription` order action type. <br/> 2. Verify the subscription is renewed, quantity is reflected in Zuora, CDot and dot com. Invoice is generated and payment is posted. <br/> <br/> <br/> **SalesForce verification:** <br/> - Opportunity is created <br/> - Quote objects: 1 QA, 1 QRP and 1 QRPC for type `RenewSubscription`|---|
|Renewal + Update|1. Create a group in dot com. Purchase Premium/Ultimate subscription with end date in the last 3 days ([example request](https://gitlab.com/gitlab-org/customers-gitlab-com/-/snippets/2469063) to create subscription via API) <br/> 3. Access the subscription card in CDot <br/> 4. Select 'Renew', fill in the billing and quantity details and submit. | :white_check_mark: <br/> <br/> - [Zuora subscription](https://test.zuora.com/apps/Subscription.do?method=view&id=8a8aa2a5850fd41b018511b1563d3547) <br/> - [Zuora Order](https://test.zuora.com/orders#/view/O-00170686) <br/> - [SalesForce opportunity](https://gitlab--staging.sandbox.my.salesforce.com/00674000004peCO) <br/> - [SalesForce quote object](https://gitlab--staging.sandbox.my.salesforce.com/a1j74000000LIUa?srPos=0&srKp=a1j) | 1. Verify new version of subscription is created in Zuora with `UpdateProduct` and `RenewSubscription` order action type. <br/> 2. Verify the subscription is renewed, quantity is updated in Zuora, CDot and dot com. Invoice is generated and payment is posted. <br/> <br/> <br/> **SalesForce verification:** <br/> - Opportunity is created <br/> - Quote objects: 1 QA, 1 QRP and 1 QRPC for type `UpdateProduct` and `RenewSubscription` |
|Renewal + Upgrade|1. Create a group in dot com. Purchase Premium subscription with end date in the last 3 days ([example request](https://gitlab.com/gitlab-org/customers-gitlab-com/-/snippets/2469063) to create subscription via API) <br/> 3. Access the subscription card in CDot <br/> 4. Select 'Renew', select 'Ultimate' plan and fill in the billing, quantity details. Submit form. | :white_check_mark: <br/> <br/> - [Zuora subscription](https://test.zuora.com/apps/Subscription.do?method=view&id=8a8aa01c850fc2c1018512013ef90232) <br/> - [Zuora Order](https://test.zuora.com/orders#/view/O-00170893) <br/> - [SalesForce opportunity](https://gitlab--staging.sandbox.my.salesforce.com/00674000004peXv) <br/> - [SalesForce quote object](https://gitlab--staging.sandbox.my.salesforce.com/a1j74000000LIeG?srPos=0&srKp=a1j) |1. Verify new version of subscription is created in Zuora with `RemoveProduct`, `AddProduct` and `RenewSubscription` order action type. <br/> 2. Verify the subscription is renewed, upgraded and quantity is updated in Zuora, CDot, dot com. Invoice is generated and payment is posted. <br/> <br/> <br/> **SalesForce verification:** <br/> - Opportunity is created <br/> - Quote objects: 1 QA, 1 QRP and 1 QRPC for type `AddProduct` and `RenewSubscription` <br/> 1 QA, 1 QRP for `RemoveProduct`. No QRPC for `RemoveProduct`|---|
|Renewal + Upgrade + trueups|1. Purchase Premium self managed subscription with end date in the last 3 days ([example request](https://gitlab.com/gitlab-org/customers-gitlab-com/-/snippets/2469063) to create subscription via API) <br/> 3. Access the subscription card in CDot <br/> 4. Select 'Renew', select 'Ultimate' plan and fill in the billing, quantity details and true up quantity. Submit form.|:white_check_mark: <br/> <br/> - [Zuora subscription](https://test.zuora.com/apps/Subscription.do?method=view&id=8a8aa2a5850fd41b018512b7b7cf1c65) <br/> - [Zuora Order](https://test.zuora.com/orders#/view/O-00170968) <br/> - [SalesForce opportunity](https://gitlab--staging.sandbox.my.salesforce.com/00674000004q1MA) <br/> - [SalesForce quote object](https://gitlab--staging.sandbox.my.salesforce.com/a1j74000000LIhy?srPos=0&srKp=a1j) |1. Verify new version of subscription is created in Zuora with `AddProduct` (for true up plan), `RemoveProduct`, `AddProduct` (for Ultimate subscription), `RenewSubscription` order action type. <br/> 2. Verify the subscription is renewed, upgraded and quantity is updated in Zuora, CDot. Invoice is generated and payment is processed for both true up and Ultimate purchase. <br/> <br/> <br/> **SalesForce verification:** <br/> - Opportunity is created <br/> - Quote objects: 1 QA, 1 QRP and 1 QRPC for type two `AddProduct` and `RenewSubscription` <br/> 1 QA, 1 QRP for `RemoveProduct`. No QRPC for `RemoveProduct`|---|
|Renewal + Upgrade + trueups an EoA subscription|1. Purchase Starter self managed subscription with end date in the last 3 days ([example request](https://gitlab.com/gitlab-org/customers-gitlab-com/-/snippets/2469063) to create subscription via API) <br/> 3. Access the subscription card in CDot <br/> 4. Select 'Renew', select 'Premium' plan and fill in the billing, quantity details (less than 25) and true up quantity. Submit form.|:white_check_mark: <br/> <br/> - [Zuora subscription](https://test.zuora.com/apps/Subscription.do?method=view&id=8a8aa01c850fc2c10185131b26c15004) <br/> - [Zuora Order](https://test.zuora.com/orders#/view/O-00170980) <br/> - [SalesForce opportunity](https://gitlab--staging.sandbox.my.salesforce.com/00674000004q1Px) <br/> - [SalesForce quote object](https://gitlab--staging.sandbox.my.salesforce.com/a1j74000000LIiX?srPos=0&srKp=a1j)|1. Verify new version of subscription is created in Zuora with `AddProduct` (for true up plan), `RemoveProduct`, `AddProduct` (for Premium subscription), `RenewSubscription` order action type. <br/> 2. Verify the new seats are purchased at discounted price of $ `108` per user. <br/> 3. Verify the subscription is renewed, upgraded and quantity is updated in Zuora, CDot. Invoice is generated and payment is processed for both true up and Premium purchase. <br/> <br/> <br/> **SalesForce verification:** <br/> - Opportunity is created <br/> - Quote objects: 1 QA, 1 QRP and 1 QRPC for type two `AddProduct` and `RenewSubscription` <br/> 1 QA, 1 QRP for `RemoveProduct`. No QRPC for `RemoveProduct`|---|

### Result

### Next steps (if any)

### How will we measure success?",2
117713861,2022-10-28 00:14:08.222,[Feature flag] Persist Billing Account related data,"<!-- Title suggestion: [Feature flag] Enable description of feature -->

# Summary

We are introducing logic that will populate `BillingAccount` and `BillingAccountMembership` as part of https://gitlab.com/groups/gitlab-org/-/epics/8950+ given we are going to iteratively add small bits we want to make sure we update at least all the places listed in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4795+ before start collecting the data in production.

This issue is to rollout the persistence of the data related to `BillingAccount` and `BillingAccountMembership` currently behind the [`account_data_persistence`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/171/edit) feature flag.

## Owners

- Team: ~""group::fulfillment platform"" 
- Most appropriate Slack channel to reach out to: `#g_fulfillment_platform`
- Best individual to reach out to: @tyleramos or @vshumilo 
- PM: @mgass1 

## Stakeholders

No other stakeholders.

## The Rollout Plan

Rollout Feature for everyone as soon as it's ready

## Expectations

### What are we expecting to happen?

Customer's associated billing account is kept up to date with `customer.zuora_account_id`.

### What might happen if this goes wrong?

- Disruptive exceptions in the code.

### What can we monitor to detect problems with this?

- Keep an eye on [Sentry](https://sentry.gitlab.net/gitlab/customersgitlabcom/#).
- Check `#s_fulfillment_status` for errors.

## Rollout Steps

### Rollout on non-production environments

- [x] Ensure that the feature MRs have been deployed to non-production environments, i.e. `customers-staging`.
- [x] Consider announcing that the flag will be enabled to potentially impacted groups, e.g. `#s_fulfillment_engineering`
- [x] Enable the feature globally on non-production environments by applying the appropriate environment, e.g. `customers-staging` and `customers-development`.
- [x] Notify the Software Engineers in Test (SETs) for Fulfillment via Slack and in a comment in this issue when enabling a feature flag in `customers-staging` as it can impact the QA pipeline.
- [x] Verify that the feature works as expected. Posting the QA result in this issue is preferable.

### Preparation before production rollout

- [x] Ensure that the feature MRs have been deployed to production
- [x] Check if the feature flag change needs to be accompanied with a
  [change management issue](https://about.gitlab.com/handbook/engineering/infrastructure/change-management/#feature-flags-and-the-change-management-process) - **Lena: Based on the criteria there is no need for change management issue
  Cross link the issue here if it does.**
- [x] Ensure that you or a representative in Fulfillment can be available for at least 2 hours after feature flag updates in production.
  If a different developer will be covering, or an exception is needed, please inform the Fulfillment team in #s_fulfillment_engineering
- [x] Ensure any documentation has been updated
- [x] Announce on [the feature issue](ISSUE LINK) an estimated time this will be enabled on production if applicable
- [x] If the feature might impact the user experience, notify `#s_fulfillment` and potentially `#support_gitlab-com`, as well as your team channel ([more guidance when this is necessary in the dev docs](https://docs.gitlab.com/ee/development/feature_flags/controls.html#communicate-the-change)).

### Global rollout on CustomersDot production

- [x] Confirm the feature flag is enabled on `staging` without incident
- [x] Roll out the feature to targeted testing users first (if applicable)
- [x] If applicable, [incrementally roll out](https://docs.gitlab.com/ee/operations/feature_flags.html#percent-rollout) the feature.
- [x] Verify the change has the desired outcome with the limited rollout before enabling the feature globally on production.
- [x] Enable the feature globally on production environment
- [x] Announce on [the feature issue](ISSUE LINK) that the feature has been globally enabled.
- [x] Wait for [at least one day for the verification term](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release).

### Release the feature

After the feature has been [deemed stable](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release),
the clean up should be done as soon as possible to permanently enable the feature and reduce complexity in the codebase.

<!-- The checklist here is to help stakeholders keep track of the feature flag status -->
- [x] Create a merge request to remove `<feature-flag-name>` feature flag
  - [x] Remove all references to the feature flag from the codebase
- [x] Ensure that the cleanup MR has been deployed to both staging and production
- [x] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [x] Ensure production environment is still working as expected
- [x] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [x] Close this rollout issue.

## Rollback Steps

- [ ] This feature can be disabled by performing the following actions:
  - [ ] Disable the Unleash flag on the [feature flag page](LINK TO THE FEATURE FLAG EDIT PAGE)",2
117707761,2022-10-27 20:15:10.704,Create SaaS Subscription Update specific mailer,"## Problem
Today, SaaS customers do not receive an email when they update their subscription (i.e. add seats). This is not a great customer experience, because they have no confirmation that the purchase went through.


## Proposal
Similar to what was done in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4543 for Cloud Licensing SM customers, setup a new mailer for subscription updates (e.g. new seats, upgrade plan, etc.) for SaaS customers that:
1. Provides a confirmation to customers that their additional purchase was successful, in a way that makes it clear this was an update/add-on to an existing subscription
1. Gives the customer an audit trail to follow in email

https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5057+ will implement a similar email for renewals.

Add the new mailer to the [mailers doc](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/doc/mailers/index.md).


### Proposed Template

NOTE: this will apply for additional seats, CI Minutes, Storage or an upgrade, so it needs to be somewhat vague.

<details><summary>Current email screenshot</summary>
![image](/uploads/a9a9658443afb73ac17acb2dc87215a5/image.png)

</details>

```

Hi Courtney👋
Thanks for your GitLab purchase! We appreciate your loyalty as a GitLab customer!

Your purchase will be automatically applied to the same namespace on the start date listed below. Here are the details of your subscription:

1. `product name`
2. `term start date`
2. `term end date`
3. `quantity`

If you require any assistance, contact GitLab support.

Thanks,

The GitLab Team

```

Note: keep the existing link to GitLab Support (https://about.gitlab.com/support/#contact-support) in the last line.

### Technical Requirements

1. Send these mailers for all subscription updates when:
   1. Purchase is of a SaaS subscription
1. Amendment Type is `NewProduct`, `UpdateProduct` or `UpdateSubscription`.
1. Namespace info is present.
   1. If the namespace info is missing the unlinked SaaS purchase email should be used instead.
1. Update logic to send the correct mailer based on subscription type (Renewal, Amendment, New Subscription)
1. Ensure the newer version of the template design is used, consistent with the current New Subscription SaaS purchase email
1. Put the new mailer behind a feature flag ([`new_saas_mailers`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/209/edit), same as used for https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5057+) until the voucher email is implemented.

**Note:** https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/6086+ should be completed directly after this one.

### Result
1. Customer receives an email confirmation when a SaaS product update is completed that clearly outlines an add-on/upgrade occurred.

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

Adding a mailer, should be accompanied by several tests.

- Mailer Specs
  - Mailer Subject
  - Mailer To/From (multiple To's? If so, which is first?)
  - Mailer Body?
- When is this Mailer activated?  Only during update? During creation?",2
117707740,2022-10-27 20:14:44.500,Create SaaS renewal specific mailer,"## Problem
Today, SaaS customers receive the same new purchase email no matter if they are purchasing a new subscription, renewing an existing, or simply adding a few seats. This is not a great customer experience, especially given how ""new purchase"" oriented the current email is.


## Proposal
Similar to what was done in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4542 for Cloud Licensing SM customers, setup a new mailer for renewing SaaS customers that:
1. Provides a confirmation to customers that their subscription renewal was successful, in a way that makes it clear this was a renewal and not a new subscription purchase
1. Gives the customer an audit trail to follow in email

https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5058+ will implement a similar email for subscription updates.

Add the new mailer to the [mailers doc](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/doc/mailers/index.md).

### Proposed Template

<details><summary>Current email screenshot</summary>
![image](/uploads/a9a9658443afb73ac17acb2dc87215a5/image.png)

</details>

```

Hi Courtney👋
Thanks for renewing your GitLab SaaS subscription! We appreciate your loyalty as a GitLab customer!

Your purchase will be automatically applied to the same namespace on the start date listed below. Here are the details of your subscription:

1. `product name`
2. `term start date`
2. `term end date`
3. `quantity`

If you require any assistance, contact GitLab support.


Thanks,

The GitLab Team

```

Note: keep the existing link to GitLab Support (https://about.gitlab.com/support/#contact-support) in the last line.

### Technical Requirements
1. Send these mailers for all subscription updates when:
   1. Purchase is of a SaaS subscription
1. Order Type = `Renewal`
1. Namespace info is present.
   1. If the namespace info is missing the new subscription mail should be used instead.
   1. Remove the reference to ""new subscription"" in the email subject and body.
1. Update logic to send the correct mailer based on subscription type (Renewal, Amendment, New Subscription)
1. Ensure the newer version of the template design is used, consistent with the current New Subscription SaaS purchase email
1. Put the new mailer behind a feature flag ([`new_saas_mailers`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/209/edit)) until the voucher email is implemented.

**Note:** https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/6085+ should be completed directly after this one.

### Result
1. Customer and revenue receive an email confirmation when a SaaS renewal is completed that clearly outlines a renewal occurred.


### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

Adding a mailer, should be accompanied by several tests.

- Mailer Specs
  - Mailer Subject
  - Mailer To/From (multiple To's? If so, which is first?)
  - Mailer Body?
- When is this Mailer activated?  Only during renewal?",3
117686598,2022-10-27 13:06:20.013,[Testing] Preview subscription upgrade workflow using Orders API,"### Problem

This issue is to track the verification process to enable the use of 'Orders API in Preview Subscription Upgrade workflow'.

**Associated FF:** [`use_orders_api_to_preview_upgrade `](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5051)

### Testing scenarios
| Scenario | Steps | Expected result | Pass? (Staging environment) | Notes |
|----------|-------|-----------------|-----------------------------|-------|
| Upgrade Saas | 1. Create anew SaaS subscription or find an existing active subscription in customerDot <br> 2. Click on `Upgrade plan` <br> 3. Verify details | details match when ff is both enabled and disabled | yes |  |
| Upgrade SM | 1. Create anew SM subscription or find an existing active subscription in customerDot <br> 2. Click on `Upgrade plan` <br> 3. Verify details | details match when ff is both enabled and disabled | yes |  |

### Result

### Next steps (if any)

### How will we measure success?",2
117686338,2022-10-27 13:01:56.234,[Testing] Upgrade subscription workflow using Orders API,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

This issue is to track the verification process to enable the use of 'Orders API in Subscription Upgrade workflow'.

**Associated FF:** [`use_orders_api_upgrade_workflow` ](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5050)

### Testing scenarios

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

|Scenario|Steps|Expected result|Pass? (Staging environment)|Notes|
|---|---|---|---|---|
| SaaS - Upgrade Subscription from Premium to Ultimate from gitlab.com | 1. Create a group in gitlab.com <br/> 2. Purchase Premium subscription for the group <br/> 3. Navigate to the billing page of the group, and upgrade it to Ultimate. | Verify subscription is upgraded, SalesForce opportunity and objects created as expected | :white_check_mark: <br/> [Verification walkthrough](https://drive.google.com/file/d/13tkqZjfsUCFo98G0XUUlBEYLbvSTXrXe/view?usp=share_link) <br/> <br/> [Zuora subscription](https://test.zuora.com/apps/Subscription.do?method=view&id=8a8aa1b48461fe190184665b96f07eda) |  |
| Self Managed - Upgrade Subscription from Premium to Ultimate from gitlab.com | 1. Purchase Premium Self managed subscription in CustomersDot <br/> 3. Navigate to the subscription card, and upgrade it to Ultimate. | Verify subscription is upgraded, SalesForce opportunity and objects created as expected | :white_check_mark: <br/> [Verification walkthrough](https://drive.google.com/file/d/16pHEwfIxWBqkNfctEVpnuxYBKq0D1wTY/view?usp=share_link) <br/> <br/> [Zuora subscription](https://test.zuora.com/apps/Subscription.do?method=view&id=8a8aa13f8475790b018475c45c9a0834) |  |
| EoA Upgrade Subscription from Starter to Ultimate from gitlab.com (**seat limit not exceeded**) | 1. Purchase starter plan with seat limit less than 25 <br/> 2. Sign in to CustomersDor <br/> 3. Select subscription card, upgrade it to Premium. Verify discounted price shows up. | Verify subscription is upgraded with appropriate discount applied | :white_check_mark: <br/> [Verification walkthrough](https://drive.google.com/file/d/14aqBO6JWf4rCrSjZskvHCe6h4Bj6LAlw/view?usp=share_link) <br/> <br/> [Zuora subscription](https://test.zuora.com/apps/Subscription.do?method=view&id=8a8aa06b8475791c018476009a5f123d) |  |
| EoA Upgrade Subscription from Starter to Ultimate from gitlab.com (**seat limit exceeded**) | 1. Purchase starter plan with seat limit greater than 25 <br/> 2. Sign in to CustomersDor <br/> 3. Select subscription card, upgrade it to Ultimate. | Verify subscription is upgraded with **no** discount applied | :white_check_mark: <br/> <br/> [Verification walkthrough](https://drive.google.com/file/d/1z62e5J7hF8YuhIKE1LFY1mssaUfaIziy/view?usp=share_link) <br/> <br/> [Zuora subscription](https://test.zuora.com/apps/Subscription.do?method=view&id=8a8aa1e08475790b018475eedf720d8b) |  |
|SalesForce attribute verification| Upgrade subscription using any one of the above scenarios | - Creates `QuoteAmendment` for `RemoveProduct`, `AddProduct` <br/> -  Creates `QuoteRatePlan` for `RemoveProduct`, `AddProduct` <br/> - Creates `QuoteRatePlanCharge` for `AddProduct` <br/> <br/> [Comparison sheet](https://docs.google.com/spreadsheets/d/1ltJBcLwOau3-95CuHCwlXiZP200XkCqdeKtdpoYNUBI/edit#gid=0) | :white_check_mark: [SalesForce Quote](https://gitlab--staging.sandbox.my.salesforce.com/a1d740000011D5p) |



### Result

### Next steps (if any)

### How will we measure success?",3
117685296,2022-10-27 12:46:52.579,[Feature Flag] Enable use_orders_api_to_preview_upgrade - Preview Subscription Upgrade,"<!-- Title suggestion: [Feature flag] Enable description of feature -->

# Summary

<!-- Short description of what the feature is about and link to relevant other issues. -->

This issue is to rollout [Use of Orders API when previewing subscription Upgrade workflow](https://gitlab.com/groups/gitlab-org/-/epics/9045) on CustomersDot production,
that is currently behind the [`use_orders_api_to_preview_upgrade`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/172/edit) feature flag.

## Owners

- Team: Fulfillment Platform
- Most appropriate Slack channel to reach out to: `#g_fulfillment_platform`
- Best individual to reach out to: @tvellishetty
- PM: GITLAB_HANDLE

## Stakeholders

<!--
Are there any other stages or teams involved that need to be kept in the loop?

- GITLAB_HANDLE of a PM
- The Support Team
- The Delivery Team
-->

## The Rollout Plan

- Partial Rollout with specific Customers on CustomersDot, [via Unleash](https://docs.gitlab.com/ee/operations/feature_flags.html#user-ids)
- Rollout on CustomersDot for a certain period (How long)
- Percentage Rollout on CustomersDot
- Rollout Feature for everyone as soon as it's ready

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? Sentry errors reports can also be useful to review -->

## Testing User/Customer IDs

<!--
List any Customer IDs for Customers that are happy to have this feature turned on early.

Remove if not applicable
-->

## Expectations

### What are we expecting to happen?

<!-- Describe the expected outcome when rolling out this feature -->

### What might happen if this goes wrong?

<!-- Should the feature flag be turned off? Any MRs that need to be rolled back? Communication that needs to happen? What are some things you can think of that could go wrong - data loss or broken pages? -->

### What can we monitor to detect problems with this?

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? -->

## Rollout Steps

### Rollout on non-production environments

- [x] Ensure that the feature MRs have been deployed to non-production environments, i.e. `customers-staging`.
- [ ] Consider announcing that the flag will be enabled to potentially impacted groups, e.g. `#s_fulfillment_engineering`
- [x] Enable the feature globally on non-production environments by applying the appropriate environment, e.g. `customers-staging` and `customers-development`.
- [x] Notify the Software Engineers in Test (SETs) for Fulfillment via Slack and in a comment in this issue when enabling a feature flag in `customers-staging` as it can impact the QA pipeline.
- [ ] Verify that the feature works as expected. Posting the QA result in this issue is preferable.

### Preparation before production rollout

- [x] Ensure that the feature MRs have been deployed to production
- [ ] Check if the feature flag change needs to be accompanied with a
  [change management issue](https://about.gitlab.com/handbook/engineering/infrastructure/change-management/#feature-flags-and-the-change-management-process).
  Cross link the issue here if it does.
- [x] Ensure that you or a representative in Fulfillment can be available for at least 2 hours after feature flag updates in production.
  If a different developer will be covering, or an exception is needed, please inform the Fulfillment team in #s_fulfillment_engineering
- [ ] Ensure any documentation has been updated
- [x] Announce on [the feature issue](ISSUE LINK) an estimated time this will be enabled on production if applicable
- [ ] If the feature might impact the user experience, notify `#s_fulfillment` and potentially `#support_gitlab-com`, as well as your team channel ([more guidance when this is necessary in the dev docs](https://docs.gitlab.com/ee/development/feature_flags/controls.html#communicate-the-change)).

### Global rollout on CustomersDot production

- [x] Confirm the feature flag is enabled on `staging` without incident
- [ ] Roll out the feature to targeted testing users first (if applicable)
- [ ] If applicable, [incrementally roll out](https://docs.gitlab.com/ee/operations/feature_flags.html#percent-rollout) the feature.
- [ ] Verify the change has the desired outcome with the limited rollout before enabling the feature globally on production.
- [x] Enable the feature globally on production environment
- [x] Announce on [the feature issue](ISSUE LINK) that the feature has been globally enabled.
- [ ] Wait for [at least one day for the verification term](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release).

### Release the feature

After the feature has been [deemed stable](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release),
the clean up should be done as soon as possible to permanently enable the feature and reduce complexity in the codebase.

<!-- The checklist here is to help stakeholders keep track of the feature flag status -->
- [ ] Create a merge request to remove `<feature-flag-name>` feature flag
  - [ ] Remove all references to the feature flag from the codebase
- [ ] Ensure that the cleanup MR has been deployed to both staging and production
- [ ] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [ ] Ensure production environment is still working as expected
- [ ] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [ ] Close this rollout issue.

## Rollback Steps

- [ ] This feature can be disabled by performing the following actions:
  - [ ] Disable the Unleash flag on the [feature flag page](LINK TO THE FEATURE FLAG EDIT PAGE)",1
117685281,2022-10-27 12:46:36.376,[Feature flag] Enable use_orders_api_upgrade_workflow - Subscription Upgrade,"<!-- Title suggestion: [Feature flag] Enable description of feature -->

# Summary

<!-- Short description of what the feature is about and link to relevant other issues. -->

This issue is to rollout [Use of Orders API in Subscription Upgrade workflow](https://gitlab.com/groups/gitlab-org/-/epics/9045) on CustomersDot production,
that is currently behind the [`use_orders_api_upgrade_workflow `](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/162/edit) feature flag.

## Owners

- Team: Fulfillment Platform
- Most appropriate Slack channel to reach out to: `#g_fulfillment_platform`
- Best individual to reach out to: @aish.sub 
- PM: @tgolubeva, @mgass1 

## Stakeholders

<!--
Are there any other stages or teams involved that need to be kept in the loop?

- GITLAB_HANDLE of a PM
- The Support Team
- The Delivery Team
-->

## The Rollout Plan

- Partial Rollout with specific Customers on CustomersDot, [via Unleash](https://docs.gitlab.com/ee/operations/feature_flags.html#user-ids)
- Rollout on CustomersDot for a certain period (How long)
- Percentage Rollout on CustomersDot
- Rollout Feature for everyone as soon as it's ready

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? Sentry errors reports can also be useful to review -->

## Testing User/Customer IDs

<!--
List any Customer IDs for Customers that are happy to have this feature turned on early.

Remove if not applicable
-->

## Expectations

### What are we expecting to happen?

<!-- Describe the expected outcome when rolling out this feature -->

### What might happen if this goes wrong?

<!-- Should the feature flag be turned off? Any MRs that need to be rolled back? Communication that needs to happen? What are some things you can think of that could go wrong - data loss or broken pages? -->

### What can we monitor to detect problems with this?

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? -->

## Rollout Steps

### Rollout on non-production environments

- [x] Ensure that the feature MRs have been deployed to non-production environments, i.e. `customers-staging`.
- [x] Consider announcing that the flag will be enabled to potentially impacted groups, e.g. `#s_fulfillment_engineering`
- [x] Enable the feature globally on non-production environments by applying the appropriate environment, e.g. `customers-staging` and `customers-development`.
- [x] Notify the Software Engineers in Test (SETs) for Fulfillment via Slack and in a comment in this issue when enabling a feature flag in `customers-staging` as it can impact the QA pipeline.
- [x] Verify that the feature works as expected. Posting the QA result in this issue is preferable.

### Preparation before production rollout

- [x] Ensure that the feature MRs have been deployed to production
- [ ] Check if the feature flag change needs to be accompanied with a
  [change management issue](https://about.gitlab.com/handbook/engineering/infrastructure/change-management/#feature-flags-and-the-change-management-process).
  Cross link the issue here if it does.
- [x] Ensure that you or a representative in Fulfillment can be available for at least 2 hours after feature flag updates in production.
  If a different developer will be covering, or an exception is needed, please inform the Fulfillment team in #s_fulfillment_engineering
- [ ] Ensure any documentation has been updated
- [ ] Announce on [the feature issue](ISSUE LINK) an estimated time this will be enabled on production if applicable
- [x] If the feature might impact the user experience, notify `#s_fulfillment` and potentially `#support_gitlab-com`, as well as your team channel ([more guidance when this is necessary in the dev docs](https://docs.gitlab.com/ee/development/feature_flags/controls.html#communicate-the-change)).

### Global rollout on CustomersDot production

- [x] Confirm the feature flag is enabled on `staging` without incident
- [ ] Roll out the feature to targeted testing users first (if applicable)
- [x] If applicable, [incrementally roll out](https://docs.gitlab.com/ee/operations/feature_flags.html#percent-rollout) the feature.
- [ ] Verify the change has the desired outcome with the limited rollout before enabling the feature globally on production.
- [ ] Enable the feature globally on production environment
- [ ] Announce on [the feature issue](ISSUE LINK) that the feature has been globally enabled.
- [ ] Wait for [at least one day for the verification term](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release).

### Release the feature

After the feature has been [deemed stable](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release),
the clean up should be done as soon as possible to permanently enable the feature and reduce complexity in the codebase.

<!-- The checklist here is to help stakeholders keep track of the feature flag status -->
- [ ] Create a merge request to remove `<feature-flag-name>` feature flag
  - [ ] Remove all references to the feature flag from the codebase
- [ ] Ensure that the cleanup MR has been deployed to both staging and production
- [ ] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [ ] Ensure production environment is still working as expected
- [ ] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [ ] Close this rollout issue.

## Rollback Steps

- [ ] This feature can be disabled by performing the following actions:
  - [ ] Disable the Unleash flag on the [feature flag page](LINK TO THE FEATURE FLAG EDIT PAGE)",1
117672442,2022-10-27 09:09:48.712,Switch to JSON formatting for Puma logs,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Puma logs are unstructured, unlike those of Rails and Sidekiq. The benefits of structured logs goes without saying.

### Proposal

Add a JSON formatter for Puma, GitLab has one already (implemented [here](https://gitlab.com/gitlab-org/gitlab/-/blob/38bf33e1ae652b3b752557ecb5da4ecd41d74a42/config/puma.rb.example#L81) and [here](https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/puma_logging/json_formatter.rb)), so it should be very easy to make the switch.

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->",2
117652330,2022-10-26 22:38:08.259,Fix GraphQL deprecation warnings,"### Problem

We are getting two GraphQL deprecation warnings:

```
Legacy `.graphql_definition` objects are deprecated and will be removed in GraphQL-Ruby 2.0. Use a class-based definition instead.
```

```
Legacy `.to_graphql` objects are deprecated and will be removed in GraphQL-Ruby 2.0. Remove `.to_graphql` to use a class-based definition instead.
```

These are coming from `spec/support/helpers/graphql_helpers.rb`, [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/spec/support/helpers/graphql_helpers.rb#L104) and [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/spec/support/helpers/graphql_helpers.rb#L155) respectively.

### Proposal

##### Proposal 1
The only tests that use `GraphqlHelpers` is https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/spec/graphql/resolvers/subscription_spec.rb. IMO we should:

1. Move any missing test coverage from the [resolver spec](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/spec/graphql/resolvers/subscription_spec.rb) to the [request spec](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/spec/requests/graphql/subscription_spec.rb)
2. Remove `GraphqlHelpers`. This helper recreates behavior from the GraphQL gem instead of testing it directly. I don't think this is worth any potential test suite speed increase we may see from using it.

##### Proposal 2

Alternatively, we could probably pull in the latest [`GraphqlHelper` from Gitlab](https://gitlab.com/gitlab-org/gitlab/-/blob/master/spec/support/helpers/graphql_helpers.rb)",1
117645253,2022-10-26 19:43:49.038,Self Managed instance generating new cloud license each sync,"# Bug

## Summary

Customer is using a cloud license activation code on two separate instances.  One instance has activated and installed one license; the other instance appears to be syncing and retrieving a new cloud license every day for the same subscription

[customer ticket](https://gitlab.zendesk.com/agent/tickets/336444)  
[customer account](https://customers.gitlab.com/admin/customer/1315/edit)  
[subscription](https://www.zuora.com/apps/Subscription.do?method=view&id=8a128eda83b63aee0183c25ad8dc10cb)  
[instance activations](https://customers.gitlab.com/admin/cloud_activation/12486/list_self_managed_instance_activations)

**The server duplicating licenses is instance id 4632**

```ruby
#<SelfManagedInstanceActivation:0x00005608b3a21018
 id: 4717,
 created_at: Tue, 11 Oct 2022 11:30:05.625817000 UTC +00:00,
 updated_at: Tue, 11 Oct 2022 11:30:05.639788000 UTC +00:00,
 activated_at: Tue, 11 Oct 2022 11:30:05.639221000 UTC +00:00,
 self_managed_instance_id: 4632,
 cloud_activation_id: 12486>
#<SelfManagedInstance:0x00005608b3bdb598
 id: 4632,
 created_at: Tue, 11 Oct 2022 11:30:05.617226000 UTC +00:00,
 updated_at: Tue, 11 Oct 2022 11:30:05.617226000 UTC +00:00,
 instance_identifier: ""dd942c34-9529-4bcb-829d-51f2707fa289"">

#<SelfManagedInstanceActivation:0x00005608b595da08
 id: 4727,
 created_at: Tue, 11 Oct 2022 14:32:54.200416000 UTC +00:00,
 updated_at: Tue, 11 Oct 2022 14:32:54.210432000 UTC +00:00,
 activated_at: Tue, 11 Oct 2022 14:32:54.210054000 UTC +00:00,
 self_managed_instance_id: 4642,
 cloud_activation_id: 12486>
#<SelfManagedInstance:0x00005608b4cb99f0
 id: 4642,
 created_at: Tue, 11 Oct 2022 14:32:54.193613000 UTC +00:00,
 updated_at: Tue, 11 Oct 2022 14:32:54.193613000 UTC +00:00,
 instance_identifier: ""f7e0452b-2be6-4a53-8b5c-68cf0696846f"">
```

According to the most recent `LicenseSeatLink` entries for each instance:

instance id 4642 is running GitLab 15.3.4-ee as of Wed, 26 Oct 2022 04:56:09.270189000 UTC  
instance id 4632 is running GitLab 15.4.0-ee as of Wed, 26 Oct 2022 04:18:07.674231000 UTC


```ruby
SelfManagedInstanceActivation.find(4717).licenses.count
=> 13

SelfManagedInstanceActivation.find(4727).licenses.count
=> 2
```

## Steps to reproduce

Unsure


## Relevant logs and/or screenshots

screenshot from customer's server with the duplicate licenses, taken roughly 2022-10-18

![screenshot-2022-10-26-15-31](/uploads/b04d655a527c1fe634dee2840e617817/screenshot-2022-10-26-15-31.png)

## Workarounds

This is mostly cosmetic on the customer's side.  On our side, it is generating superfluous licenses but otherwise causes no issues that I see

## Reported examples

1. https://gitlab.zendesk.com/agent/tickets/336444
1. https://gitlab.zendesk.com/agent/tickets/340985
1. https://gitlab.zendesk.com/agent/tickets/341699
2. https://gitlab.zendesk.com/agent/tickets/339642
3. https://gitlab.zendesk.com/agent/tickets/352894
4. https://gitlab.zendesk.com/agent/tickets/372289
5. https://gitlab.zendesk.com/agent/tickets/373382

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->

## Proposal

We could look into changing one of these two:
1. Changing the callback from `before_validation` to `after_initialize` ([relevant code](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/53b47c47e5ed54c849dc014d8b710d367250cacf/app/models/license.rb#L83))
2. Perform a `valid?` call on the new built license before comparing it to the most recent license ([relevant code](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/53b47c47e5ed54c849dc014d8b710d367250cacf/app/services/build_license_from_subscription_service.rb#L43) and [this code](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/53b47c47e5ed54c849dc014d8b710d367250cacf/app/services/license_notification_service.rb#L92)).
  - We could even consider calling the `valid?` in the [`License#equal_to?` method](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/53b47c47e5ed54c849dc014d8b710d367250cacf/app/models/license.rb#L157).",1
117568193,2022-10-25 21:06:01.497,Scheduled maintenance for CustomersDot on 2022-11-13 03:00 UTC,"Zuora Billing will undergo planned maintenance on 2022-11-13 from 03:00 UTC to 04:00 UTC.  This means CustomersDot (CDot) should be in maintenance mode during this window to avoid any errors for customers.  CDot can automatically put itself into maintenance mode based on health checks (which include Zuora) but we should still have someone on standby to ensure that CDot goes into and out of maintenance mode as expected.

## Maintenance window

Sunday 2022-11-13 03:00 - 04:00 UTC

- https://gitlab.com/gitlab-com/business-technology/enterprise-apps/financeops/finance-systems/-/issues/952+
- See [official release](https://community.zuora.com/communities/community-home/digestviewer/viewthread?GroupId=475&MessageKey=ec7a72cc-934e-45ae-8987-aa0961991be0&CommunityKey=c91d3142-7e65-4715-9e11-7eb5c768c213&ReturnUrl=%2fcommunities%2fcommunity-home%2fdigestviewer%3fcommunitykey%3dc91d3142-7e65-4715-9e11-7eb5c768c213) from Zuora regarding this episode of planned maintenance**

## Process

Toggle `maintenance_mode` in https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/111/edit

[ASSIGNED-USERNAME] - On Stand-by to monitor maintenance mode activities and jump in to assist as needed.

1. [x] Created scheduled maintenance issue in https://gitlab.com/gitlab-com/gl-infra/production for the CMOC to update the GitLab status page
    - https://gitlab.com/gitlab-com/gl-infra/production/-/issues/7929
1. [ ] Set maintenance mode in CustomersDot at 2022-11-13 03:00 UTC
    - This step could be done automatically by CDot.  An engineer could just check that maintenance mode was enabled after Zuora health checks started failing.
1. [ ] Test the maintenance page is working at 2022-11-13 03:00 UTC
1. [ ] Quiet Sidekiq process from [Sidekiq Admin UI](https://customers.gitlab.com/sidekiq/busy) at 7PM PT
    -  This will prevent Sidekiq from processing new queued jobs but jobs will continue to enqueue.
1. [ ] [Ensure the CMOC](https://about.gitlab.com/handbook/engineering/infrastructure/incident-management/#how-to-engage-the-cmoc) has updated status.gitlab.com
1. [ ] Remove maintenance mode in CustomersDot at 2022-11-13 04:00 UTC
    -  This step could be done automatically by CDot.  An engineer could just check that maintenance mode was disabled after Zuora health checks began passing again.
1. [ ] Test the maintenance page is gone at 2022-11-13 04:00 UTC
1. [ ] Manually restart Sidekiq at 2022-11-13 04:00 UTC
    - Connect to CDot production server and run `sudo supervisorctl restart customers-sidekiq` as [documented here](https://gitlab.com/gitlab-org/customers-gitlab-com#deployments)
1. [ ] [Ensure the CMOC](https://about.gitlab.com/handbook/engineering/infrastructure/incident-management/#how-to-engage-the-cmoc) has updated status.gitlab.com
1. [ ] Manually enqueue scheduled jobs from [the Recurring Jobs tab](https://customers.gitlab.com/sidekiq/recurring-jobs) missed during maintenance window
    - These were likely the jobs missed based on the planned outage window: 
      - `ExpireOrderCronJob`
      - `BillingRateUpdateCronJob`
      - `ReconciliationCronJob`
      - `UpcomingReconciliationNotificationCronJob`
      - `AutoRenewCronJob`",0
117521500,2022-10-25 09:21:50.841,FF use of Orders API in Order Preview GraphQL endpoint,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Now that [preview amendment using orders API](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4694) is merged, we can update the workflows to preview using the orders API using a feature flag to control its rollout.

This issue integrates the use of Orders API in GraphQL endpoint for Order Preview.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",2
117520161,2022-10-25 09:03:14.590,FF use of Orders API in auto renewal workflow,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Now that [preview amendment using orders API](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4694) is merged, we can update the workflows to preview using the orders API using a feature flag to control its rollout.

This issue integrates the use of Orders API in auto renewal workflow:

* Ineligibility for renewal notification job
* Upcoming notification job

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

In `AutoRenew::SendUpcomingNotificationService` and `AutoRenew::SendIneligibleForUpcomingRenewalNotificationService`, invoke `Zuora::Orders::AmendmentManagerService` if the request is to preview and FF `<FF-name>` is enabled.

### Next steps (if any)

### How will we measure success?",2
117519646,2022-10-25 08:53:31.538,FF use of Orders API in reconciliation workflow,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Now that [preview amendment using orders API](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4694) is merged, we can update the workflows to preview using the orders API using a feature flag to control its rollout.

This issue integrates the use of Orders API in reconciliation workflow:

- upcoming reconciliation
- validating quoted invoice during reconciliation

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

In `SendUpcomingReconciliationEmailJob` and `ReconciliationService`, invoke `Zuora::Orders::AmendmentManagerService` if the request is to preview and FF `use_orders_api_to_preview_quoted_invoice_amount` is enabled.

### Result

Orders API is used in reconciliation workflow as a replacement to Amend API.

### Next steps (if any)

### How will we measure success?",2
114125773,2022-08-30 06:24:13.768,Add data mapping for Arrowsphere,"### Background:

Previously Arrow system talks to Gitlab Platypus API endpoint(and then Platypus talks to CustomersDot). We will remove Platypus in this communication chain.

* previously(as of today): `Arrow -> Platypus -> CustomersDot`
* after removing Platypus, Arrow will directly talk to CustomersDot: `Arrow -> CustomersDot`

In order to achieve this, there are several changes required on CustomersDot side.

1. implement OAuth provider in CustomersDot. This allows secure API access control. We propose to use `doorkeeper` gem.
1. add required data mapping in CustomersDot. This maps some Arrow payload data to the CustomersDot/Zuora/SFDC required values.
1. track the Arrow order status. The status is used to:  allow Arrow to poll the order status; validate duplicate requests; ensure to take action safely only on the right order status.
1. provide API endpoint for Arrow to poll the order status.

For more information, refer to the task breakdown at https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4637#note_1062429151.

### This issue's scope

This issue covers the second task `add required data mapping in CustomersDot`

#### Proposal
Below are required mappings. Refer to [Arrow to Platypus mapping column](https://docs.google.com/spreadsheets/d/138UqGiYfGc8A4HyBin6JrsRelmjfGbqvg3UZ0nJaLTU/edit#gid=0&range=B1) to find the information on how to map these values.
   * externalSubscriptionSource: generated based on authenticated client(ATM the value is `Arrowsphere`)
      - Once doorkeeper authentication succeeds, we could get from `doorkeeper_token.application.name`. (when creating the OAuth application, set the application name as `Arrowsphere`)
   * fulfillmentDistributor: add a section in `application.yml`
   * $\['orderLines'\]\[0\]\['productId'\]: add a section in `application.yml`
   * $\['invoiceOwnerId'\]: add a section in `application.yml`
   * invoiceOwnerAccountNumber: add a section in `application.yml`


### Problem

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",2
114125393,2022-08-30 06:17:28.605,Implement OAuth provider in CDot,"### Background:

Previously Arrow system talks to Gitlab Platypus API endpoint(and then Platypus talks to CustomersDot). We will remove Platypus in this communication chain.
- previously(as of today):  `Arrow -> Platypus -> CustomersDot`
- after removing Platypus, Arrow will directly talk to CustomersDot:  `Arrow -> CustomersDot`

In order to achieve this, there are several changes required on CustomersDot side.
1. implement OAuth provider in CustomersDot. This allows secure API access control. We propose to use `doorkeeper` gem.
2. add required data mapping in CustomersDot. This maps some Arrow payload data to the CustomersDot/Zuora/SFDC required values.
3. track the Arrow order status. The status is used to: allow Arrow to poll the order status; validate duplicate requests; ensure to take action safely only on the right order status.
4. provide API endpoint for Arrow to poll the order status.

For more information, refer to the task breakdown at https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4637#note_1062429151.

### This issue's scope

This issue covers the first task `implement OAuth provider in CustomersDot`

#### Proposal
   * Use `doorkeeper` gem. Follow the documentation https://doorkeeper.gitbook.io/guides/ to configure and coding. 
     * For the marketplace, we only need to secure API endpoint. So only support `client_credentials` flow is OK.
     * Configure scope(s)
     * **Question**: it seems we do not need to configure resource_owner_authenticator to secure API?
       * I skipped this part in my local configuration, and it works. All resource_owner_id is `null` in the `oauth_access_tokens` table. As in API, we only care about the client itself.
       * **Answer** I believe so for `client_credentials`.
          * The `client_credentials` grant type provides an application with a way to access its own service account. 
          * Marketplace application's `own service account` is the this Marketplace provider(e.g. Arrow)'s Zuora account. Once authenticated, the application has access to resources belonging to the Zuora subscriptions whose `invoice owner account is the Marketplace provider's Zuora account`. For example, such resources could be `status` in `MarketplaceOrder` table, Zuora subscriptions, etc.
          * In CustomersDot, one easy and reliable way to check whether a Zuora subscription is owned by a Marketplace provider is: check the `Zuora subscription's external_subscription_source == Marketplace provider's name`
          * In `POST /v1/orders`, we should always set the `external_subscription_source` -- We already did this.
          * In `GET /v1/orders/{external_subscription_id}`, we should only search subscriptions with `external_subscription_source == the Marketplace provider's name`.
          * The `Marketplace provider's name` should be discovered by `doorkeeper_token.application.name`. **NOTE**: for security reasons, we should **NEVER get this value from user input**(such as: request URL, request header, or request body). We should **ALWAYS get the value from the valid access_token**. This is important to ensure one Marketplace provider cannot create/query resources owned by other Marketplace providers.-- ATM we only have `Arrowsphere`, but in the future, we could have more Marketplace providers.
   * Generate `client_id`/`client_secret`(with `scope`) and send to Arrow.
     * we can do this through rails console `Doorkeeper::Application.create(name: ""MyApp"", redirect_uri: """", scopes: [""marketplace_order_create""])`
   * Arrow: update `client_id`/`client_secret`/`scope` generated from CDot

### Problem

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

   * Generate `client_id`/`client_secret`(with `scope`) and send to Arrow.
     * we can do this through rails console `Doorkeeper::Application.create(name: ""MyApp"", redirect_uri: """", scopes: [""marketplace_order_create""])`
   * Arrow: update `client_id`/`client_secret`/`scope` generated from CDot
   * Arrow send API request to test the authentication

### How will we measure success?",3
114110139,2022-08-29 21:48:17.798,Rename AmendmentManagerService service class,"The following discussion from !5248 should be addressed:

- [x] @jagood started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5248#note_1079726703):  (+4 comments)

    > **thought**: I wondered at some point if it might make sense for this to be in the `Amendment` module? :thinking: 
    > 
    > ```ruby
    > module Zuora
    >   module Orders
    >     module Amendment
    >       module ManagerService
    > ```
    > 
    > Though I kind of like the combined `AmendmentManagerService` name better, I wonder if this might put it closer to other relevant code?  If it doesn't, then I wonder if that's a sign that there may be a better name for the class?",1
114028718,2022-08-29 13:36:56.280,Use named subject in upcoming renewal issues notifications spec,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
As per this [comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5307#note_1078434673), using a named subject could shorten the ~~`spec/services/auto_renew/send_upcoming_renewal_issues_notification_service_spec.rb`~~ `spec/services/auto_renew/send_ineligible_for_upcoming_renewal_notification_service_spec.rb` (file was [renamed](https://gitlab.com/gitlab-org/customers-gitlab-com/-/commit/2ecf43e7fd462b18d962345e8946f34e562a736a)) spec a lot. 
### Proposal
Use named subject in ~~`spec/services/auto_renew/send_upcoming_renewal_issues_notification_service_spec.rb`~~ `/spec/services/auto_renew/send_ineligible_for_upcoming_renewal_notification_service_spec.rb` (file was [renamed](https://gitlab.com/gitlab-org/customers-gitlab-com/-/commit/2ecf43e7fd462b18d962345e8946f34e562a736a)) as per this [comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5307#note_1078434673).

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",1
113925225,2022-08-26 15:18:00.271,Determine RenewSubscription order action using ActionTypeGenerator,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Use `ActionTypeGenerator` to determine when a request pertains to Renewing a subscription.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

![Amendment_Manager_Service_](/uploads/6be717aa794e29a447a0f206b7b30a30/Amendment_Manager_Service_.png)

In this issue, we address (1), (2) and (3) for 'RenewSubscription' functionality in the following ways:

(1) Add method `#check_renew_subscription` to `Orders::Amendment::ActionTypesGenerator`. The method returns based on the `params` whether a subscription is bring renewed. Use existing logic from `AmendSubscriptionService`.

(2) Add method `#renew_subscription` to `Zuora::Orders::FeatureAvailability`. This checks if `Unleash.enabled?(:use_orders_api_renew_subscription_workflow)` is enabled. Add `renew_subscription` to `SUPPORTED_TYPES` constant

(3) Create validator `Zuora::Orders::Amendment::Validators::RenewSubscription`. Implement `#validate` method that validates if the request for renewing a subscription is valid. Use existing validation logic from `AmendSubscriptionService`. If no validation is present, the validator can return an empty array.

Create FF `use_orders_api_renew_subscription_workflow`.

### Result

### Next steps (if any)

### How will we measure success?",3
113922729,2022-08-26 14:33:22.080,Determine AddProduct order action using ActionTypeGenerator,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Use `ActionTypeGenerator` to determine when a request pertains to Adding a Product to a subscription. 

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

![Amendment_Manager_Service_](/uploads/b37359b264167456112ca6f424f754b6/Amendment_Manager_Service_.png)

In this issue, we address (1), (2) and (3) for 'AddProduct' functionality in the following ways:

(1) Add method `#check_add_product` to `Orders::Amendment::ActionTypesGenerator` (see [`#check_renewal`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/25b8a23273d49cd86daeb538700f254c9e09fb75/app/services/zuora/orders/amendment/action_types_generator.rb) for implementation structure). The method returns based on the `params` whether a product is being added to subscription. Use existing logic from `AmendSubscriptionService`.

(2) Add method `#add_product` to `Zuora::Orders::FeatureAvailability`. This checks if `Unleash.enabled?(:use_orders_api_add_product_workflow)` is enabled. Add `add_product` to `SUPPORTED_TYPES` constant

(3) Create validator `Zuora::Orders::Amendment::Validators::AddProduct`. Implement `#validate` method that validates if the request for adding a product is valid. (see [`Renewal validator`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/25b8a23273d49cd86daeb538700f254c9e09fb75/app/services/zuora/orders/amendment/validators/renew_subscription.rb) for implementation structure). Use existing validation logic from `AmendSubscriptionService`. If no validation is present, the validator can return an empty array.

Create FF `use_orders_api_add_product_workflow`.

### Result

### Next steps (if any)

### How will we measure success?",2
113922701,2022-08-26 14:33:05.392,Determine RemoveProduct order action using ActionTypeGenerator,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Use `ActionTypeGenerator` to determine when a request pertains to Adding a Product to a subscription.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

![Amendment_Manager_Service_](/uploads/dbc61937a3457100bb57862c7da552b0/Amendment_Manager_Service_.png)

In this issue, we address (1), (2) and (3) for 'RemoveProduct' functionality in the following ways:

(1) Add method `#check_remove_product` to `Orders::Amendment::ActionTypesGenerator` (see `#check_renewal` for implementation structure). The method returns based on the `params` whether a product is being removed from subscription. Use existing logic from `AmendSubscriptionService`.

(2) Add method `#remove_product` to `Zuora::Orders::FeatureAvailability`. This checks if `Unleash.enabled?(:use_orders_api_remove_product_workflow)` is enabled. Add `remove_product` to `SUPPORTED_TYPES` constant

(3) Create validator `Zuora::Orders::Amendment::Validators::RemoveProduct`. Implement `#validate` method that validates if the request for removing a product is valid. (see `Renewal validator` for implementation structure). Use existing validation logic from `AmendSubscriptionService`. If no validation is present, the validator can return an empty array.

Create FF `use_orders_api_remove_product_workflow`.

### Result

### Next steps (if any)

### How will we measure success?",2
113922691,2022-08-26 14:32:51.563,Determine UpdateProduct order action using ActionTypeGenerator,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Use `ActionTypeGenerator` to determine when a request pertains to Updating a Product in a subscription.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

![Amendment_Manager_Service_](/uploads/a92d9425d76d40b0b5312ccd2c52b37d/Amendment_Manager_Service_.png)

In this issue, we address (1), (2) and (3) for 'UpdateProduct' functionality in the following ways:

(1) Add method `#check_update_product` to `Orders::Amendment::ActionTypesGenerator` (see `#check_renewal` for implementation structure). The method returns based on the `params` whether a product is being updated. Use existing logic from `AmendSubscriptionService`.

(2) Add method `#update_product` to `Zuora::Orders::FeatureAvailability`. This checks if `Unleash.enabled?(:use_orders_api_update_product_workflow)` is enabled. Add `update_product` to `SUPPORTED_TYPES` constant

(3) Create validator `Zuora::Orders::Amendment::Validators::UpdateProduct`. Implement `#validate` method that validates if the request for updating a product is valid. (see `Renewal validator` for implementation structure). Use existing validation logic from `AmendSubscriptionService`. If no validation is present, the validator can return an empty array.

Create FF `use_orders_api_update_product_workflow`.

### Result

### Next steps (if any)

### How will we measure success?",2
113922256,2022-08-26 14:23:42.000,Integrate Remove product order action with OrderManagerService,"### Problem

https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4721 implemented Order action `Zuora::Orders::Actions:: RemoveProduct` that constructs the request body to remove a product from a subscription.

The next step is to integrate this order action in `OrderManagerService`.

### Proposal

- Add ParamConstructor that constructs the payload required to remove a product.

Currently, removing a product is applicable:

1. when [upgrading / downgrading subscription's main product](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/d2d6b0627183cb23baa6b296d76c3718ae7b56b5/app/services/amend_subscription_service.rb#L30)
1. when [migrating to ee v2 plan](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/d2d6b0627183cb23baa6b296d76c3718ae7b56b5/app/services/amend_subscription_service.rb#L81)

Please note upgrade validation will be added as part of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4753 and setting default payment before upgrade will be handled as part of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4764.

### Result

Upgrading a subscription, requires both Adding a Product and Removing a Product functionalities.

Consequently, the upgrade workflow will not be e2e complete with this issue. However, we can use it to test a product is getting removed from a subscription.

### Next steps (if any)

### How will we measure success?",2
113922236,2022-08-26 14:23:10.984,Integrate AddProduct order action with OrderManagerService,"### Problem

https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4722 implements Order action `Zuora::Orders::Actions:: AddProduct` that constructs the request body to remove a product from a subscription.

The next step is to integrate this order action in `OrderManagerService`.

### Proposal

* Add ParamConstructor that constructs the payload required to remove a product.

Currently, add a product is applicable when:

1. when [upgrading / downgrading subscription's main product](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/d2d6b0627183cb23baa6b296d76c3718ae7b56b5/app/services/amend_subscription_service.rb#L30)
1. when [migrating to ee v2 plan](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/d2d6b0627183cb23baa6b296d76c3718ae7b56b5/app/services/amend_subscription_service.rb#L81)
1. when [adding a new product / addon](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/d2d6b0627183cb23baa6b296d76c3718ae7b56b5/app/services/amend_subscription_service.rb#L142)
1. when [adding a trueup](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/d2d6b0627183cb23baa6b296d76c3718ae7b56b5/app/services/amend_subscription_service.rb#L162)
1. when [adding option products](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/d2d6b0627183cb23baa6b296d76c3718ae7b56b5/app/services/amend_subscription_service.rb#L116)
Please note upgrade validation will be added as part of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4753 and setting default payment before upgrade will be handled as part of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4764.

Please note upgrade validation will be added as part of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4753 and setting default payment before upgrade will be handled as part of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4764.

### Result

This completion of this issue will enable performing e2e test of Upgrade workflow (requires `RemoveProduct` and `AddProduct`)

### Next steps (if any)

### How will we measure success?",2
113874873,2022-08-25 19:13:58.764,Update default payment when customer is already associated with a Zuora account,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you're about to submit isn't a duplicate.

Do not include confidential information!
--->

# Bug

For customers already associated with a Zuora account, the default payment ID needs to be set before creating a subscription.

If not, the subscription creation will result in the error: `To collect payment, the customer account must have a default payment method.`

`SubscribeService` [updated default payment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/9d9d6d56f56d596e0f98c52009e2a3638575f1c7/app/services/subscribe_service.rb#L20) before making a [subscription request](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/9d9d6d56f56d596e0f98c52009e2a3638575f1c7/app/services/subscribe_service.rb#L22) if the customer already has a Zuora account associated. This likely got missed when migrating to Orders API.

In addition, `CreationFollowupService` also needs to update the default payment ID (as done [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/9d9d6d56f56d596e0f98c52009e2a3638575f1c7/app/services/subscribe_service.rb#L195) in SubscribeService).

As part of the fix also update `OrderManagerService` spec to use `:with_zuora_account` trait (see [comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5290#note_1078327840)).

## Summary

(Summarize the bug encountered concisely)

## Steps to reproduce

(How one can reproduce the issue - this is very important)

## What is the current *bug* behavior?

(What actually happens)

## What is the expected *correct* behavior?

(What you should see instead)

## Relevant logs and/or screenshots

(Paste any relevant logs - please use code blocks (```) to format console output,
logs, and code as it's tough to read otherwise.)

## Workarounds

(Ways to get around the issue)

## Reported examples

1.
1.
1.

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",2
113699258,2022-08-23 14:15:30.666,Order action for TermsAndConditions,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Similar to the other Order actions implemented to renew a subscription, add, update and remove a product, we need an Order action to update [Terms and conditions](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AC_Orders_Tutorials/C_Change_the_Terms_and_Conditions_of_a_Subscription?_gl=1%2A1l4o63o%2A_ga%2AMzk3MTU1OTE4LjE2NDgwNjkzODE.%2A_ga_MY8CQ650DH%2AMTY2MTI2MzQ2My4yMTYuMS4xNjYxMjYzNTgzLjAuMC4w&_ga=2.3888562.30517363.1661062519-397155918.1648069381) of a subscription.

In the current workflow, terms and conditions of a subscription are updated when a subscription is auto-renewed ([source](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/3c782065f5922a8b54c1ebec1449d4f1f0edabe8/app/services/amend_subscription_service.rb#L141)).

### Proposal

In the module `app/services/zuora/orders/actions`, create a service class `UpdateTermsAndConditions`.

The service implements the following:

* inherits `Zuora::Orders::Actions::BaseService`
* defines `.execute` method that accepts `params` and instantiates an object of the class and invoked `#execute`
* defines `#execute` method

The `#execute` method constructs `orderAction` object to update terms and conditions of a subscription, with the below parameters:

| Parameter | Type | Description |
|-----------|------|-------------|
| `type` | String | Constant value: `TermsAndConditions` |
| `triggerDates` | Array of Objects | Each object has the keys: `name` and `triggerDate`. Defines `ContractEffective`, `ServiceActivation` and `CustomerAcceptance` dates as appropriate (see what dates existing workflow implements)|
| `auto_renew` | Boolean | Based on user input (included in `params`) |

Params are set in accordance to the current logic for updating terms and conditions in `AmendSubscriptionService`, please verify if any other param is set in existing implementation.

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

The service constructs the `orderActions` object to update terms and conditions of a subscription.

### Next steps (if any)

### How will we measure success?",2
113634419,2022-08-22 13:58:59.582,Preview amendment using Order's API,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Similar to amendment preview (before the actual purchase), we need a way to use the Orders API to preview an amendment.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Use Order Preview functionality introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4476.

### Result

### Next steps (if any)

### How will we measure success?",2
113597736,2022-08-22 00:21:23.658,Feature flag use of Orders API when updating subscription,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5254 introduced AmendmentManagerService that serves as an entry point to perform amendment operation using Order's API.

In order to use this service for Amendment operations, this issue pertains with using it in `SelfService::Subscriptions::UpdateService`.


### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",2
113533862,2022-08-19 14:36:12.404,Refactor can_activate_cloud_license logic,"### Problem
The current activation code logic includes a check for eligibility: `can_activate_cloud_license?`

This eligibility is currently dependent on the other Super Sonics fields being populated. This is causing problems and is not a relevant dependency.

### Proposal
Remove this SS dependency to ease the creation of activation codes.

In the check for `can_activate_cloud_license?` ([code](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/fe7feb2659aff9cd2bf60e998e91c042462a29c8/app/models/subscription.rb#L461)), remove:

* `ContractSeatReconciliation__c` is not `null`
* `ContractAutoRenew__c` is not `null`
* `ContractOperationalMetrics__c` is not `null`
* The method `Subscription#can_activate_cloud_license?` would only check for `self_service?` which can be used directly instead


### Result
In tandem with https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4688, this will remove the dependency of the other SS fields being populated on the creation of a cloud license activation code.

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

Based on the description:

> ... Super Sonics fields being populated. **This is causing problems** and is not a relevant dependency.

These problems are likely to have risen from a lack of test coverage.  Let's isolate and determine where the test gap is and fill it.",1
113481799,2022-08-18 16:16:29.220,Clean up SaaS Provisioning Email,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
I noticed while recording an [updated SaaS provisioning flow walkthrough](https://www.youtube.com/watch?v=rg8liZIQ2Mo) ([issue](https://gitlab.com/gitlab-org/gitlab/-/issues/370481)) that the SaaS provisioning email is not the greatest UX. Let's try to clean this one up however possible.

This is for the html email for a GL.com purchase from Salesforce `CustomerMailer.gl_com_purchase_from_sf` - found here: https://gitlab.com/-/ide/project/gitlab-org/customers-gitlab-com/tree/remove_quotes_in_gl_com_purchase_from_sf_html_email/-/app/views/customer_mailer/gl_com_purchase_from_sf.html.haml/

**Current View:**

![image](/uploads/7b6f1dd0a65fccc58dfb7a6809876b3a/image.png)

### Proposal
![SaaS_Provisioning](/uploads/af59f47921bcde4060edb1261e07a839/SaaS_Provisioning.png)

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->


#### Figma Design
[Figma File](https://www.figma.com/file/RwDEORCySqiDhagP7OJSde/Clean-up-SaaS-Privisioning-Email?node-id=0%3A1)

First iteration design and design feedback can be found here - https://gitlab.com/gitlab-org/gitlab/-/issues/370481/designs/SaaS_Provisioning.png

### Links
| Linked Email Text | URL |
| ------ | ------ |
| login | https://gitlab.com/users/sign_in |
| register | https://gitlab.com/users/sign_up |
| Create a new group | https://docs.gitlab.com/ee/user/group/manage.html#create-a-group |
| Owner | https://docs.gitlab.com/ee/user/permissions.html#group-members-permissions |
| Contact our support team | https://support.gitlab.com/hc/en-us/requests/new?ticket_form_id=360000803379 |
| Link your GitLab user account to your Customers Portal account | https://docs.gitlab.com/ee/subscriptions/index.html#change-the-linked-account |
| Link your subscription to your namespace | https://docs.gitlab.com/ee/subscriptions/index.html#change-the-linked-namespace |
| view your GitLab SaaS subscription | https://docs.gitlab.com/ee/subscriptions/gitlab_com/#view-your-gitlab-saas-subscription |
| GitLab Support | https://about.gitlab.com/support/ |
| footer: logo | https://about.gitlab.com/ |
| footer: Support | https://about.gitlab.com/support/ |
| footer: Customers Portal | https://customers.gitlab.com/customers/sign_in |
| footer: Blog | https://about.gitlab.com/blog/ |
| footer: Contact Sales | https://about.gitlab.com/sales/ |

## Result
* Email is clearer, more concise, and more visually appealing with obvious sections",2
113464394,2022-08-18 12:17:01.879,"Add validations on the use of feature category (Follow-up from ""Link the ""feature_category"" class attribute to the Prometheus collector"")","The following discussion from !5241 should be addressed:

- [ ] @reprazent started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5241#note_1067118408):  (+3 comments)

    > Should we still populate the labels for these controllers if they can receive requests? We can have the `endpoint_id` built and use the fallback feature category.
    > 
    > Only if they'd never receive requests, we can exclude them. Is that the case here?",1
113426773,2022-08-17 21:31:07.073,Use Per Unit Charge Model to create new subscription,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you're about to submit isn't a duplicate.

Do not include confidential information!
--->

# Bug

## Summary

While purchasing new subscriptions, the price is determined based on the quantity of a service or product purchased.

The current implementation uses [`recurringVolume`](spec/services/zuora/orders/entities/subscribe_to_rate_plans_spec.rb) pricing, while it should use [Per Unit Charge Model](https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/B_Charge_Models#Per_Unit_Charge_Model).

Per the [docs](https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/B_Charge_Models#Per_Unit_Charge_Model) for Per Unit Charge Model:

> With the per unit charge model, the amount to charge is expressed as a price per unit. The price is calculated based on the quantity of a service or product purchased by the customer, where the total price charged per period would be the quantity multiplied by the per-unit price. An example of a per unit charge would be a software-as-a-service vendor that charges $50 per user per month for their service.

> Per unit pricing can be used with one-time, recurring, or usage charges.

[Docs](https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/B_Charge_Models#Volume_Pricing_Charge_Model) for Volume Pricing Charge Model:

> With a volume pricing charge model, the price to be charged is based on the volume purchased. When setting up a volume charge model, a price table is used to define the pricing for each range of volumes, as well as the pricing rule to apply if the customer purchases a quantity that falls within the range of that tier. Each tier is defined by a starting unit, an ending unit, a list price, and a price format (which can be either flat fee or per unit).

Please note that this is **currently not impacting** the existing new subscriptions purchased:

  1. When additional CI minutes is purchased for a new customer (having no prior subscriptions). It uses Order's API workflow for new subscriptions, and the pricing model is `One-Time - Per Unit Pricing`.

![Screen_Shot_2022-08-18_at_9.20.16_AM](/uploads/71a3a5c8377b6a01c68d33403c4e0c8f/Screen_Shot_2022-08-18_at_9.20.16_AM.png)

- [Link to Subscription ](https://test.zuora.com/apps/Subscription.do?method=view&id=8a8aa38682aad91e0182adf139042df4)
- [Verification walkthrough](https://drive.google.com/file/d/1cfBlfMUtXaUK8P4PJg2OayPbz9R_gM3C/view?usp=sharing)

 2. When customer purchases new subscription for a plan. It uses Order's API workflow for new subscriptions, and the pricing model is `Recurring - Per Unit Pricing`.

- [Link to Subscription](https://test.zuora.com/apps/Subscription.do?method=view&id=8a8aa0a082aa6f8c0182ade15fc915f6)
- [Verification walkthrough](https://drive.google.com/file/d/1BpRbusMjgNbMczWDinx9AV8ZboNy0q3i/view?usp=sharing)

This is likely due to the fact that the request also includes [`product_rate_plan_charge_id`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/6909e8dfb20722b24f3fbbcf4ea07ba8d5a37a9d/app/services/zuora/orders/entities/subscribe_to_rate_plans.rb#L38) (confirmation pending).

## Steps to reproduce

(How one can reproduce the issue - this is very important)

1. Navigate to the billing page of a namespace in gitlab.com
2. Select a plan and enter pricing details
3. Verify the request defines pricing model as `recurringVolume`

## What is the current *bug* behavior?

Although no impact was observed in the subscriptions created in Zuora, the pricing model in the request needs update.

## What is the expected *correct* behavior?

New subscriptions should be created with `Per Unit Pricing` pricing model.

- for add-ons (CI minutes, storage): use `One-Time - Per Unit Pricing`
- for plans: use `Recurring - Per Unit Pricing`

(What you should see instead)

## Relevant logs and/or screenshots

(Paste any relevant logs - please use code blocks (```) to format console output,
logs, and code as it's tough to read otherwise.)

## Workarounds

(Ways to get around the issue)

## Reported examples

1.
1.
1.

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",3
113423268,2022-08-17 19:35:03.203,Improve license text on subscription page,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Currently, some of the text displayed on the Subscription Admin Page and Admin Overview page within a self-managed subscription is confusing to customers.
* The text ""Renews: in X days"" is confusing/alarming to customers:
  * Who are not on auto-renew - this is not accurate as they actually will lose access
  * Who have already purchased a renewal subscription that is an upgrade from their current - this is not accurate
* The text ""Valid From"" isn't very clear - saying something simpler may be clearer to customers
* ""Expires on"" is harsh, and can imply the end of a subscription even if a customer has already renewed

### Proposal

#### Changes on the Admin > Subscription page

Update the following text under `Subscription details` to reduce customer confusion:
1. Change `Renews` to `End date`
1. Change the End date format from an relative date (eg, `in 11 days`) to an absolute date (eg, `2022-08-06`)
1. Change `Started` to `Start date`
1. Change `Last Sync` to `Last sync` (sentence case)
1. Update the order to be:
     - Start date
     - End date
     - Last sync


Update the following text under `Subscription History`:
1. Change ""Valid From"" to ""Start date""
2. Change ""Expires On"" to ""End date""
3. Change ""Activated on"" to ""Activation date""

![image](/uploads/7f386353470ca0c5c7b804dee3c389ab/image.png)


#### Changes on the Admin > Overview page

Update the following text under `License overview` to reduce customer confusion:
1. Change `Expires` to `End date`

![image](/uploads/c0a66ce0740f91ec6a0b5105cebc7341/image.png)

### Result
Customer is more clearly able to understand the current state of their subscription.",1
113355133,2022-08-16 15:50:32.826,Introduce Manager Service for amendments,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Introduce `AmendmentManagerService` that will serve as an entry point for amendment workflow.

The purpose of this service is to:
  - determine the order action types for the request (based on `params`)
  - verify feature availability for the determined order action types
  - trigger order manager service if feature availability passed

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Create `ActionTypeGenerator` that determines possible order action types. Create `AmendmentManagerService` that does the following:

  - invokes `ActionTypeGenerator` to get possible order action types. If no order actions were found, return an error response so we can fallback to existing amendment workflow.
  - run feature availability on the order action types
  - trigger order manager service if feature availability returns `true`. If `false`, return an error response so we can fallback to existing amendment workflow.



### Result

### Next steps (if any)

### How will we measure success?",2
113292980,2022-08-15 14:23:53.997,Integrate UpdateProduct order action with OrderManagerService,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5162 introduced an order action service for `UpdateProduct`. This issue pertains with integrating it in the amendment workflow.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Product update is being handled in [AmendSubscriptionService](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/app/services/amend_subscription_service.rb).

For the options that are needed in `UpdateProduct` we can either pass the options directly from `AmendSubscriptionService` or pass params to a `FilterService` which returns the required options.

note: `AmendSubscriptionService` handles multiple amendments in a single call, we need to check if we can replace individual amendment actions with the new order service or do we need to wait for all actions to be implemented before we can integrate the new order service.

### Result

### Next steps (if any)

### How will we measure success?",2
113153295,2022-08-11 19:28:40.478,"Follow-up: remove ""optional"" from cancellation survey checkboxes section","<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication.

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

# Feature Request

## Problem

<!-- Describe the problem in terms which a user may understand. Avoid providing solutions in this section -->

As part of the changes made in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4035, we added to the header that the selection of cancellation reason is optional. See before/after here: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4035#note_971075680

This then lead to a drop in responses as outlined in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4035#note_1052667342

## Proposal

<!-- Describe the proposed solution the problem -->

We'd like to remove the `(optional)` from the top header, so instead of
`Could you tell us a bit more about your cancellation? (optional)`

It should read 
`Could you tell us a bit more about your cancellation?`

Note that the actual selection should continue to be optional, just like it has always been, and we shouldn't block the form submission on requiring them to select an option. 

## Next steps (if any)

<!-- If there are follow-up issues required, describe them here -->

## How will we measure success?

Increase in submissions.",1
113126277,2022-08-11 10:43:04.900,Revise cancellation modal to include a dropdown vs multiselect,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication.

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

## Problem

Currently, the cancellation modal is very busy – primarily due to the 'cancellation reason' options. This increases cognitive load for the user. Given that there is also an [issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3981) to add content to this modal regarding overages, it may be wise to look at a simpler design for this modal.

##### Current Experience

 ![image](/uploads/fee9b83ffe08434e063ae631dc556761/image.png) 

## Proposal
![Update_subscription_cancellation_modal](/uploads/e1f7d7c3bafabd61cd41853beab9a267/Update_subscription_cancellation_modal.png)

Replace the multi select options with a dropdown, which will include all the current options. 

## Design
[Figma File](https://www.figma.com/file/WfIcP3jg6nkBT0GCqkZvTE/Cancellation-%E2%80%93%C2%A0Info-on-overages?node-id=0%3A1)",2
113113546,2022-08-11 07:26:34.213,Add script for generating feature categories,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Port the [`update-feature-categories`](https://gitlab.com/gitlab-org/gitlab/-/blob/master/scripts/update-feature-categories) script and generate `config/feature_categories.yml` file.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",1
113106538,2022-08-11 03:56:14.317,Expired subscription has a Cancel subscription button,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you're about to submit isn't a duplicate.

Do not include confidential information!
--->

# Bug

## Summary

The customer subscription failed to auto renew because of payment failure. When the subscription expires, there's no renew button but the `Cancel Subscription` button. 

## Steps to reproduce

(How one can reproduce the issue - this is very important)

## What is the current *bug* behavior?

(What actually happens)

## What is the expected *correct* behavior?

(What you should see instead)

## Relevant logs and/or screenshots

(Paste any relevant logs - please use code blocks (```) to format console output,
logs, and code as it's tough to read otherwise.)

![image](/uploads/1970be9b319f3979ae09633a0e00f14e/image.png)

## Workarounds

(Ways to get around the issue)

## Reported examples

1. https://gitlab.zendesk.com/agent/tickets/314929
1.
1.

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",2
113023599,2022-08-09 19:24:45.432,[Feature flag] Enable use_orders_api_preview_subscription,"<!-- Title suggestion: [Feature flag] Enable description of feature -->

# Summary

<!-- Short description of what the feature is about and link to relevant other issues. -->

This issue is to rollout [Order preview for new subscriptions](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4476) on CustomersDot production,
that is currently behind the [`use_orders_api_preview_subscription`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/150/edit) feature flag.

## Owners

- Team: Fulfillment Platform
- Most appropriate Slack channel to reach out to: `#g_fulfillment_platform`
- Best individual to reach out to: @aish.sub 
- PM: @tgolubeva 

## Stakeholders

<!--
Are there any other stages or teams involved that need to be kept in the loop?

- GITLAB_HANDLE of a PM
- The Support Team
- The Delivery Team
-->

## The Rollout Plan

- Partial Rollout with specific Customers on CustomersDot, [via Unleash](https://docs.gitlab.com/ee/operations/feature_flags.html#user-ids)
- Rollout on CustomersDot for a certain period (How long)
- Percentage Rollout on CustomersDot
- Rollout Feature for everyone as soon as it's ready

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? Sentry errors reports can also be useful to review -->

## Testing User/Customer IDs

<!--
List any Customer IDs for Customers that are happy to have this feature turned on early.

Remove if not applicable
-->

## Expectations

### What are we expecting to happen?

<!-- Describe the expected outcome when rolling out this feature -->

When customer's preview subscription before purchase, the request in the backend uses Zuora's [Preview an Order API](https://www.zuora.com/developer/api-reference/#operation/POST_PreviewOrder) instead of Subscribe API.

### What might happen if this goes wrong?

<!-- Should the feature flag be turned off? Any MRs that need to be rolled back? Communication that needs to happen? What are some things you can think of that could go wrong - data loss or broken pages? -->

Customer's may not be able to preview subscription accurately before purchase.

### What can we monitor to detect problems with this?

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? -->

## Rollout Steps

### Rollout on non-production environments

- [x] Ensure that the feature MRs have been deployed to non-production environments, i.e. `customers-staging`.
- [x] Consider announcing that the flag will be enabled to potentially impacted groups, e.g. `#s_fulfillment_engineering`
- [x] Enable the feature globally on non-production environments by applying the appropriate environment, e.g. `customers-staging` and `customers-development`.
- [x] Notify the Software Engineers in Test (SETs) for Fulfillment via Slack and in a comment in this issue when enabling a feature flag in `customers-staging` as it can impact the QA pipeline.
- [x] Verify that the feature works as expected. Posting the QA result in this issue is preferable.

### Preparation before production rollout

- [x] Ensure that the feature MRs have been deployed to production
- [ ] Check if the feature flag change needs to be accompanied with a
  [change management issue](https://about.gitlab.com/handbook/engineering/infrastructure/change-management/#feature-flags-and-the-change-management-process).
  Cross link the issue here if it does.
- [x] Ensure that you or a representative in Fulfillment can be available for at least 2 hours after feature flag updates in production.
  If a different developer will be covering, or an exception is needed, please inform the Fulfillment team in #s_fulfillment_engineering
- [ ] Ensure any documentation has been updated
- [ ] Announce on [the feature issue](ISSUE LINK) an estimated time this will be enabled on production if applicable
- [ ] If the feature might impact the user experience, notify `#s_fulfillment` and potentially `#support_gitlab-com`, as well as your team channel ([more guidance when this is necessary in the dev docs](https://docs.gitlab.com/ee/development/feature_flags/controls.html#communicate-the-change)).

### Global rollout on CustomersDot production

- [x] Confirm the feature flag is enabled on `staging` without incident
- [ ] Roll out the feature to targeted testing users first (if applicable)
- [x] If applicable, [incrementally roll out](https://docs.gitlab.com/ee/operations/feature_flags.html#percent-rollout) the feature.
- [x] Verify the change has the desired outcome with the limited rollout before enabling the feature globally on production.
- [x] Enable the feature globally on production environment
- [x] Announce on [the feature issue](ISSUE LINK) that the feature has been globally enabled.
- [ ] Wait for [at least one day for the verification term](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release).

### Release the feature

After the feature has been [deemed stable](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release),
the clean up should be done as soon as possible to permanently enable the feature and reduce complexity in the codebase.

<!-- The checklist here is to help stakeholders keep track of the feature flag status -->
- [x] Create a merge request to remove `<feature-flag-name>` feature flag
  - [x] Remove all references to the feature flag from the codebase
- [ ] Ensure that the cleanup MR has been deployed to both staging and production
- [ ] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [ ] Ensure production environment is still working as expected
- [ ] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [ ] Close this rollout issue.

## Rollback Steps

- [ ] This feature can be disabled by performing the following actions:
  - [ ] Disable the Unleash flag on the [feature flag page](LINK TO THE FEATURE FLAG EDIT PAGE)",2
112997074,2022-08-09 11:14:39.697,Activate cloud license during installation,"### Problem

Customers were able to add their [license file during installation](https://docs.gitlab.com/ee/user/admin_area/license_file.html#add-your-license-file-during-installation) of their GitLab instance when using a legacy license. With Cloud License this is no longer possible. 

Please note more details in this issue: https://gitlab.com/gitlab-org/gitlab/-/issues/383878

### Workaround

Request an [offline cloud license](https://about.gitlab.com/pricing/licensing-faq/cloud-licensing/#offline-cloud-licensing), which can be applied during installation.

### Proposal

Add the ability to add activation code during the installation of a GitLab instance, similar to what was possible for legacy licenses: https://docs.gitlab.com/ee/user/admin_area/license_file.html#add-your-license-file-during-installation.

### Reported Examples
1. https://gitlab.zendesk.com/agent/tickets/315115
1. https://gitlab.zendesk.com/agent/tickets/343826
2. https://gitlab.zendesk.com/agent/tickets/365130",3
112969772,2022-08-08 22:31:50.773,Use OrderManagerService to renew subscription,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4326 implemented Order action `Zuora::Orders::Actions:: RenewSubscription` that constructs the request body to renew a subscription.

The next step is to use this order action in `OrderManagerService` to renew a subscription.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

:warning: Depends on [AmendmentManagerService](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5254) to be complete.

- Use `ActionTypesGenerator` to determine if a request pertains to renewing a subscription: see separate issue: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4723
- Integrate `RenewSubscription` order action with OrderManagerService: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5290

### Result

When renewing a subscription, there are other order actions involved: Adding a Product, Removing a product, Updating a product.

Consequently, the renewal workflow will not be e2e complete with this issue. However, we can use it to test a subscription is getting renewed without any seat / product changes.

### Next steps (if any)

### How will we measure success?",3
112864577,2022-08-05 19:56:14.063,"Follow-up from ""SFDC: during opportunity creation, create account if absent""","The following discussion from !5186 should be addressed:

- [ ] @a_luna started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5186#note_1051504289):  (+2 comments)

    > **thought (non-blocking):** The comment here is good but since `CreateSalesforceAccountService` basically does a `find_or_create`, maybe it would be better to clarify that in the service name? Renaming it to something like  `FindOrCreateSalesforceAccountService` would be longer but self-explanatory. 
    > 
    > I see this service has been like this for a while so definitely something that could be handled in a follow up!",1
112860691,2022-08-05 17:34:25.955,"Investigate ""Update GitLab Plan"" function / mechanizer incident","The [update gitlab plan function](https://gitlab.com/gitlab-com/support/toolbox/console-training-wheels/-/blob/master/lib/support_team.rb#L86) seems to be the root cause of https://gitlab.com/gitlab-com/gl-infra/production/-/issues/7555

We need to investigate why.

From `@jameslopez`:

> its process was using up to half the total memory and killing it brought the system back up (as well as reducing CPU load). there could be many causes to this, from a race condition to a memory leak somwhere",5
112811238,2022-08-04 18:29:52.757,Remove Customer dependency from Subscription model,"### Problem

In CustomersDot, a `Subscription` model exists as a wrapper around a `Zuora::Subscription` object.  This wrapper is meant to contain business logic specific to CustomersDot.  The `Subscription` class has an initialization dependency on having a `Customer` record ([see code](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/99ecaa74572bcf1542b5ab9fadba3f410b402b18/app/models/subscription.rb#L93)).  This dependency does not seem to be necessary and only adds to the complexity in our system.  

In most places, the `Customer` record is used simply as a way to determine the `zuora_account_id` for the subscription, but we should be getting this directly from the `Zuora::Subscription` instead.  In other places, it is used to determine who should receive provisioning emails, but this can also be determined from using Zuora (the Sold To contact of the Zuora Account).

### Proposal

Identify and update all places where the `customer` is referenced from the `Subscription` object, and eventually remove the dependency altogether.  We can start with the easy references where customer is used to get the `zuora_account_id`.

### Result

A much cleaner and understandable `Subscription` class.  This will also enable us to rely more on Zuora data and less on the customer data in CDot which helps towards the initiative in https://gitlab.com/groups/gitlab-org/-/epics/8331.",8
125858767,2022-08-04 10:09:12.035,Provide the ability in CustomerDot to send a cloud activation code to another account,"[[_TOC_]]

## Step 1: Describe what this request is about by answering the following questions

### What is the problem/opportunity?  

Currently, in CustomerDot it is only possible to send a cloud activation code to the account owner. As shown below:

![image](/uploads/0fdf44b7bdc349f621367210a72fa5e8/image.png)

![image](/uploads/80ce6c24028fc7bd256d5c5e27596018/image.png)

However, it is possible to forward a license file to another account

![image](/uploads/d43104b38e2113e346b7550189bc715b/image.png)


This problem was exposed by a customer in a [zendesk ticket](https://gitlab.zendesk.com/agent/tickets/310143) when the account owner was on vacation and the other users did not have access to GitLab as a result. 

### Who is it for?

       1. External: SM customers


### Why is this important?

It is important that CustomerDot provides the parity of functionality for Cloud Licensing Activation Codes that it does for Offline/legacy licenses 

### How do you propose we solve for it?

Create forward license activation code functionality


### What does success look like, and how can we measure that?

CustomerDot provides the ability to send the Activation Code to another email

## Proposal
Implement the same process used today by legacy licenses.

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

We will need to create many lower-level tests including, but not limited to:

- Unit specs
- Controller specs
- Jest specs
- Email validity
- Likely Model validation specs(?) [are we validating email via the model, controller?]
- Feature specs
- Mailer specs(?) [test that the email has indeed been sent to the appropriate email]

Other things to consider:

- When the customer adds a new email, are we saving this email somewhere, so it can be sent later from a list of valid emails?
- What email validation regex are we going to be using? Will this validation regex allow wildcard emails? (e.g.: ddavison+fulfillment[at]gitlab.com)",3
112753832,2022-08-03 21:27:42.075,Order should be rejected if an existing customer tries to purchase through Arrow,"### Problem

We identified when discussing the [scorecard for UAT](https://docs.google.com/spreadsheets/d/1innM5QJP11Cc_0yuejYCkgyFqWrsuShgMG_pG-iN43s/edit#gid=0) as a group that orders need to be rejected when an existing customer attempts to make a purchase through Arrowsphere.  There are a few reasons for this:

1. We don't want to allow existing Customers with access to the Customer Portal to be able to make a purchase via Arrowsphere and allow them to manage their subscription through the Portal.
2. Customers may be looking to make adjustments to existing subscriptions through Arrowsphere by mistake.  By preventing this action, we are saving some headache and directing them to the sales-assisted route.

### Proposal

If a Customer record already exists, reject a subscription from being created through the marketplace subscriptions API.

We got clarification from the team that CustomersDot should block an Order if a Customer record exists with the email address (Sold To) and has an associated Zuora Account.  That means even if the Customer record was created through an earlier Arrowsphere order, it will still be rejected.",1
112703434,2022-08-03 07:05:25.367,Refactor SubscriptionSerializer in License creation,"This is a refactoring suggestion to merge `SubscriptionSerializer` with `License` model.

`SubscriptionSerializer` was originally created to serialize Zuora callback data so we can send it to LicenseApp for creating a license.

LicenseDot is now merged with CDot, so its only usage is in `License#build_from_subscription`. We can consider it as an unnecessary layer of abstraction, with readability drawback: we can't easily tell how Zuora callback attributes are mapped to License record. Additional attribute name aliases were also introduced by this serializer, adding more cognitive load.

## Proposal

Two opposite proposals:

1. inline `SubscriptionSerializer` into `License#build_from_subscription` 
2. turn `SubscriptionSerializer` into a License factory, which would replace `License#build_from_subscription`",2
112642898,2022-08-02 07:38:20.070,Switch to asdf-postgres,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Our installation guide has a section for installing PostgreSQL via Homebrew and via `asdf`. So we have two tools for installing two things and that might cause problems like if you installed everything via Homebrew and then decided to switch to `asdf`. Which database will be used in this case? The answer is unknown.

### Proposal

Let's switch to a single tool for installing our dependencies. GDK and CustomersDot as well as other projects in GitLab uses `adsf` as default tool for managing runtimes. GDK also uses `asdf` to install the correct PostgreSQL version so we should to the same to eliminate possible discrepancies and simplify our setup documentation.",1
112410343,2022-07-28 21:41:34.045,[Feature flag] Enable use_orders_api_subscription_workflow,"<!-- Title suggestion: [Feature flag] Enable description of feature -->

# Summary

<!-- Short description of what the feature is about and link to relevant other issues. -->

This issue is to rollout [FEATURE NAME](ISSUE LINK) on CustomersDot production,
that is currently behind the [`<feature-flag-name>`](LINK TO THE FEATURE FLAG EDIT PAGE) feature flag.

## Owners

- Team: Fulfillment Platform
- Most appropriate Slack channel to reach out to: `#g_fulfillment_platform`
- Best individual to reach out to: @aish.sub
- PM: @tgolubeva

## Stakeholders

<!--
Are there any other stages or teams involved that need to be kept in the loop?

- GITLAB_HANDLE of a PM
- The Support Team
- The Delivery Team
-->

## The Rollout Plan

| Step | Due date | Status |
|---|---|---|
| Enable flag `use_orders_api_subscription_workflow on staging| 2022-07-21 | :white_check_mark: |
| Perform test runs for use cases listed in issue: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4562| 2022-07-29 | :white_check_mark:  |
| Monitoring period | Until 2022-08-03 | :white_check_mark:  |
| Enable on production | 2022-08-03 | :white_check_mark: [Link](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4601#note_1050040212) |
| Cleanup https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5206 | 2022-08-12 | :white_check_mark:  |

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? Sentry errors reports can also be useful to review -->

## Testing User/Customer IDs

<!--
List any Customer IDs for Customers that are happy to have this feature turned on early.

Remove if not applicable
-->

## Expectations

### What are we expecting to happen?

<!-- Describe the expected outcome when rolling out this feature -->

Subscriptions are created in Zuora using Order's API for all types except Marketplace.

### What might happen if this goes wrong?

<!-- Should the feature flag be turned off? Any MRs that need to be rolled back? Communication that needs to happen? What are some things you can think of that could go wrong - data loss or broken pages? -->

Subscriptions not created in Zuora, this could be a high risk for customers.

### What can we monitor to detect problems with this?

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? -->

Sentry, #s_fulfillment_status channel

## Rollout Steps

### Rollout on non-production environments

- [x] Ensure that the feature MRs have been deployed to non-production environments, i.e. `customers-staging`.
- [x] Consider announcing that the flag will be enabled to potentially impacted groups, e.g. `#s_fulfillment_engineering`
- [x] Enable the feature globally on non-production environments by applying the appropriate environment, e.g. `customers-staging` and `customers-development`.
- [x] Notify the Software Engineers in Test (SETs) for Fulfillment via Slack and in a comment in this issue when enabling a feature flag in `customers-staging` as it can impact the QA pipeline.
- [x] Verify that the feature works as expected. Posting the QA result in this issue is preferable.

### Preparation before production rollout

- [x] Ensure that the feature MRs have been deployed to production
- [ ] Check if the feature flag change needs to be accompanied with a
  [change management issue](https://about.gitlab.com/handbook/engineering/infrastructure/change-management/#feature-flags-and-the-change-management-process).
  Cross link the issue here if it does.
- [x] Ensure that you or a representative in Fulfillment can be available for at least 2 hours after feature flag updates in production.
  If a different developer will be covering, or an exception is needed, please inform the Fulfillment team in #s_fulfillment_engineering
- [ ] Ensure any documentation has been updated
- [ ] Announce on [the feature issue](ISSUE LINK) an estimated time this will be enabled on production if applicable
- [x] If the feature might impact the user experience, notify `#s_fulfillment` and potentially `#support_gitlab-com`, as well as your team channel ([more guidance when this is necessary in the dev docs](https://docs.gitlab.com/ee/development/feature_flags/controls.html#communicate-the-change)).

### Global rollout on CustomersDot production

- [x] Confirm the feature flag is enabled on `staging` without incident
- [ ] Roll out the feature to targeted testing users first (if applicable)
- [x] If applicable, [incrementally roll out](https://docs.gitlab.com/ee/operations/feature_flags.html#percent-rollout) the feature.
- [x] Verify the change has the desired outcome with the limited rollout before enabling the feature globally on production.
- [x] Enable the feature globally on production environment
- [x] Announce on [the feature issue](ISSUE LINK) that the feature has been globally enabled.
- [x] Wait for [at least one day for the verification term](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release).

### Release the feature

After the feature has been [deemed stable](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release),
the clean up should be done as soon as possible to permanently enable the feature and reduce complexity in the codebase.

<!-- The checklist here is to help stakeholders keep track of the feature flag status -->
- [x] Create a merge request to remove `<feature-flag-name>` feature flag
  - [x] Remove all references to the feature flag from the codebase
- [x] Ensure that the cleanup MR has been deployed to both staging and production
- [x] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [x] Ensure production environment is still working as expected: ![Screen_Shot_2022-08-24_at_3.06.03_PM](/uploads/397e39961f8d48202eaa47b4c0e0b54e/Screen_Shot_2022-08-24_at_3.06.03_PM.png)
- [x] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [x] Close this rollout issue.

## Rollback Steps

- [ ] This feature can be disabled by performing the following actions:
  - [ ] Disable the Unleash flag on the [feature flag page](LINK TO THE FEATURE FLAG EDIT PAGE)

/label ~""DevOps::fulfillment"" ~""section::fulfillment"" ~""feature flag""
/assign `DRI`",3
112266837,2022-07-26 23:40:23.205,Include customer VAT code for new account,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Similar to the [Subscribe API](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/2d39af088c7f64fd534fc55cee7aabc3b5f53ead/app/services/subscribe_service.rb#L56), include customer's VAT code when creating an account for a new subscription.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Update `Zuora::Orders::Entities::NewAccount` to include to pass `vat_code` in `tax_info` object.

### Result

VAT ID is set for the new account in Zuora if customer's account has a VAT code set.

### Next steps (if any)

### How will we measure success?",1
112259267,2022-07-26 19:30:29.385,"Follow-up from ""Generate order action for renew subscription""","The following discussion from !5077 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5077#note_1039042561):  (+2 comments)

    > **Suggestion:** Since this type name matches the class name (minus the namespace), [just like the one defined in `CreateSubscription`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5077/diffs#305e4eb502d53caa9613283a073924536c92e484_39_39), what do you think about defining a `type` method for this in `Zuora::Orders::Actions:BaseService` and removing the ones in the subclasses?
    > 
    > ```
    >         def type
    >           self.class.name.demodulize
    >         end
    > ```
    > 
    > If we think they'll always match the Action name, that might be a nice optimization.  This could be done in a follow-up as well. WDYT?

### Proposal

1. Consider defining `action_type` in `Zuora::Orders::Actions:BaseService` that returns the class name:

```ruby
def action_type
  self.class.name.demodulize
end
```
2. Remove `type` definition from the action classes (`CreateSubscription`, `RenewSubscription`)
3. Update `type` to `action_type` in the `#execute` method in each of the action class",1
112143190,2022-07-25 10:44:20.242,Replace usages of order.customer_id in feature flags and logging,"Update uses of `order.customer_id` with `order.current_customer.id` following discussion from !5057:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5057#note_1035847495):  (+1 comment)

    > There are a handful of places where `order.customer_id` is used for scoping of `Unleash.enabled?` or logging. I suspect these could be updated as well.",1
112120153,2022-07-25 03:44:19.781,[Feature flag] remove include_future_subscriptions,"<!-- Title suggestion: [Feature flag] Enable description of feature -->

# Summary

<!-- Short description of what the feature is about and link to relevant other issues. -->

This issue is to rollout [include_future_subscriptions](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3800) on CustomersDot production,
that is currently behind the [`include_future_subscriptions`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/112/edit) feature flag.

## Owners

- Team: Fulfillment::Provision
- Most appropriate Slack channel to reach out to: `#g_provision`
- Best individual to reach out to: @lulalala
- PM: @courtmeddaugh 

## Expectations

### What are we expecting to happen?

<!-- Describe the expected outcome when rolling out this feature -->

### What might happen if this goes wrong?

<!-- Should the feature flag be turned off? Any MRs that need to be rolled back? Communication that needs to happen? What are some things you can think of that could go wrong - data loss or broken pages? -->

### Release the feature

After the feature has been [deemed stable](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release),
the clean up should be done as soon as possible to permanently enable the feature and reduce complexity in the codebase.

<!-- The checklist here is to help stakeholders keep track of the feature flag status -->
- [x] Create a merge request to remove include_future_subscriptions feature flag 
  - [x] Remove all references to the feature flag from the codebase
- [x] Ensure that the cleanup MR has been deployed to both staging and production
- [x] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [x] Ensure production environment is still working as expected
- [x] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [x] Close this rollout issue.

## Rollback Steps

- [ ] This feature can be disabled by performing the following actions:
  - [ ] Disable the Unleash flag on the [feature flag page](LINK TO THE FEATURE FLAG EDIT PAGE)",1
111991239,2022-07-21 15:50:33.229,Switch SFDC BCC for Cloud Activation emails to Voucher email,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
Today, in order to show proof of license delivery in SFDC of Cloud Activation emails, we BCC the SFDC email address on the activation emails sent to customers. These emails include the activation codes customers use to activate their subscription. Providing this data to anyone with access to SFDC is problematic for compliance reasons, given anyone could use this code to activate a subscription.

### Proposal
https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4565+ will create a voucher email for cloud license activation emails that will contain subscription details but will remove the activation code. This voucher will also include the relevant SFDC ID.

Remove the SFDC BCC from the current cloud license activation email, and ~~instead add the SFDC BCC to the voucher email created in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4565~~ The SFDC BCC email is already set as default recipient in `VoucherMail`. Making it BCC again in `ActivationCodeVoucherMailer` would be redundant.",1
111922224,2022-07-20 13:49:26.228,[Testing] New subscription workflow using Orders API,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4319 created FF `use_orders_api_subscription_workflow`, when enabled will use the Orders API for new subscription (except for marketplace and in preview mode).

This issue is to track the testing progress before the go-live of this functionality.

Part of [Orders API upgrade epic](https://gitlab.com/groups/gitlab-org/-/epics/6438).

### Testing scenarios

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

|Scenario|Steps|Expected result|Pass? (Staging environment)|Notes|
|---|---|---|---|---|
|Create a new SAAS subscription for a new customer from gitlab.com|1. Create new user in gitlab.com <br /> 2. Create a group<br />3. Navigate to billings page<br />4. Select a plan and fill billing details <br /> 5. Purchase subscription <br />|Customer, Order and Subscription is created with appropriate attributes| :white_check_mark: [Verification link](https://drive.google.com/file/d/1CzBtMrDXiMe3XeTNrxmIyeEbRHwDEkWi/view?usp=sharing) <br> :white_check_mark: [automated test](https://gitlab.com/gitlab-org/gitlab/-/quality/test_cases/347667) | `vat_id` is not set for new customer: [Issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4584), [MR](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5143): [fixed](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4584#note_1046761737) |
|Create a new SAAS subscription for a new customer from CDot|1. Create a new user new user in gitlab.com <br /> 2. Sign in CDot via gitlab.com <br />3. Select 'Buy a new subscription' <br /> 4. Enter plan and billing details <br /> 5. Purchase subscription|Customer, Order and Subscription is created with appropriate attributes| :white_check_mark: [Verification link](https://drive.google.com/file/d/1W1K5cQ5Xc05V3uj-XJr-qAXwj4U6T-Ca/view?usp=sharing)<br> :white_check_mark: [automated test](https://gitlab.com/gitlab-org/customers-gitlab-com/-/quality/test_cases/2749)||
|Create a new SAAS subscription for an existing customer from gitlab.com|1. Sign in to an existing user in gitlab.com <br /> 2. Create a group<br />3. Navigate to billings page<br />4. Select a plan and fill billing details <br /> 5. Purchase subscription <br />|Order and Subscription is created with appropriate attributes| :white_check_mark: [Verification link](https://drive.google.com/file/d/1BMfZkI0t7PPUICtLWZceqLN1mVjuvxi5/view?usp=sharing) <br> :white_check_mark: [automated test](https://gitlab.com/gitlab-org/gitlab/-/quality/test_cases/349085)||
|Create a new SAAS subscription for an existing customer from CDot|1. Sign in to an existing user in CDot <br />2. Select 'Buy a new subscription' <br /> 3. Enter plan and billing details <br /> 4. Purchase subscription |Order and Subscription is created with appropriate attributes| :white_check_mark: [Verification link](https://drive.google.com/file/d/1oy6TZkd41TWc7VrBl7Fc3RdT-RkK8LR7/view?usp=sharing)<br> :white_check_mark: [automated test](https://gitlab.com/gitlab-org/customers-gitlab-com/-/quality/test_cases/2752)||
|Create a new self managed subscription for a new customer from CDot|1. Sign up CDot <br />2. In billing page, select option to buy 'self-managed' subscription' <br /> 3. Enter active user count and billing details <br /> 4. Purchase subscription | Order and Subscription is created with appropriate attributes. Activation code is emailed to user | :white_check_mark: [Verification link](https://drive.google.com/file/d/15uSeIB693OuqvzcKoNTmfkhFVqlnL_mR/view?usp=sharing) <br> :white_check_mark: [automated test](https://gitlab.com/gitlab-org/customers-gitlab-com/-/quality/test_cases/3096)||
|Create a new self managed subscription for an existing customer from CDot|1. Sign in to an existing user in CDot <br />2. In billing page, select option to buy 'self-managed' subscription' <br /> 3. Enter active user count and billing details <br /> 4. Purchase subscription | Order and Subscription is created with appropriate attributes. Activation code is emailed to user | :white_check_mark: [Verification link](https://drive.google.com/file/d/1Qs0qAhmyrGRr2KESGZ3XzCxGP3jkyJbz/view?usp=sharing)<br> :white_check_mark: [automated test](https://gitlab.com/gitlab-org/gitlab/-/quality/test_cases/347667) ||
|Preview a subscription |1. Login to CDot <br /> 2. Visit url to create subscription with plan param ([http://localhost:5000/subscriptions/new?plan_id=2c92c0f97700a4f7017704c7fe465919 example](url)) <br /> 3. Enter purchase details | Request is directed to Subscribe API. Orders API is not used for preview | :white_check_mark: [Verification video](https://drive.google.com/file/d/14KZVb0unCTO36OO2cj0KVxOgbcUmM8tA/view?usp=sharing)<br> :white_check_mark: [automated test](https://gitlab.com/gitlab-org/customers-gitlab-com/-/quality/test_cases/3424) ||
|Create a new marketplace subscription for an existing customer| Follow the description in this [comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4562#note_1033256197) | Request is directed to Subscribe API. Orders API is not used for preview(Marketplace subscription does not use the preview) | :white_check_mark: [Verification video](https://drive.google.com/file/d/1DYJnjh8cGyewP1doGcjM7WtEuYCEXAL2/view?usp=sharing) |  |
|Create a new marketplace subscription for a new customer| Follow the description in this [comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4562#note_1033256197) | Request is directed to Subscribe API. Orders API is not used for preview(Marketplace subscription does not use the preview) | :white_check_mark: [Verification link](https://drive.google.com/file/d/1DryYncJvJ41yDpaLaHQCo115zswI5Cc_/view?usp=sharing) |  |
| Purchase additional CI minutes (new add-on subscription) | 1. Create a new user on gitlab.com <br/> 2. Create a group <br/> 3. Navigate to Usage Quotas -> Pipeline tab <br/> 4. Click on 'Buy additional minutes' <br/> 5. Fill in quantity and payment details. Submit form | New subscription is created for additional CI minutes purchase using Order's API. Reflects in gitlab.com | :white_check_mark: [Verification link](https://drive.google.com/file/d/1Ii_a7QWgFeZEZgMJmZIapZxH_bNnaSs6/view?usp=sharing) |  |
| Purchase additional storage (new add-on subscription) | 1. Create a new user on gitlab.com <br/> 2. Create a group <br/> 3. Navigate to Usage Quotas -> Storage tab <br/> 4. Click on 'Buy storage' <br/> 5. Fill in quantity and payment details. Submit form | New subscription is created for additional storage purchase using Order's API. Reflects in gitlab.com | :white_check_mark: [Verification link](https://drive.google.com/file/d/1HUDdEXxihEOETEsdRU41QT9fFbW7QufC/view?usp=sharing) |  |
| New OSS SaaS subscription | 1. Generate coupon (refer doc/coupon.md) <br/> 2. Create a new group gitlab.com <br/> 3. Sign in CDot via gitlab.com <br/> 4. Navigate to [Community Program Page for OSS](https://customers.staging.gitlab.com/subscriptions/community_program/new?product=oss) and select `Claim SaaS` <br/> 5. Select group <br/> 6. Enter quantity and coupon details <br/> 7. Purchase subscription  | New subscription is created using Order's API for the quantity specified. Reflects in gitlab.com. Amount is 0. | :white_check_mark: [Verification link](https://drive.google.com/file/d/1uE24F8Q_iLkz_zudLBs9o44od0p7gsQW/view?usp=sharing) |  |
| New EDU SaaS subscription | 1. Generate coupon (refer doc/coupon.md) <br/> 2. Create a new group gitlab.com <br/> 3. Sign in CDot via gitlab.com <br/> 4. Navigate to [Community Program Page for EDU](https://customers.staging.gitlab.com/subscriptions/community_program/new?product=edu) and select `Claim SaaS`  <br/> 5. Select group <br/> 6. Enter quantity and coupon details <br/> 7. Purchase subscription  | New subscription is created using Order's API for the quantity specified. Reflects in gitlab.com. Amount is 0. | :white_check_mark: [Verification link](https://drive.google.com/file/d/103DnUBkOO5wfByI9kAW796KuM8__qlEO/view?usp=sharing) |  |
| New OSS self managed subscription | 1. Generate coupon (refer doc/coupon.md) <br/> 2. Sign in CDot <br/> 3. Navigate to [Community Program Page for OSS](https://customers.staging.gitlab.com/subscriptions/community_program/new?product=oss) and select `Claim self-managed` <br/> 4. Enter number of seats <br/> 5. Enter coupon code <br/> 6. Purchase subscription  | New subscription is created using Order's API for the quantity specified. Amount is 0. | :white_check_mark: [Verification link](https://drive.google.com/file/d/1Ec95P7F6PeSdcNezEFtfwtL_v8dCKITZ/view?usp=sharing) |  |
| New EDU self managed subscription | 1. Generate coupon (refer doc/coupon.md) <br/> 2. Sign in CDot <br/> 3. Navigate to [Community Program Page for EDU](https://customers.staging.gitlab.com/subscriptions/community_program/new?product=edu) <br/> 4. Enter number of seats <br/> 5. Enter coupon code and select `Claim self-managed` <br/> 6. Purchase subscription  | New subscription is created using Order's API for the quantity specified. Amount is 0. | :white_check_mark: [Verification link](https://drive.google.com/file/d/10Z9LGbw2krfXxbrUxyDZEfRuFPsIwQB_/view?usp=sharing) |  |
| Amend an existing subscription by purchasing new seats | 1. Create a group <br/> 2. Upgrade the group to a paid plan <br/> 3. Update seat quantity  | Verify amendment API is used. <br/> Seat quantity is updated <br/> Reflects in gitlab.com, CDot | :white_check_mark: [Verification link](https://drive.google.com/file/d/1opWVVtPxiGvtAxh7crPhWbZem-qxOjW0/view?usp=sharing) |  |
| Amend an existing subscription by purchasing additional minutes | 1. Create a group and a project within the group. Verify shared runners is enabled (`Settings` -> `CI/CD` -> `Runners`) <br/> 2. Upgrade the group to a paid plan <br/> 3. Navigate to `Settings` -> `Usage Quota` (Pipelines tab). <br/> 4. Click 'Buy additional minutes' <br/> 5. Fill in quantity and payment details. Submit. | Verify Amendment API is used to purchase additional minutes. <br/> Additional CI minutes purchased is reflected in gitlab.com, CDot and Zuora | :white_check_mark: [Verification link](https://drive.google.com/file/d/1sBfZNIrZkG05MdnSeKbcugqoxzwtifZj/view?usp=sharing) |  |

### Result

### Next steps (if any)

### How will we measure success?",2
111850600,2022-07-19 11:49:08.174,Clean up tracking_subscription_management FF,"## Summary

This issue is to cleanup the `tracking_subscription_management` feature flag, after the feature flag has been enabled by default for an appropriate amount of time in production.

The feature flag is enabling/disabling frontend and backend tracking for all subscription management events for SaaS and SM subscriptions.

## Owners

- Team: ~25005342  
- Most appropriate slack channel to reach out to: `#g_billing_and_subscription`
- Best individual to reach out to: @dzubova
- PM: @tgolubeva  

## Expectations

### What might happen if this goes wrong?

### Cleaning up the feature flag

<!-- The checklist here is to help stakeholders keep track of the feature flag status -->
- [x] Create a merge request to remove `:tracking_subscription_management` feature flag
  - [x] Remove all references to the feature flag from the codebase
- [x] Ensure that the cleanup MR has been deployed to both staging and production
- [x] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [x] Ensure production environment is still working as expected
- [x] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)",1
111843959,2022-07-19 09:44:11.824,Flaky spec spec/requests/marketo_request_spec.rb,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

This spec `spec/requests/marketo_request_spec.rb` started failing recently:

* https://gitlab.com/gitlab-org/customers-gitlab-com/-/jobs/2739474113
* https://gitlab.com/gitlab-org/customers-gitlab-com/-/jobs/2734260310

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",1
111841337,2022-07-19 09:05:04.128,"Follow-up from ""Number of users field should default to empty in CP SM purchase flow""","## Problem

The following discussion from !5039 should be addressed:

- [ ] @pslaughter started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5039#note_1028174844):  (+2 comments)

    > **suggestion (ux):** Could we add a placeholder to the user quantity input? As-is I don't think it's obvious to the user what they are supposed to do. I'm not sure it's even clear this is supposed to be a number :thinking:
    > 
    > ![Screen_Shot_2022-07-15_at_12.08.50_PM](/uploads/3f76db41b5021e65743a999ec7848533/Screen_Shot_2022-07-15_at_12.08.50_PM.png)
    > 
    > What do you think @vvempati / @esybrant?


## Proposal

Add a sentence of description to the subscription details section, similar to what we're doing for the standard subscription renewal flow.

For the technical proposal, see [this comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4552#note_1141749523).

<p>
<details>
<summary>See how the description looks in the standard subscription renewal flow</summary>

![image](/uploads/98f4658ab46f78b3da11a7dab3d7f70d/image.png)

</details>
</p>

#### Design

![image](/uploads/110ebecdd06f66b0aeb5f0f3e5dab703/image.png)

Copy:

>>>

If you've already configured your instance, enter the current number of billable users or greater if you expect more users. If you haven't yet configured your instance, enter the number of users you expect to have.

[Where to find this](/gitlab-org/customers-gitlab-com/-/blob/main/gitlab-org/customers-gitlab-com/-/blob/main/url)

>>>

Styling for the copy should be the same as in the standard subscription renewal flow, see image above in the proposal section.",1
111820070,2022-07-19 00:31:12.705,Replace custom implementation of findByTestId in tests,"Created as a follow up to https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4064.

We currently have 14 instances of this, once https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5023 is merged we can start replacing these to use the wrapper.",1
111667320,2022-07-14 23:42:02.885,Update new account custom fields to use snake case,"The following discussion from !4989 should be addressed:

- [x] @jagood started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4989#note_1025656052):  (+3 comments)

    > I wonder if it might look better to have a more descriptive function name for this that might give a clue as to why we're doing this?
    > 
    > ```ruby
    > def subscription_params
    >   return unless args.key?(:subscriptions)
    > 
    >   args.fetch(:subscriptions).map { |subscription| prep_custom_fields!(subscription) }
    > 
    >   camelize_params(:subscriptions)
    > end
    > 
    > def prep_custom_fields!(params)
    >   params[:custom_fields].deep_transform_keys!(&:capitalize)
    > end
    > ```
    > 
    > Hmmm, I'm not sure.  That might not help.  :thinking: 
    > 
    > On a related note, is the `custom_fields` key of the `subscriptions` the only place we'll ever have to worry about this?  If not, I wonder about solving this for the general case in `camelize_params`.  Maybe something kind of like...
    > 
    > ```ruby
    > def camelize_params(parameter)
    >   return unless args.key?(parameter.to_sym)
    > 
    >   params = prep_custom_fields(args.fetch(parameter.to_sym))
    > 
    >   IronBank::Object.new(params).deep_camelize(type: :lower)
    > end
    > 
    > def prep_custom_fields(params)
    >   case params
    >   when Array
    >     params.map { |i| prep_custom_fields(i) }
    >   when Hash
    >     params.deep_transform_keys { |k| k.end_with?('__c') ? k.capitalize : k }
    >   else
    >     params
    >   end
    > end
    > ```
    > 
    > That may still need some work.
    > 
    > But if we did this, then we wouldn't change line 25.

More specifically, [new account custom fields](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/app/services/zuora/orders/custom_fields/new_account.rb#L15) need to be updated to snake case:

> On a related note, is the `custom_fields` key of the `subscriptions` the only place we'll ever have to worry about this?

### Proposal

Convert `SSPChannel__c` and `Entity__c` to `s_s_p_channel__c` and `entity__c` respectively.",2
111652649,2022-07-14 17:00:54.391,Document Order services architecture,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

As part of the [Orders API upgrade](https://gitlab.com/groups/gitlab-org/-/epics/6438) efforts, we've implemented a design pattern to structure the Order related services.

- `OrderManagerService` as the entry point for triggering a request to create an order. Based on the type of order operation (such as creating a new subscription, renewing, cancelling a subscription, updating a product, etc.), the `OrderManagerService` internally invokes the `order action` services that generate the parameters required to perform the operation
- `orders/actions` contain services pertaining to order actions
- `orders/entities` construct particular entity object (that can be shared and re-used by multiple order actions). For e.g. `NewAccount`, `RatePlan` object.
- `orders/custom_fields` generate custom fields for subscription, account, orders

![Orders_architecture](/uploads/176e6dca1af16f64ac2cd8b696d1b151/Orders_architecture.jpg)



### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Document the design choice, approach, and implementation details.

### Result

### Next steps (if any)

### How will we measure success?",2
111622394,2022-07-14 07:29:48.137,Hard to read link in error message,"### Problem

After enabling Strict Cloud License, the license for cloud licenses is no longer available for download. When attempting to download it via a direct url call by visiting `/licenses/<subscription name of a cloud license>`, an error message is displayed after the redirect. The error message contains a link to the Support team that is rendered in a white color, making it hard to read on the light red background:

![Screen_Shot_2022-07-06_at_2.36.12_PM](/uploads/b2eb2f37eb081a903d95c8e633ccab1b/Screen_Shot_2022-07-06_at_2.36.12_PM.png)

This may also happen with other error messages too.

### Proposal

Change the color of the link to something more readable.

### Result

Easier readable link in the error message.",1
111609161,2022-07-13 22:27:08.135,Use Order manager service to create subscriptions initiated from marketplace,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Support marketplace attributes when creating a new subscription using Orders API.
Looking at `Marketplace::CreateSubscriptionService`, it appears the following attributes need to be supported:

```
external_subscription_id
trading_partner_id
fulfillment_distributor
lead_source
unit_price (products -> main)
```

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

This issue entails the following three steps:

- [x] Identify the corresponding parameters in Orders API
- [x] Include the attributes in `Zuora::Orders::OrderManagerService` or `Zuora::Orders::Actions::CreateSubscription` as appropriate (based on whether it is an order param or subscription param). Create entities if need be.
- [x] Allow Marketplace subscriptions to be created via Orders API ([remove the eligibility `false` condition when  the request is initiated from marketplace](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/6ef9daf015f8a7e748195917f0fec0ee82966cf9/app/services/zuora/orders/feature_availability.rb#L17): depends on https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5058 to be merged)

### Result

Marketplace subscriptions use Orders API to create subscriptions instead of Subscribe API.",2
111517772,2022-07-12 14:40:17.030,Update Unified Email template for SCL,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
It's been discovered that the unified email template ([text version](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/b0767104a78c6e573e93b55fbbf105c5d0d8b1b3/app/views/unified_license_mailer/license_information_email.text.erb#L30-31) and [html version](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/b0767104a78c6e573e93b55fbbf105c5d0d8b1b3/app/views/unified_license_mailer/license_information_email.html.haml#L51-52)) currently still has text that is no longer relevant after the launch of strict cloud licensing, specifically directing customers to download their license from the Customers Portal, where it is no longer available.

This can result in a confusing customer experience.



### Proposal
Update the email template text as stated below.

**Current Template:**

```erb
### Unable to use the activation code?

If you have an offline or air gapped environment, or you're unable to upgrade to 14.1 and later, you cannot use the activation code.

* If you purchased directly from GitLab, download your license from the Customers Portal.
  <%= subscriptions_url %>
* If you purchased from a reseller, submit a support ticket to receive your license.
  https://support.gitlab.com/hc/en-us/requests/new

```

**Proposed Template:**

```
### Offline or air gapped instance?

If you have an offline or air gapped environment, you must use an offline license file or key. To request an offline license, submit a support ticket, https://support.gitlab.com/hc/en-us/requests/new
```",1
111030070,2022-07-01 14:54:11.332,Set invoice owner for marketplace,"## Problem statement

For subscriptions originating from marketplace, the invoice owner needs to be set to be explicitly set ([reference](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/22a611f9c8795a7d9b7796c302bbbfee2cdf6650/app/services/subscribe_service.rb#L138)). This needs to be incorporated in the Orders API workflow.

## Proposed solution

@qzhaogitlab helped investigating a way to set the invoice owner using the [Change owner of subscription](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AC_Orders_Tutorials/C_Change_the_Owner_of_a_Subscription#Use_the_REST_API) Order action.

From https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5011#note_1013232946:

Per some Zuora documentation, I tend to think this is not possible.

* from [Preview an order](https://www.zuora.com/developer/api-reference/?_ga=2.258925834.1822949724.1656638338-1336953299.1647685508&_gl=1*1h2399g*_ga*MTMzNjk1MzI5OS4xNjQ3Njg1NTA4*_ga_MY8CQ650DH*MTY1NjY2NDQ4MC40OC4xLjE2NTY2NjQ5NDIuMA..#operation/POST_PreviewOrder) section, it says:

> existingAccountNumber string <= 70 characters The account number that this order will be created under. It can be either the accountNumber or the account info. It will return an error if both are specified. Note that invoice owner account of the subscriptions included in this order should be the same with the account of the order.

* from [Create an order](https://www.zuora.com/developer/api-reference/?_ga=2.258925834.1822949724.1656638338-1336953299.1647685508&_gl=1*1h2399g*_ga*MTMzNjk1MzI5OS4xNjQ3Njg1NTA4*_ga_MY8CQ650DH*MTY1NjY2NDQ4MC40OC4xLjE2NTY2NjQ5NDIuMA..#operation/POST_Order), it says:

> existingAccountNumber string <= 70 characters The account number that this order will be created under. It can be either the accountNumber or the account info provided. It will return an error if both are specified. Note that this actually specifies the invoice owner account of the subscriptions included in this order.

> newAccount object (Account) The information of the new account to be created with the order. Note that this actually specifies the invoice owner account of the subscriptions included in this order. To create the new account, either a creditCard structure or the hpmCreditCardPaymentMethodId field (but not both) should be provided. The one provided becomes the default payment method for this account. If the credit card information is declined or can't be verified, then the account is not created.

* from [Overview of orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders), it says:

> The following components represent an Order:
>
> Order A contractual agreement between a merchant and a customer. One order can affect multiple subscriptions and order line items which belong to the same invoice owner account. These subscriptions and order line items can be owned by multiple customers.

From the above documentations, it sounds to me, both `preview order` and `create order` do NOT allow setting `invoice account` explicitly (Zuora will set the `invoice account` to the same value as `subscription owner account` by default).

So I think, for the marketplace `invoice owner` setting, we will have to create another Order to [change the subscription owner](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AC_Orders_Tutorials/C_Change_the_Owner_of_a_Subscription#Use_the_REST_API). I had a quick try, it works:

```
[173] pry(#<Zuora::Orders::OrderManagerService>)> transfer_owner_params
=> {:order_date=>Fri, 01 Jul 2022,
 :existing_account_number=>""A00518100"",
 :subscriptions=>
  [{:subscription_number=>""A-S00216818"",
    :order_actions=>
     [{:type=>""OwnerTransfer"",
       :trigger_dates=>
        [{:name=>""ContractEffective"", :trigger_date=>Fri, 01 Jul 2022},
         {:name=>""ServiceActivation"", :trigger_date=>Fri, 01 Jul 2022},
         {:name=>""CustomerAcceptance"", :trigger_date=>Fri, 01 Jul 2022}],
       :owner_transfer=>{:destination_invoice_account_number=>""A00005485""}}]}]}
[174] pry(#<Zuora::Orders::OrderManagerService>)> test_transfer_owner = Zuora::Orders::Create.perform_now(transfer_owner_params)
[ActiveJob] [Zuora::Orders::Create] [e68e488d-ac65-4825-ba33-7f00437cfdfe] Performing Zuora::Orders::Create (Job ID: e68e488d-ac65-4825-ba33-7f00437cfdfe) from Sidekiq(zuora) enqueued at  with arguments: {:order_date=>Fri, 01 Jul 2022, :existing_account_number=>""A00518100"", :subscriptions=>[{:subscription_number=>""A-S00216818"", :order_actions=>[{:type=>""OwnerTransfer"", :trigger_dates=>[{:name=>""ContractEffective"", :trigger_date=>Fri, 01 Jul 2022}, {:name=>""ServiceActivation"", :trigger_date=>Fri, 01 Jul 2022}, {:name=>""CustomerAcceptance"", :trigger_date=>Fri, 01 Jul 2022}], :owner_transfer=>{:destination_invoice_account_number=>""A00005485""}}]}]}
[ActiveJob] [Zuora::Orders::Create] [e68e488d-ac65-4825-ba33-7f00437cfdfe] Performed Zuora::Orders::Create (Job ID: e68e488d-ac65-4825-ba33-7f00437cfdfe) from Sidekiq(zuora) in 4939.16ms
=> {:success=>true,
 :order_number=>""O-00135400"",
 :account_number=>""A00518100"",
 :status=>""Completed"",
 :subscription_numbers=>[""A-S00216818""]}
```",2
111007464,2022-07-01 08:03:47.966,Add feature tests for form submit preventing logic,"We want to make sure the newly added logic that prevents the form from being submitted when emojis are present is also tested at the integration level.

The reason is that while the unit test [in here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/spec/frontend/sessions/register_form_spec.js#L134) gives some confidence about the Register form behaviour, (as [suggested](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4887#note_1012878978)) an integration test would yield a result closer to the real-life behaviour.

### Proposed solution

It should be sufficient to add an expectation to the current set of tests [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/spec/features/customer_sign_up_spec.rb).

### Proposed number of MRs

|Description|MR
|-|-|
| Add feature specs | 1 |",1
113533122,2022-06-30 22:16:58.442,Remove cloud compatible check and add GitLab EE check,"## Background
Currently, cloud license activation codes are generated only when a customer is ""eligible"". Eligibility is systematically determined based on the status ""Super Sonics"" fields:

* An activation code (`cloud activation`) will be created for a SM plan [here](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/8baa35bbd603bf60a75a6981da4f1fbb70abe934/app/workers/zuora_callback_worker.rb#L21) if the following conditions are fulfilled (see [this method](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/fe7feb2659aff9cd2bf60e998e91c042462a29c8/app/models/subscription.rb#L401)):
   * A cloud license can be activated ([code](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/fe7feb2659aff9cd2bf60e998e91c042462a29c8/app/models/subscription.rb#L461)) which means one of the following condition should be true:
     * the subscription was self serviced (subscription bought via CustomersDot)
     * `ContractSeatReconciliation__c` is not `null`
     * `ContractAutoRenew__c` is not `null`
     * `ContractOperationalMetrics__c` is not `null`

   * The subscription is cloud compatible ([code](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/d1f1aac64a4b6cb99bbf47838d1fde5116b6468b/lib/zuora/subscription.rb#L47)) which means `TurnOnSeatReconciliation__c` is present.
If the above is met, the customer will receive either the unified mailer or the activation code mailer, and also have the option to copy the activation code from the subscription in CustomersDot. If not, we are assuming the customer is on the old terms (purchase completed prior to 2022-08-01), and not creating or providing an activation code.

## Proposal
Remove the dependency on the Super Sonics fields in order to generate a cloud license. Instead, generate an activation code for all customers where `TurnOnCloudLicensing` is not = `No`.

Specifically, remove the following conditions:

* Remove check for subscription is cloud compatible ([code](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/d1f1aac64a4b6cb99bbf47838d1fde5116b6468b/lib/zuora/subscription.rb#L47))
  * Refactor logic around [SubscriptionCloudCompatibleVersionFinder](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/8260397dabda85e49c6b7642892c9fd83496fa63/lib/subscription_cloud_compatible_version_finder.rb) & rename

* When removing the cloud license compatible check on manual offline cloud license creation ([code](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/fbeeb5178fe0f004d18e772b70af7b271fcb74ba/app/services/rails_admin/create_license_service.rb#L154)), add a condition that checks the license belongs to a GitLab EE plan now as an extra safety 

## Why 
There is a bug in SFDC that is resulting in the Super Sonics fields occasionally being cleared out. Details of this issue are captured [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4599) and we are working with Sales Systems to correct this problem as part of this epic: https://gitlab.com/groups/gitlab-com/-/epics/1886.
* ~~This is reducing adoption of Cloud Licensing as these customers are receiving only the Legacy mailer (which does NOT have an activation code) and they cannot access the activation code from within CustomersDot~~
* This is actually causing customers to receive the activation code mailer _without_ a cloud license attached, which is a terrible customer experience, and could result in us recognizing revenue at the wrong time.

In looking at New and Renewal quotes created after 2022-08-01, about 390 have these fields blanked out.

|   Quote Status          |  TurnOnSeatReconciliation__c  |   # of Primary Quotes    |
|-------------------------|-----------------------------|-------|
| New                     | No                          | 2038  |
|   New                      | Yes                         | 1112  |
|   New                      | (blank)                     | 82    |
| **New Total**               |                             | **3232**  |
| Sent to Z-Billing       | No                          | 4774  |
|  Sent to Z-Billing                       | Yes                         | 3417  |
|   Sent to Z-Billing                      | (blank)                     | 305   |
| **Sent to Z-Billing Total** |                             | **8496**  |
| **Grand Total**            |                             | **11728** |


<details><summary>Example reported in Slack</summary>
https://gitlab.slack.com/archives/C018C623KBJ/p1656623411693169
![image](/uploads/7f285a97705b946eb410eedd7c32a9f0/image.png)
</details>

This also impacts their Customer Portal experience and prevents the customer from accessing their activation code there, so these customers are then downloading legacy licenses from the portal and activating with that. Example of this reported here: https://gitlab.com/gitlab-org/fulfillment-meta/-/issues/459#note_1064490965

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

Ensure sufficient test coverage is added to account for these different permutations and conditions..",3
110988232,2022-06-30 21:36:03.037,Custom fields for new Zuora account,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4961 introduced the following custom attributes: `SSPChannel__c` and `Entity__c` and set `IsInvoiceSeparate = true` for all Marketplace subscriptions.

This change needs to be incorporated for Orders API.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Create custom attributes service class for New account and set the values appropriately. Consider moving the methods to subscription helper class.


### Result

The newly introduced custom attributes are set in the Orders workflow.",2
110942114,2022-06-30 07:31:17.350,Missing condition when creating missing cloud activation in admin area,"### Problem

While looking into the code logic for the cloud activation creation, it was found that the checks for the automatic workflow (when a subscription callback comes from Zuora to CustomersDot) differ from the ones in place for the admin area workflow to create a missing cloud activation.

The automatic workflow [checks](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/bd99d8091d28f26aa62eec6578495da0a3ee9cbd/app/models/subscription.rb#L416-418) three conditions:
1. Does the subscription have a GitLab EE plan? ([code](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/bd99d8091d28f26aa62eec6578495da0a3ee9cbd/app/models/subscription.rb#L190))
2. Is the subscription cloud license compatible? ([code](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/bd99d8091d28f26aa62eec6578495da0a3ee9cbd/lib/zuora/subscription.rb#L47))
   * `TurnOnSeatReconciliation__c` is set
3. Can the subscription be cloud license activated? ([code](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/bd99d8091d28f26aa62eec6578495da0a3ee9cbd/app/models/subscription.rb#L475)) Which requires one of the following condition to return `true`:
   * the subscription was self serviced (subscription bought via CustomersDot)
   * `ContractSeatReconciliation__c` is not `null`
   * `ContractAutoRenew__c` is not `null`
   * `ContractOperationalMetrics__c` is not `null`

The admin area workflow [checks](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/bd99d8091d28f26aa62eec6578495da0a3ee9cbd/app/models/subscription.rb#L440-441) contain the checks from 1. and 2. but are missing 3. 

### Proposal

Align both workflows to do the same checks to ensure a cloud activation can only be created for eligible subscriptions. To do this, the [checks](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/bd99d8091d28f26aa62eec6578495da0a3ee9cbd/app/models/subscription.rb#L440-441) for the admin area workflow have to contain the check for a subscription to be cloud license activated ([code](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/bd99d8091d28f26aa62eec6578495da0a3ee9cbd/app/models/subscription.rb#L475)).

To ensure later modifications will be applied to both workflows, the three checks could be moved to their own method to be easily reused in the two workflows.

### Result

The automatic workflow and the admin area workflow are aligned with the checks for eligible subscriptions when checking if a cloud activation needs to be created.",1
110930718,2022-06-30 01:06:40.886,Revert PaymentTerm setting for Marketplace Zuora account,"### Problem

Per [this discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4081#note_1011074254): we do not need to set Marketplace end user Zuora account `PaymentTerm` differently.

> the payment term only needs to be set on the Invoice Owner Account (Arrowsphere: Net 30 EOM). The payment term of the end user is irrelevant.

### Proposal

To clean up the code logic, we should revert related changes:
- https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/55a49713a3cd40a12e1334f7ba7fae4d6b5ffae2/app/services/zuora/helpers/subscription.rb#L24-29
- https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/55a49713a3cd40a12e1334f7ba7fae4d6b5ffae2/app/services/zuora/helpers/subscription.rb#L45-49

After revert, all paymentTerm will be the default value `DEFAULT_PAYMENT_TERM = 'Due Upon Receipt'`

### Result

### Next steps (if any)

### How will we measure success?",1
110918001,2022-06-29 18:09:29.992,Set correct Terms of Service for Community program subscription renewal,"## Problem

Similar to https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3185+, we should set correct subscription fields when Community Programs subscription renews, but ONLY if these fields have not been set already.

If the following fields are already set (from when the new subscription was created), do not change them.

## Proposal

Update fields according to this logic

### For SaaS

- `ContractAutoRenew__c` = No
- `TurnOnAutoRenew__c` = No
- `ContractSeatReconciliation__c` = No
- `TurnOnSeatReconciliation__c` = No


### For SM

- `ContractAutoRenew__c` = No
- `TurnOnAutoRenew__c` = No
- `ContractSeatReconciliation__c` = No
- `TurnOnSeatReconciliation__c` = No
- `TurnOnCloudLicensing__c` = No
- `ContractOperationalMetrics__c` = No
- `TurnOnOperationalMetrics__c` = No

### Result

### Next steps (if any)

### How will we measure success?

---

**Iteration MR/Issues Count:** 1

**Testing considerations:**

* Check community program renewals callback **updates** the super sonics flag correctly, if not set.
*  Check community program renewals callback **does not change** the super sonics flag, if already set
* Tips on how to create subscription ready for renewal: https://gitlab.com/gitlab-org/fulfillment-meta/-/blob/master/docs/tips_and_tricks/zuora.md#create-a-subscription-with-activation-date-in-the-past",3
110910907,2022-06-29 15:34:03.740,Prevent subscription purchase when quantity is invalid,"### Problem

When user enters 0 as quantity during subscription purchase, subscription purchase/claim CTA is enabled even if quantity is invalid and user can successfully buy the subscription despite the invalid quantity entered. The subscription purchased is for the previous valid quantity entered. For example, user enters 3 for quantity, then changes to 0, clicks on Buy subscription - this will successfully create a subscription for 3 users.

| Feature | Current |
|-|-|
| New standard SM | ![Screen_Shot_2022-06-28_at_5.52.25_PM](/uploads/51e603f87d9722e2379a81b5c7ce5e0a/Screen_Shot_2022-06-28_at_5.52.25_PM.png)|
| New CP SM | ![Screen_Shot_2022-06-28_at_6.10.19_PM](/uploads/1c85b4879ac1a10881f4b58079c82ec6/Screen_Shot_2022-06-28_at_6.10.19_PM.png) |
| New standard SaaS | ![Screen_Shot_2022-06-28_at_5.56.33_PM](/uploads/ddf87441c9c4854683f5fa2a517142c5/Screen_Shot_2022-06-28_at_5.56.33_PM.png) |
| New CP SaaS | ![Screen_Shot_2022-06-28_at_6.04.50_PM](/uploads/18ca6537ceac2dbac0d9a3b77a42faf8/Screen_Shot_2022-06-28_at_6.04.50_PM.png) |

### Proposal

1. Disable the CTA when quantity is invalid so user can't purchase subscription when latest entered quantity is invalid
2. Replace the dollar value with `–` when quantity is invalid (replace the dollar values in the `order total` and the two `subtotal` lines)

![Screen_Shot_2022-06-29_at_5.33.08_PM](/uploads/cf144793f56799af4934e8bce74a92e8/Screen_Shot_2022-06-29_at_5.33.08_PM.png)

[Original discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4392#note_1010282717)",2
110866491,2022-06-29 01:47:25.333,"Follow-up from ""Notify Platypus when marketplace subscription provisioned""","There are two suggestions from MR review, which could be nice improvements:

The following discussion from !4982 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4982#note_1009838193): 

    > **Suggestion:** I thought rubocop warned about this but I think the preference is to break out the namespace hierarchy using `module` like you did for the class above.
    > 
    > ```
    > module Platypus
    >   class MarkSubscriptionProvisionedWorker
    > ```

- [ ] Another suggestion is [this comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4982#note_1009838197):
>>>
**Suggestion (non-blocking):** If we don't end up using the instance features of this class, you could consider a class that `extends self` instead, then the API to interact with this class is a little nicer (e.g. `Platypus::MarkSubscriptionProvisionedService.execute()`.

OR, if you wanted to keep it as-is, you could pass the attributes in `initialize`. This would allow you to set attr_readers for `external_subscription_source` and `external_subscription_id`. You could also break up this execute method a bit more this way. For instance, `access_token` could be it's own method.
>>>",1
110855738,2022-06-28 18:29:08.343,Process payments for new subscription in Orders API,"The following discussion from !4947 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4947#note_1009249862):  (+1 comment)

    > **Question:** Will this logic for processing payments be captured in a later MR?  I'm just curious and totally fine if it's not included in this MR. :smile:

### Problem statement

Similar to how processing payment options are included in [Subscribe api](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/90fc752163c1f6f83cc104773b30289226ca166c/app/services/subscribe_service.rb#L103), we need a mechanism to set this in Orders API.

### Proposed solution

Cross posting the inferences from [this thread](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4446#note_1012628875):

In the subscribe api, the following options are sent in `subscribe_options` object:

```ruby
subscribeOptions: {
  generateInvoice: true,
  processPayments: <true if no coupon is used or if not marketplace>,
  subscribeInvoiceProcessingOptions: {
    invoiceDate: <current date>,
    invoiceProcessingScope: 'Subscription',
    invoiceTargetDate: <current date>
  }
}
```

While trying to map to Orders API, the following is what I was able to infer based on the description:
| Subscribe API | Orders API | Notes |
|---------------|------------|-------|
| `generateInvoice` | `runBilling` | |
| `processPayments` | `collectPayment` | |
| `InvoiceDate` | `documentDate` | |
| `InvoiceDate` | `targetDate` | |
| `subscribeInvoiceProcessingOptions` | - | Not required in Orders API |",2
110785158,2022-06-27 17:54:10.434,Refactor Order related implementation service methods to a class method,"The following discussion from !4865 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4865#note_1004957734):  (+1 comment)

    > **Suggestion (non-blocking):** I wonder if it would be nice to consider adding class level methods for these new classes that allow us to execute by avoiding the `.new(...).execute` standard.  It would be a more convenient API, especially when it comes to stubbing in our tests.
    > 
    > `expect(OrderManagerService).to receive(:execute)`
    > 
    > vs.
    > 
    > ```
    > expect_next_instance_of(OrderManagerService) do |service|
    >   expect(service).to receive(:execute)
    > ```
    > 
    > Maybe something to consider in a future MR for these new Order classes if you like the idea.",1
110784646,2022-06-27 17:35:29.622,Implement Order preview,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Similar to subscription preview (before the actual purchase), we need a way to use the Orders API to preview an order.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Use the [Preview an order API](https://www.zuora.com/developer/api-reference/#operation/POST_PreviewOrder) for the preview workflow.

This is 3 step process:

| Step | Description | MR |
|------|-------------|----|
| Step 1 | Create Order Preview client and worker job that invokes the client | https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5170 |
| Step 2 | OrderPreview service | https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5168 |
| Step 3 | Using OrderPreview service in subscription preview workflow | https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5192 |

### Result

Preview subscription uses Order Preview API instead of Subscribe API.

### Next steps (if any)

### How will we measure success?",3
110762500,2022-06-27 11:30:27.538,[SaaS] Number of users field should default to group's billable user count in purchase flow,"## Problem to solve

The number of users field in the new community programs SaaS subscription purchase flow defaults to `1`. [This has caused users](https://gitlab.com/gitlab-com/marketing/community-relations/community-operations/community-operations/-/issues/155#note_976584791) to accidentally purchase subscriptions for 1 user, because they do not change the default.

![Screen_Shot_2022-06-27_at_1.22.25_PM](/uploads/aacb62c4287c84ea0d01c42f57ae9b31/Screen_Shot_2022-06-27_at_1.22.25_PM.png)

![Screen_Shot_2022-06-27_at_1.22.15_PM](/uploads/910479d4b5fc10eec52b6c129eb9afcd/Screen_Shot_2022-06-27_at_1.22.15_PM.png)

## Proposal

For the new community programs SaaS subscription purchase flow, the default for the number of users field should be group's billable user count.

The sections should also be reordered so that the namespace selection section comes before the user quantity section.",2
110629231,2022-06-23 18:12:37.709,Backfill to sync missing namespace data from CustomersDot to SFDC,"## Problem

We recently identified a set of subscriptions with missing namespace fields.  This results in SFDC users unable to generate complete reports or view relevant customer subscription data.

## Background 
The likely causes for missing data values are as follows:
1. Zuora data null prior to ([sync integration](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1989)) implementation - expected since the work was move forward only. Technical work would be to backfill the data from GitLab.com-CustomersDot data.
1. Zuora data null post implementation - could be one of two causes:
   - Sales-assisted subscription in which the customer hasn't connected their namespace to the subscription yet. There's no technical work here.
   - Data sync issue, somewhere between Zuora-CustomersDot-GitLab.com, data is out of sync. Technical work would be to find the data issue, resolve it, and push the data to Zuora.
1. SFDC data null prior to the [latest work](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/intake/-/issues/314) to bring the data in (I'm not sure of the date tbh) - I'd defer to the team who implemented the work, I'm not sure if they backfilled data which existed in Zuora.
1. SFDC data null post the latest work to bring the data in. - would be the same root cause as 2.2 above

## Proposal

Create a process to backfill missing namespace field values.

## Communication Plan

- [ ] Evaluate when this can be scheduled
- [ ] Once scheduled, communicate to Customer Success",8
110626005,2022-06-23 17:01:24.288,Include subscription custom attributes in Orders API,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4382 created a service that generates custom attributes required for new Subscription order action.

The [Orders API](https://www.zuora.com/developer/api-reference/#operation/POST_Order) requires subscription custom attributes to be sent in the `subscriptions` object:

```
{
  orderDate: ...,
  ...
  subscriptions: [
    {
      customFields: {

      },
      orderActions: [],
      ...
    }
  ]
}
```

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

In [OrderManagerService](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/d1f43892b1be3add5afba0f9f55a1719a9cb6470/app/services/zuora/orders/order_manager_service.rb), invoke the service `Zuora::Orders::CustomFields::CreateSubscription.new(customer: customer, params: params).execute` when order action is of New Subscription type.

### Result

New order includes the subscription custom fields set.",2
110625063,2022-06-23 16:36:33.396,Add feature spec for cancel flash notice behavior,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
We need to add a feature spec to verify the URL navigation behavior with the new [Vue cancelation modal](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/62e7646f3ba331c9892ff5f31d52207aaac5ac55/app/frontend/javascripts/subscription/components/cancellation_modal.vue). Thread [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4910#note_1000412840). 

Also remove [this unit test](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4910/diffs?diff_id=419419267#f07ba46d14657e90fe9c115cec0bd944f7d112e7_195_223) since the feature spec will better cover that scenario.

### Proposal
Add a test identical/very similar to [this](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/62e7646f3ba331c9892ff5f31d52207aaac5ac55/spec/features/existing_customers/renewal_spec.rb#L25) that uses the new Vue cancellation modal. 

### Result
We have better coverage of the new Vue cancel modal behavior when the user cancels their subscription.",1
110624142,2022-06-23 16:16:40.499,Use current subscription instead of active for Ramp subscriptions when downloading/copying license,"### Problem

In https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3969, we updated the provisioning logic in CDot to support SM ramp subscriptions.  This involved using the `Subscription.build` method in places where licenses are provisioned like when activating a Cloud subscription or when processing a Zuora callout.  The `Subscription.build` method can build a ramped `Subscription` object with products from the current ramp interval rather than using the latest/active subscription information.  For instance, if interval 1 had a quantity of 5 and interval 3 had a quantity of 20, the license would be generated initially with a quantity of 5.

However, when downloading/copying a license from the CustomersDot Manage Subscriptions page, this Subscription is loaded without this logic, so the license will always use the active/last interval quantity (e.g. 20).  

## Proposal 
For Ramp subscriptions only, update the download/copy action for a Self Managed subscription on the `Manage Purchases` page to use the `Subscription.build` method. This will ensure only the current ramp interval is used.  

This issue is related to https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3916+ where we are considering UX changes in CDot related to ramp subscriptions.",1
110546787,2022-06-22 12:46:25.932,Add ability to use Zuora Data Query,"### Problem

The [gem `iron_bank`](https://github.com/zendesk/iron_bank/) that we use as a third party tool to connect CustomersDot to Zuora doesn't support complex query (like joining two data models). To find eligible subscriptions in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4405+, we need to use a complex query. The query will use the `Subscription` as the main data model and join the `Account` and `Contact` data models to get to the data we need for the mentioned issue (to send reminder emails to instance admin/sold to contacts of a subscription).

With IronBank that isn't possible, but with [Zuora's Data Query](https://apisandbox.zuora.com/platform/data-query), this can be achieved (also see [API docs](https://www.zuora.com/developer/api-reference/#tag/Data-Queries)).

One thing to note is that Data Query is async and will not return the result directly.

### Proposal

Add the ability to use Zuora's Data Query.

### Result

The complex query needed for https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4405 can be done with the help of Zuora Data Query.",3
110469859,2022-06-21 11:32:14.340,Staging sanity of CustomersDot application - CI Decomposition,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

As mentioned in https://gitlab.com/gitlab-org/gitlab/-/issues/365739, we need to perform a sanity testing of the functionality for CustomersDot application.",1
110415737,2022-06-20 13:25:37.813,Remove discount alerts for deprecated subscriptions,"### Problem

We have alerts in our code base that we show we customer **upgrades to** the deprecated subscription type (Bronze/Silver/Gold/Starter) that are eligible for discounts. Right now there is no valid case when we should show it (see [internal slack thread](url)).

`""Don't miss out on your exclusive deal""` alerts should be safe to remove now, the renewal form is already a complex component and we should keep it clean.

| SelfManaged | SaaS |
| ------ | ------ |
| ![Screenshot_2022-06-20_at_15.10.38](/uploads/bb6a56644729ccd35f5cc9463dcf6eba/Screenshot_2022-06-20_at_15.10.38.png) | ![Screen_Shot_2020-12-23_at_16.15.55](/uploads/6580d8e7b162a22adb484fe9cd57be83/Screen_Shot_2020-12-23_at_16.15.55.png) |

### Proposal

Remove the alerts from the source code.",1
110261772,2022-06-16 20:51:13.836,New account data for Orders API,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

When creating a new order, the account details can be provided by specifying either of the two attributes: `existingAccountNumber` or `newAccount`.

As the name suggests, `existingAccountNumber` is used for an existing account, and `newAccount` for a new account.

While OrderManagerService currently supports pass the [`existingAccountNumber`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/618359c09943f0c8716ad277b6c546562c103d40/app/services/zuora/orders/order_manager_service.rb#L40), we need a mechanism to send the `newAccount` object for new customers.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Create an entity that constructs account object. It should return existing or new data based on whether the customer has an account or not.

### Result

### Next steps (if any)

### How will we measure success?",2
110207920,2022-06-16 04:26:13.687,Add fields to GraphQL API to support community program management in GitLab,"### Problem

This is foundational work for https://gitlab.com/gitlab-org/gitlab/-/issues/363439+ and https://gitlab.com/gitlab-org/gitlab/-/issues/363440+.

We need to know what date a subscription is eligible for renewal from and whether or not the subscription can have seats added to it so that we can show the correct UI to the user, at the correct time for self managing their subscriptions in GitLab.

Currently this information is hard-coded in the GitLab codebase, but with the introduction of community programs, the renewal dates are different and not all subscriptions are eligible to have their seat count modified.

### Proposal

Update the [`SubscriptionType`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/a56a94813b677713d9f8c43e320ca06cd3314c3f/app/graphql/types/subscription_type.rb) to have the attributes `enable_renew_from: Date` and `can_add_seats: Boolean` in the response.

- `enableRenewFrom` should have the same behaviour as [the method on `Subscription`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/a56a94813b677713d9f8c43e320ca06cd3314c3f/app/models/subscription.rb#L684)
- `canAddSeats` should be `false` for community program subscriptions (and `true` for all others?)

More discussion in planning issue here: https://gitlab.com/gitlab-org/gitlab/-/issues/363537

### Result

These attributes are available on the `SubscriptionType` in the CustomersDot GraphQL API.",3
110195583,2022-06-15 21:16:28.510,More customizations when creating marketplace subscriptions,"### Background

We found out in [this thread](https://gitlab.com/groups/gitlab-org/-/epics/6873#note_993065034) that more customizations are needed when creating accounts and subscriptions in the Marketplace API in CDot.

### Proposal

The following 3 customizations are needed.  As I understand it, these fields will be static for all Marketplace orders.

#### 1. `IsInvoiceSeparate = TRUE`

All Arrow subscriptions should be invoiced separately (e.g. `IsInvoiceSeparate` = `true`). The default setting for `IsInvoiceSeparate` = `false` for subscriptions. However, in order to ensure that we have a 1:1 relationship between subscription and invoice, we will need this setting set to `true`.  

The `IsInvoiceSeparate` attribute can be passed in the subscribe request body as seen in [the Zuora docs](https://www.zuora.com/developer/api-reference/#operation/Action_POSTsubscribe).  This will be set in the request body where `request_body['subscribes'][0]['SubscriptionData]['Subscription']['IsInvoiceSeparate']` is `TRUE` .

#### 2. `SSPChannel__c = ""Reseller""`

SSP Channel should be set as `Reseller` for the Arrow account in Zuora as well as all end user accounts.  This means setting `SSPChannel__c` to ""Reseller"" for accounts created in the subscribe request.

This field has not be set in the `SubscribeService` before and may require a change to the IronBank schema.

#### 3. `Entity__c`

> Entity MUST be the same on all end user and Arrow account (if Arrow is US end user must be US) - this is a revenue requirement

We don't currently set `Entity__c` when creating accounts as part of the subscribe request so this will be a new attribute to set in the request.  As per [this comment](https://gitlab.com/groups/gitlab-org/-/epics/6873#note_993248300), this attribute should be set to `""US""` for all Arrow orders.  ~~It's not clear yet whether this applies to all Marketplace orders or just Arrow.  We've [asked about this below](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4430#note_995757617), as it may impact where the default lives; a) in Platypus, then passed to CDot in the marketplace request, OR 2) in CDot for all marketplace orders.~~

~~**Update**: per [comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4430#note_995956944), we hope to have the `Entity__c` value passed through the Marketplace API request from Platypus.~~

**Update again**: per [comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4430#note_1000132233), we will set `Entity__c = ""US""` for all Marketplace orders in this iteration.",2
110192701,2022-06-15 20:00:54.936,Remove storyshots,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

When we added storyshots we wanted to test that rendering components do not produce error but turns out Jest does not treat error as errors.


<summary>See the detailed output of our storyshot tests under the summary</summary>

<details>

```shell
                   <LicenseKeyButtons>
                     <SubscriptionActivationLegacy>
                       <SubscriptionActivation>
                         <Subscription>
                           <Anonymous>
                             <Anonymous>
                               <Anonymous>
                                 <Anonymous>
                                   <Anonymous>
                                     <Root>

      at warn (node_modules/vue/dist/vue.runtime.common.dev.js:621:15)
      at node_modules/vue/dist/vue.runtime.common.dev.js:3520:36
      at VueComponent.reactiveSetter [as $listeners] (node_modules/vue/dist/vue.runtime.common.dev.js:1047:9)
      at updateChildComponent (node_modules/vue/dist/vue.common.dev.js:4150:17)
      at prepatch (node_modules/vue/dist/vue.common.dev.js:3147:5)
      at patchVnode (node_modules/vue/dist/vue.common.dev.js:6343:7)
      at VueComponent.patch [as __patch__] (node_modules/vue/dist/vue.common.dev.js:6515:9)
      at VueComponent.Vue._update (node_modules/vue/dist/vue.common.dev.js:3960:19)
      at VueComponent.updateComponent (node_modules/vue/dist/vue.common.dev.js:4078:10)
      at Watcher.get (node_modules/vue/dist/vue.common.dev.js:4490:25)
      at Watcher.run (node_modules/vue/dist/vue.common.dev.js:4565:22)
      at flushSchedulerQueue (node_modules/vue/dist/vue.common.dev.js:4323:13)
      at Array.<anonymous> (node_modules/vue/dist/vue.common.dev.js:1994:12)
      at flushCallbacks (node_modules/vue/dist/vue.common.dev.js:1920:14)

    console.error
      [Vue warn]: Missing required prop: ""subscription""
      
      found in
      
      ---> <Subscription>
             <Anonymous>
               <Anonymous>
                 <Anonymous>
                   <Anonymous>
                     <Anonymous>
                       <Root>

      at warn (node_modules/vue/dist/vue.common.dev.js:630:15)
      at assertProp (node_modules/vue/dist/vue.common.dev.js:1686:5)
      at validateProp (node_modules/vue/dist/vue.common.dev.js:1637:5)
      at loop (node_modules/vue/dist/vue.common.dev.js:4673:17)
      at initProps (node_modules/vue/dist/vue.common.dev.js:4704:33)
      at initState (node_modules/vue/dist/vue.common.dev.js:4647:21)
      at VueComponent.Vue._init (node_modules/vue/dist/vue.common.dev.js:5010:5)
      at new VueComponent (node_modules/vue/dist/vue.common.dev.js:5157:12)
      at createComponentInstanceForVnode (node_modules/vue/dist/vue.common.dev.js:3307:10)
      at init (node_modules/vue/dist/vue.common.dev.js:3136:45)
      at createComponent (node_modules/vue/dist/vue.common.dev.js:6013:9)
      at createElm (node_modules/vue/dist/vue.common.dev.js:5960:9)
      at VueComponent.patch [as __patch__] (node_modules/vue/dist/vue.common.dev.js:6510:7)
      at VueComponent.Vue._update (node_modules/vue/dist/vue.common.dev.js:3957:19)

    console.error
      [Vue warn]: Invalid prop: type check failed for prop ""subscription"". Expected Object, got Undefined 
      
      found in
      
      ---> <SubscriptionButtonsSaaS>
             <Subscription>
               <Anonymous>
                 <Anonymous>
                   <Anonymous>
                     <Anonymous>
                       <Anonymous>
                         <Root>

      at warn (node_modules/vue/dist/vue.common.dev.js:630:15)
      at assertProp (node_modules/vue/dist/vue.common.dev.js:1711:5)
      at validateProp (node_modules/vue/dist/vue.common.dev.js:1637:5)
      at loop (node_modules/vue/dist/vue.common.dev.js:4673:17)
      at initProps (node_modules/vue/dist/vue.common.dev.js:4704:33)
      at initState (node_modules/vue/dist/vue.common.dev.js:4647:21)
      at VueComponent.Vue._init (node_modules/vue/dist/vue.common.dev.js:5010:5)
      at new VueComponent (node_modules/vue/dist/vue.common.dev.js:5157:12)
      at createComponentInstanceForVnode (node_modules/vue/dist/vue.common.dev.js:3307:10)
      at init (node_modules/vue/dist/vue.common.dev.js:3136:45)
      at createComponent (node_modules/vue/dist/vue.common.dev.js:6013:9)
      at createElm (node_modules/vue/dist/vue.common.dev.js:5960:9)
      at createChildren (node_modules/vue/dist/vue.common.dev.js:6088:9)
      at createElm (node_modules/vue/dist/vue.common.dev.js:5989:9)

    console.error
      [Vue warn]: Error in render: ""TypeError: Cannot read properties of undefined (reading 'name')""
      
      found in
      
      ---> <SubscriptionButtonsSaaS>
             <Subscription>
               <Anonymous>
                 <Anonymous>
                   <Anonymous>
                     <Anonymous>
                       <Anonymous>
                         <Root>

      at warn (node_modules/vue/dist/vue.common.dev.js:630:15)
      at logError (node_modules/vue/dist/vue.common.dev.js:1898:5)
      at globalHandleError (node_modules/vue/dist/vue.common.dev.js:1893:3)
      at handleError (node_modules/vue/dist/vue.common.dev.js:1853:5)
      at VueComponent.Vue._render (node_modules/vue/dist/vue.common.dev.js:3570:7)
      at VueComponent.updateComponent (node_modules/vue/dist/vue.common.dev.js:4078:21)
      at Watcher.get (node_modules/vue/dist/vue.common.dev.js:4490:25)
      at new Watcher (node_modules/vue/dist/vue.common.dev.js:4479:12)
      at mountComponent (node_modules/vue/dist/vue.common.dev.js:4085:3)
      at VueComponent.Object.<anonymous>.Vue.$mount (node_modules/vue/dist/vue.common.dev.js:9084:10)
      at VueComponent.Object.<anonymous>.Vue.$mount (node_modules/vue/dist/vue.common.dev.js:11989:16)
      at init (node_modules/vue/dist/vue.common.dev.js:3140:13)
      at createComponent (node_modules/vue/dist/vue.common.dev.js:6013:9)
      at createElm (node_modules/vue/dist/vue.common.dev.js:5960:9)

    console.error
      TypeError: Cannot read properties of undefined (reading 'name')
          at Proxy.render (/home/vitaly/Development/gitlab/customers-gitlab-com/app/frontend/javascripts/subscription/components/subscription_buttons/subscription_buttons_saas.vue:80:1)
          at VueComponent.Vue._render (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3568:22)
          at VueComponent.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:21)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at init (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3140:13)
          at createComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6013:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5960:9)
          at createChildren (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6088:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5989:9)
          at createChildren (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6088:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5989:9)
          at VueComponent.patch [as __patch__] (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6510:7)
          at VueComponent.Vue._update (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3957:19)
          at VueComponent.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:10)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at init (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3140:13)
          at createComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6013:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5960:9)
          at VueComponent.patch [as __patch__] (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6510:7)
          at VueComponent.Vue._update (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3957:19)
          at VueComponent.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:10)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at init (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3140:13)
          at createComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6013:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5960:9)
          at createChildren (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6088:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5989:9)
          at VueComponent.patch [as __patch__] (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6510:7)
          at VueComponent.Vue._update (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3957:19)
          at VueComponent.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:10)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at init (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3140:13)
          at createComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6013:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5960:9)
          at createChildren (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6088:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5989:9)
          at VueComponent.patch [as __patch__] (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6510:7)
          at VueComponent.Vue._update (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3957:19)
          at VueComponent.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:10)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at init (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3140:13)
          at createComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6013:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5960:9)
          at createChildren (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6088:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5989:9)
          at VueComponent.patch [as __patch__] (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6510:7)
          at VueComponent.Vue._update (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3957:19)
          at VueComponent.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:10)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at init (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3140:13)
          at createComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6013:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5960:9)
          at createChildren (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6088:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5989:9)
          at VueComponent.patch [as __patch__] (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6510:7)
          at VueComponent.Vue._update (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3957:19)
          at VueComponent.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:10)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at init (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3140:13)
          at createComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6013:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5960:9)
          at Vue.patch [as __patch__] (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6510:7)
          at Vue._update (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3957:19)
          at Vue.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:10)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at Vue.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at Vue.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at getRenderedTree (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/@storybook/addon-storyshots/dist/ts3.9/frameworks/vue/renderTree.js:19:15)
          at /home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/@storybook/addon-storyshots/dist/ts3.9/test-bodies.js:49:24
          at Object.<anonymous> (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/@storybook/addon-storyshots/dist/ts3.9/api/snapshotsTestsTemplate.js:29:24)
          at Object.asyncJestTest (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:106:37)
          at /home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/jest-jasmine2/build/queueRunner.js:45:12
          at new Promise (<anonymous>)
          at mapper (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/jest-jasmine2/build/queueRunner.js:28:19)
          at /home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/jest-jasmine2/build/queueRunner.js:75:41
          at processTicksAndRejections (node:internal/process/task_queues:96:5)

      at logError (node_modules/vue/dist/vue.common.dev.js:1902:13)
      at globalHandleError (node_modules/vue/dist/vue.common.dev.js:1893:3)
      at handleError (node_modules/vue/dist/vue.common.dev.js:1853:5)
      at VueComponent.Vue._render (node_modules/vue/dist/vue.common.dev.js:3570:7)
      at VueComponent.updateComponent (node_modules/vue/dist/vue.common.dev.js:4078:21)
      at Watcher.get (node_modules/vue/dist/vue.common.dev.js:4490:25)
      at new Watcher (node_modules/vue/dist/vue.common.dev.js:4479:12)
      at mountComponent (node_modules/vue/dist/vue.common.dev.js:4085:3)
      at VueComponent.Object.<anonymous>.Vue.$mount (node_modules/vue/dist/vue.common.dev.js:9084:10)
      at VueComponent.Object.<anonymous>.Vue.$mount (node_modules/vue/dist/vue.common.dev.js:11989:16)
      at init (node_modules/vue/dist/vue.common.dev.js:3140:13)
      at createComponent (node_modules/vue/dist/vue.common.dev.js:6013:9)
      at createElm (node_modules/vue/dist/vue.common.dev.js:5960:9)
      at createChildren (node_modules/vue/dist/vue.common.dev.js:6088:9)

    console.error
      [Vue warn]: $attrs is readonly.
      
      found in
      
      ---> <BLink>
             <GlLink>
               <BFormGroup>
                 <GlFormGroup>
                   <LicenseKeyButtons>
                     <SubscriptionActivationLegacy>
                       <SubscriptionActivation>
                         <Subscription>
                           <Anonymous>
                             <Anonymous>
                               <Anonymous>
                                 <Anonymous>
                                   <Anonymous>
                                     <Root>

      at warn (node_modules/vue/dist/vue.runtime.common.dev.js:621:15)
      at node_modules/vue/dist/vue.runtime.common.dev.js:3517:36
      at VueComponent.reactiveSetter [as $attrs] (node_modules/vue/dist/vue.runtime.common.dev.js:1047:9)
      at updateChildComponent (node_modules/vue/dist/vue.common.dev.js:4149:13)
      at prepatch (node_modules/vue/dist/vue.common.dev.js:3147:5)
      at patchVnode (node_modules/vue/dist/vue.common.dev.js:6343:7)
      at VueComponent.patch [as __patch__] (node_modules/vue/dist/vue.common.dev.js:6515:9)
      at VueComponent.Vue._update (node_modules/vue/dist/vue.common.dev.js:3960:19)
      at VueComponent.updateComponent (node_modules/vue/dist/vue.common.dev.js:4078:10)
      at Watcher.get (node_modules/vue/dist/vue.common.dev.js:4490:25)
      at Watcher.run (node_modules/vue/dist/vue.common.dev.js:4565:22)
      at flushSchedulerQueue (node_modules/vue/dist/vue.common.dev.js:4323:13)
      at Array.<anonymous> (node_modules/vue/dist/vue.common.dev.js:1994:12)
      at flushCallbacks (node_modules/vue/dist/vue.common.dev.js:1920:14)

    console.error
      [Vue warn]: $listeners is readonly.
      
      found in
      
      ---> <BLink>
             <GlLink>
               <BFormGroup>
                 <GlFormGroup>
                   <LicenseKeyButtons>
                     <SubscriptionActivationLegacy>
                       <SubscriptionActivation>
                         <Subscription>
                           <Anonymous>
                             <Anonymous>
                               <Anonymous>
                                 <Anonymous>
                                   <Anonymous>
                                     <Root>

      at warn (node_modules/vue/dist/vue.runtime.common.dev.js:621:15)
      at node_modules/vue/dist/vue.runtime.common.dev.js:3520:36
      at VueComponent.reactiveSetter [as $listeners] (node_modules/vue/dist/vue.runtime.common.dev.js:1047:9)
      at updateChildComponent (node_modules/vue/dist/vue.common.dev.js:4150:17)
      at prepatch (node_modules/vue/dist/vue.common.dev.js:3147:5)
      at patchVnode (node_modules/vue/dist/vue.common.dev.js:6343:7)
      at VueComponent.patch [as __patch__] (node_modules/vue/dist/vue.common.dev.js:6515:9)
      at VueComponent.Vue._update (node_modules/vue/dist/vue.common.dev.js:3960:19)
      at VueComponent.updateComponent (node_modules/vue/dist/vue.common.dev.js:4078:10)
      at Watcher.get (node_modules/vue/dist/vue.common.dev.js:4490:25)
      at Watcher.run (node_modules/vue/dist/vue.common.dev.js:4565:22)
      at flushSchedulerQueue (node_modules/vue/dist/vue.common.dev.js:4323:13)
      at Array.<anonymous> (node_modules/vue/dist/vue.common.dev.js:1994:12)
      at flushCallbacks (node_modules/vue/dist/vue.common.dev.js:1920:14)

    console.error
      [Vue warn]: Missing required prop: ""subscription""
      
      found in
      
      ---> <Subscription>
             <Anonymous>
               <Anonymous>
                 <Anonymous>
                   <Anonymous>
                     <Anonymous>
                       <Root>

      at warn (node_modules/vue/dist/vue.common.dev.js:630:15)
      at assertProp (node_modules/vue/dist/vue.common.dev.js:1686:5)
      at validateProp (node_modules/vue/dist/vue.common.dev.js:1637:5)
      at loop (node_modules/vue/dist/vue.common.dev.js:4673:17)
      at initProps (node_modules/vue/dist/vue.common.dev.js:4704:33)
      at initState (node_modules/vue/dist/vue.common.dev.js:4647:21)
      at VueComponent.Vue._init (node_modules/vue/dist/vue.common.dev.js:5010:5)
      at new VueComponent (node_modules/vue/dist/vue.common.dev.js:5157:12)
      at createComponentInstanceForVnode (node_modules/vue/dist/vue.common.dev.js:3307:10)
      at init (node_modules/vue/dist/vue.common.dev.js:3136:45)
      at createComponent (node_modules/vue/dist/vue.common.dev.js:6013:9)
      at createElm (node_modules/vue/dist/vue.common.dev.js:5960:9)
      at VueComponent.patch [as __patch__] (node_modules/vue/dist/vue.common.dev.js:6510:7)
      at VueComponent.Vue._update (node_modules/vue/dist/vue.common.dev.js:3957:19)

    console.error
      [Vue warn]: Invalid prop: type check failed for prop ""subscription"". Expected Object, got Undefined 
      
      found in
      
      ---> <SubscriptionButtonsSaaS>
             <Subscription>
               <Anonymous>
                 <Anonymous>
                   <Anonymous>
                     <Anonymous>
                       <Anonymous>
                         <Root>

      at warn (node_modules/vue/dist/vue.common.dev.js:630:15)
      at assertProp (node_modules/vue/dist/vue.common.dev.js:1711:5)
      at validateProp (node_modules/vue/dist/vue.common.dev.js:1637:5)
      at loop (node_modules/vue/dist/vue.common.dev.js:4673:17)
      at initProps (node_modules/vue/dist/vue.common.dev.js:4704:33)
      at initState (node_modules/vue/dist/vue.common.dev.js:4647:21)
      at VueComponent.Vue._init (node_modules/vue/dist/vue.common.dev.js:5010:5)
      at new VueComponent (node_modules/vue/dist/vue.common.dev.js:5157:12)
      at createComponentInstanceForVnode (node_modules/vue/dist/vue.common.dev.js:3307:10)
      at init (node_modules/vue/dist/vue.common.dev.js:3136:45)
      at createComponent (node_modules/vue/dist/vue.common.dev.js:6013:9)
      at createElm (node_modules/vue/dist/vue.common.dev.js:5960:9)
      at createChildren (node_modules/vue/dist/vue.common.dev.js:6088:9)
      at createElm (node_modules/vue/dist/vue.common.dev.js:5989:9)

    console.error
      [Vue warn]: Error in render: ""TypeError: Cannot read properties of undefined (reading 'name')""
      
      found in
      
      ---> <SubscriptionButtonsSaaS>
             <Subscription>
               <Anonymous>
                 <Anonymous>
                   <Anonymous>
                     <Anonymous>
                       <Anonymous>
                         <Root>

      at warn (node_modules/vue/dist/vue.common.dev.js:630:15)
      at logError (node_modules/vue/dist/vue.common.dev.js:1898:5)
      at globalHandleError (node_modules/vue/dist/vue.common.dev.js:1893:3)
      at handleError (node_modules/vue/dist/vue.common.dev.js:1853:5)
      at VueComponent.Vue._render (node_modules/vue/dist/vue.common.dev.js:3570:7)
      at VueComponent.updateComponent (node_modules/vue/dist/vue.common.dev.js:4078:21)
      at Watcher.get (node_modules/vue/dist/vue.common.dev.js:4490:25)
      at new Watcher (node_modules/vue/dist/vue.common.dev.js:4479:12)
      at mountComponent (node_modules/vue/dist/vue.common.dev.js:4085:3)
      at VueComponent.Object.<anonymous>.Vue.$mount (node_modules/vue/dist/vue.common.dev.js:9084:10)
      at VueComponent.Object.<anonymous>.Vue.$mount (node_modules/vue/dist/vue.common.dev.js:11989:16)
      at init (node_modules/vue/dist/vue.common.dev.js:3140:13)
      at createComponent (node_modules/vue/dist/vue.common.dev.js:6013:9)
      at createElm (node_modules/vue/dist/vue.common.dev.js:5960:9)

    console.error
      TypeError: Cannot read properties of undefined (reading 'name')
          at Proxy.render (/home/vitaly/Development/gitlab/customers-gitlab-com/app/frontend/javascripts/subscription/components/subscription_buttons/subscription_buttons_saas.vue:80:1)
          at VueComponent.Vue._render (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3568:22)
          at VueComponent.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:21)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at init (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3140:13)
          at createComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6013:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5960:9)
          at createChildren (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6088:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5989:9)
          at createChildren (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6088:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5989:9)
          at VueComponent.patch [as __patch__] (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6510:7)
          at VueComponent.Vue._update (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3957:19)
          at VueComponent.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:10)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at init (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3140:13)
          at createComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6013:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5960:9)
          at VueComponent.patch [as __patch__] (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6510:7)
          at VueComponent.Vue._update (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3957:19)
          at VueComponent.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:10)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at init (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3140:13)
          at createComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6013:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5960:9)
          at createChildren (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6088:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5989:9)
          at VueComponent.patch [as __patch__] (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6510:7)
          at VueComponent.Vue._update (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3957:19)
          at VueComponent.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:10)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at init (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3140:13)
          at createComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6013:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5960:9)
          at createChildren (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6088:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5989:9)
          at VueComponent.patch [as __patch__] (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6510:7)
          at VueComponent.Vue._update (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3957:19)
          at VueComponent.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:10)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at init (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3140:13)
          at createComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6013:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5960:9)
          at createChildren (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6088:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5989:9)
          at VueComponent.patch [as __patch__] (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6510:7)
          at VueComponent.Vue._update (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3957:19)
          at VueComponent.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:10)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at init (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3140:13)
          at createComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6013:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5960:9)
          at createChildren (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6088:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5989:9)
          at VueComponent.patch [as __patch__] (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6510:7)
          at VueComponent.Vue._update (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3957:19)
          at VueComponent.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:10)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at init (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3140:13)
          at createComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6013:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5960:9)
          at Vue.patch [as __patch__] (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6510:7)
          at Vue._update (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3957:19)
          at Vue.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:10)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at Vue.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at Vue.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at getRenderedTree (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/@storybook/addon-storyshots/dist/ts3.9/frameworks/vue/renderTree.js:19:15)
          at /home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/@storybook/addon-storyshots/dist/ts3.9/test-bodies.js:49:24
          at Object.<anonymous> (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/@storybook/addon-storyshots/dist/ts3.9/api/snapshotsTestsTemplate.js:29:24)
          at Object.asyncJestTest (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:106:37)
          at /home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/jest-jasmine2/build/queueRunner.js:45:12
          at new Promise (<anonymous>)
          at mapper (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/jest-jasmine2/build/queueRunner.js:28:19)
          at /home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/jest-jasmine2/build/queueRunner.js:75:41
          at processTicksAndRejections (node:internal/process/task_queues:96:5)

      at logError (node_modules/vue/dist/vue.common.dev.js:1902:13)
      at globalHandleError (node_modules/vue/dist/vue.common.dev.js:1893:3)
      at handleError (node_modules/vue/dist/vue.common.dev.js:1853:5)
      at VueComponent.Vue._render (node_modules/vue/dist/vue.common.dev.js:3570:7)
      at VueComponent.updateComponent (node_modules/vue/dist/vue.common.dev.js:4078:21)
      at Watcher.get (node_modules/vue/dist/vue.common.dev.js:4490:25)
      at new Watcher (node_modules/vue/dist/vue.common.dev.js:4479:12)
      at mountComponent (node_modules/vue/dist/vue.common.dev.js:4085:3)
      at VueComponent.Object.<anonymous>.Vue.$mount (node_modules/vue/dist/vue.common.dev.js:9084:10)
      at VueComponent.Object.<anonymous>.Vue.$mount (node_modules/vue/dist/vue.common.dev.js:11989:16)
      at init (node_modules/vue/dist/vue.common.dev.js:3140:13)
      at createComponent (node_modules/vue/dist/vue.common.dev.js:6013:9)
      at createElm (node_modules/vue/dist/vue.common.dev.js:5960:9)
      at createChildren (node_modules/vue/dist/vue.common.dev.js:6088:9)

    console.error
      [Vue warn]: $attrs is readonly.
      
      found in
      
      ---> <BLink>
             <GlLink>
               <BFormGroup>
                 <GlFormGroup>
                   <LicenseKeyButtons>
                     <SubscriptionActivationLegacy>
                       <SubscriptionActivation>
                         <Subscription>
                           <Anonymous>
                             <Anonymous>
                               <Anonymous>
                                 <Anonymous>
                                   <Anonymous>
                                     <Root>

      at warn (node_modules/vue/dist/vue.runtime.common.dev.js:621:15)
      at node_modules/vue/dist/vue.runtime.common.dev.js:3517:36
      at VueComponent.reactiveSetter [as $attrs] (node_modules/vue/dist/vue.runtime.common.dev.js:1047:9)
      at updateChildComponent (node_modules/vue/dist/vue.common.dev.js:4149:13)
      at prepatch (node_modules/vue/dist/vue.common.dev.js:3147:5)
      at patchVnode (node_modules/vue/dist/vue.common.dev.js:6343:7)
      at VueComponent.patch [as __patch__] (node_modules/vue/dist/vue.common.dev.js:6515:9)
      at VueComponent.Vue._update (node_modules/vue/dist/vue.common.dev.js:3960:19)
      at VueComponent.updateComponent (node_modules/vue/dist/vue.common.dev.js:4078:10)
      at Watcher.get (node_modules/vue/dist/vue.common.dev.js:4490:25)
      at Watcher.run (node_modules/vue/dist/vue.common.dev.js:4565:22)
      at flushSchedulerQueue (node_modules/vue/dist/vue.common.dev.js:4323:13)
      at Array.<anonymous> (node_modules/vue/dist/vue.common.dev.js:1994:12)
      at flushCallbacks (node_modules/vue/dist/vue.common.dev.js:1920:14)

    console.error
      [Vue warn]: $listeners is readonly.
      
      found in
      
      ---> <BLink>
             <GlLink>
               <BFormGroup>
                 <GlFormGroup>
                   <LicenseKeyButtons>
                     <SubscriptionActivationLegacy>
                       <SubscriptionActivation>
                         <Subscription>
                           <Anonymous>
                             <Anonymous>
                               <Anonymous>
                                 <Anonymous>
                                   <Anonymous>
                                     <Root>

      at warn (node_modules/vue/dist/vue.runtime.common.dev.js:621:15)
      at node_modules/vue/dist/vue.runtime.common.dev.js:3520:36
      at VueComponent.reactiveSetter [as $listeners] (node_modules/vue/dist/vue.runtime.common.dev.js:1047:9)
      at updateChildComponent (node_modules/vue/dist/vue.common.dev.js:4150:17)
      at prepatch (node_modules/vue/dist/vue.common.dev.js:3147:5)
      at patchVnode (node_modules/vue/dist/vue.common.dev.js:6343:7)
      at VueComponent.patch [as __patch__] (node_modules/vue/dist/vue.common.dev.js:6515:9)
      at VueComponent.Vue._update (node_modules/vue/dist/vue.common.dev.js:3960:19)
      at VueComponent.updateComponent (node_modules/vue/dist/vue.common.dev.js:4078:10)
      at Watcher.get (node_modules/vue/dist/vue.common.dev.js:4490:25)
      at Watcher.run (node_modules/vue/dist/vue.common.dev.js:4565:22)
      at flushSchedulerQueue (node_modules/vue/dist/vue.common.dev.js:4323:13)
      at Array.<anonymous> (node_modules/vue/dist/vue.common.dev.js:1994:12)
      at flushCallbacks (node_modules/vue/dist/vue.common.dev.js:1920:14)

    console.error
      [Vue warn]: Missing required prop: ""subscription""
      
      found in
      
      ---> <Subscription>
             <Anonymous>
               <Anonymous>
                 <Anonymous>
                   <Anonymous>
                     <Anonymous>
                       <Root>

      at warn (node_modules/vue/dist/vue.common.dev.js:630:15)
      at assertProp (node_modules/vue/dist/vue.common.dev.js:1686:5)
      at validateProp (node_modules/vue/dist/vue.common.dev.js:1637:5)
      at loop (node_modules/vue/dist/vue.common.dev.js:4673:17)
      at initProps (node_modules/vue/dist/vue.common.dev.js:4704:33)
      at initState (node_modules/vue/dist/vue.common.dev.js:4647:21)
      at VueComponent.Vue._init (node_modules/vue/dist/vue.common.dev.js:5010:5)
      at new VueComponent (node_modules/vue/dist/vue.common.dev.js:5157:12)
      at createComponentInstanceForVnode (node_modules/vue/dist/vue.common.dev.js:3307:10)
      at init (node_modules/vue/dist/vue.common.dev.js:3136:45)
      at createComponent (node_modules/vue/dist/vue.common.dev.js:6013:9)
      at createElm (node_modules/vue/dist/vue.common.dev.js:5960:9)
      at VueComponent.patch [as __patch__] (node_modules/vue/dist/vue.common.dev.js:6510:7)
      at VueComponent.Vue._update (node_modules/vue/dist/vue.common.dev.js:3957:19)

    console.error
      [Vue warn]: Invalid prop: type check failed for prop ""subscription"". Expected Object, got Undefined 
      
      found in
      
      ---> <SubscriptionButtonsSaaS>
             <Subscription>
               <Anonymous>
                 <Anonymous>
                   <Anonymous>
                     <Anonymous>
                       <Anonymous>
                         <Root>

      at warn (node_modules/vue/dist/vue.common.dev.js:630:15)
      at assertProp (node_modules/vue/dist/vue.common.dev.js:1711:5)
      at validateProp (node_modules/vue/dist/vue.common.dev.js:1637:5)
      at loop (node_modules/vue/dist/vue.common.dev.js:4673:17)
      at initProps (node_modules/vue/dist/vue.common.dev.js:4704:33)
      at initState (node_modules/vue/dist/vue.common.dev.js:4647:21)
      at VueComponent.Vue._init (node_modules/vue/dist/vue.common.dev.js:5010:5)
      at new VueComponent (node_modules/vue/dist/vue.common.dev.js:5157:12)
      at createComponentInstanceForVnode (node_modules/vue/dist/vue.common.dev.js:3307:10)
      at init (node_modules/vue/dist/vue.common.dev.js:3136:45)
      at createComponent (node_modules/vue/dist/vue.common.dev.js:6013:9)
      at createElm (node_modules/vue/dist/vue.common.dev.js:5960:9)
      at createChildren (node_modules/vue/dist/vue.common.dev.js:6088:9)
      at createElm (node_modules/vue/dist/vue.common.dev.js:5989:9)

    console.error
      [Vue warn]: Error in render: ""TypeError: Cannot read properties of undefined (reading 'name')""
      
      found in
      
      ---> <SubscriptionButtonsSaaS>
             <Subscription>
               <Anonymous>
                 <Anonymous>
                   <Anonymous>
                     <Anonymous>
                       <Anonymous>
                         <Root>

      at warn (node_modules/vue/dist/vue.common.dev.js:630:15)
      at logError (node_modules/vue/dist/vue.common.dev.js:1898:5)
      at globalHandleError (node_modules/vue/dist/vue.common.dev.js:1893:3)
      at handleError (node_modules/vue/dist/vue.common.dev.js:1853:5)
      at VueComponent.Vue._render (node_modules/vue/dist/vue.common.dev.js:3570:7)
      at VueComponent.updateComponent (node_modules/vue/dist/vue.common.dev.js:4078:21)
      at Watcher.get (node_modules/vue/dist/vue.common.dev.js:4490:25)
      at new Watcher (node_modules/vue/dist/vue.common.dev.js:4479:12)
      at mountComponent (node_modules/vue/dist/vue.common.dev.js:4085:3)
      at VueComponent.Object.<anonymous>.Vue.$mount (node_modules/vue/dist/vue.common.dev.js:9084:10)
      at VueComponent.Object.<anonymous>.Vue.$mount (node_modules/vue/dist/vue.common.dev.js:11989:16)
      at init (node_modules/vue/dist/vue.common.dev.js:3140:13)
      at createComponent (node_modules/vue/dist/vue.common.dev.js:6013:9)
      at createElm (node_modules/vue/dist/vue.common.dev.js:5960:9)

    console.error
      TypeError: Cannot read properties of undefined (reading 'name')
          at Proxy.render (/home/vitaly/Development/gitlab/customers-gitlab-com/app/frontend/javascripts/subscription/components/subscription_buttons/subscription_buttons_saas.vue:80:1)
          at VueComponent.Vue._render (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3568:22)
          at VueComponent.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:21)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at init (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3140:13)
          at createComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6013:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5960:9)
          at createChildren (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6088:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5989:9)
          at createChildren (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6088:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5989:9)
          at VueComponent.patch [as __patch__] (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6510:7)
          at VueComponent.Vue._update (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3957:19)
          at VueComponent.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:10)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at init (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3140:13)
          at createComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6013:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5960:9)
          at VueComponent.patch [as __patch__] (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6510:7)
          at VueComponent.Vue._update (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3957:19)
          at VueComponent.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:10)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at init (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3140:13)
          at createComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6013:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5960:9)
          at createChildren (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6088:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5989:9)
          at VueComponent.patch [as __patch__] (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6510:7)
          at VueComponent.Vue._update (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3957:19)
          at VueComponent.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:10)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at init (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3140:13)
          at createComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6013:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5960:9)
          at createChildren (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6088:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5989:9)
          at VueComponent.patch [as __patch__] (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6510:7)
          at VueComponent.Vue._update (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3957:19)
          at VueComponent.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:10)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at init (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3140:13)
          at createComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6013:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5960:9)
          at createChildren (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6088:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5989:9)
          at VueComponent.patch [as __patch__] (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6510:7)
          at VueComponent.Vue._update (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3957:19)
          at VueComponent.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:10)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at init (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3140:13)
          at createComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6013:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5960:9)
          at createChildren (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6088:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5989:9)
          at VueComponent.patch [as __patch__] (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6510:7)
          at VueComponent.Vue._update (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3957:19)
          at VueComponent.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:10)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at init (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3140:13)
          at createComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6013:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5960:9)
          at Vue.patch [as __patch__] (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6510:7)
          at Vue._update (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3957:19)
          at Vue.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:10)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at Vue.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at Vue.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at getRenderedTree (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/@storybook/addon-storyshots/dist/ts3.9/frameworks/vue/renderTree.js:19:15)
          at /home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/@storybook/addon-storyshots/dist/ts3.9/test-bodies.js:49:24
          at Object.<anonymous> (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/@storybook/addon-storyshots/dist/ts3.9/api/snapshotsTestsTemplate.js:29:24)
          at Object.asyncJestTest (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:106:37)
          at /home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/jest-jasmine2/build/queueRunner.js:45:12
          at new Promise (<anonymous>)
          at mapper (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/jest-jasmine2/build/queueRunner.js:28:19)
          at /home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/jest-jasmine2/build/queueRunner.js:75:41
          at processTicksAndRejections (node:internal/process/task_queues:96:5)

      at logError (node_modules/vue/dist/vue.common.dev.js:1902:13)
      at globalHandleError (node_modules/vue/dist/vue.common.dev.js:1893:3)
      at handleError (node_modules/vue/dist/vue.common.dev.js:1853:5)
      at VueComponent.Vue._render (node_modules/vue/dist/vue.common.dev.js:3570:7)
      at VueComponent.updateComponent (node_modules/vue/dist/vue.common.dev.js:4078:21)
      at Watcher.get (node_modules/vue/dist/vue.common.dev.js:4490:25)
      at new Watcher (node_modules/vue/dist/vue.common.dev.js:4479:12)
      at mountComponent (node_modules/vue/dist/vue.common.dev.js:4085:3)
      at VueComponent.Object.<anonymous>.Vue.$mount (node_modules/vue/dist/vue.common.dev.js:9084:10)
      at VueComponent.Object.<anonymous>.Vue.$mount (node_modules/vue/dist/vue.common.dev.js:11989:16)
      at init (node_modules/vue/dist/vue.common.dev.js:3140:13)
      at createComponent (node_modules/vue/dist/vue.common.dev.js:6013:9)
      at createElm (node_modules/vue/dist/vue.common.dev.js:5960:9)
      at createChildren (node_modules/vue/dist/vue.common.dev.js:6088:9)

    console.error
      [Vue warn]: $attrs is readonly.
      
      found in
      
      ---> <BLink>
             <GlLink>
               <BFormGroup>
                 <GlFormGroup>
                   <LicenseKeyButtons>
                     <SubscriptionActivationLegacy>
                       <SubscriptionActivation>
                         <Subscription>
                           <Anonymous>
                             <Anonymous>
                               <Anonymous>
                                 <Anonymous>
                                   <Anonymous>
                                     <Root>

      at warn (node_modules/vue/dist/vue.runtime.common.dev.js:621:15)
      at node_modules/vue/dist/vue.runtime.common.dev.js:3517:36
      at VueComponent.reactiveSetter [as $attrs] (node_modules/vue/dist/vue.runtime.common.dev.js:1047:9)
      at updateChildComponent (node_modules/vue/dist/vue.common.dev.js:4149:13)
      at prepatch (node_modules/vue/dist/vue.common.dev.js:3147:5)
      at patchVnode (node_modules/vue/dist/vue.common.dev.js:6343:7)
      at VueComponent.patch [as __patch__] (node_modules/vue/dist/vue.common.dev.js:6515:9)
      at VueComponent.Vue._update (node_modules/vue/dist/vue.common.dev.js:3960:19)
      at VueComponent.updateComponent (node_modules/vue/dist/vue.common.dev.js:4078:10)
      at Watcher.get (node_modules/vue/dist/vue.common.dev.js:4490:25)
      at Watcher.run (node_modules/vue/dist/vue.common.dev.js:4565:22)
      at flushSchedulerQueue (node_modules/vue/dist/vue.common.dev.js:4323:13)
      at Array.<anonymous> (node_modules/vue/dist/vue.common.dev.js:1994:12)
      at flushCallbacks (node_modules/vue/dist/vue.common.dev.js:1920:14)

    console.error
      [Vue warn]: $listeners is readonly.
      
      found in
      
      ---> <BLink>
             <GlLink>
               <BFormGroup>
                 <GlFormGroup>
                   <LicenseKeyButtons>
                     <SubscriptionActivationLegacy>
                       <SubscriptionActivation>
                         <Subscription>
                           <Anonymous>
                             <Anonymous>
                               <Anonymous>
                                 <Anonymous>
                                   <Anonymous>
                                     <Root>

      at warn (node_modules/vue/dist/vue.runtime.common.dev.js:621:15)
      at node_modules/vue/dist/vue.runtime.common.dev.js:3520:36
      at VueComponent.reactiveSetter [as $listeners] (node_modules/vue/dist/vue.runtime.common.dev.js:1047:9)
      at updateChildComponent (node_modules/vue/dist/vue.common.dev.js:4150:17)
      at prepatch (node_modules/vue/dist/vue.common.dev.js:3147:5)
      at patchVnode (node_modules/vue/dist/vue.common.dev.js:6343:7)
      at VueComponent.patch [as __patch__] (node_modules/vue/dist/vue.common.dev.js:6515:9)
      at VueComponent.Vue._update (node_modules/vue/dist/vue.common.dev.js:3960:19)
      at VueComponent.updateComponent (node_modules/vue/dist/vue.common.dev.js:4078:10)
      at Watcher.get (node_modules/vue/dist/vue.common.dev.js:4490:25)
      at Watcher.run (node_modules/vue/dist/vue.common.dev.js:4565:22)
      at flushSchedulerQueue (node_modules/vue/dist/vue.common.dev.js:4323:13)
      at Array.<anonymous> (node_modules/vue/dist/vue.common.dev.js:1994:12)
      at flushCallbacks (node_modules/vue/dist/vue.common.dev.js:1920:14)

    console.error
      [Vue warn]: Missing required prop: ""subscription""
      
      found in
      
      ---> <Subscription>
             <Anonymous>
               <Anonymous>
                 <Anonymous>
                   <Anonymous>
                     <Anonymous>
                       <Root>

      at warn (node_modules/vue/dist/vue.common.dev.js:630:15)
      at assertProp (node_modules/vue/dist/vue.common.dev.js:1686:5)
      at validateProp (node_modules/vue/dist/vue.common.dev.js:1637:5)
      at loop (node_modules/vue/dist/vue.common.dev.js:4673:17)
      at initProps (node_modules/vue/dist/vue.common.dev.js:4704:33)
      at initState (node_modules/vue/dist/vue.common.dev.js:4647:21)
      at VueComponent.Vue._init (node_modules/vue/dist/vue.common.dev.js:5010:5)
      at new VueComponent (node_modules/vue/dist/vue.common.dev.js:5157:12)
      at createComponentInstanceForVnode (node_modules/vue/dist/vue.common.dev.js:3307:10)
      at init (node_modules/vue/dist/vue.common.dev.js:3136:45)
      at createComponent (node_modules/vue/dist/vue.common.dev.js:6013:9)
      at createElm (node_modules/vue/dist/vue.common.dev.js:5960:9)
      at VueComponent.patch [as __patch__] (node_modules/vue/dist/vue.common.dev.js:6510:7)
      at VueComponent.Vue._update (node_modules/vue/dist/vue.common.dev.js:3957:19)

    console.error
      [Vue warn]: $attrs is readonly.
      
      found in
      
      ---> <BLink>
             <GlLink>
               <BFormGroup>
                 <GlFormGroup>
                   <LicenseKeyButtons>
                     <SubscriptionActivationLegacy>
                       <SubscriptionActivation>
                         <Subscription>
                           <Anonymous>
                             <Anonymous>
                               <Anonymous>
                                 <Anonymous>
                                   <Anonymous>
                                     <Root>

      at warn (node_modules/vue/dist/vue.runtime.common.dev.js:621:15)
      at node_modules/vue/dist/vue.runtime.common.dev.js:3517:36
      at VueComponent.reactiveSetter [as $attrs] (node_modules/vue/dist/vue.runtime.common.dev.js:1047:9)
      at updateChildComponent (node_modules/vue/dist/vue.common.dev.js:4149:13)
      at prepatch (node_modules/vue/dist/vue.common.dev.js:3147:5)
      at patchVnode (node_modules/vue/dist/vue.common.dev.js:6343:7)
      at VueComponent.patch [as __patch__] (node_modules/vue/dist/vue.common.dev.js:6515:9)
      at VueComponent.Vue._update (node_modules/vue/dist/vue.common.dev.js:3960:19)
      at VueComponent.updateComponent (node_modules/vue/dist/vue.common.dev.js:4078:10)
      at Watcher.get (node_modules/vue/dist/vue.common.dev.js:4490:25)
      at Watcher.run (node_modules/vue/dist/vue.common.dev.js:4565:22)
      at flushSchedulerQueue (node_modules/vue/dist/vue.common.dev.js:4323:13)
      at Array.<anonymous> (node_modules/vue/dist/vue.common.dev.js:1994:12)
      at flushCallbacks (node_modules/vue/dist/vue.common.dev.js:1920:14)

    console.error
      [Vue warn]: $listeners is readonly.
      
      found in
      
      ---> <BLink>
             <GlLink>
               <BFormGroup>
                 <GlFormGroup>
                   <LicenseKeyButtons>
                     <SubscriptionActivationLegacy>
                       <SubscriptionActivation>
                         <Subscription>
                           <Anonymous>
                             <Anonymous>
                               <Anonymous>
                                 <Anonymous>
                                   <Anonymous>
                                     <Root>

      at warn (node_modules/vue/dist/vue.runtime.common.dev.js:621:15)
      at node_modules/vue/dist/vue.runtime.common.dev.js:3520:36
      at VueComponent.reactiveSetter [as $listeners] (node_modules/vue/dist/vue.runtime.common.dev.js:1047:9)
      at updateChildComponent (node_modules/vue/dist/vue.common.dev.js:4150:17)
      at prepatch (node_modules/vue/dist/vue.common.dev.js:3147:5)
      at patchVnode (node_modules/vue/dist/vue.common.dev.js:6343:7)
      at VueComponent.patch [as __patch__] (node_modules/vue/dist/vue.common.dev.js:6515:9)
      at VueComponent.Vue._update (node_modules/vue/dist/vue.common.dev.js:3960:19)
      at VueComponent.updateComponent (node_modules/vue/dist/vue.common.dev.js:4078:10)
      at Watcher.get (node_modules/vue/dist/vue.common.dev.js:4490:25)
      at Watcher.run (node_modules/vue/dist/vue.common.dev.js:4565:22)
      at flushSchedulerQueue (node_modules/vue/dist/vue.common.dev.js:4323:13)
      at Array.<anonymous> (node_modules/vue/dist/vue.common.dev.js:1994:12)
      at flushCallbacks (node_modules/vue/dist/vue.common.dev.js:1920:14)

    console.error
      [Vue warn]: Missing required prop: ""subscription""
      
      found in
      
      ---> <Subscription>
             <Anonymous>
               <Anonymous>
                 <Anonymous>
                   <Anonymous>
                     <Anonymous>
                       <Root>

      at warn (node_modules/vue/dist/vue.common.dev.js:630:15)
      at assertProp (node_modules/vue/dist/vue.common.dev.js:1686:5)
      at validateProp (node_modules/vue/dist/vue.common.dev.js:1637:5)
      at loop (node_modules/vue/dist/vue.common.dev.js:4673:17)
      at initProps (node_modules/vue/dist/vue.common.dev.js:4704:33)
      at initState (node_modules/vue/dist/vue.common.dev.js:4647:21)
      at VueComponent.Vue._init (node_modules/vue/dist/vue.common.dev.js:5010:5)
      at new VueComponent (node_modules/vue/dist/vue.common.dev.js:5157:12)
      at createComponentInstanceForVnode (node_modules/vue/dist/vue.common.dev.js:3307:10)
      at init (node_modules/vue/dist/vue.common.dev.js:3136:45)
      at createComponent (node_modules/vue/dist/vue.common.dev.js:6013:9)
      at createElm (node_modules/vue/dist/vue.common.dev.js:5960:9)
      at VueComponent.patch [as __patch__] (node_modules/vue/dist/vue.common.dev.js:6510:7)
      at VueComponent.Vue._update (node_modules/vue/dist/vue.common.dev.js:3957:19)

    console.error
      [Vue warn]: Invalid prop: type check failed for prop ""subscription"". Expected Object, got Undefined 
      
      found in
      
      ---> <SubscriptionButtonsEE>
             <Subscription>
               <Anonymous>
                 <Anonymous>
                   <Anonymous>
                     <Anonymous>
                       <Anonymous>
                         <Root>

      at warn (node_modules/vue/dist/vue.common.dev.js:630:15)
      at assertProp (node_modules/vue/dist/vue.common.dev.js:1711:5)
      at validateProp (node_modules/vue/dist/vue.common.dev.js:1637:5)
      at loop (node_modules/vue/dist/vue.common.dev.js:4673:17)
      at initProps (node_modules/vue/dist/vue.common.dev.js:4704:33)
      at initState (node_modules/vue/dist/vue.common.dev.js:4647:21)
      at VueComponent.Vue._init (node_modules/vue/dist/vue.common.dev.js:5010:5)
      at new VueComponent (node_modules/vue/dist/vue.common.dev.js:5157:12)
      at createComponentInstanceForVnode (node_modules/vue/dist/vue.common.dev.js:3307:10)
      at init (node_modules/vue/dist/vue.common.dev.js:3136:45)
      at createComponent (node_modules/vue/dist/vue.common.dev.js:6013:9)
      at createElm (node_modules/vue/dist/vue.common.dev.js:5960:9)
      at createChildren (node_modules/vue/dist/vue.common.dev.js:6088:9)
      at createElm (node_modules/vue/dist/vue.common.dev.js:5989:9)

    console.error
      [Vue warn]: Error in render: ""TypeError: Cannot read properties of undefined (reading 'name')""
      
      found in
      
      ---> <SubscriptionButtonsEE>
             <Subscription>
               <Anonymous>
                 <Anonymous>
                   <Anonymous>
                     <Anonymous>
                       <Anonymous>
                         <Root>

      at warn (node_modules/vue/dist/vue.common.dev.js:630:15)
      at logError (node_modules/vue/dist/vue.common.dev.js:1898:5)
      at globalHandleError (node_modules/vue/dist/vue.common.dev.js:1893:3)
      at handleError (node_modules/vue/dist/vue.common.dev.js:1853:5)
      at VueComponent.Vue._render (node_modules/vue/dist/vue.common.dev.js:3570:7)
      at VueComponent.updateComponent (node_modules/vue/dist/vue.common.dev.js:4078:21)
      at Watcher.get (node_modules/vue/dist/vue.common.dev.js:4490:25)
      at new Watcher (node_modules/vue/dist/vue.common.dev.js:4479:12)
      at mountComponent (node_modules/vue/dist/vue.common.dev.js:4085:3)
      at VueComponent.Object.<anonymous>.Vue.$mount (node_modules/vue/dist/vue.common.dev.js:9084:10)
      at VueComponent.Object.<anonymous>.Vue.$mount (node_modules/vue/dist/vue.common.dev.js:11989:16)
      at init (node_modules/vue/dist/vue.common.dev.js:3140:13)
      at createComponent (node_modules/vue/dist/vue.common.dev.js:6013:9)
      at createElm (node_modules/vue/dist/vue.common.dev.js:5960:9)

    console.error
      TypeError: Cannot read properties of undefined (reading 'name')
          at Proxy.render (/home/vitaly/Development/gitlab/customers-gitlab-com/app/frontend/javascripts/subscription/components/subscription_buttons/subscription_buttons_ee.vue:74:1)
          at VueComponent.Vue._render (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3568:22)
          at VueComponent.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:21)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at init (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3140:13)
          at createComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6013:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5960:9)
          at createChildren (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6088:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5989:9)
          at createChildren (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6088:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5989:9)
          at VueComponent.patch [as __patch__] (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6510:7)
          at VueComponent.Vue._update (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3957:19)
          at VueComponent.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:10)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at init (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3140:13)
          at createComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6013:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5960:9)
          at VueComponent.patch [as __patch__] (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6510:7)
          at VueComponent.Vue._update (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3957:19)
          at VueComponent.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:10)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at init (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3140:13)
          at createComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6013:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5960:9)
          at createChildren (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6088:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5989:9)
          at VueComponent.patch [as __patch__] (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6510:7)
          at VueComponent.Vue._update (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3957:19)
          at VueComponent.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:10)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at init (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3140:13)
          at createComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6013:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5960:9)
          at createChildren (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6088:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5989:9)
          at VueComponent.patch [as __patch__] (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6510:7)
          at VueComponent.Vue._update (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3957:19)
          at VueComponent.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:10)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at init (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3140:13)
          at createComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6013:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5960:9)
          at createChildren (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6088:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5989:9)
          at VueComponent.patch [as __patch__] (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6510:7)
          at VueComponent.Vue._update (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3957:19)
          at VueComponent.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:10)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at init (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3140:13)
          at createComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6013:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5960:9)
          at createChildren (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6088:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5989:9)
          at VueComponent.patch [as __patch__] (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6510:7)
          at VueComponent.Vue._update (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3957:19)
          at VueComponent.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:10)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at VueComponent.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at init (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3140:13)
          at createComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6013:9)
          at createElm (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:5960:9)
          at Vue.patch [as __patch__] (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:6510:7)
          at Vue._update (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:3957:19)
          at Vue.updateComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4078:10)
          at Watcher.get (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4490:25)
          at new Watcher (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4479:12)
          at mountComponent (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:4085:3)
          at Vue.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:9084:10)
          at Vue.Object.<anonymous>.Vue.$mount (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/vue/dist/vue.common.dev.js:11989:16)
          at getRenderedTree (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/@storybook/addon-storyshots/dist/ts3.9/frameworks/vue/renderTree.js:19:15)
          at /home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/@storybook/addon-storyshots/dist/ts3.9/test-bodies.js:49:24
          at Object.<anonymous> (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/@storybook/addon-storyshots/dist/ts3.9/api/snapshotsTestsTemplate.js:29:24)
          at Object.asyncJestTest (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:106:37)
          at /home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/jest-jasmine2/build/queueRunner.js:45:12
          at new Promise (<anonymous>)
          at mapper (/home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/jest-jasmine2/build/queueRunner.js:28:19)
          at /home/vitaly/Development/gitlab/customers-gitlab-com/node_modules/jest-jasmine2/build/queueRunner.js:75:41
          at processTicksAndRejections (node:internal/process/task_queues:96:5)

      at logError (node_modules/vue/dist/vue.common.dev.js:1902:13)
      at globalHandleError (node_modules/vue/dist/vue.common.dev.js:1893:3)
      at handleError (node_modules/vue/dist/vue.common.dev.js:1853:5)
      at VueComponent.Vue._render (node_modules/vue/dist/vue.common.dev.js:3570:7)
      at VueComponent.updateComponent (node_modules/vue/dist/vue.common.dev.js:4078:21)
      at Watcher.get (node_modules/vue/dist/vue.common.dev.js:4490:25)
      at new Watcher (node_modules/vue/dist/vue.common.dev.js:4479:12)
      at mountComponent (node_modules/vue/dist/vue.common.dev.js:4085:3)
      at VueComponent.Object.<anonymous>.Vue.$mount (node_modules/vue/dist/vue.common.dev.js:9084:10)
      at VueComponent.Object.<anonymous>.Vue.$mount (node_modules/vue/dist/vue.common.dev.js:11989:16)
      at init (node_modules/vue/dist/vue.common.dev.js:3140:13)
      at createComponent (node_modules/vue/dist/vue.common.dev.js:6013:9)
      at createElm (node_modules/vue/dist/vue.common.dev.js:5960:9)
      at createChildren (node_modules/vue/dist/vue.common.dev.js:6088:9)

    console.error
      [Vue warn]: $attrs is readonly.
      
      found in
      
      ---> <BLink>
             <GlLink>
               <BFormGroup>
                 <GlFormGroup>
                   <LicenseKeyButtons>
                     <SubscriptionActivationLegacy>
                       <SubscriptionActivation>
                         <Anonymous>
                           <Anonymous>
                             <Anonymous>
                               <Anonymous>
                                 <Anonymous>
                                   <Root>

      at warn (node_modules/vue/dist/vue.runtime.common.dev.js:621:15)
      at node_modules/vue/dist/vue.runtime.common.dev.js:3517:36
      at VueComponent.reactiveSetter [as $attrs] (node_modules/vue/dist/vue.runtime.common.dev.js:1047:9)
      at updateChildComponent (node_modules/vue/dist/vue.common.dev.js:4149:13)
      at prepatch (node_modules/vue/dist/vue.common.dev.js:3147:5)
      at patchVnode (node_modules/vue/dist/vue.common.dev.js:6343:7)
      at VueComponent.patch [as __patch__] (node_modules/vue/dist/vue.common.dev.js:6515:9)
      at VueComponent.Vue._update (node_modules/vue/dist/vue.common.dev.js:3960:19)
      at VueComponent.updateComponent (node_modules/vue/dist/vue.common.dev.js:4078:10)
      at Watcher.get (node_modules/vue/dist/vue.common.dev.js:4490:25)
      at Watcher.run (node_modules/vue/dist/vue.common.dev.js:4565:22)
      at flushSchedulerQueue (node_modules/vue/dist/vue.common.dev.js:4323:13)
      at Array.<anonymous> (node_modules/vue/dist/vue.common.dev.js:1994:12)
      at flushCallbacks (node_modules/vue/dist/vue.common.dev.js:1920:14)

    console.error
      [Vue warn]: $listeners is readonly.
      
      found in
      
      ---> <BLink>
             <GlLink>
               <BFormGroup>
                 <GlFormGroup>
                   <LicenseKeyButtons>
                     <SubscriptionActivationLegacy>
                       <SubscriptionActivation>
                         <Anonymous>
                           <Anonymous>
                             <Anonymous>
                               <Anonymous>
                                 <Anonymous>
                                   <Root>

      at warn (node_modules/vue/dist/vue.runtime.common.dev.js:621:15)
      at node_modules/vue/dist/vue.runtime.common.dev.js:3520:36
      at VueComponent.reactiveSetter [as $listeners] (node_modules/vue/dist/vue.runtime.common.dev.js:1047:9)
      at updateChildComponent (node_modules/vue/dist/vue.common.dev.js:4150:17)
      at prepatch (node_modules/vue/dist/vue.common.dev.js:3147:5)
      at patchVnode (node_modules/vue/dist/vue.common.dev.js:6343:7)
      at VueComponent.patch [as __patch__] (node_modules/vue/dist/vue.common.dev.js:6515:9)
      at VueComponent.Vue._update (node_modules/vue/dist/vue.common.dev.js:3960:19)
      at VueComponent.updateComponent (node_modules/vue/dist/vue.common.dev.js:4078:10)
      at Watcher.get (node_modules/vue/dist/vue.common.dev.js:4490:25)
      at Watcher.run (node_modules/vue/dist/vue.common.dev.js:4565:22)
      at flushSchedulerQueue (node_modules/vue/dist/vue.common.dev.js:4323:13)
      at Array.<anonymous> (node_modules/vue/dist/vue.common.dev.js:1994:12)
      at flushCallbacks (node_modules/vue/dist/vue.common.dev.js:1920:14)

    console.error
      [Vue warn]: $attrs is readonly.
      
      found in
      
      ---> <BLink>
             <GlLink>
               <BFormGroup>
                 <GlFormGroup>
                   <LicenseKeyButtons>
                     <SubscriptionActivationLegacy>
                       <SubscriptionActivation>
                         <Anonymous>
                           <Anonymous>
                             <Anonymous>
                               <Anonymous>
                                 <Anonymous>
                                   <Root>

      at warn (node_modules/vue/dist/vue.runtime.common.dev.js:621:15)
      at node_modules/vue/dist/vue.runtime.common.dev.js:3517:36
      at VueComponent.reactiveSetter [as $attrs] (node_modules/vue/dist/vue.runtime.common.dev.js:1047:9)
      at updateChildComponent (node_modules/vue/dist/vue.common.dev.js:4149:13)
      at prepatch (node_modules/vue/dist/vue.common.dev.js:3147:5)
      at patchVnode (node_modules/vue/dist/vue.common.dev.js:6343:7)
      at VueComponent.patch [as __patch__] (node_modules/vue/dist/vue.common.dev.js:6515:9)
      at VueComponent.Vue._update (node_modules/vue/dist/vue.common.dev.js:3960:19)
      at VueComponent.updateComponent (node_modules/vue/dist/vue.common.dev.js:4078:10)
      at Watcher.get (node_modules/vue/dist/vue.common.dev.js:4490:25)
      at Watcher.run (node_modules/vue/dist/vue.common.dev.js:4565:22)
      at flushSchedulerQueue (node_modules/vue/dist/vue.common.dev.js:4323:13)
      at Array.<anonymous> (node_modules/vue/dist/vue.common.dev.js:1994:12)
      at flushCallbacks (node_modules/vue/dist/vue.common.dev.js:1920:14)

    console.error
      [Vue warn]: $listeners is readonly.
      
      found in
      
      ---> <BLink>
             <GlLink>
               <BFormGroup>
                 <GlFormGroup>
                   <LicenseKeyButtons>
                     <SubscriptionActivationLegacy>
                       <SubscriptionActivation>
                         <Anonymous>
                           <Anonymous>
                             <Anonymous>
                               <Anonymous>
                                 <Anonymous>
                                   <Root>

      at warn (node_modules/vue/dist/vue.runtime.common.dev.js:621:15)
      at node_modules/vue/dist/vue.runtime.common.dev.js:3520:36
      at VueComponent.reactiveSetter [as $listeners] (node_modules/vue/dist/vue.runtime.common.dev.js:1047:9)
      at updateChildComponent (node_modules/vue/dist/vue.common.dev.js:4150:17)
      at prepatch (node_modules/vue/dist/vue.common.dev.js:3147:5)
      at patchVnode (node_modules/vue/dist/vue.common.dev.js:6343:7)
      at VueComponent.patch [as __patch__] (node_modules/vue/dist/vue.common.dev.js:6515:9)
      at VueComponent.Vue._update (node_modules/vue/dist/vue.common.dev.js:3960:19)
      at VueComponent.updateComponent (node_modules/vue/dist/vue.common.dev.js:4078:10)
      at Watcher.get (node_modules/vue/dist/vue.common.dev.js:4490:25)
      at Watcher.run (node_modules/vue/dist/vue.common.dev.js:4565:22)
      at flushSchedulerQueue (node_modules/vue/dist/vue.common.dev.js:4323:13)
      at Array.<anonymous> (node_modules/vue/dist/vue.common.dev.js:1994:12)
      at flushCallbacks (node_modules/vue/dist/vue.common.dev.js:1920:14)

    console.error
      [Vue warn]: Missing required prop: ""autoRenew""
      
      found in
      
      ---> <SubscriptionButtonsEE>
             <Anonymous>
               <Anonymous>
                 <Anonymous>
                   <Anonymous>
                     <Anonymous>
                       <Root>

      at warn (node_modules/vue/dist/vue.common.dev.js:630:15)
      at assertProp (node_modules/vue/dist/vue.common.dev.js:1686:5)
      at validateProp (node_modules/vue/dist/vue.common.dev.js:1637:5)
      at loop (node_modules/vue/dist/vue.common.dev.js:4673:17)
      at initProps (node_modules/vue/dist/vue.common.dev.js:4704:33)
      at initState (node_modules/vue/dist/vue.common.dev.js:4647:21)
      at VueComponent.Vue._init (node_modules/vue/dist/vue.common.dev.js:5010:5)
      at new VueComponent (node_modules/vue/dist/vue.common.dev.js:5157:12)
      at createComponentInstanceForVnode (node_modules/vue/dist/vue.common.dev.js:3307:10)
      at init (node_modules/vue/dist/vue.common.dev.js:3136:45)
      at createComponent (node_modules/vue/dist/vue.common.dev.js:6013:9)
      at createElm (node_modules/vue/dist/vue.common.dev.js:5960:9)
      at VueComponent.patch [as __patch__] (node_modules/vue/dist/vue.common.dev.js:6510:7)
      at VueComponent.Vue._update (node_modules/vue/dist/vue.common.dev.js:3957:19)

    console.error
      [Vue warn]: $attrs is readonly.
      
      found in
      
      ---> <BLink>
             <GlLink>
               <BFormGroup>
                 <GlFormGroup>
                   <LicenseKeyButtons>
                     <SubscriptionActivationLegacy>
                       <SubscriptionActivation>
                         <Subscription>
                           <SubscriptionList>
                             <Anonymous>
                               <Anonymous>
                                 <Anonymous>
                                   <Anonymous>
                                     <Anonymous>
                                       <Root>

      at warn (node_modules/vue/dist/vue.runtime.common.dev.js:621:15)
      at node_modules/vue/dist/vue.runtime.common.dev.js:3517:36
      at VueComponent.reactiveSetter [as $attrs] (node_modules/vue/dist/vue.runtime.common.dev.js:1047:9)
      at updateChildComponent (node_modules/vue/dist/vue.common.dev.js:4149:13)
      at prepatch (node_modules/vue/dist/vue.common.dev.js:3147:5)
      at patchVnode (node_modules/vue/dist/vue.common.dev.js:6343:7)
      at VueComponent.patch [as __patch__] (node_modules/vue/dist/vue.common.dev.js:6515:9)
      at VueComponent.Vue._update (node_modules/vue/dist/vue.common.dev.js:3960:19)
      at VueComponent.updateComponent (node_modules/vue/dist/vue.common.dev.js:4078:10)
      at Watcher.get (node_modules/vue/dist/vue.common.dev.js:4490:25)
      at Watcher.run (node_modules/vue/dist/vue.common.dev.js:4565:22)
      at flushSchedulerQueue (node_modules/vue/dist/vue.common.dev.js:4323:13)
      at Array.<anonymous> (node_modules/vue/dist/vue.common.dev.js:1994:12)
      at flushCallbacks (node_modules/vue/dist/vue.common.dev.js:1920:14)

    console.error
      [Vue warn]: $listeners is readonly.
      
      found in
      
      ---> <BLink>
             <GlLink>
               <BFormGroup>
                 <GlFormGroup>
                   <LicenseKeyButtons>
                     <SubscriptionActivationLegacy>
                       <SubscriptionActivation>
                         <Subscription>
                           <SubscriptionList>
                             <Anonymous>
                               <Anonymous>
                                 <Anonymous>
                                   <Anonymous>
                                     <Anonymous>
                                       <Root>

      at warn (node_modules/vue/dist/vue.runtime.common.dev.js:621:15)
      at node_modules/vue/dist/vue.runtime.common.dev.js:3520:36
      at VueComponent.reactiveSetter [as $listeners] (node_modules/vue/dist/vue.runtime.common.dev.js:1047:9)
      at updateChildComponent (node_modules/vue/dist/vue.common.dev.js:4150:17)
      at prepatch (node_modules/vue/dist/vue.common.dev.js:3147:5)
      at patchVnode (node_modules/vue/dist/vue.common.dev.js:6343:7)
      at VueComponent.patch [as __patch__] (node_modules/vue/dist/vue.common.dev.js:6515:9)
      at VueComponent.Vue._update (node_modules/vue/dist/vue.common.dev.js:3960:19)
      at VueComponent.updateComponent (node_modules/vue/dist/vue.common.dev.js:4078:10)
      at Watcher.get (node_modules/vue/dist/vue.common.dev.js:4490:25)
      at Watcher.run (node_modules/vue/dist/vue.common.dev.js:4565:22)
      at flushSchedulerQueue (node_modules/vue/dist/vue.common.dev.js:4323:13)
      at Array.<anonymous> (node_modules/vue/dist/vue.common.dev.js:1994:12)
      at flushCallbacks (node_modules/vue/dist/vue.common.dev.js:1920:14)

    console.error
      [Vue warn]: $attrs is readonly.
      
      found in
      
      ---> <BLink>
             <GlLink>
               <BFormGroup>
                 <GlFormGroup>
                   <LicenseKeyButtons>
                     <SubscriptionActivationLegacy>
                       <SubscriptionActivation>
                         <Subscription>
                           <SubscriptionList>
                             <Anonymous>
                               <Anonymous>
                                 <Anonymous>
                                   <Anonymous>
                                     <Anonymous>
                                       <Root>

      at warn (node_modules/vue/dist/vue.runtime.common.dev.js:621:15)
      at node_modules/vue/dist/vue.runtime.common.dev.js:3517:36
      at VueComponent.reactiveSetter [as $attrs] (node_modules/vue/dist/vue.runtime.common.dev.js:1047:9)
      at updateChildComponent (node_modules/vue/dist/vue.common.dev.js:4149:13)
      at prepatch (node_modules/vue/dist/vue.common.dev.js:3147:5)
      at patchVnode (node_modules/vue/dist/vue.common.dev.js:6343:7)
      at VueComponent.patch [as __patch__] (node_modules/vue/dist/vue.common.dev.js:6515:9)
      at VueComponent.Vue._update (node_modules/vue/dist/vue.common.dev.js:3960:19)
      at VueComponent.updateComponent (node_modules/vue/dist/vue.common.dev.js:4078:10)
      at Watcher.get (node_modules/vue/dist/vue.common.dev.js:4490:25)
      at Watcher.run (node_modules/vue/dist/vue.common.dev.js:4565:22)
      at flushSchedulerQueue (node_modules/vue/dist/vue.common.dev.js:4323:13)
      at Array.<anonymous> (node_modules/vue/dist/vue.common.dev.js:1994:12)
      at flushCallbacks (node_modules/vue/dist/vue.common.dev.js:1920:14)

    console.error
      [Vue warn]: $listeners is readonly.
      
      found in
      
      ---> <BLink>
             <GlLink>
               <BFormGroup>
                 <GlFormGroup>
                   <LicenseKeyButtons>
                     <SubscriptionActivationLegacy>
                       <SubscriptionActivation>
                         <Subscription>
                           <SubscriptionList>
                             <Anonymous>
                               <Anonymous>
                                 <Anonymous>
                                   <Anonymous>
                                     <Anonymous>
                                       <Root>

      at warn (node_modules/vue/dist/vue.runtime.common.dev.js:621:15)
      at node_modules/vue/dist/vue.runtime.common.dev.js:3520:36
      at VueComponent.reactiveSetter [as $listeners] (node_modules/vue/dist/vue.runtime.common.dev.js:1047:9)
      at updateChildComponent (node_modules/vue/dist/vue.common.dev.js:4150:17)
      at prepatch (node_modules/vue/dist/vue.common.dev.js:3147:5)
      at patchVnode (node_modules/vue/dist/vue.common.dev.js:6343:7)
      at VueComponent.patch [as __patch__] (node_modules/vue/dist/vue.common.dev.js:6515:9)
      at VueComponent.Vue._update (node_modules/vue/dist/vue.common.dev.js:3960:19)
      at VueComponent.updateComponent (node_modules/vue/dist/vue.common.dev.js:4078:10)
      at Watcher.get (node_modules/vue/dist/vue.common.dev.js:4490:25)
      at Watcher.run (node_modules/vue/dist/vue.common.dev.js:4565:22)
      at flushSchedulerQueue (node_modules/vue/dist/vue.common.dev.js:4323:13)
      at Array.<anonymous> (node_modules/vue/dist/vue.common.dev.js:1994:12)
      at flushCallbacks (node_modules/vue/dist/vue.common.dev.js:1920:14)

 PASS  spec/frontend/subscription/components/renew_community_base_subscription_form_spec.js
 PASS  spec/frontend/components/form_action_button_spec.js
 PASS  spec/frontend/subscription/components/subscription_renew_form_spec.js (5.659 s)
  ● Console

    console.error
      [Vue warn]: Invalid prop: type check failed for prop ""selectedPlanId"". Expected String, got Undefined 
      
      found in
      
      ---> <SubscriptionRenewUpgradePlans>
             <TransactionCard>
               <SubscriptionRenewForm>
                 <Root>

      at warn (node_modules/vue/dist/vue.runtime.common.dev.js:621:15)
      at assertProp (node_modules/vue/dist/vue.runtime.common.dev.js:1702:5)
      at validateProp (node_modules/vue/dist/vue.runtime.common.dev.js:1628:5)
      at updateChildComponent (node_modules/vue/dist/vue.runtime.common.dev.js:4151:20)
      at prepatch (node_modules/vue/dist/vue.runtime.common.dev.js:3138:5)
      at patchVnode (node_modules/vue/dist/vue.runtime.common.dev.js:6332:7)
      at updateChildren (node_modules/vue/dist/vue.runtime.common.dev.js:6217:9)
      at patchVnode (node_modules/vue/dist/vue.runtime.common.dev.js:6343:29)
      at updateChildren (node_modules/vue/dist/vue.runtime.common.dev.js:6217:9)
      at patchVnode (node_modules/vue/dist/vue.runtime.common.dev.js:6343:29)
      at VueComponent.patch [as __patch__] (node_modules/vue/dist/vue.runtime.common.dev.js:6504:9)
      at VueComponent.Vue._update (node_modules/vue/dist/vue.runtime.common.dev.js:3951:19)
      at VueComponent.updateComponent (node_modules/vue/dist/vue.runtime.common.dev.js:4069:10)
      at Watcher.get (node_modules/vue/dist/vue.runtime.common.dev.js:4481:25)

    console.error
      [Vue warn]: Invalid prop: type check failed for prop ""checkedProductId"". Expected String, got Undefined 
      
      found in
      
      ---> <ProductRadioGroup>
             <SubscriptionRenewUpgradePlans>
               <TransactionCard>
                 <SubscriptionRenewForm>
                   <Root>

      at warn (node_modules/vue/dist/vue.runtime.common.dev.js:621:15)
      at assertProp (node_modules/vue/dist/vue.runtime.common.dev.js:1702:5)
      at validateProp (node_modules/vue/dist/vue.runtime.common.dev.js:1628:5)
      at updateChildComponent (node_modules/vue/dist/vue.runtime.common.dev.js:4151:20)
      at prepatch (node_modules/vue/dist/vue.runtime.common.dev.js:3138:5)
      at patchVnode (node_modules/vue/dist/vue.runtime.common.dev.js:6332:7)
      at updateChildren (node_modules/vue/dist/vue.runtime.common.dev.js:6217:9)
      at patchVnode (node_modules/vue/dist/vue.runtime.common.dev.js:6343:29)
      at VueComponent.patch [as __patch__] (node_modules/vue/dist/vue.runtime.common.dev.js:6504:9)
      at VueComponent.Vue._update (node_modules/vue/dist/vue.runtime.common.dev.js:3951:19)
      at VueComponent.updateComponent (node_modules/vue/dist/vue.runtime.common.dev.js:4069:10)
      at Watcher.get (node_modules/vue/dist/vue.runtime.common.dev.js:4481:25)
      at Watcher.run (node_modules/vue/dist/vue.runtime.common.dev.js:4556:22)
      at flushSchedulerQueue (node_modules/vue/dist/vue.runtime.common.dev.js:4314:13)

    console.error
      [Vue warn]: Invalid prop: type check failed for prop ""selectedPlanId"". Expected String, got Undefined 
      
      found in
      
      ---> <SubscriptionRenewUpgradePlans>
             <TransactionCard>
               <SubscriptionRenewForm>
                 <Root>

      at warn (node_modules/vue/dist/vue.runtime.common.dev.js:621:15)
      at assertProp (node_modules/vue/dist/vue.runtime.common.dev.js:1702:5)
      at validateProp (node_modules/vue/dist/vue.runtime.common.dev.js:1628:5)
      at updateChildComponent (node_modules/vue/dist/vue.runtime.common.dev.js:4151:20)
      at prepatch (node_modules/vue/dist/vue.runtime.common.dev.js:3138:5)
      at patchVnode (node_modules/vue/dist/vue.runtime.common.dev.js:6332:7)
      at updateChildren (node_modules/vue/dist/vue.runtime.common.dev.js:6217:9)
      at patchVnode (node_modules/vue/dist/vue.runtime.common.dev.js:6343:29)
      at updateChildren (node_modules/vue/dist/vue.runtime.common.dev.js:6217:9)
      at patchVnode (node_modules/vue/dist/vue.runtime.common.dev.js:6343:29)
      at VueComponent.patch [as __patch__] (node_modules/vue/dist/vue.runtime.common.dev.js:6504:9)
      at VueComponent.Vue._update (node_modules/vue/dist/vue.runtime.common.dev.js:3951:19)
      at VueComponent.updateComponent (node_modules/vue/dist/vue.runtime.common.dev.js:4069:10)
      at Watcher.get (node_modules/vue/dist/vue.runtime.common.dev.js:4481:25)

    console.error
      [Vue warn]: Invalid prop: type check failed for prop ""checkedProductId"". Expected String, got Undefined 
      
      found in
      
      ---> <ProductRadioGroup>
             <SubscriptionRenewUpgradePlans>
               <TransactionCard>
                 <SubscriptionRenewForm>
                   <Root>

      at warn (node_modules/vue/dist/vue.runtime.common.dev.js:621:15)
      at assertProp (node_modules/vue/dist/vue.runtime.common.dev.js:1702:5)
      at validateProp (node_modules/vue/dist/vue.runtime.common.dev.js:1628:5)
      at updateChildComponent (node_modules/vue/dist/vue.runtime.common.dev.js:4151:20)
      at prepatch (node_modules/vue/dist/vue.runtime.common.dev.js:3138:5)
      at patchVnode (node_modules/vue/dist/vue.runtime.common.dev.js:6332:7)
      at updateChildren (node_modules/vue/dist/vue.runtime.common.dev.js:6217:9)
      at patchVnode (node_modules/vue/dist/vue.runtime.common.dev.js:6343:29)
      at VueComponent.patch [as __patch__] (node_modules/vue/dist/vue.runtime.common.dev.js:6504:9)
      at VueComponent.Vue._update (node_modules/vue/dist/vue.runtime.common.dev.js:3951:19)
      at VueComponent.updateComponent (node_modules/vue/dist/vue.runtime.common.dev.js:4069:10)
      at Watcher.get (node_modules/vue/dist/vue.runtime.common.dev.js:4481:25)
      at Watcher.run (node_modules/vue/dist/vue.runtime.common.dev.js:4556:22)
      at flushSchedulerQueue (node_modules/vue/dist/vue.runtime.common.dev.js:4314:13)


```
</summary>
</details>

Unfortunately `storybook` does not provide any configuration option to resolve that so I suggest to remove storyshots testing as these tests do not do what they supposed to.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",1
110185078,2022-06-15 17:00:36.123,CI min subscriptions have subscription management buttons on CustomersDot,"# Bug

## Summary

Subscriptions that have CI minutes only are not renewable nor upgradable but the `Upgrade plan`, `Resume subscription`, `Buy more CI minutes`, `Buy more storage` buttons are visible on the active CI minutes subscriptions in CustomersDot. The expired ones do not have the `Resume subscription` button.

## What is the expected *correct* behavior?

It should not have any subscription management buttons

## Relevant logs and/or screenshots

An example of an account that has both expired and active CI minutes subscription is [210330 (internal)](https://customers.gitlab.com/admin/customer/210330/)

![Screenshot_2022-06-15_at_19.59.44](/uploads/64f97217cf5280015dbdb9bd5ea115f6/Screenshot_2022-06-15_at_19.59.44.png)

## Workarounds

(Ways to get around the issue)

## Reported examples

1.
1.
1.

## Implementation plan
| Scenario | MR |
| ------ | ------ |
| :one: Hide `Cancel / Resume subscription` button for addon only plans | https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5390 |
| :two: Move amend or create decision for addons to backend  | https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5402 |
| :three: Hide subscription management buttons for CI minutes subscriptions which are not linked to a namespace | https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5450 |

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",3
110162430,2022-06-15 12:23:05.225,Update CSS in repo to hide the inline submit button in zuora iframe,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
In https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4250+, we [decided](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4250#note_945133329) that we would be taking the [one button approach](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4250#-one-button-ob) i.e. hide the internal iframe button and always shown an external button. This is currently behind the feature flag `zuora_hpm_no_refresh`. To achieve this, along with enabling the feature flag, we will also be disabling the internal iframe submit button through Zuora CSS.


### Proposal
1. Update the existing CSS (we can probably get the existing CSS from finance team or check if we have it tracked in our repo) to hide the zuora inline submit button. (Add `display: none` on class `.btn-submit.btn-submit` and remove existing CSS on `.btn-submit.btn-submit`)
2. Add the Zuora HPM id (both staging and production) and the new CSS to be updated in this [issue](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/financeops/finance-systems/-/issues/791) description.
3. If this CSS is not being tracked in the repo currently, consider adding it with the appropriate naming convention (e.g. the id from [secrets](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/config/secrets.yml.example#L91)).   

_Note: We currently have 2 css files ([style.css](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/vendor/zuora/css/style.css) and [hpm2.css](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/vendor/zuora/css/hpm2.css)) being tracked in our repo. Need to confirm which HPM these styles are for. Updating the CSS file names with a clearer naming convention might help in identifying the correct HPM going ahead._

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result
We need to update the Zuora HPM id (staging and production) and the updated CSS to hide inline submit button in Zuora iframe in this [issue](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/financeops/finance-systems/-/issues/791) description.  
We need to mention in this issue that we need to finalise on a date and time so as to sync the Zuora CSS update and enabling the feature flag `zuora_hpm_no_refresh`. Read this [discussion](https://gitlab.com/groups/gitlab-org/-/epics/7969#note_992473878) for more context on why this is needed.

### Next steps (if any)

### How will we measure success?",1
110161613,2022-06-15 12:05:56.559,Add new feature flag to show add new payment method page under maintenance mode,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
In https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4250+, we [decided](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4250#note_945133329) that we would be taking the [one button approach](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4250#-one-button-ob) i.e. hide the internal iframe button and always shown an external button. This is currently behind the feature flag `zuora_hpm_no_refresh`. To achieve this, along with enabling the feature flag, we will also be disabling the internal iframe submit button through Zuora CSS.

However we would have a problem in syncing the two operations - enabling the `zuora_no_hpm_refresh` feature flag and the zuora css update (since the CSS update will be done by finance systems team through an issue). If we enable `zuora_no_hpm_refresh` and then update the Zuora CSS, we will see 2 buttons for the time duration we take between the 2 updates. If we update Zuora CSS first and then the feature flag, then we will see no buttons in the time duration we take between the 2 updates. This will only affect the `Add new payment method` functionality since currently that is the only implementation where we are using the internal iframe button.  

### Proposal
1. Introduce a feature flag `add_new_payment_method_maintenance_mode`.  
2. Make code changes to show `Maintenance mode` message when feature flag is enabled and not to allow users to use the `Add new payment` page.

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result
`Maintenance mode` message should be shown when `add_new_payment_method_maintenance_mode` feature flag is enabled.

### Next steps (if any)

### How will we measure success?",2
110160648,2022-06-15 11:48:55.790,Implement one button approach in new_payment_method.vue,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
In https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4250+, we [decided](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4250#note_945133329) that we would be taking the [one button approach](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4250#-one-button-ob) i.e. hide the internal iframe button and always shown an external button.  

This is currently behind the feature flag `zuora_hpm_no_refresh`. To achieve this along with enabling the feature flag, we will also be disabling the internal iframe submit button through Zuora CSS. However since the Zuora CSS will be common across all places where this Zuora iframe is used, we need to implement the one button approach in [new_payment_method.vue](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/main/app/frontend/javascripts/payment_methods/components/new_payment_method.vue) too.


### Proposal
Implement a similar one button approach as suggested [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4250#-one-button-ob). Currently [new_payment_method.vue](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/main/app/frontend/javascripts/payment_methods/components/new_payment_method.vue) doesn't have an external button since it uses the `inline-submit` methodology on the old [zuora_new_credit_card_form.vue](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/main/app/frontend/javascripts/payment_methods/components/new_payment_method.vue#L89). We need to introduce a button which will work with the new [zuora_static_credit_card_form.vue](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/main/app/frontend/javascripts/payment_methods/components/new_payment_method.vue#L88).  
Reference: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4862/diffs  

_**Note:** When testing with `zuora_no_hpm_refresh` FF enabled, we would need to update the Zuora CSS (from Zuora apisandbox portal) under the [hosted page's](https://apisandbox.zuora.com/apps/HostedPageLite.do?method=list) CSS field.  
Copy CSS from this file and update in Zuora hosted page's CSS field - [style.css](/uploads/b0fca3bb14f102d72d86dedfe1acdef2/style.css)_.  
_This is only for testing purposes. Do not use this CSS for production._


<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result
The add new payment method flow (which uses `new_payment_method.vue`) should work fine with `zuora_np_hpm_refresh` flag enabled and disabled.

### Next steps (if any)

### How will we measure success?",2
110160061,2022-06-15 11:37:10.644,Implement one button approach in subscription_renew_form.vue,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
In https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4250+, we [decided](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4250#note_945133329) that we would be taking the [one button approach](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4250#-one-button-ob) i.e. hide the internal iframe button and always shown an external button.  

This is currently behind the feature flag `zuora_hpm_no_refresh`. To achieve this along with enabling the feature flag, we will also be disabling the internal iframe submit button through Zuora CSS. However since the Zuora CSS will be common across all places where this Zuora iframe is used, we need to implement the one button approach in [subscription_renew_form.vue](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/main/app/frontend/javascripts/subscription/components/subscription_renew_form.vue#L472-482) too.


### Proposal
Implement a similar one button approach as suggested [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4250#-one-button-ob).  
Reference: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4862/diffs  

_**Note:** When testing with `zuora_no_hpm_refresh` FF enabled, we would need to update the Zuora CSS (from Zuora apisandbox portal) under the [hosted page's](https://apisandbox.zuora.com/apps/HostedPageLite.do?method=list) CSS field.  
Copy CSS from this file and update in Zuora hosted page's CSS field - [style.css](/uploads/b0fca3bb14f102d72d86dedfe1acdef2/style.css)_  
_This is only for testing purposes. Do not use this CSS for production._

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result
The SM renewal flow (which uses `subscription_renew_form.vue`) should work fine with `zuora_np_hpm_refresh` flag enabled and disabled.

### Next steps (if any)

### How will we measure success?",3
110138452,2022-06-15 07:19:01.878,Refactor customer registration emoji validation,"We recently introduced validation against emojis on the ~frontend. During the implementation of , we realised it would've been less tedious work to already abstract the validation logic (gitlab-org/customers-gitlab-com!5006), in order to reduce the amount of later refactoring. We later introduced [`VeeValidate`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5017/diffs) to do the heavy lifting for custom form validation.

This issue has been changed from abstracting the logic to refactoring the validation for the customer sign-up / registration page.

Discussion for approach for custom validation - https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4644

### Proposed solution

- Apply VeeValidate similar to how we do it for [customer details edit](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/app/frontend/javascripts/account/components/personal_details.vue#L22)
- Delete all [emoji-specific](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/7afd8712efc24d889dde3487f2db25110b9f94d4/app/frontend/javascripts/sessions/sessions_constants.js#L9) logic

| Description | MR|
|-|-|
| Refactor customer registration emoji validation | _tbd_ |",2
110122445,2022-06-14 21:15:16.544,Rate plan for new subscription - Orders API,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

When a user purchases a new subscription, it includes the product and the number of quantity they wish to subscribe to.

In the Subscribe API, this information was captured in [rate_plan_data](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/app/services/subscribe_service.rb#L154) attribute. It included details of the main and optional plan.

We need a way to capture this information when creating a new subscription through the Orders API.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

The [Order action `createSubscription`](https://www.zuora.com/developer/api-reference/#operation/POST_Order) has a `subscribeToRatePlans` object. It holds the list of rate plans associated with the subscription.

Use the object to pass the rate plans a user subscribes to.

### Result

The selected plan and quantity gets reflects in the new order / subscription created.

### Next steps (if any)

### How will we measure success?",2
110049469,2022-06-13 19:29:10.392,Fix contact support link in error messages,"### Problem

The `contact support` link in the error message is not properly formatted

![screenshot-2022-06-13-09_37](/uploads/0a6ec28775c1a3f8ea118b4865910893/screenshot-2022-06-13-09_37.png)

Check all cases where we use errors from our [constants.js](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/1b7dadd279cb16ad0c26a9ee4127951cea9ded35/app/frontend/javascripts/constants.js) and make sure to add `sprintf` to every ussage.",1
109863886,2022-06-09 15:20:36.963,Handle true ups for community program subscriptions,"### Problem

GitLab does not prevent customers from exceeding their seat count. For paying customers with legacy licenses (community programs also uses legacy licenses), we ask them to pay for overages when they renew for the next year, a process called true-ups. However, since community programs licenses are free, there's really no need to ask them to pay for or report any overages, since any true-ups charges would be for $0 anyway.

### Proposal

Since the licenses for customers who are on 14.0 or earlier will error when they try to add them to the instance for missing true-up quantity, we should add a `very large number` of true-ups to every license for community program subscriptions so it works for both.

We should make sure this works for customers irrespective of the version they are on.

[Instructions to setup SM instance](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4397#note_991005945)

[Error message that should happen without the fix for testing purposes](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4397#note_991043970)

> After a subscription is renewed then a new license is generated for the SM customer. The renewed license contains information like new user quantity being renewed, starts_at, expires_at etc. It also contains the trueup_quantity information. The trueup_quantity is then pulled from the renewed license within the SM instance and verified with the last year's extra active user count. If the trueup quantity is less than the last year's users difference then an error is displayed on the SM instance.
>
> You have applied a True-up for #{trueup_qty} #{""user"".pluralize(trueup_qty)}""]
but you need one for #{expected_trueup_qty} #{""user"".pluralize(expected_trueup_qty)}.""
Please contact sales at https://about.gitlab.com/sales/""


### Applicable SKUs

`ULTIMATE_SM_EDU_1_YEAR` and `ULTIMATE_SM_OSS_1_YEAR`

#### Post merge into `main`

It would be great to add the test scenarios under [True-ups section](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4182#11-true-ups-assignee-) in gitlab-org/customers-gitlab-com#4182+ and add screenshots once the fix is live so all the test scenarios are captured in the issue

#### Reference links

Original discussion: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2747/designs/Renewal_flow___Link_directly_into_renewal.png#note_627443393

Further discussion: https://gitlab.com/gitlab-org/gitlab/-/issues/363439#note_968411902",5
109861530,2022-06-09 14:41:42.721,[Code cleanup] Cleanup Zuora::Helpers::Subscription,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

This module was temporarily added to hold common methods in subscription workflow. The module can be dropped once the migration to Orders API is complete.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",1
109861516,2022-06-09 14:41:35.945,Ramp ID from Zuora GET Subscription API,"### Problem

In https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4303, we implemented a solution to get Ramp ID for a subscription using the https://www.zuora.com/developer/api-reference/#operation/GET_RampsBySubscriptionKey Zuora API endpoint.  This was necessary because Ramp ID was not available through the existing Zuora API endpoint that CustomersDot uses to get other Subscription data, https://www.zuora.com/developer/api-reference/#operation/Object_GETSubscription.  

Using https://www.zuora.com/developer/api-reference/#operation/GET_RampsBySubscriptionKey works as a short-term solution, but isn't ideal because it requires an additional Zuora request to fetch Ramp ID.

### Proposal

Zuora has agreed to adding Ramp ID to the https://www.zuora.com/developer/api-reference/#operation/Object_GETSubscription API soon (potentially in late June).  When it becomes available, we can remove some of the logic introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4303, including the extra request to https://www.zuora.com/developer/api-reference/#operation/GET_RampsBySubscriptionKey.",2
109812781,2022-06-08 22:45:20.496,Flash notice missing upon successfully cancel subscription,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

We noticed a new e2e test failure in pipeline after new `cancellation_modal` implementation. 

The flash notice [`You have successfully unsubscribed from your GitLab plan`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/app/viewers/transaction_viewer.rb#L38) no longer presents after cancellation is confirmed

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",2
109812181,2022-06-08 22:25:12.826,Number of users field should default to empty in purchase flow,"# Feature Proposal

## Problem to solve

The number of users field in the new purchase flow defaults to `1`. [This has caused users](https://gitlab.com/gitlab-com/marketing/community-relations/community-operations/community-operations/-/issues/155#note_976584791) to accidentally purchase subscriptions for 1 user, because they do not change the default.

![Screen_Shot_2022-06-08_at_5.12.27_PM](/uploads/4e4006d335a098292345d7a93b0acefb/Screen_Shot_2022-06-08_at_5.12.27_PM.png)

----

![1654807686986](/uploads/7eaad789b4481c9eaaddc7592bd23c76/1654807686986.png)

### Flows affected

* New self-managed standard subscription purchase
* New self-managed community program subscription purchase

## Proposal

For the new subscription purchase flow and community programs new subscription flow, the default for the number of users field should be empty (and it should be a required field for the customer to purchase a subscription). This will force the customer to proactively enter a number instead of passively accepting our default of `1`.",3
109724546,2022-06-07 15:19:52.457,[Feature flag] Enable Zuora Ramp Deals,"# Summary

This issue is to rollout [Zuora Ramp Deals](https://gitlab.com/groups/gitlab-org/-/epics/7099) on CustomersDot production,
that is currently behind the [`zuora_ramp_deals`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/137/edit) feature flag.

This feature flag should gate the logic for provisioning ramped subscriptions as described in https://gitlab.com/groups/gitlab-org/-/epics/7192+, but may also gate logic for the display of ramped subscriptions in CustomersDot as well.

## Owners

- Team: ~""group::fulfillment platform"" 
- Most appropriate Slack channel to reach out to: `#g_provision`
- Best individual to reach out to: @cwiesner 
- PM: @courtmeddaugh 

## Stakeholders

`@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team

## The Rollout Plan

- Partial Rollout with specific Customers on CustomersDot, [via Unleash](https://docs.gitlab.com/ee/operations/feature_flags.html#user-ids)
- Rollout on CustomersDot for a certain period (How long)
- Percentage Rollout on CustomersDot
- Rollout Feature for everyone as soon as it's ready

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? Sentry errors reports can also be useful to review -->

## Testing User/Customer IDs

<!--
List any Customer IDs for Customers that are happy to have this feature turned on early.

Remove if not applicable
-->

## Expectations

### What are we expecting to happen?

We expect that ramped subscriptions created or updated via sales-assisted deals to be provisioned automatically via CustomersDot.  This could be expanded to include display of ramped subscriptions in CDot in the future (TBD).

### What might happen if this goes wrong?

<!-- Should the feature flag be turned off? Any MRs that need to be rolled back? Communication that needs to happen? What are some things you can think of that could go wrong - data loss or broken pages? -->

### What can we monitor to detect problems with this?

Errors can be monitored at https://sentry.gitlab.net/gitlab/customersgitlabcom/ .

## Rollout Steps

### Rollout on non-production environments

- [x] Ensure that the feature MRs have been deployed to non-production environments, i.e. `customers-staging`.
- [x] Consider announcing that the flag will be enabled to potentially impacted groups, e.g. `#s_fulfillment_engineering`
- [x] Enable the feature globally on non-production environments by applying the appropriate environment, e.g. `customers-staging` and `customers-development`.
- [x] Verify that the feature works as expected. Posting the QA result in this issue is preferable.

### Preparation before production rollout

- [x] Ensure that the feature MRs have been deployed to production
- [x] Check if the feature flag change needs to be accompanied with a
  [change management issue](https://about.gitlab.com/handbook/engineering/infrastructure/change-management/#feature-flags-and-the-change-management-process).
  Cross link the issue here if it does.
- [x] Ensure that you or a representative in Fulfillment can be available for at least 2 hours after feature flag updates in production.
  If a different developer will be covering, or an exception is needed, please inform the Fulfillment team in #s_fulfillment_engineering
- [x] Ensure any documentation has been updated
- [x] Announce on [the feature epic](https://gitlab.com/groups/gitlab-org/-/epics/7099) an estimated time this will be enabled on production if applicable
- [x] If the feature might impact the user experience, notify `#s_fulfillment` and potentially `#support_gitlab-com`, as well as your team channel ([more guidance when this is necessary in the dev docs](https://docs.gitlab.com/ee/development/feature_flags/controls.html#communicate-the-change)).

### Global rollout on CustomersDot production

- [x] Confirm the feature flag is enabled on `staging` without incident
- [ ] ~Roll out the feature to targeted testing users first (if applicable)~
- [ ] ~If applicable, [incrementally roll out]~(https://docs.gitlab.com/ee/operations/feature_flags.html#percent-rollout) the feature.
- [ ] ~Verify the change has the desired outcome with the limited rollout before enabling the feature globally on production.~
- [x] Enable the feature globally on production environment
- [ ] ~Announce on [the feature epic](https://gitlab.com/groups/gitlab-org/-/epics/7099) that the feature has been globally enabled.~
- [x] Wait for [at least one day for the verification term](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release).

## Rollback Steps

- [ ] This feature can be disabled by performing the following actions:
  - [ ] Disable the Unleash flag on the [feature flag page](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/137/edit)",1
109716503,2022-06-07 13:33:11.454,Default active users to current billable member count at renewal,"# Bug

## Summary

The input field for number of users during renewal process for community program SaaS subscriptions should default to current billable members count. 

## Steps to reproduce

Create a SaaS Community Program subscription due for renewal. Add more billable users to the group associated with the subscription so the original purchase quantity is less than the current billable members count.

## What is the current *bug* behavior?

The input field for number of users on renewal screen defaults to the number of seats in the previous year's subscription.

## What is the expected *correct* behavior?

It should be defaulted to current billable member count.

## Relevant logs and/or screenshots

![Screen_Shot_2022-06-07_at_3.27.24_PM](/uploads/4f8ac7b95c60413577464f7b3ee8689e/Screen_Shot_2022-06-07_at_3.27.24_PM.png)

![Screen_Shot_2022-06-07_at_3.30.34_PM](/uploads/db848aed03acc2e7c8ed17e321751d6a/Screen_Shot_2022-06-07_at_3.30.34_PM.png)

![Screen_Shot_2022-06-07_at_3.30.52_PM](/uploads/7928cb62298ed7386fa7157623fcbc50/Screen_Shot_2022-06-07_at_3.30.52_PM.png)",1
109658521,2022-06-06 15:46:05.700,Service to generate custom attributes for Orders API (CreateSubscription),"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Create a service that returns custom attributes required while creating a subscription. It will be used in [`OrderManagerService`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4314) when creating a new subscription using Order's API.

It represents the `orderLineItems[:customFields]` param in [Orders API](https://www.zuora.com/developer/api-reference/#operation/POST_Order).

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Create a service: `Zuora::Orders::CustomFields::CreateSubscription` that implements `#execute` method. It should return a has of custom attributes required when [creating a new subscription](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/6de4998feb23012df7cb7ee8a83874a7aaf49dfa/app/services/subscribe_service.rb#L276). Re use this service is `SubscribeService` to avoid duplication of code.

### Result

### Next steps (if any)

### How will we measure success?",2
109537194,2022-06-03 04:45:03.900,Frontend validation against emoji customers info during edit,"### Problem

Customers are able to set emoji in their names in CustomersDot accounts. When we try to make a subscription purchase, we take the `bill_to_contact` details from the Customer record in the CustomersDot app. This results [in the following error from Zuora:](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/3267234/events/76539035/)

```ruby
Body: [{""Success""=>false, ""Errors""=>[{""Code""=>""UNKNOWN_ERROR"", ""Message""=>""Operation failed due to an unknown error.""}]}]
```

<img src=""/uploads/97e77d6dcc65d008dc0e8d5144c528c4/CleanShot_2022-05-09_at_15.05.09.png"" width='500px' />

### Steps to reproduce

1. Login to your CustomersDot via GitLab
1. Navigate to `/customers/edit`
1. Update the details adding an emoji to the First Name
1. Click on `Save changes`
1. There is an error message

|||
|-|-|
|![Screenshot_2022-06-03_at_07.01.48](/uploads/c4a22d73f1480e7c1814eb02d486cf5c/Screenshot_2022-06-03_at_07.01.48.png)|![Screenshot_2022-06-03_at_07.02.00](/uploads/d42d73d28c45180c2cfb6bb85b8be9e5/Screenshot_2022-06-03_at_07.02.00.png)|

### Proposal

The presence of emojis should be validated before submission. We can leverage the `emoji-regex` module (the same as gitlab-org/customers-gitlab-com#4274).

The fields to validate against the presence of emoji are:

- first_name
- last_name
- city
- zip_code (postal_code)
- company

|Description|MR|
|-|-|
| Introduce validation directive | gitlab-org/customers-gitlab-com!5006 |
| Prevent submission on customer edit if emoji are present| gitlab-org/customers-gitlab-com!5017|
| Add/update feature tests | _tbd_ |",3
109391376,2022-05-31 17:31:10.311,Remove cancellation_modal HAML file,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
After https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4352+ is merged, we can remove the old [cancellation modal HAML file](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/51e415d434b177b787900402d8d90d7b9f7e12b8/app/views/subscriptions/_cancellation_modal.html.haml). Additionally, we should change from using the GL utility classes in our CSS file to in the component (discussion [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4799#note_960393274))

Also remove the border around the ""To help improve our product..."" area (request [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4035#note_973054549))

Additionally, we can remove the cancellation_modal FF.",1
109366874,2022-05-31 10:42:57.899,Provide an update of customers-gitlab-com to customers-gitlab-cn with latest changes for May '22,"Refer to the documentation inhttps://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/doc/security/distribution.md and the previous attempts below to remove or randomize secrets to provide an updated CustomersDot for the JiHu team.

**Tasks Overview**

* [x] Pull the latest from https://gitlab.com/gitlab-org/customers-gitlab-com repository
* [x] In a new branch, replace any sensitive production keys from code and documentation.
* [ ] Review changes with peers and maintainers
* [ ] Submit MR to customers-gitlab-cn with files in the scrubbed branch with the history removed as a single commit.

## Previous Attempts

* #160
* #184
* #198",1
109327032,2022-05-30 16:11:21.474,Track subscription management events on BE,"This is a ~backend part of the Customer Portal subscription management tracking. The click tracking is implemented in the https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3690

* Collection tool: Snowplow
* Release behind the feature flag (separate from https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3689): `tracking_subscription_management`

List of transactions to track:

* `Add more seats` - track full transaction
* `Upgrade` - track full transaction
* `Renew` - track full transaction
* `Buy more CI minutes`/Buy more storage\` - track full transaction
* `Change linked namespace` - track full transaction
* `Cancel` - is already tracked

| Transaction | Event action | Link |
| ------ | ------ | ------ |
| Renew subscription | 'renew_subscription_saas'/'renew_subscription_sm' | /subscriptions/<SUBSCRIPTION_ID>/renew |
| Upgrade subscription | 'upgrade_subscription_saas'/'upgrade_subscription_sm' | /subscriptions/<SUBSCRIPTION_ID>/upgrade/new |
| Add more seats to a subscription | 'add_seats_saas'/'add_seats_sm' | /subscriptions/<SUBSCRIPTION_ID>/edit?transaction=extra_seats |
| Buy CI minutes (SaaS only) | 'buy_ci_minutes' | /subscriptions/new?plan_id=2c92c0f9699eca030169a2f1f117045f&subscription_id=<SUBSCRIPTION_ID>&transaction=ci_minutes |
| Buy storage (SaaS only) | 'buy_storage_plan' | /subscriptions/new?plan_id=2c92c0f8725e55d70172613f547f0b59&subscription_id=<SUBSCRIPTION_ID>&transaction=storage |
| Change linked namespace (SaaS only) | 'change_namespace' | /subscriptions/<SUBSCRIPTION_ID>/edit?transaction=change_gitlab_group |",2
109316958,2022-05-30 13:22:47.109,Create class to get and put gitlab_subscription request,"### Problem

We are making [GET and PUT calls](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/app/services/check_order_in_sync_service.rb#L129) to API ""/api/v4/namespaces/<namespace_id>/gitlab_subscriptions"" and are using admin_token for authentication. 

As of now, we do not have a class or a module which can help in making the API call to GL.com `gitlab_subscriptions` from CustomersDot for a namespace.  

### Proposal

Create a class which would abstract the API call to `gitlab_subscriptions` for a namespace_id provided as a parameter. The class can make 3 calls, GET, POST and PUT to `/api/v4/namespaces/<namespace_id>/gitlab_subscriptions`.

### Next steps (if any)

Replace the GET, PUT and POST call to `gitlab_subscriptions` with the new class created.",2
109082897,2022-05-25 08:06:47.518,"User received ""Managing users in your subscription"" email when taking out trial","<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you're about to submit isn't a duplicate.

Do not include confidential information!
--->

# Bug

## Summary

User receive email `Managing users in your subscription` after taking out a trial on GitLab.com.

This might have to something to do with https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/app/mailers/reconciliation_introductory_mailer.rb

## Steps to reproduce

(How one can reproduce the issue - this is very important)

## What is the current *bug* behavior?

(What actually happens)

## What is the expected *correct* behavior?

(What you should see instead)

## Relevant logs and/or screenshots

(Paste any relevant logs - please use code blocks (```) to format console output,
logs, and code as it's tough to read otherwise.)

**EMAIL**

```
Subject: [GitLab Transactions] Managing users in your subscription
Body:
Dear <User Name>,

Thank you for purchasing a GitLab.com subscription! As you get started, we want to make sure you understand some important billing information.

Your subscription cost is based on the maximum number of users enabled during the billing period. If you reach the maximum number of users in your subscription, you can continue to add users and GitLab bills you for the overage. These bills occur every quarter.

For more information about quarterly reconciliation, see https://docs.gitlab.com/ee/subscriptions/quarterly_reconciliation.html

If you have any questions about this process, please contact https://support.gitlab.com/hc/en-us/requests/new?ticket_form_id=360000071293. We are happy to assist.

Thank you again for your purchase!

GitLab Billing Team
```

## Workarounds

(Ways to get around the issue)

## Reported examples

1. https://gitlab.zendesk.com/agent/tickets/292626, [SFDC](https://gitlab.my.salesforce.com/00T8X00005fHRFR?fId=0D58X0000A6KEl1&s1oid=00D61000000JNOF&s1nid=000000000000000&emkind=chatterCommentNotification&s1uid=0054M000003VUza&emtm=1653452401008&fromEmail=1&s1ext=0)
1. https://gitlab.zendesk.com/agent/tickets/296897
1. https://gitlab.zendesk.com/agent/tickets/300565
1. https://gitlab.zendesk.com/agent/tickets/300966
1. https://gitlab.zendesk.com/agent/tickets/302027 (OSS program)
2. https://gitlab.zendesk.com/agent/tickets/302269
3. https://gitlab.zendesk.com/agent/tickets/302287

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",2
109075597,2022-05-25 06:28:32.459,Set maintenance automatically if GitLab is down,"### Problem

When GitLab.com is down, while we get notified, maintenance mode has to be set manually to avoid any errors from our side.

### Proposal

Similar to https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4228+ we could automatically set maintenance mode if GitLab.com is down (for long enough)

We could replicate (and refactor) the same logic we use to do this with Zuora right now.",3
109058144,2022-05-24 19:54:44.937,Send PROVISIONED status to Platypus order status endpoint,"### Background

Arrowsphere would like to know when an order has been successfully provisioned.  It was decided that CustomersDot could sent an order status request to Platypus after an Arrowsphere order has been ""provisioned"".  The Platypus order status endpoint is being built in https://gitlab.com/gitlab-com/business-technology/enterprise-apps/integrations/platypus/-/issues/226.  For MVC, ""provisioned"" simply means the license or activation code email has been sent from CustomersDot.

### Proposal

Send the order status request to Platypus after a successful delivery of the license or activation code email as part of processing the subscription/order Zuora callout.  This could be added [here](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/f730068274d6d4a60615571539243c0c32bef935/app/workers/zuora_callback_worker.rb#L63) in the `ZuoraCallbackWorker` if the result was successful.

You can find details about the order status endpoint in https://gitlab.com/gitlab-com/business-technology/enterprise-apps/integrations/platypus/-/issues/226.",2
109052935,2022-05-24 17:30:36.483,Remove orders_harmonization feature flag,"### Background

Orders Harmonization was enabled in Zuora Production on 2022-05-20.  More information available in https://gitlab.com/gitlab-com/business-technology/enterprise-apps/intake/-/issues/616.

As part of that enablement, the `orders_harmonization` feature flag was enabled in CustomersDot production.  The rollout issue has all the steps that were involved: https://gitlab.com/gitlab-org/gitlab/-/issues/345026.

### Proposal

Now that [the `orders_harmonization` feature flag](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/104/edit) has been enabled and stable for a few days, we should be safe to promote the feature flag code and remove the feature flag conditionals.  We can update [the rollout issue](https://gitlab.com/gitlab-org/gitlab/-/issues/345026#release-the-feature) once this is complete.",1
124047756,2023-02-21 10:29:10.856,Add Change linked namespace specific tracking,"### Problem

Currently we are tracking clicks on subscription card buttons. This shows a general interest on features but doesn't reflect that user wants to actually do this action.

### Proposal

Update the existing tracking for subscription card buttons and add tracking to the actual pages.

Attention: some tracking **is already implemented**, we would just need to update the event labels & actions.

#### Change linked namespace

For all the tracking events set `event_label` as `change_namespace` (as this is only possible for SaaS)

| FE/BE | Page | Description | Event category | Event action |
| ------ | ------ | ------ |  ------ | ------ |
|FE| `/subscriptions/` | ![Screenshot_2022-11-15_at_21.52.22](/uploads/b35cf5e85e12b5adba68e12f7fc59d20/Screenshot_2022-11-15_at_21.52.22.png) <br> User clicks `Change linked namespace` button <br>  | Webstore | `click_card` |
|FE| `subscriptions/A-S000XXX/edit?transaction=change_gitlab_group` | ![Screenshot_2022-11-15_at_21.53.19](/uploads/259228b6486cdee55f971efab5b69ed1/Screenshot_2022-11-15_at_21.53.19.png) <br> User clicks `Confirm changes` button <br>  | Webstore | `click_change` |
|BE| - | Transaction is successful  | SubscriptionsController | `transaction_successful` |
|BE| - | Transaction has failed  | SubscriptionsController | `transaction_failed` |

### Next steps (if any)

After the issue is done please let `@nraisinghani` know because we need to update the values in the related dashboard.",2
124047744,2023-02-21 10:28:51.755,Add Upgrade subscription specific tracking,"### Problem

Currently we are tracking clicks on subscription card buttons. This shows a general interest on features but doesn't reflect that user wants to actually do this action.

### Proposal

Update the existing tracking for subscription card buttons and add tracking to the actual pages.

Attention: some tracking **is already implemented**, we would just need to update the event labels & actions.

#### Upgrade subscription

For all the tracking events set `event_label` as `upgrade_subscription_sm` / `upgrade_subscription_saas`

| FE/BE | Page | Description | Event category | Event action |
| ------ | ------ | ------ |  ------ | ------ |
|FE| `/subscriptions/` | ![Screenshot_2022-11-15_at_21.47.33](/uploads/d9ab9aba855fb2965bb4b62115a4cb7c/Screenshot_2022-11-15_at_21.47.33.png) <br> User clicks `Upgrade plan` button <br>  | Webstore | `click_card` |
|FE| `subscriptions/A-S000XXX/upgrade/new` | ![Screenshot_2022-11-15_at_21.48.54](/uploads/b3acb618f4748398f2c2460abbf8c648/Screenshot_2022-11-15_at_21.48.54.png) <br> User clicks `Upgrade subscription` button <br>  | Webstore | `click_upgrade` |
|BE| - | Transaction is successful  | SubscriptionUpgradesController | `transaction_successful` |
|BE| - | Transaction has failed  | SubscriptionUpgradesController | `transaction_failed` |

### Next steps (if any)

After the issue is done please let `@nraisinghani` know because we need to update the values in the related dashboard.",2
124047730,2023-02-21 10:28:31.925,Add Seats addition specific tracking,"### Problem

Currently we are tracking clicks on subscription card buttons. This shows a general interest on features but doesn't reflect that user wants to actually do this action.

### Proposal

Update the existing tracking for subscription card buttons and add tracking to the actual pages.

Attention: some tracking **is already implemented**, we would just need to update the event labels & actions.

#### Add seats

For all the tracking events set `event_label` as `add_seats_sm` / `add_seats_saas`

| FE/BE | Page | Description | Event category | Event action |
| ------ | ------ | ------ |  ------ | ------ |
|FE| `/subscriptions/` | ![Screenshot_2022-11-10_at_17.09.54](/uploads/0a7e4ecc4875f685dfa4ff1ba4388685/Screenshot_2022-11-10_at_17.09.54.png) <br> User clicks `Add seats` button <br>  | Webstore | `click_card` |
|FE| `/subscriptions/A-S000XXX/edit?transaction=extra_seats` | ![Screenshot_2022-11-10_at_13.49.05](/uploads/1d1c60f4c4ffb67150ed5594a089f7dc/Screenshot_2022-11-10_at_13.49.05.png) <br> User clicks `Purchase seats` button <br>  | Webstore | `click_purchase_seats ` |
|BE| - | Transaction is successful  | SubscriptionsController | `transaction_successful` |
|BE| - | Transaction has failed  | SubscriptionsController | `transaction_failed` |

### Next steps (if any)

After the issue is done please let `@nraisinghani` know because we need to update the values in the related dashboard.",2
124047697,2023-02-21 10:28:04.833,Add Renew subscription specific tracking,"### Problem

Currently we are tracking clicks on subscription card buttons. This shows a general interest on features but doesn't reflect that user wants to actually do this action.

### Proposal

Update the existing tracking for subscription card buttons and add tracking to the actual pages.

Attention: some tracking **is already implemented**, we would just need to update the event labels & actions.

#### Renew subscription

For all the tracking events set `event_label` as `renew_subscription_sm` / `renew_subscription_saas`

| FE/BE | Page | Description | Event category | Event action |
| ------ | ------ | ------ |  ------ | ------ |
|FE| `/subscriptions/` | ![Screenshot_2022-11-15_at_22.01.05](/uploads/6bc6932c2dadfdad86e4f4a1c3b2e56e/Screenshot_2022-11-15_at_22.01.05.png) <br> User clicks `Renew` button <br>  | Webstore | `click_card` |
|FE| `subscriptions/A-S000XXX/renew` | ![Screenshot_2022-11-15_at_22.00.21](/uploads/55ed2e88661428ed5f8351bb83340bba/Screenshot_2022-11-15_at_22.00.21.png) <br> User clicks `Renew subscription` button <br>  | Webstore | `click_renew` |
|BE| - | Transaction is successful  | SubscriptionsController | `transaction_successful` |
|BE| - | Transaction has failed  | SubscriptionsController | `transaction_failed` |

### Next steps (if any)

After the issue is done please let `@nraisinghani` know because we need to update the values in the related dashboard.",2
123966908,2023-02-20 03:46:06.327,Create CloudActivation specialized license,"### Proposal

Add ability to create a license which is associated with a single `CloudActivation`.

1. Add a `license_id` foreign key in `cloud_activations` which can be null
2. Add has_many association in `CloudActivation` class",1
123903344,2023-02-17 22:33:44.969,Remove log for 'Received more than one charge item',"This log is firing for valid charges. Remove the log to avoid extra noise.

https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/4099714/?referrer=gitlab_plugin

```
Received more than one charge item
```",1
123862962,2023-02-17 09:02:34.258,Add professional-services as productSubType in product presenter,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
We need a new type of [`productSubType`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/cb55ed711546c9e13306bc7333f683265a33ab70/app/presenters/product_presenter.rb#L41-51) in `product_presenter.rb` to identify professional services products. This is needed to [display professional services products](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5665/) in the new ramps subscriptions card in Customers Portal.

### Proposal
Add new `productSubType` to identify professional services.

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",2
123834781,2023-02-16 18:54:11.522,"Follow-up from ""Admin: Add ability to create Billing Account""","The following discussion from !6500 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6500#note_1280463491):  (+3 comments)

    > **Thought (non-blocking):** This approach totally works, but it's unfortunate that ActiveAdmin doesn't allow it to be more extensible without duplicating so much code. I'm curious if we could avoid the duplication if we used a virtual attribute and extract some of the custom logic into the model.  We've done similar things for Customer admin before ([example](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/c51a1cff53972ad740ac8cbb021188efd109f0ab/app/models/customer.rb#L75)).  That solution isn't elegant either but might avoid duplicating the boilerplate.
    > 
    > Just a thought, and definitely could be considered in a follow-up, if you think it's worth it.",2
123833213,2023-02-16 18:12:51.052,Flaky test failures in community_program_renew_purchase_spec.rb,"### Problem

I frequently seen the `rspec-zuora` job fail because of one test failure in `spec/features/subscriptions/community_program_renew_purchase_spec.rb`.  Typically, the job passes on retry, but it's an inconvenience, especially when it requires a merge train retry by a maintainer.  It also wastes pipeline resources and ultimately increases costs.  For reference, this spec was introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4633+.

I went through a few pages of [pipelines](https://gitlab.com/gitlab-org/customers-gitlab-com/-/pipelines) and quickly found a number of failures because of this spec.

Examples of job failures:
- https://gitlab.com/gitlab-org/customers-gitlab-com/-/jobs/3784238665
- https://gitlab.com/gitlab-org/customers-gitlab-com/-/jobs/3782904859
- https://gitlab.com/gitlab-org/customers-gitlab-com/-/jobs/3782569469
- https://gitlab.com/gitlab-org/customers-gitlab-com/-/jobs/3779860534

<details><summary>Click to expand</summary>

```
  1) Community Program - Renewals when accessing community program landing page when customer has a self-managed subscription successfully renews subscription
     Failure/Error: ::IronBank.client.connection.post(url, *args)
     VCR::Errors::UnhandledHTTPRequestError:
       ================================================================================
       An HTTP request has been made that VCR does not know how to handle:
         POST https://rest.apisandbox.zuora.com/v1/orders/preview
       VCR is currently using the following cassette:
         - /builds/gitlab-org/customers-gitlab-com/spec/fixtures/vcr_cassettes/community_program_-_renewals/when_accessing_community_program_landing_page/when_customer_has_a_self-managed_subscription/successfully_renews_subscription.yml
           - :record => :none
           - :match_requests_on => [:zuora]
       Under the current configuration VCR can not find a suitable HTTP interaction
       to replay and is prevented from recording new requests. There are a few ways
       you can deal with this:
         * If you're surprised VCR is raising this error
           and want insight about how VCR attempted to handle the request,
           you can use the debug_logger configuration option to log more details [1].
         * You can use the :new_episodes record mode to allow VCR to
           record this new request to the existing cassette [2].
         * If you want VCR to ignore this request (and others like it), you can
           set an `ignore_request` callback [3].
         * The current record mode (:none) does not allow requests to be recorded. You
           can temporarily change the record mode to :once, delete the cassette file 
           and re-run your tests to allow the cassette to be recorded with this request [4].
         * The cassette contains 42 HTTP interactions that have not been
           played back. If your request is non-deterministic, you may need to
           change your :match_requests_on cassette option to be more lenient
           or use a custom request matcher to allow it to match [5].
       [1] https://www.relishapp.com/vcr/vcr/v/6-1-0/docs/configuration/debug-logging
       [2] https://www.relishapp.com/vcr/vcr/v/6-1-0/docs/record-modes/new-episodes
       [3] https://www.relishapp.com/vcr/vcr/v/6-1-0/docs/configuration/ignore-request
       [4] https://www.relishapp.com/vcr/vcr/v/6-1-0/docs/record-modes/none
       [5] https://www.relishapp.com/vcr/vcr/v/6-1-0/docs/request-matching
       ================================================================================
     Shared Example Group: ""subscription renewal"" called from ./spec/features/subscriptions/community_program_renew_purchase_spec.rb:59
     # ./spec/fixtures/vcr_cassettes/community_program_-_renewals/when_accessing_community_program_landing_page/when_customer_has_a_self-managed_subscription/successfully_renews_subscription.yml <- from VCR cassette
     # ./lib/gitlab/iron_bank.rb:14:in `post'
     # ./lib/zuora/client/orders_preview.rb:16:in `create'
     # ./lib/zuora/client/orders_preview.rb:11:in `get'
     # ./app/jobs/zuora/orders/preview.rb:7:in `perform'
     # ./app/services/zuora/orders/preview_service.rb:20:in `execute'
     # ./app/services/zuora/orders/preview_service.rb:14:in `execute'
     # ./app/services/zuora/orders/order_manager_service.rb:38:in `preview_result'
     # ./app/services/zuora/orders/order_manager_service.rb:20:in `execute'
     # ./app/services/zuora/orders/order_manager_service.rb:16:in `execute'
     # ./app/services/zuora/orders/amendment_manager_service.rb:53:in `block in order_result'
     # ./lib/utils/strong_memoize.rb:27:in `strong_memoize'
     # ./app/services/zuora/orders/amendment_manager_service.rb:52:in `order_result'
     # ./app/services/zuora/orders/amendment_manager_service.rb:25:in `execute'
     # ./app/services/zuora/orders/amendment_manager_service.rb:10:in `execute'
     # ./app/services/self_service/subscriptions/update_service.rb:134:in `update_zuora_objects'
     # ./app/services/self_service/subscriptions/update_service.rb:46:in `execute'
     # ./app/controllers/subscriptions_controller.rb:88:in `update'
     # ./lib/middleware/maintenance.rb:28:in `call'
     # ./lib/middleware/health_check/health_check_responder.rb:14:in `call'
     # ------------------
     # --- Caused by: ---
     # Capybara::ExpectationNotMet:
     #   expected to find visible css ""h2"" with text ""Subscription created successfully!"" but there were no matches. Also found ""GitLab for Education Program - Self-managed Ultimate"", which matched the selector but not all filters. 
     #   ./spec/features/subscriptions/community_program_renew_purchase_spec.rb:41:in `block (4 levels) in <top (required)>'
```

```
  1) Community Program - Renewals when accessing community program landing page when customer has a self-managed subscription successfully renews subscription
     Failure/Error: ::IronBank.client.connection.post(url, *args)
     VCR::Errors::UnhandledHTTPRequestError:
       ================================================================================
       An HTTP request has been made that VCR does not know how to handle:
         POST https://rest.apisandbox.zuora.com/v1/orders/preview
       VCR is currently using the following cassette:
         - /builds/gitlab-org/customers-gitlab-com/spec/fixtures/vcr_cassettes/community_program_-_renewals/when_accessing_community_program_landing_page/when_customer_has_a_self-managed_subscription/successfully_renews_subscription.yml
           - :record => :none
           - :match_requests_on => [:zuora]
       Under the current configuration VCR can not find a suitable HTTP interaction
       to replay and is prevented from recording new requests. There are a few ways
       you can deal with this:
         * If you're surprised VCR is raising this error
           and want insight about how VCR attempted to handle the request,
           you can use the debug_logger configuration option to log more details [1].
         * You can use the :new_episodes record mode to allow VCR to
           record this new request to the existing cassette [2].
         * If you want VCR to ignore this request (and others like it), you can
           set an `ignore_request` callback [3].
         * The current record mode (:none) does not allow requests to be recorded. You
           can temporarily change the record mode to :once, delete the cassette file 
           and re-run your tests to allow the cassette to be recorded with this request [4].
         * The cassette contains 42 HTTP interactions that have not been
           played back. If your request is non-deterministic, you may need to
           change your :match_requests_on cassette option to be more lenient
           or use a custom request matcher to allow it to match [5].
       [1] https://www.relishapp.com/vcr/vcr/v/6-1-0/docs/configuration/debug-logging
       [2] https://www.relishapp.com/vcr/vcr/v/6-1-0/docs/record-modes/new-episodes
       [3] https://www.relishapp.com/vcr/vcr/v/6-1-0/docs/configuration/ignore-request
       [4] https://www.relishapp.com/vcr/vcr/v/6-1-0/docs/record-modes/none
       [5] https://www.relishapp.com/vcr/vcr/v/6-1-0/docs/request-matching
       ================================================================================
     Shared Example Group: ""subscription renewal"" called from ./spec/features/subscriptions/community_program_renew_purchase_spec.rb:59
     # ./spec/fixtures/vcr_cassettes/community_program_-_renewals/when_accessing_community_program_landing_page/when_customer_has_a_self-managed_subscription/successfully_renews_subscription.yml <- from VCR cassette
     # ./lib/gitlab/iron_bank.rb:14:in `post'
     # ./lib/zuora/client/orders_preview.rb:16:in `create'
     # ./lib/zuora/client/orders_preview.rb:11:in `get'
     # ./app/jobs/zuora/orders/preview.rb:7:in `perform'
     # ./app/services/zuora/orders/preview_service.rb:20:in `execute'
     # ./app/services/zuora/orders/preview_service.rb:14:in `execute'
     # ./app/services/zuora/orders/order_manager_service.rb:38:in `preview_result'
     # ./app/services/zuora/orders/order_manager_service.rb:20:in `execute'
     # ./app/services/zuora/orders/order_manager_service.rb:16:in `execute'
     # ./app/services/zuora/orders/amendment_manager_service.rb:53:in `block in order_result'
     # ./lib/utils/strong_memoize.rb:27:in `strong_memoize'
     # ./app/services/zuora/orders/amendment_manager_service.rb:52:in `order_result'
     # ./app/services/zuora/orders/amendment_manager_service.rb:25:in `execute'
     # ./app/services/zuora/orders/amendment_manager_service.rb:10:in `execute'
     # ./app/services/self_service/subscriptions/update_service.rb:134:in `update_zuora_objects'
     # ./app/services/self_service/subscriptions/update_service.rb:46:in `execute'
     # ./app/controllers/subscriptions_controller.rb:88:in `update'
     # ./lib/middleware/maintenance.rb:28:in `call'
     # ./lib/middleware/health_check/health_check_responder.rb:14:in `call'
     # ------------------
     # --- Caused by: ---
     # Capybara::ExpectationNotMet:
     #   expected to find visible css ""h2"" with text ""Subscription created successfully!"" but there were no matches. Also found ""GitLab for Education Program - Self-managed Ultimate"", which matched the selector but not all filters. 
     #   ./spec/features/subscriptions/community_program_renew_purchase_spec.rb:41:in `block (4 levels) in <top (required)>'
Finished in 5 minutes 30 seconds (files took 19.03 seconds to load)
945 examples, 1 failure
Failed examples:
rspec './spec/features/subscriptions/community_program_renew_purchase_spec.rb[1:1:1:1]' # Community Program - Renewals when accessing community program landing page when customer has a self-managed subscription successfully renews subscription
```

</details>

### Proposal

Let's figure out what is making this spec flaky and fix it. :pray:",1
123832987,2023-02-16 18:07:26.537,Admin UI colour contrast is not high enough,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you're about to submit isn't a duplicate.

Do not include confidential information!
--->

# Bug

## Summary

Many of the team members who use the admin part of CustomersDot are having difficulty using the new UI.

## Steps to reproduce

1. Take a screenshot and change it to black and white.
1. Or, check the colour contrast of the colours.

Example:

![image](/uploads/209a7ca4dca6be72f1f1967af54c0443/image.png)

The inactive menu items are 2.63:1 colour contrast ratio.

## What is the current *bug* behavior?

It's difficult to read the text. Even more so for someone who is partially or fully colour blind.

It also goes against our guidelines, and legislation in most countries.

## What is the expected *correct* behavior?

Colours should follow Pajamas: https://design.gitlab.com/product-foundations/color

including the colour contrast guideline: https://design.gitlab.com/product-foundations/color#accessibility",1
123823782,2023-02-16 16:26:27.564,Check for new occurrences of BillingAccounts without salesforce_account_id,"### Background

In https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5695, we introduced a rake task to set `salesforce_account_id` for any BillingAccounts where it was missing.  After running this in production, we found that 70 records were still has `nil` for a `salesforce_account_id` value. 

### Proposal

Let's check back about a month after the rake task mentioned above was run, so around 2023-03-10, to see if there are any new occurrences of BillingAccounts without `salesforce_account_id`.  We could also run the rake task again to see if any of the 70 accounts could now be updated.

If there are new occurrences, we might have a larger issue that needs to be addressed.",1
123755479,2023-02-15 21:23:34.600,Ramps UAT: Provision Testing in Staging,"## Summary
The EntApps team is conducting end-to-end UAT of Zuora Ramps prior to implementation (expected Feb 1, 2023). This issue will be used to track UAT efforts of ~""group::provision"" to validate all test cases sent over as part of this effort are provisioning properly. Latest planned Fulfillment UAT is planned for 2023.03.21 to 2023.03.23.

More details can be found in the EntApps related issue: https://gitlab.com/gitlab-com/business-technology/enterprise-apps/financeops/finance-systems/-/issues/1051

## Test Cases
[Test Scripts/Use Cases](https://docs.google.com/spreadsheets/d/1xmdJ6ToiCyFNtqjrNPvwcGR7gCvkskjLnZXwAzEMT40/edit#gid=0)

* Fulfillment will be using the master UAT tab to validate Ramp use cases only, which will be sent over by Deal Desk/Billing teams.
* Testing will be completed in the staging environment.


## Result
Sign-off from ~""group::provision"" that all use cases work properly in CustomersDot and we are comfortable with proceeding with production deployment - _to be provided via [checkbox](https://gitlab.com/groups/gitlab-com/business-technology/enterprise-apps/-/epics/478#testing-signoff)_",3
123729828,2023-02-15 13:21:48.192,Verify subscriptions created during UAT of ramps subscriptions,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
Based on this [suggestion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5384#note_1278260308), we could verify the subscriptions that get created in staging as a part of the [EntApp UAT](https://docs.google.com/spreadsheets/d/1xmdJ6ToiCyFNtqjrNPvwcGR7gCvkskjLnZXwAzEMT40/edit#gid=691079497).

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",2
123711407,2023-02-15 08:51:10.325,Unable to find subscription in CreateOrderService,"# Bug

## Summary

`ZuoraCallbackWorker` calls `CreateOrderService`, but sometimes that would fail and raise ""Unable to find subscription"" error. Since order can not be obtained, the provisioning will be skipped.

## What is the current *bug* behavior?

* SaaS provision does not occur
* renewal introduction email not sent

## What is the expected *correct* behavior?

`CreateOrderService` can find the subscription and order, and provision can occur.

## Relevant logs and/or screenshots

https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/3869825/events/1d3126b1dfeb4cd483e466887eb4fa08/

```
RuntimeError: Error when processing subscription: A-S00039151. Unable to find subscription.
  app/services/create_order_service.rb:49:in `load_subscription'
    raise ""Error when processing subscription: #{params[:subscription_name]}. #{extra_error}""
  app/services/create_order_service.rb:17:in `execute'
    load_subscription
  app/workers/zuora_callout/base_worker.rb:72:in `create_order'
    .execute(subscription_name: subscription.name, amendment_types: amendment_types)
  app/workers/zuora_callback_worker.rb:40:in `perform'
    result = create_order
```

## Workarounds

N/A

## Reported examples

Sentry currently has 8 examples.",5
123695101,2023-02-15 01:02:06.036,Enhance SeatsUsagePresenter to validate subscription.main_product,"From MR discussion https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6511#note_1278836726

In case of order.subscription does not have `main_product`, the SeatsUsagePresenter will be in some unexpected behaviour.

We could enhance the `SeatsUsagePresenter` to validate `subscription.main_product`. This could be a simple check in initializer:
```
  def initialize(order:, customer:, seat_link: nil)
    @order = order
    @seat_link = seat_link
    @customer = customer
    @subscription = @order.subscription_on(Date.current - 1.day) # or whatever we decided
    raise ArgumentError, 'Order has no subscription' unless subscription
    raise ArgumentError, 'Order subscription has no main_product' unless subscription.main_product

    @monthly_seat_digest_notification_cutoff = @order.monthly_seat_digest_notified_on || @subscription.term_start_date
  end
```


### Problem

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",1
123677479,2023-02-14 16:26:33.900,Add Grafana dashboard to show new MTTR indicator,"### Proposal

This is the second issue listed in [this issue breakdown](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5582#issue-breakdown).

After being able [to provide new metrics](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5718) tracking when CustomersDot enters and leaves maintenance mode, we now need to update [the Runbooks project](https://gitlab.com/gitlab-com/runbooks) with new dashboards based on this new metric, on the Fulfillment Platform group page.

### Result

Dashboards showing the amount of time CustomersDot Production was in maintenance mode.",3
123665703,2023-02-14 13:32:01.943,Follow-up on writing test for lib/gem_extensions/iron_bank/client.rb,"Write additional tests around logging for `lib/gem_extensions/iron_bank/client.rb`

See original MR for more details: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6493",2
123656285,2023-02-14 12:11:16.741,"Link to group button is shown for CI minutes, storage and expired ramp subscriptions","<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
`Link subscription to group` button is shown in scenarios below for which it should not be shown.

| Scenario | Screenshot |
| ------ | ------ |
|  CI minutes only subscription      | ![image](/uploads/a8f503e0c722fd6c34c096c44d174d8c/image.png)       |
|  Storage only subscription      | ![image](/uploads/b6ffa513231ab68ebd94b0f4a4b932d2/image.png)       |
| Expired subscription | ![image](/uploads/65824d2751c7864d04eab6073fb6dcfc/image.png) |

### Proposal
Add a condition to [`showLinkSubscription`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/a4eaa5d5e73a2e0da9d2d9802409c989e8f648a1/app/frontend/javascripts/subscription/components/subscription_v2/subscription_v2.vue#L119-119) to check for [`!hasExpired`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/a4eaa5d5e73a2e0da9d2d9802409c989e8f648a1/app/frontend/javascripts/subscription/components/subscription_v2/subscription_v2.vue#L124-124) and [`subscription.changeLinkedGroupPath`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/a4eaa5d5e73a2e0da9d2d9802409c989e8f648a1/app/frontend/javascripts/subscription/components/subscription_v2/subscription_v2.vue#L233-233) exists.
<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",2
123621482,2023-02-13 21:53:08.318,Allow Prometheus collection of maintenance events,"### Proposal

This is the first issue listed in [this issue breakdown](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5582#issue-breakdown).

[Our custom Prometheus Collector](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/main/lib/metrics/collector.rb) allows us to collect metrics related to duration of execution of requests (web and api) and Sidekiq jobs, which ultimately leads to the definition of error budgets for the Fulfillment team.

In order to create a new metric that would send amount of time CustomersDot was in maintenance mode:
1. [ ] [the `Metrics::Prometheus::EmitsMetrics` module](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/main/lib/metrics/prometheus/emits_metrics.rb) needs to be included in the HealthCheck cron jobs ([here](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/main/app/jobs/health_check_cron/check_gitlab_job.rb) and [here](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/main/app/jobs/health_check_cron/check_zuora_job.rb)) and [the maintenance rake task](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/main/lib/tasks/maintenance_mode.rake). Related methods such as `prometheus_collector` and `thread_data` will need to be implemented and tailored to jobs and the rake task.
2. [ ] we need to build upon the existing current Collector framework to create a new metric label.
3. [ ] finally, we'll have to capture maintenance events in the rake task and cron jobs.

### Architecture

```mermaid
flowchart TD  
    J[Health cron job in\nSidekiq process 1] --> I[Redis\ngitlab_maintenance_mode: 0 or 1\nzuora_maintenance_mode: 0 or 1\ncustomersdot_maintenance_mode: 0 or 1]
    K[Health cron job in\nSidekiq process 2] --> I[Redis\ngitlab_maintenance_mode: 0 or 1\nzuora_maintenance_mode: 0 or 1\ncustomersdot_maintenance_mode: 0 or 1]
    L[...] --> I[Redis\ngitlab_maintenance_mode: 0 or 1\nzuora_maintenance_mode: 0 or 1\ncustomersdot_maintenance_mode: 0 or 1]
    M[Rake task process for\nmanual maintenance mode] --> I[-- Redis --\ngitlab_maintenance_mode: 0 or 1\nzuora_maintenance_mode: 0 or 1\ncustomersdot_maintenance_mode: 0 or 1]
```

```mermaid
flowchart TD
    P(/metrics) --> N[Prometheus Exporter middleware]
    N[Prometheus Exporter middleware] --> O[1. Collector updates gauges based on values set in Redis\n2. Exporter exposes metrics at '/metrics' endpoint]

```

### Result

The `/metrics` endpoint should serve labels and metrics related to the existing types of CustomersDot maintenance (Gitlab, Zuora or manual).

### Next steps (if any)

Work on the Grafana implementation, directly in the runbooks project. See [this issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5725) for more details.",5
123620988,2023-02-13 21:40:30.447,Link to CDot from Version App should use BillingAccount instead of Customer,"### Problem

The [version.gitlab.com application](https://gitlab.com/gitlab-services/version-gitlab-com) links to a Customer show page in CDot Admin from its Hosts index page.  [This is where the link is generated](https://gitlab.com/gitlab-services/version-gitlab-com/-/blob/master/app/helpers/current_host_stats_helper.rb#L69) in the Version App.  There is a [secret configured](https://gitlab.com/gitlab-services/version-gitlab-com/-/blob/master/config/secrets.yml#L15) for `customers_admin_url` that uses the value `http://localhost:5000/admin/customer`.

With the change to using the new BillingAccount data structure, the real `salesforce_account_id` column exists on BillingAccount.  This column still exists on `Customer` but should no longer be used and will be removed in the future.

Note: The link from VersionApp to CDot works because the customer URL uses the `salesforce_account_id` (e.g. `http://localhost:5000/admin/customer/00164000010c3XFABY`).  This lookup works in RailsAdmin because of [this code](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/4ae39fa629f11d88d5575837412df990e624b9a5/config/initializers/rails_admin.rb#L160) in the initializer.

**UPDATE:** We [realized a problem with the original solution](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6527#note_1278726123). If there are multiple Customers (and now BillingAccounts) with the same `salesforce_account_id`, this lookup logic picks the first record which could be misleading for Admins linking from VersionApp.

### Proposal

The link in VersionApp should be updated to direct Admins to the BillingAccount instead of a Customer.  Also, the link should go to the BillingAccount list page with the salesforce_account_id prefilled in the search to avoid any confusion mentioned above.

There are a couple of changes that are necessary to make this happen.

1. [x] Update version-gitlab-com app code to point to the BillingAccount search page (e.g. `https://customers.staging.gitlab.com/admin/billing_account?&model_name=billing_account&query=0017400000DGjddAAD`).  This will require an update to [the secrets file](https://gitlab.com/gitlab-services/version-gitlab-com/-/blob/master/config/secrets.yml#L15).  For production, this may need to be updated via a secrets vault.
   - https://gitlab.com/gitlab-services/version-gitlab-com/-/merge_requests/726
1. [x] The RailsAdmin initializer overrides the lookup adapter to allow `salesforce_account_id` to be used as id.  This override logic will no longer be necessary when the change to Version App above is merged/deployed.
   - https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6527",2
123620091,2023-02-13 21:27:11.138,Create new model to track maintenance mode events,"### Proposal

This is the first issue listed in [this issue breakdown](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5582#issue-breakdown).

We need to record information related to events when CustomersDot enters and leaves maintenance mode.

Even though such information will be sent to Prometheus as a metric (more infor in [related issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5582)) and therefore we don't need long-term persistence, we still need to be able to record the event (maintenance) start time. This cannot be achieved through Rails caching or through some sort of global variable as a Puma restart might happen during a maintenance.

This issue tracks efforts towards the creation of such model.

### Result

A very small table with one row per type of maintenance:
- maintenance triggered because GitLab is not reachable
- maintenance triggered because Zuora is not reachable
- maintenance mode triggered manually (through the `customers:maintenance_mode` rake task)

### Next steps (if any)

Next issue listed in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5582#issue-breakdown",2
123568114,2023-02-13 06:46:10.955,Incorrect purchase date shown for CI minutes and true up products in ramp subscription,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
Currently the CI minutes and true-up product sections show the `startDate` value in the `Purchase date` column which is incorrect. It should instead be showing `createdAt` value.  

![image](/uploads/2f648069155b021e357a79aef64447f2/image.png)  
![image](/uploads/a1f5c0c47a513a44f3bbba12367f4560/image.png)

### Proposal
Show the displayed value from the `createdAt` field.

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result
Correct value from `createdAt` field should be shown in `Purchase date` column.

### Next steps (if any)

### How will we measure success?",1
123534060,2023-02-12 00:19:38.799,"Refactor dotcom_subscription_renew_form subtotal, discount, and tax into their own component","
### Problem
The [dotcom_renew](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/d5063afcd856447e8e68e343b915ddf1a0ec5628/app/frontend/javascripts/subscription/components/dotcom_subscription_renew_form.vue#L370) subtotal, discount, and tax components bloat the template by being listed separately, especially since the values are related.

### Proposal
Since these items share styling behavior and live in their own ""section"", split them into their own grouped component to improve testing story and reduce the template complexity. Also reuse these components across the SaaS (`dotcom_subscription_renew_form.vue`) and SM (`subscription_renew_form.vue`) components if feasible.

Add tests for the newly introduced component to verify both the existence of the headers as well as the amounts.",2
123480016,2023-02-10 14:38:08.107,Promote `account_data_structure` feature and remove feature flag checks,"### Background

As noted in [the feature flag rollout issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4867), the `account_data_structure` feature flag has been enabled in all environments.  It was [enabled in Production on Monday, 2023-02-06](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4867#note_1267484731).  We haven't noticed any major issues so far that have required disabling the feature flag and we will continue to monitor it.

### Proposal

If after a week (anytime after 2023-02-13), the feature flag is still stable, we should feel comfortable promoting the `account_data_structure` feature flag and removing the legacy code and conditions from the application code.

While removing the feature flag checks, we may encounter opportunities to refactor and simplifying existing logic.",5
123374908,2023-02-09 14:30:04.918,Sync billing accounts without salesforce id,"### Problem

We need to make sure that the `BillingAccount#salesforce_account_id` is always set to the Zuora account `crm_id`.

It is OK to have blank `salesforce_account_ids` as long as the values for these in Zuora are also blank. [Reference - external](https://gitlab.slack.com/archives/C037WQ2BUGK/p1675884549880319?thread_ts=1675801765.250799&cid=C037WQ2BUGK)

> There are some valid use cases where a Zuora Billing Account does not have an SFDC CRM ID - when we switch entity, we want to use the new Billing Account, the Account is in Zuora for non-sales reasons (such as marketing), etc.

We currently have occurrences of `BillingAccount#salesforce_account_id` [being blank on our end and not in Zuora](https://customers.gitlab.com/admin/billing_account/1284). This looks like an old billing account that might have been created before the `UpdateBillingAccountService` was [updated](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6078/diffs) to set the `salesforce_account_id` attribute.

### Proposal

- [x] Write a task that will sync the `BillingAccount` records that have `salesforce_account_id` set to `nil` (aprox. 1950): https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6491
- [x] Execute task in production
- [ ] [Once the task is executed] Create and own a small issue to periodically monitor new occurrences through the next month (hopefully none)

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",2
123324249,2023-02-08 20:28:24.186,Link to Zuora Account from the Billing Account CDot Admin pages,"### Problem

The BillingAccount list and show pages in CDot admin currently show a Zuora Account ID but without a link to the Zuora Account page.  It would be more convenient to have a link instead of forcing Admins to copy and paste this into Zuora.

### Proposal

Update the CDot Admin page for BillingAccounts to include a link to the Zuora Account.",1
123241163,2023-02-07 19:09:46.768,Add `zuora_account_number` and `zuora_entity` to BillingAccount,"### Problem

We've found there are scenarios where it is useful to be able to distinguish between two BillingAccounts that have the same name.  In https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5687, we want to show the Zuora Account Number in addition to the Name in some CDot Admin pages.

We also found that it would be useful to show BillingAccount Entity as well.  While we are adding Account Number, we can include Entity as well.

### Proposal

Let's add the Zuora Account Number and Entity to the fields cached from Zuora on BillingAccount.  This will involve a few changes:

1. [x] - Engage the Finsys team via an issue (e.g. https://gitlab.com/gitlab-com/business-technology/enterprise-apps/financeops/finance-systems/-/issues/886) to update the existing ""Account Update"" Custom Event in Zuora to include changes to the `Account Number` and `Entity` fields.  I don't believe the Callout Notification will need to be updated as we only need the Account ID which is already in place.
   - https://gitlab.com/gitlab-com/business-technology/enterprise-apps/financeops/finance-systems/-/issues/1126
1. [x] - Add columns `zuora_account_number` and `zuora_entity` to the `billing_accounts` table in CDot.
1. [x] - Update the Billing Account / Zuora Account syncing logic in CDot
   - [in the `BillingAccount` model](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/fef84cce0f4a2600f7591105eb68596462e108b1/app/models/billing_account.rb#L25)
   - [in the `UpdateBillingAccountService`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/fef84cce0f4a2600f7591105eb68596462e108b1/app/services/customers/update_billing_account_service.rb#L50))
1. [x] - Update documentation
   - [data_architecture.md](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/83a95b12efd44ce00ea03d26e3c953a310d8228f/doc/architecture/data_architecture.md#L90)
   - [zuora_callouts.md](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/1ba32625852d05582e328e3b2f46e4df7e335d2f/doc/zuora/zuora_callouts.md#L295)
1. [x] - Add `Account Number` and `Entity` to Billing Account pages (list, show) in CDot Admin
1. [x] - Create and run rake task to backfill `zuora_account_number` and `zuora_entity` for existing BillingAccounts",3
123237564,2023-02-07 17:57:08.626,Add Zuora Account Number to BillingAccountMembership display in CDot Admin,"## Problem

If admins search for a `Billing Account` in the `Billing Account Membership` section of CDot admin, it can happen that multiple `Billing Accounts` with the same name appear. 

This makes it hard for the admin to identify the desired Billing Account.

Related [Slack thread](https://gitlab.slack.com/archives/C018C623KBJ/p1675744969835379?thread_ts=1675743272.802499&cid=C018C623KBJ)

Screenshot of current display:
![image](/uploads/8c37f052b887bad8c380e3ecdae89029/image.png)

## Proposal

Display the Zuora Account Number (as displayed in `Billing Accounts`) in the Billing Account Membership search result list.

## Result

Admins are able to distinct and  identify the right `Billing Account` faster in the `Billing Account Membership` search",1
123230328,2023-02-07 16:00:19.632,Query on BillingAccountMemberships Admin list page does not work,"### Problem

As [reported by Support in Slack](https://gitlab.slack.com/archives/C018C623KBJ/p1675748921793539?thread_ts=1675743272.802499&cid=C018C623KBJ), it appears that using the query field on the BillingAccountMemberships page does not work.  Entering any phrase in the input field and pressing enter, returns all results.  It appears the `query` param is coming through to the Rails Admin controller but isn't being used to filter results.

Excerpt from my local server output:

```
Started GET ""/admin/billing_account_membership?model_name=billing_account_membership&query=Sam&_pjax=%5Bdata-pjax-container%5D"" for ::1 at 2023-02-07 10:54:52 -0500
...
Processing by RailsAdmin::MainController#index as HTML
  Parameters: {""model_name""=>""billing_account_membership"", ""query""=>""Sam"", ""_pjax""=>""[data-pjax-container]""}
...
  BillingAccountMembership Load (1.0ms)  SELECT ""billing_account_memberships"".* FROM ""billing_account_memberships"" ORDER BY billing_account_memberships.id desc LIMIT $1 OFFSET $2  [[""LIMIT"", 20], [""OFFSET"", 0]]
```

### Proposal

Fix the search so that Admins can search by the name of the Customer or Billing Account on this page.",1
123193282,2023-02-07 11:22:38.141,Refactor Order manager service methods to a class method,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Follow-up from https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4477, where order related services were refactored to use class methods.

`OrderManagerService` was not refactored due to this [blocker](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4477#note_1033959684).

Now that `check_availability` has been [removed](https://gitlab.com/gitlab-org/customers-gitlab-com/-/commit/01ff48be53339c51832d6909b5263dd9642a7fda), we can refactor `OrderManagerService` to use class methods.",1
123160997,2023-02-06 22:44:15.379,Improve SubscriptionV2 component accessibility,"
### Proposal
~~Wrap cards in `<article>` tag. Use [`<articles>`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/article_role) for the SubscriptionV2 cards for better semantic separation, per [suggestion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5615#note_1263050161) from `@kpalchyk`~~ Edit: This suggestion may require further R&D based on this [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5615#note_1322266443).

Also make base_product_details_v2 a `<section>` for improved accessibility.

Evaluate if any other components in the v2 directory need improvements, and create a new follow up issue that encompasses those.",1
123157047,2023-02-06 20:57:36.036,Improve usability from Customer show page in Admin interface,"### Problem

With the `account_data_structure` flag enabled, @jcolyer noted that it now takes mulitple steps to trace a particular Customer to their SFDC Account ID.  This data used to be present directly on the Customer show page in the CDot Admin interface.  Now, an Admin must click a link to the BillingAccountMembership, then click another link to the BillingAccount.  From here, they can see the Salesforce Account ID.

<details><summary>Current Flow</summary>

![Screenshot_2023-02-06_at_3.53.27_PM](/uploads/139fe629b90dbe88a283f0685a68d576/Screenshot_2023-02-06_at_3.53.27_PM.png)

:arrow_heading_down: 

![Screenshot_2023-02-06_at_3.53.32_PM](/uploads/3525b85eba4ddf92c83f36e4962e4dca/Screenshot_2023-02-06_at_3.53.32_PM.png)

:arrow_heading_down: 

![Screenshot_2023-02-06_at_3.53.41_PM](/uploads/83410daf122aa9331e3ef88cadddb1f1/Screenshot_2023-02-06_at_3.53.41_PM.png)

</details>

### Proposal

Let's try to improve this workflow. At the very least we could update the RailsAdmin config for Customers to include a section for BillingAccounts so that an Admin could link directly to the BillingAccount from the Customer show page.",1
123016800,2023-02-03 16:36:36.529,Admin ability to view Bill To/Sold To Zuora Contact data,"### Problem

Currently CDot Admins have no visibility into the Bill To or Sold To Contacts associated with a Billing Account.  This must be managed directly in the Zuora UI.  It would be beneficial to the Support team to have management capabilities within the CDot Admin interface.

### Proposal

Add the ability to view Bill To / Sold To Zuora Contact information from the CDot Admin interface.  This could be a page that can be accessed from the Billing Account page.

![Screenshot_2023-02-03_at_11.27.58_AM](/uploads/f7b28bc18a3bc2688ee1dd78c077ed0b/Screenshot_2023-02-03_at_11.27.58_AM.png)

This is an MVC approach and focuses just on showing the Bill To and Sold To Contacts for the Zuora Account associated with the CDot `BillingAccount`.  Keep in mind in a later iteration, we want to allow these Contact records to be edited (e.g. changes made to Zuora).  

#### Notes

- If the Bill To Contact is the same record as Sold To, we could indicate this instead of duplicating the information.
- Fields to show for a Contact record:
  * First Name
  * Last Name
  * Work Email
  * Address 1
  * Address 2
  * City
  * Country
  * State
  * Postal Code",3
123002294,2023-02-03 12:47:10.531,Handle professional services products in ramp subscription card,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
We need to handle display of professional services products in the new ramp subscription card.

### Proposal
Design issue: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5611

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",2
123002187,2023-02-03 12:44:49.464,Handle true up products in ramp subscription card,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
We need to handle display of true-up products in the new ramp subscription card.

### Proposal
Design issue: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5611

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",3
122993333,2023-02-03 10:41:28.727,Investigate shared example usage for ReconciliationService,"### Problem

In https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6453+, a shared example is moved from the `ReconciliationService` specs into a new file. During the review, it was discovered that the shared example isn't used anymore. Its usage was removed as part of https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6254+ where the feature flag `use_orders_api_to_preview_quoted_invoice_amount` was cleaned up. The shared example includes some test coverage for examples that aren't covered outside of the shared example (e.g. [this spec's context](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/f51240cf801b31a9aebb1742ff26fda446a5db82/spec/support/shared_examples/services/reconciliation_service.rb#L343-352)).

### Proposal

Go through the shared example and determine which specs still need to be used to have better test coverage. Use the shared example in the `ReconciliationService` specs if some are needed and remove any that aren't needed anymore.

### Result

Better test coverage if some examples are needed. Otherwise some removed code.",2
122969631,2023-02-02 22:33:24.801,Spike: Create proposal for caching mechanism for BillingAccount  Contacts,"### Problem

We know that Zuora Account Contacts are used frequently in CustomersDot, most importantly the Sold To Contact.  The Sold To Contact is the person who receives licenses or activations codes, or other notifications from CDot.  The Sold To Contact information is also used to find or create CDot Customer record when processing Subscription/Order related callouts from Zuora.

### Proposal

Given their importance, we could consider creating a model for BillingAccount Contacts and caching this data from Zuora in CDot.  This could function similarly to what we've built for `BillingAccount` in that we persist just the data needed for CDot.  

To keep the data in CDot in sync with Zuora, a custom event with its own callout could be created for Contacts.  A [similar custom event and callout mechanism was created for BillingAccounts](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/1ba32625852d05582e328e3b2f46e4df7e335d2f/doc/zuora/zuora_callouts.md#L168) and would serve as a model for this new purpose.  The syncing mechanism for Bill To and Sold To will differ a bit from Billing Account because the bill_to_id and sold_to_id live on the billing_account which we want to keep in sync, but also the contact data itself.

#### Considerations

- Consider whether to cache all Zuora contact information in CDot or just the Bill To and Sold To.  I suspect it will be the latter but worth debate.  
- Contact information is currently help on the `Customer` model for paid customers at the moment.  If we introduce a contact model in CDot, these contact fields on Customer should not be used once the Customer converts to a paid Customer (e.g. has a `BillingAccountMembership`).

### Result

The outcome of this issue should be a proposal for caching billing account contacts in CDot.  Ideally this could be an issue, or set of issues if the work is large enough.  This proposal could be added to the overall [proposal documentation for Bill To / Sold To Contact management](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/doc/architecture/contacts_management_proposal.md).",3
122951725,2023-02-02 15:32:10.008,Your company details form should not trigger syncing Zuora Contacts,"### Problem

We discovered while working on user workflow documentation for https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6226 an unexpected behavior of the `Your company details` form for logged in customers.  You can find more details in [the original thread here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6226#note_1261379713).

> Those 2 forms are separate (e.g. they only submit the params for their own section) despite being submitted to the same API endpoint (PATCH `/customers`), and trigger the same service to update Zuora contacts and accounts.
>
> It looks like that [service won't update the Zuora Account if neither of the 2 attributes](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/9aa9f695d0df918de5ad3697ba4f6321d8258eef/app/services/update_contact_service.rb#L66) (name, vat_id) have changed. However, that same service also [updates the Zuora Contacts](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/9aa9f695d0df918de5ad3697ba4f6321d8258eef/app/services/update_contact_service.rb#L76) and this appears to run regardless of if anything changed, so it will always sync those when called. This means, even when the account section, `Your company details`, is submitted, the contacts are still synced.

![Screenshot_2023-02-02_at_10.21.23_AM](/uploads/2c564550da8fa5f06a5c52476a513cad/Screenshot_2023-02-02_at_10.21.23_AM.png)

### Proposal

The `Your company details` form should only update the Customer company and BillingAccount data in CDot, while syncing to Zuora Account.  Contact data should not be synced with Zuora Contacts as this information should not be changed.  It's an unnecessary syncing step.

The service responsible for the sync with Zuora is [the `UpdateContactService`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/9aa9f695d0df918de5ad3697ba4f6321d8258eef/app/services/update_contact_service.rb#L7).  This service is triggered from the Customer model [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/80b89944453495fbb3ed3f42b105ba91ed2570a9/app/models/customer.rb#L70) in an `after_validation` callback.  We could explore ways to avoid this callback behavior altogether, as it's not ideal, but also rearchitect this service in general.  Here are some ideas:

- Split out the `UpdateContactService` into multiple jobs?  One for Account and another for Contact.  This would allow us to trigger the one that is appropriate based on attributes changed by the form.
- Perform the sync to Zuora in a background job (or jobs) instead so that it doesn't hinder performance, and we'd also benefit from the sidekiq retry mechanism.

It might be easier to wait until https://gitlab.com/groups/gitlab-org/-/epics/8950+ is live so that we can fully rely on the new account data structure for this re-architecture.",5
122928920,2023-02-02 14:07:33.848,Duplicate RatePlanCharges are created for ramp subscriptions in Zuora,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
Duplicate `RatePlanCharges` are created in Zuora when we add different products to a ramp subscription. Since we use `RatePlanCharges` to show ramps in the subscription card design for ramp subscriptions, duplicate rows will be shown to the customer if we show these `RatePlanCharges` without filtering.  

**Currently implemented solution:** Filter out `RatePlanCharges` with `$0 TCV`. 

**Problem with current solution:** The check to filter out `$0 TCV` `RatePlanCharges` feels a bit flimsy and could lead to filtering out of valid `RatePlanCharges` if we do have products in ramp subscriptions in the future which are sold at $0.  
Details in this [thread](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5654#note_1264773352).

Video recording of problem:
![video1463154554](/uploads/79cd34301add07ca84820f4edef96aa7/video1463154554.mp4)

### Proposal
Keep the current `$0 TCV` check for %15.9 release and [research for more robust solutions going forward](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5654#note_1265047333). Get EntApps and Zuora involved in this if needed.

### Updated Proposal
For %""15.10"" as per this suggestion from `@tgolubeva`, we could filter out the duplicate `RatePlanCharges` based on the condition that `EffectiveEndDate` is same as `EffectiveStartDate`.

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",2
122863047,2023-02-01 17:41:39.714,Removal of the ResellerNotificationService,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Once we have completed the work in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5204, all the notifications covered in the [`LicenseNotificationService`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/app/services/license_notification_service.rb) will have a voucher email sent to the SFDC address and a background copy sent to the resellers.

This service currently reports `Invoice for reseller not found` when the subscription does not have an invoice at the time of the notification. However, this not uncommon as reseller managed subscriptions can be billed after provisioning. 

As a result we get a few errors reported each day (see [this example](https://console.cloud.google.com/logs/query;query=%22RuntimeError:%20Invoice%20for%20reseller%20not%20found%22%0Aseverity%3DERROR;timeRange=P1D;cursorTimestamp=2023-02-01T17:13:40.615Z?project=gitlab-subscriptions-prod) at the time of writing) which get reported by the [`ZuoraCallbackWorker`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/2fa4bfb8cb2e472d08a546d271002a433589cdb4/app/workers/zuora_callback_worker.rb#L69) too ([example](https://console.cloud.google.com/logs/query;query=%22Error%20sending%20license%20notification%22%0Aseverity%3DERROR;timeRange=P1D;cursorTimestamp=2023-02-01T17:13:40.619Z?project=gitlab-subscriptions-prod)). This generates a lot of noise to our logs.  


### Proposal

Since the [`ResellerNotificationService`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/app/services/reseller_notification_service.rb) only usage is happening in the `LicenseNotificationService` and it's mostly being noisy at this point, we could remove the service and its usage from the codebase once we validate that resellers are getting the expected vouchers.

### Result

### Next steps (if any)

### How will we measure success?",2
122846452,2023-02-01 13:56:52.537,Reuse confirmation email after CDot admin update,"## Problem

There are currently no guardrails in place when changing the email of a CDot account through the [CDot admin panel](https://customers.staging.gitlab.com/admin).

This is a risk because human error can occur, and an incorrect email can be used for a CDot account. This could lead to the wrong person gaining access to another CDot account and receiving all of its email notifications containing sensitive information (anything related to subscriptions).

FYI: Related [RCA](https://gitlab.com/gitlab-org/fulfillment-meta/-/issues/1026)

## Proposal

We reuse the [confirmation email](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/vs%2Fupgrade-rails-admin/app/views/customers/mailer/confirmation_instructions.html.erb) that is sent when a CDot account email address is changed. The same email should be sent to customers when a CDot email address is updated via the [admin panel](https://customers.staging.gitlab.com/admin).

Additionally, we reuse the email to [inform the old email address owner](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/app/views/devise/mailer/email_changed.text.erb) about the change.

## Result

Affected CDot customers are notified of the email change and must confirm the new email address to access their CDot account. Even if the wrong email is used, the affected CDot customer will be notified.",2
122577963,2023-01-27 16:55:34.457,Add sales team as stakeholder for review,"### Problem

The [Sales Systems team](https://about.gitlab.com/handbook/sales/field-operations/sales-systems/) is responsible for sales systems, notably [Salesforce](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/6b2e3dd5f4ebcfd8f295cc46b1e8474093f276ea/doc/salesforce/README.md) at GitLab.  Salesforce is a business critical Order-to-Cash system that is linked with CustomersDot.  SFDC Lead, oportunity, account creation and more can be triggered from CDot.  Changes to SFDC are synced to Zuora, which then makes it way to CDot by way of callouts.

Given this important interactivity between systems, we need to make sure changes to CDot don't break this interaction and cause outages or data loss.  To prevent outages, Fulfillment engineers should request a review from a Sales system team member if an MR contains changes that impact Salesforce.  

Currently, we have a checklist item in [our default MR template](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/.gitlab/merge_request_templates/Default.md#conformity) to remind engineers to request a review.  It can be easy to miss this checklist item and forget to request the review.

### Proposal

It looks like Danger was improved as part of https://gitlab.com/gitlab-org/fulfillment-meta/-/issues/738+ to make suggestions for sales systems reviewers if the MR contains the `Affects Salesforce` label. You can find the related [Dangerfile here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/63835bcc3d0e7e6b634ced392f4fa6f5892f2eed/danger/business_system_review_roulette/Dangerfile).

We might be able to take this a step further by automatically adding the `Affects Salesforce` label, prompting a Sales System review.  For instance, this Dangerfile could check the changed files for any filenames containing the word ""salesforce"" and append the MR label.",2
122577909,2023-01-27 16:54:33.700,Add EntApps team as stakeholder for review,"### Problem

The [Enterprise Applications team](https://about.gitlab.com/handbook/business-technology/enterprise-applications/) is responsible for all of GitLab's finance systems and Enterprise Applications integrations.  The most important of these systems is Zuora.  In Fulfillment, we work with Zuora Billing quite often as it is a [critical Order-2-Cash system](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/83a95b12efd44ce00ea03d26e3c953a310d8228f/doc/architecture/data_architecture.md#L10).

CustomersDot directly interacts with Zuora Billing in many ways like Subscription creation and Billing Account management.  Changes in CustomersDot around Zuora Billing logic could impact this integration, leading to downtime or data loss. To prevent this, Fulfillment engineers should request a review from a Enterprise Apps member (Zuora architect) if an MR contains changes to Zuora-related logic.  It's easy to forget to request a review, even with [a checklist item to the MR template](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/.gitlab/merge_request_templates/Default.md#conformity).

### Proposal

Similar to https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5616 or https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5618, let's look at using Danger to automate requesting a review from `@gitlab-com/business-technology/enterprise-apps/zuora-architects` if the MR contains Zuora-related logic changes.

Detecting which changes are Zuora-related is the key detail for this issue.  It might be something as simple as looking for files that include the word ""zuora"" but the might be too aggressive.  We could consider specific files or directories as well (`lib/zuora`, `app/services/zuora`, `app/workers/zuora*`, etc).",2
122577814,2023-01-27 16:52:15.881,Add data team as stakeholder for review,"### Problem

The Data team is responsible for [pipelines that export the CDot database](https://about.gitlab.com/handbook/business-technology/data-team/platform/pipelines/#gitlab-customer-dot-database) for [Snowflake](https://about.gitlab.com/handbook/business-technology/data-team/platform/snowflake/).  Some database migrations in CustomersDot could impact this pipeline, leading to downtime. To prevent outages, Fulfillment engineers should request a review from a Data team member if an MR contains database changes.  It's easy to forget to request a review, even if we add a checklist item to the MR template.

### Proposal

Let's update Danger in CDot to prompt MR authors to request reviews from the Data team when the MR contains database changes.  The Danger is already configured prompt authors to get reviews from a Database reviewer and maintainer for database changes. You can find this configured [in `danger/database/Dangerfile`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/a370c2b4b1a4fec50a6be2291c7b0ec7c73e0cd7/danger/database/Dangerfile).",3
122547890,2023-01-27 08:32:02.351,Marketplace::CreateSubscriptionService do not send to Sentry for most validation failures,"Per [slack discussion](https://gitlab.slack.com/archives/CL7SX4N86/p1674803657451299), many validation failures are noisy. 

<details><summary>Snapshot of the slack discussion</summary>
![image](/uploads/837cae5d2dacd7f5fa424bbfc419b0d2/image.png)
</details>

### Proposal

It is suggested for Marketplace::CreateSubscriptionService do not send to Sentry for most validation failures. 
- Only `log_error` for the really concerning failures. 
- For most of them validation failures, `log_warn` is enough.
   - We can search from the log if we want to do some analysis in the future.
  

### Result

### Next steps (if any)

### How will we measure success?",1
122497658,2023-01-26 16:04:20.834,[Spike] GitLab Dedicated Automated Provisioning Scoping,"## Background
~""group::provision"" is planning to automate the provisioning of GitLab Dedicated, which today is a fully manual process done with legacy licenses created by the Support team.

Details about current process & LOE estimate can be found here: https://gitlab.com/gitlab-org/fulfillment-meta/-/issues/754

## Outcome of this Issue 
Review and breakdown the work needed to successfully setup provisioning for GitLab Dedicated. Specifically, we should:
* Receive the Zuora callout for all Dedicated products
* Generate an activation code for the correct seat count
* Display correct product details in Customers Dot

## Result: Issues Created
1. https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/6148+ - this issue should be able to address the MVC for provisioning of GitLab Dedicated, including generation of an activation code

Follow-ups:
1. https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/6269+ - this will allow custom Dedicated-specific content for customers
1. https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/6270+ - this will ensure we track GitLab Dedicated provisioning accurately as part of the ~""Provision Tracking System"" 

---
**Support Priority Score:** (-, -, -, -, -, -, -, -, -, -, -) => 13",2
122496430,2023-01-26 15:45:30.544,[Backfill] Create activation codes for any remaining SM subscriptions without one,"## Background
https://gitlab.com/gitlab-org/fulfillment-meta/-/issues/782+ defines the process for customers to activate with Cloud Licensing mid-term if they already have an active legacy license subscription. Previously, for most customers, a Support ticket was required to move to Cloud Licensing. With the changes made to backfill `TurnOnCloudLicensing` = `null`, plus the work done in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5602 to begin creating codes for all SM subscriptions (even `TurnOnCloudLicensing` = `No`), we have significantly increased availability for customers to self-activate with Cloud Licensing.

The last step for all customers to be able to self-activate will be this issue, that will backfill all remaining subscriptions missing an activation code.


## Proposal
Backfill any active SM subscriptions missing an activation code.

We can reuse [the code](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/1ba32625852d05582e328e3b2f46e4df7e335d2f/lib/tasks/data_maintenance/pre_strict_cloud_license/backfill_cloud_activations.rake) introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4892 and make some modifications to support the different context. The code was left in place with this change in mind. It can be removed afterwards.

## Result
ALL Self-Managed customers will have a cloud license activation code available for download visible in the Customer Portal, allowing for mid-term activations of cloud licensing without the need for a support ticket.",1
122458389,2023-01-25 22:22:36.583,Update browserslist dependency,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
Whenever you serve the CDot app, it complains about the `browserslist` being out of date. 
### Proposal
Run `npx browserslist@latest --update-db` to update the list with the latest versions.
### Result
No error is displayed
### Next steps (if any)

### How will we measure success?",1
122403503,2023-01-25 05:37:41.940,Hide ramp details for products which do not ramp,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
We should hide details section in the new card design if any product in the subscription does not ramp. See this [comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6327#note_1251545677) for more details.  
Discussion [thread](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3916/designs/Ramped_subscriptions__MVC.png#note_1204057072) in Figma.  

**Note:** Need to check if we should show the details section for CI minutes as it shows the purchase date which is not shown in the card header.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",2
122376109,2023-01-24 15:51:19.982,Customer link on License Seat Link list admin page is not correct,"### Problem

`@tom.houston` in Support [reported a problem](https://gitlab.slack.com/archives/CMJ8JR0RH/p1674573876782299) with the link to the Customer from the License Seat Links list page in Rails Admin.  

> When going to the List of [License seat links page](https://customers.gitlab.com/admin/license_seat_link) and selecting any customer on the list it directs me to the Site Administration page with the error Model 'RailsAdmin::Customer' could not be found at the top of the page.  I have a customer who has multiple mirrored environments for their GitLab self-managed setup and they're trying to activate cloud licensing on them.  This has resulted in 200 duplicate licenses and I'm trying to determine which if any of the licenses actually completed the activation process.  I was directed to the List of License seat links page to help with that only to find it doesn't work for me.

As it turns out, there is a bug in the construction of the customer link on this page.

### Proposal

Fix the construction of the customer link.  It should look something like `https://customers.gitlab.com/admin/customer/360255` instead of `https://customers.gitlab.com/admin/RailsAdmin::Customer/360255`.",1
122358605,2023-01-24 11:57:00.859,Mutation to add seats to a subscription,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

We use the `subscription#update` API to add new seats to an existing subscription. In this issue, we create a GraphQL mutation to perform this operation.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

- Create a mutation namespace `subscriptions` in `app/graphql/mutations` if it does not already exist
- Create a mutation class `AddSeats` in the namespace

#### Step 1: Define the following arguments:

|Argument|Type|Required?|
|---|---|---|
|`subscription_number`|`GraphQL::Types::String`|Yes|
|`quantity`|`GraphQL::Types::Int`|Yes|
|`payment_method_id`|`GraphQL::Types::String`|No (`payment_method_id` is not included during preview) |
|`preview`|`GraphQL::Types::Boolean`|No (defaults to `false`)|

#### Step 2: Tweaks to Order related services

- [Define new custom action](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/90561f906dfcf42afd25a086d5ea68bd183a733f/app/services/zuora/orders/actions/mapping.rb#L7): `add_seats`. Map the action to `UpdateProduct`. We currently [combine](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/90561f906dfcf42afd25a086d5ea68bd183a733f/app/services/zuora/orders/amendment/action_types_generator.rb#L95) adding of seats independently with adding of seats during renewal, reconciliation. This will give us an opportunity to decouple the logic [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/90561f906dfcf42afd25a086d5ea68bd183a733f/app/services/zuora/orders/actions/param_constructor/update_product.rb#L34).
- Define the new custom action `add_seats` in `ParamConstructor::UpdateProduct`. 
  - Set `product` to `main_product`
  - `quantity` to `new_quantity` + existing quantity of `main_product`
  - `contract_effective_date` as current date

#### Step 3: Define `resolve` method:

- Perform [seat max validation](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/90561f906dfcf42afd25a086d5ea68bd183a733f/app/services/zuora/orders/amendment/action_types_validator.rb#L61)
- Invoke `OrderManagerService`: 

  ```
    Zuora::Orders::OrderManagerService.new(customer: customer, order_action_types: action_types, params: params, subscription: subscription)
  ```

  - `action_types` = `add_seats`
  - `params` should contain `id` (subscription number), `quantity`, `payment_method_id`. May contain `preview`

### Result

The mutation should add the seats specified to the main product of the subscription.

### Next steps (if any)

### How will we measure success?",3
122336417,2023-01-24 04:47:03.913,Add Sync Billing Account action to Admin,"### Problem

When enabling the new CustomersDot Billing Account architecture we need to make sure we continue to support all the actions used to manage Customer associations with Zuora Billing Accounts via the Admin.

We will document the updated procedures via https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5434+

Updating the `salesforce_account_id` related to a CustomersDot Billing Account is not possible ATM given we don't allow the editing of `BillingAccount` records via the Admin.

We don't want to allow setting **any** value for the `salesforce_account_id` value at this given we want to keep Zuora as the SSoT for it via the `crm_id` in the Zuora Billing Account.

We want to implement a Sync action for a CDot Billing Account via the Admin that will allow us to refresh its `name` and `salesforce_account_id` to those in Zuora.

:heavy_plus_sign: See: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5434#note_1248078612 for more context.

### Proposal

Implement the ""Sync Billing Account"" action via CustomersDot Admin.

One click action with confirmation on successful sync.

### Acceptance criteria

A CustomersDot Billing Account can be synced with Zuora via the CDot Admin.

---

Note this might share some logic with https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5574",3
122336397,2023-01-24 04:46:44.237,Add Create Billing Account action to Admin,"### Problem

When enabling the new CustomersDot Billing Account architecture we need to make sure we continue to support all the actions used to manage Customer associations with Zuora Billing Accounts via the Admin.

We will document the updated procedures via https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5434+

Associating a CustomersDot user to a Zuora Billing Account that is not represented via a CustomersDot Billing Account is not possible ATM given we don't allow the creation of `BillingAccount` records via the Admin (just `BillingAccountMembership`s)

:heavy_plus_sign: See: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5434#note_1248078612 for more context.

### Proposal

Implement the ""Create Billing Account"" action via CustomersDot Admin.

Inputs for the new form: `zuora_account_id`

When the user enters a `zuora_account_id` and submits the `new` form:
- If the id is already associated to a CDot account display the error in the form.
- If the id is not associated to a CDot account:
  - Fetch the Zuora Billing Account for the provided id
  - Create the CDot Billing Account using the info in the Zuora one for the other fields: name, salesforce_account_id.

### Result

A CustomersDot user can be added as a member to any existing Zuora Billing Account.

### Acceptance criteria
- When a Zuora Billing Account is represented in CDot via a Billing Account we can add a membership for an existing customer via the Admin.
- When a Zuora Billing Account is not represented in CDot via a Billing Account we can create a CDot Billing Account for it **and** add a membership for an existing customer via the Admin.",3
122207891,2023-01-20 18:38:59.242,Backfill tasks should reference zuora_account_id column instead of overwritten method,"### Problem

As described in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4867#note_1247871087, we found after enabling the `account_data_structure` feature flag that the backfill rake task `lib/tasks/data_maintenance/billing_accounts/backfill_with_customers.rake` no longer works.  This is because the rake task uses `customer.zuora_account_id` which is an overwritten [attr reader method on Customer](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/aa5aec8253fdad5cb4b846a6d778739fd37affcc/app/models/customer.rb#L162).  When the flag is enabled, this method pulls the `zuora_account_id` from the `BillingAccountMembership` instead of directly from the Customer column.

### Proposal

Update the rake task to use the `zuora_account_id` directly on the Customer record (e.g. `customer[:zuora_account_id]`) instead of the reader method on Customer.

### Result

The rake task continues to work even after the feature flag is enabled.",1
122063515,2023-01-18 16:38:38.666,New account purchase creates separate Bill and Sold To Contacts,"### Problem

We noticed while troubleshooting https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5449+ that when purchasing a subscription with a new Customer (e.g. no associated Zuora Account), the Order API actually creates separate Bill To and Sold To Contacts that have identical information.  I believe this is a change in behavior from the existing Subscribe API.

This is an example of a Zuora Account created while making a new account purchase in my local CDot: https://apisandbox.zuora.com/apps/CustomerAccount.do?method=view&id=8ad08d2985c4e1580185c5a8bebf51a9.  Notice this the separate contact records that have the same information.

### Proposal

I've found that the Orders API requires [an additional parameter](https://www.zuora.com/developer/api-references/api/operation/POST_Order/#!path=newAccount/soldToSameAsBillTo&t=request), `soldToSameAsBillTo`, to instruct Zuora to create the Account with the same Contact record for Bill to and Sold to.  I've already tested this by adding this param and [the resulting account](https://apisandbox.zuora.com/apps/CustomerAccount.do?method=view&id=8ad0889d85c4e1560185c5afc1b52cbe) was created with the same Contact for both Bill to and Sold to as expected.",1
122054951,2023-01-18 15:42:42.067,Skip license notification for non-ramp subscriptions if no new license is required,"### Problem

In https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5242+, notifications are skipped if nothing has changed in the new ramp interval. For Multi-Year subscriptions that are non-ramp, the same should apply as discussed [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5242#note_1244526220).

### Proposal

Remove the check for the subscription to be ramp enabled ([code](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/e5a66632e43ba7595e62b644c376b3d5f70ebdcf/app/services/license_notification_service.rb#L92)) as well as [this code comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/e5a66632e43ba7595e62b644c376b3d5f70ebdcf/app/services/license_notification_service.rb#L43) to also skip the notification for non-ramp subscriptions.

### Result

Same behaviour for all Multi-Year subscription regardless of being for a ramp or not by skipping the notification if nothing has changed has changed in the new year of the subscription and no new license is required.

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

Let's make sure that we write/exit specs to ensure that this works as expected.

- Validate skip license notification for non-ramp subscriptions if no new license is required
- Validate skip license notification for non-ramp subscriptions if a new license _is_ required
- Validate skip license notification for ramp-enabled subscriptions if no new license is required
- Validate skip license notification for ramp-enabled subscriptions if a new license _is_ required",2
122021612,2023-01-18 07:47:03.955,[Spike] Error budget discrepancy against log data,"#### Process:

1. Write the spike summary and requirement and select Definition of Done (DoD) questions that apply
1. DRI/s are assigned to the spike
2. Before starting the spike, engineer should confirm:
- [ ] Is the problem statement and description of the problem clear
- [ ] Are the requirements of this spike clear
- [ ] Are the Definition of done questions relevant/reasonable for this spike
3. Engineer does an investigation to gather information and note any initial impressions and possible paths for implementation
4. PM/EM/Collaborators + Engineer asks questions and start to narrow the scope to an appropriate solution/implementation
5. DoD questions are answered
6. DRI confirms next steps and the spike issue gets closed

------------------------

# Summary

Spike DRI/s: `@tanuki`

The Provision Error Budget panel seems to not reflect the request health rate computed from the logs. The following example is taken during Seat Link peak period, from 2023/1/19 03:00 UTC to 2023/1/19 05:00 UTC:

At that period, SeatLink requests is only over the latency threshold [46](https://log.gprd.gitlab.net/app/discover#/?_g=(filters:!(),refreshInterval:(pause:!t,value:0),time:(from:'2023-01-18T03:00:00.000Z',to:'2023-01-18T05:00:00.000Z'))&_a=(columns:!(),filters:!(),index:'7dbddf20-5530-11ed-b0ec-930003e0679c',interval:auto,query:(language:kuery,query:'json.controller%20:%20%22Api::V1::SeatLinksController%22%20and%20json.duration%20%3E%208500'),sort:!(!(json.time,desc)))) out of [5907](https://log.gprd.gitlab.net/app/discover#/?_g=(filters:!(),refreshInterval:(pause:!t,value:0),time:(from:'2023-01-18T03:00:00.000Z',to:'2023-01-18T05:00:00.000Z'))&_a=(columns:!(),filters:!(),index:'7dbddf20-5530-11ed-b0ec-930003e0679c',interval:auto,query:(language:kuery,query:'json.controller%20:%20%22Api::V1::SeatLinksController%22%20'),sort:!(!(json.time,desc)))) times, which should equal to 99% success apdex rate.

![Screenshot_2023-01-19_at_12-01-36_Discover_-_Elastic](/uploads/3bc9c835f13df2bc710afb3dd11c6e95/Screenshot_2023-01-19_at_12-01-36_Discover_-_Elastic.png)
![Screenshot_2023-01-19_at_12-02-01_Discover_-_Elastic](/uploads/7d0d7c80ce4c0cc5b3fa596492b829c1/Screenshot_2023-01-19_at_12-02-01_Discover_-_Elastic.png)

However Grafana Error Budget panel at this period seems to indicate otherwise. The [availability shown is down to 57.28%](https://dashboards.gitlab.net/d/stage-groups-detail-provision/stage-groups-provision-group-error-budget-detail?orgId=1&from=1674010800000&to=1674018000000).

![Screenshot_2023-01-19_at_11-59-58_stage-groups_Provision_group_error_budget_detail_-_Stage_Groups_-_Dashboards_-_Grafana](/uploads/a1e55ac2b277ea5e50018d39c163ab68/Screenshot_2023-01-19_at_11-59-58_stage-groups_Provision_group_error_budget_detail_-_Stage_Groups_-_Dashboards_-_Grafana.png)

The [apdex attribution chart](https://dashboards.gitlab.net/d/stage-groups-detail-provision/stage-groups-provision-group-error-budget-detail?orgId=1&from=1674010800000&to=1674018000000&viewPanel=44) also shows SeatLink as the major contributor and its unsuccessful apdex rate is down to -90%.

![Screenshot_2023-01-19_at_12-01-03_View_panel_-_stage-groups_Provision_group_error_budget_detail_-_Stage_Groups_-_Dashboards_-_Grafana](/uploads/bd855061020c767dfd0d529668002b9b/Screenshot_2023-01-19_at_12-01-03_View_panel_-_stage-groups_Provision_group_error_budget_detail_-_Stage_Groups_-_Dashboards_-_Grafana.png)

There seems to be a discrepancy between the log data and data in error budget panel.

Some discussion on the cause of this: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4884#note_1235160195

# Requirements / Ask

To investigate whether discrepancy does exist, and determine its root cause.

This may be easier for those with experience with Grafana/Prometheus queries, or metrics collection.

# Definition of done

What questions need to be answered in order for this spike to be completed - tick all those that apply:

- [ ] Is the ask possible?
- [ ] Is the work reasonable within time constraints?
- [x] What is the level of effort (t-shirt size estimate: S,M,L)?
- [ ] What are the risks / trade-offs?
- [ ] Where does complexity exist?
- [x] Are there any unknowns to be mindful of?
- [x] Is there a skills gap? Are there any documented reports of using this approach?
- [x] Is there a monitoring implication?
- [ ] Is there an availability implication?
- [ ] Is there a productivity implication?

# Next steps

Select the next steps that apply:

1. [ ] Close issue without further action = Spike conclusion is that feature won't be built
1. [ ] Create follow up issue to start MVC iteration of feature
1. [ ] Create MR for documentation update as a result of spike",5
121965455,2023-01-17 12:35:45.177,[Auto-Renew] Send a failure notification for multiple rate plans if Cloud License is disabled (SM).,"### Problem
Linking [comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5335#note_1237671684), currently we are not sending any failure notifications to auto-renewable subscriptions having multiple rate plans ([context](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5355)) even if Cloud Licensing is disabled for such subscriptions.

### Proposal

If a self-managed auto-renewable subscription fails eligibility due to multiple rate plans, check if Cloud Licensing is disabled for this subscription and send them the failure email.

Email issue: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4421",2
121956499,2023-01-17 09:53:57.766,Allow admin resend of cloud activation code even if there is an activated instance present,"### Problem

With the implementation of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4023+, we do not send out the activation code email again after an activated instance is present. This is useful for avoiding to send out the activation code again in case of a renewal or other amendments to the subscription. However, this may have a side effect as this logic also prevents to resend the activation code in the Admin. This wasn't needed so far but after reconsideration it might make sense to provide this ability in the Admin.

### Proposal

Allowing for resendof an activation code in the Admin even if there is an activated instance present for the subscription.

### Result

Ability to resend activation code in the Admin no matter the current state of activation.

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

**Considerations:** 
- Is there any prevention mechanism to resend this code?
- Will the resending of the activation code result in an accidental re-activation? (i.e., will it generate a new activation code?)

1. View / Vue spec to validate presence of ""Resend Activation Code"" button
1. View /Vue spec to validate absence of button when license is not ""cloud license""
2. Feature specs
    * If button is clicked, validate the proper mailer has been invoked
    * Button should be visible for activated/non-activated instances",2
121700222,2023-01-13 01:14:20.738,Add Group Name link to subscription-v2 component,"

### Proposal
Add a link to the group name in the new SubscriptionV2 component. There will also be a popover when hovering on the group name.

### Result
Design: [GL issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3916/designs/Ramped_subscriptions__MVC.png) and [Figma](https://www.figma.com/file/U9JvYVy1Ls9IKrrPw1vt38/Update-subscription-card-to-reflect-Zuora-data-structure?node-id=239%3A13266&t=jdt2nnkIH74aLlA3-0)",3
121671971,2023-01-12 15:32:45.501,"Follow-up from ""Determine PRP for renewal from subscription object""","The following discussion from !6176 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6176#note_1235822858):  (+1 comment)

    > **Suggestion (non-blocking/follow-up):** If we define `with_one :rate_plan_charge` in [`lib/zuora/invoice_item.rb`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/35aa538b8992a7ae8519dc513f6beda6e271c32e/lib/zuora/invoice_item.rb), I think it would simplify this a bit and we could call `invoice_item.rate_plan_charge` instead.  It looks like this happens in a few other places in this file too.
    > 
    > Not a blocker for this MR IMO since it was this way before, but might be a nice quick follow-up if you like.",1
121671266,2023-01-12 15:21:35.996,Develop Retention Policy for Container Registry,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Now that the Container Registry is enabled, and given that https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6229+ will implement Continuous Deployment to the registry ...

These containers will take up a lot of space and some containers will never be used.

### Proposal

Develop a retention policy for the Container Registry, to preserve money and space.

### Result

Old published images pushed to the container registry will be purged.

### Next steps (if any)

Depends on https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6229+ to be merged.

### How will we measure success?",1
121625733,2023-01-12 00:35:35.758,Use `provide` to pass subscription to Activation components,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
### Proposal

To more easily maintain a [second code path](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5382) for generating the `Activation` components, convert to using `provide` instead of prop-drilling fields.
<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",1
121518577,2023-01-10 13:28:51.511,[Ramps] Add method on RatePlanCharge to reject duplicate segments,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
As mentioned in this [comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6233#note_1232817247), we can move the filtering logic for `rate_plan_charges` to `Zuora::RatePlanCharge` from `subscription_presenter.rb`.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",1
121430732,2023-01-09 07:38:25.231,[Feature flag] Enable pass_jtbd_longtail_desc_to_workato,"<!-- Title suggestion: [Feature flag] Enable description of feature -->

# Summary

<!-- Short description of what the feature is about and link to relevant other issues. -->

This issue is to rollout [Pass long tail description as jtbd when create Workato lead
](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5452) on CustomersDot production,
that is currently behind the [pass_jtbd_longtail_desc_to_workato](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/190/edit) feature flag.

## Owners

- Team: ~""group::commerce integration"" 
- Most appropriate Slack channel to reach out to: `#g_commerce_integrations`
- Best individual to reach out to: @qzhaogitlab 
- PM: @courtmeddaugh 

## Stakeholders

- @MihaiConteanu 

## The Rollout Plan

- Rollout Feature for everyone as soon as it's ready

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? Sentry errors reports can also be useful to review -->


## Expectations

### What are we expecting to happen?

Workato lead creation endpoint receives payload `jbtd: <long tail description>` instead of `jbtd: <api reason>`.

### What might happen if this goes wrong?

If anything wrong, we can disable the feature flag [pass_jtbd_longtail_desc_to_workato](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/190/edit)

If necessary, it is possible to write a script to update the Workato leads: 
- read lead attributes from CustomersDot Lead table
- call `Workato::CreateLeadService`

### What can we monitor to detect problems with this?

- No [reporting error](https://console.cloud.google.com/logs/query;query=logName%3D%2528%22projects%2Fgitlab-subscriptions-prod%2Flogs%2Fsidekiq.production%22%20OR%20%22projects%2Fgitlab-subscriptions-prod%2Flogs%2Frails.production%22%2529%0A%22Workato%22%20AND%20jsonPayload.success%20%3D%20false%0A;timeRange=P2D;cursorTimestamp=2023-01-05T22:31:43.123Z?project=gitlab-subscriptions-prod) related to this change
- Will ask @MihaiConteanu to confirm whether anything is wrong from Workato side. (We do not have access to Workato and downstream systems).

## Rollout Steps

### Rollout on non-production environments

- [x] Ensure that the feature MRs have been deployed to non-production environments, i.e. `customers-staging`.
- [x] Consider announcing that the flag will be enabled to potentially impacted groups, e.g. `#s_fulfillment_engineering`
- [x] Enable the feature globally on non-production environments by applying the appropriate environment, e.g. `customers-staging` and `customers-development`.
- [x] Notify the Software Engineers in Test (SETs) for Fulfillment via Slack and in a comment in this issue when enabling a feature flag in `customers-staging` as it can impact the QA pipeline.
- [x] Verify that the feature works as expected. Posting the QA result in this issue is preferable.

### Preparation before production rollout

- [x] Ensure that the feature MRs have been deployed to production
- [x] Check if the feature flag change needs to be accompanied with a
  [change management issue](https://about.gitlab.com/handbook/engineering/infrastructure/change-management/#feature-flags-and-the-change-management-process) -- Not needed.
  Cross link the issue here if it does.
- [x] Ensure that you or a representative in Fulfillment can be available for at least 2 hours after feature flag updates in production.
  If a different developer will be covering, or an exception is needed, please inform the Fulfillment team in #s_fulfillment_engineering
- [x] Ensure any documentation has been updated -- Not needed
- [x] Announce on [the feature issue](ISSUE LINK) an estimated time this will be enabled on production if applicable
- [ ] If the feature might impact the user experience, notify `#s_fulfillment` and potentially  `#support_gitlab-com`, as well as your team channel ([more guidance when this is necessary in the dev docs](https://docs.gitlab.com/ee/development/feature_flags/controls.html#communicate-the-change)). -- Not needed

### Global rollout on CustomersDot production

- [x] Confirm the feature flag is enabled on `staging` without incident
- [ ] Roll out the feature to targeted testing users first (if applicable)
- [ ] If applicable, [incrementally roll out](https://docs.gitlab.com/ee/operations/feature_flags.html#percent-rollout) the feature.
- [ ] Verify the change has the desired outcome with the limited rollout before enabling the feature globally on production.
- [x] Enable the feature globally on production environment
- [x] Announce on [the feature issue](ISSUE LINK) that the feature has been globally enabled.
- [x] Wait for [at least one day for the verification term](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release).

### Release the feature

After the feature has been [deemed stable](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release),
the clean up should be done as soon as possible to permanently enable the feature and reduce complexity in the codebase.

<!-- The checklist here is to help stakeholders keep track of the feature flag status -->
- [x] Create a merge request to remove `<feature-flag-name>` feature flag
  - [x] Remove all references to the feature flag from the codebase
- [x] Ensure that the cleanup MR has been deployed to both staging and production
- [x] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [x] Ensure production environment is still working as expected
- [x] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [x] Close this rollout issue.

## Rollback Steps

- [ ] This feature can be disabled by performing the following actions:
  - [ ] Disable the Unleash flag on the [feature flag page](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/190/edit)",1
121320571,2023-01-05 22:14:56.268,Get zuora_account from Order in AutoRenew::BasePresenter,"### Problem

In `AutoRenew::BasePresenter`, the `zuora_account` is used to [get the default payment method](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/b5e4974cf7a33400945369b06d199fa842cc1261/app/presenters/auto_renew/base_presenter.rb#L31).  This is fetched from the given `customer` (e.g. `customer.zuora_account`).  However, it would be more accurate long-term when the `account_data_structure` is in place to pull this from the `order` instead.

### Proposal

Update `AutoRenew::BasePresenter` to get `zuora_account` from the `order` when the `account_data_structure` feature flag is enabled.",2
121249723,2023-01-04 18:44:40.359,Update namespace for Zuora and SFDC cleanup tasks,"### Summary

We have a couple of tasks to cleanup Zuora and Salesforce related references:
- `clear_missing_zuora_account_ids` task
- `clear_missing_salesforce_account_ids` task

These are namespaced under `:customers`.

With the work related to billing accounts these cleanup tasks will be handling the update of the customers and the billing accounts and eventually just the billing accounts.

### Proposal

Update the namespace to `:data_maintenance` for:
- `clear_missing_zuora_account_ids` task
- `clear_missing_salesforce_account_ids` task
- the documentation referencing any of this",1
121243448,2023-01-04 16:46:52.911,Ramps UAT: Provision Testing in Dev,"## Summary
The EntApps team is conducting end-to-end UAT of Zuora Ramps prior to implementation (expected Feb 1, 2023). This issue will be used to track UAT efforts of ~""group::provision"" in the dev stack only. This will require testing in a local CDot environment. Because of this, more thorough testing will be conducted in Staging by Fulfillment in the related issue: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5742.

More details on full project testing can be found in the [EntApps related issue](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/financeops/finance-systems/-/issues/1051)

## Test Cases for Dev
The full list of test cases can be found in: https://docs.google.com/spreadsheets/d/1xmdJ6ToiCyFNtqjrNPvwcGR7gCvkskjLnZXwAzEMT40/edit#gid=0

For dev testing, we should pick a few line items from this sheet (a few differing scenarios) to ensure the provisioning is working as expected.

## Result
Sign-off from ~""group::provision"" that provisioning appears to be working correctly  and we are comfortable with proceeding with Staging deployment.

## Testing results

### [New Self-Managed Subscription](https://gitlab--sandbox.sandbox.my.salesforce.com/a1j8F0000007cNh)

1. :white_check_mark: Created subscription looked good. 
2. :white_check_mark: Subscription page in CustomersDot: 
<details>
![image](/uploads/4df7879e8e8d71c4d17cc9fcac9e949e/image.png)
   </details>

4. :white_check_mark: Email(s) with activation code was sent (to customer and SFDC): 
 
   <details>
   ![Screenshot_2023-02-23_at_2.13.55_PM](/uploads/e7096be3defd71ff7735ac2e8abbc708/Screenshot_2023-02-23_at_2.13.55_PM.png)
   </details>

5. :white_check_mark: Instance activated with the subscription: 
   <details>
   ![new_sm_subscription_-_activated_instance](/uploads/4c5210c63d8ab31cf4ad27a0b260aa9f/new_sm_subscription_-_activated_instance.png)
   </details>

### [New Subscription with Add-On](https://gitlab--sandbox.sandbox.my.salesforce.com/a1j8F0000007cUX)

1. :white_check_mark:  Created subscription looks good.
2. :white_check_mark:  Subscription page in CustomersDot shows paid SaaS plan and Storage.

<details>
![image](/uploads/2cc7c98ab03ee324130ac7e249709faa/image.png)
   </details>

3. :white_check_mark: Email(s)  was sent (to customer and SFDC):
   
<details>
   ![Screenshot_2023-02-23_at_2.14.06_PM](/uploads/290030010fae30b1b89f7ddf34701f7c/Screenshot_2023-02-23_at_2.14.06_PM.png)
   </details>

4. :white_check_mark: Linked after purchase and data was successfully and correctly synced.

### [Add Seats to Existing Subscription](https://gitlab--sandbox.sandbox.my.salesforce.com/a1j8F0000007cOa)

All looks good :white_check_mark: - changed year 1 seats from 50 to 60.

<details><summary>See details</summary>
![image](/uploads/98f1dcd0052ee81b589006420f13ecca/image.png)
</details>

### [Renew Subscription](https://gitlab--sandbox.sandbox.my.salesforce.com/a1j8F0000007cUX)

All looks good :white_check_mark: - additional year was added on for renewal.

<details><summary>See details</summary>
![image](/uploads/c2b5cafc4a30f8a56d0f7e31ec92961d/image.png)
</details>

### [Upgrade Subscription](https://gitlab--sandbox.sandbox.my.salesforce.com/a1j8F0000007cUw)

Upgraded to SaaS Ultimate update was successful :white_check_mark: 

<details><summary>See details</summary>

![image](/uploads/66dbf1a6101a1ba2a57f1e86b98b7eab/image.png)

</details>


### [Add True-Up Product](https://gitlab--sandbox.sandbox.my.salesforce.com/a1j8F0000007cWy)

True-up product was added as a separate line item. :white_check_mark: 

<details><summary>See details</summary>

![image](/uploads/4f09cd2e805d25c79d3f7e4065e9f37d/image.png)

</details>",2
121166280,2023-01-03 14:01:28.659,"Review and add missing docs for ""AutoRenew"" feature","### Section 3: GitLab initiated management events

This issue is to create a SSOT for all documentation about ""AutoRenew"" feature. Follow the checklist below:

#### Feature: AutoRenew

Review existing documentation and update this issue with:

- [ ] User facing docs: links
- [ ] Developers docs: links
- [ ] (Optional) Flowcharts: links
- [ ] Add links from above to the Fulfillment Guide",2
121166106,2023-01-03 13:59:06.132,"Review and add missing docs for ""Renew subscription"" feature","### Section 2: User initiated management events

This issue is to create a SSOT for all documentation about ""Renew subscription"" feature. Follow the checklist below:

#### Feature: Renew subscription

Review existing documentation and update this issue with:

- [x] User facing docs: links
- [x] Developers docs: links
- [x] (Optional) Flowcharts: links
- [x] Add links from above to the Fulfillment Guide

Draft MR: https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/118919",2
121137154,2023-01-03 00:03:52.639,Pass long tail description as jtbd when create Workato lead,"This [request](https://gitlab.com/groups/gitlab-org/-/epics/9084#note_1187675882) asks to change current `jtbd` value from `Reason API` to `long tail` value.

>>>

One more question from my side: is it possible to change the values on the jtbd fields sent over according to the table below:


| Reason API | long tail |
| ------ | ------ |
| basics | I want to learn the basics of Git |
| ci | I want to use GitLab CI with my existing repository |
| code_storage | I want to store my code |
| exploring | I want to explore GitLab to see if it's worth switching to |
| move_repository | I want to move my repository to GitLab from somewhere else |
| other | A different reason |

>>>

Also per [comment](https://gitlab.com/groups/gitlab-org/-/epics/9084#note_1195974830):

>>>
 * if the jtbd is in the defined values, map to the long tail according to the table
 * if the jtbd is NOT in the defined values, keep whatever the jtbd value, and pass to Workato as it is.

BTW: I searched production DB, here are the existing jtbd values count:

```
irb(main):006:0> pp  Lead.group(:jtbd).count
{""""=>2543,
 ""9v5lw024chiooua11lmr9utqmhsag1d51xpocf04.burpcollaborator.net""=>1,
 ""basics""=>8878,
 ""ci""=>4475,
 ""code_storage""=>13702,
 ""code_storageofeof%>r8hri'/\""<infpc""=>1,
 ""exploring""=>7362,
 ""move_repository""=>4210,
 ""other""=>7367,
 nil=>142237}
```
>>>

#### Other consideration

It is better to introduce a feature flag to control this behaviour, to help this behaviour transit smoothly.",1
121137085,2023-01-02 23:55:46.862,Pass source information to Workato lead creation,This [request](https://gitlab.com/groups/gitlab-org/-/epics/9084#note_1160401170) asks for passing trial source information `glm_source` and `glm_content` to Workato lead creation.,1
121128926,2023-01-02 17:03:48.447,Sync SoldTo to Zuora for email address updates from Admin,"## Problem

When the email address of a customer gets updated from the admin interface it doesn't sync automatically with Zuora.

This is a problem, as the `SoldTo` contact in Zuora should get updated in this case as well.

<details><summary>Screenshot of CDot Admin</summary>
![Email_Update_Admin_CDot](/uploads/5cafcfa08542ed32b24cf4c9c7308e95/Email_Update_Admin_CDot.png)
</details>

Related thread: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5139#note_1220323298

## Proposal

Update the Zuora `SoldTo` contact when a customer email address is updated via the admin interface.

## Result

When the email address of a customer gets updated from the admin interface it gets automatically synced with Zuora `SoldTo` Contact.
This allows us to have the same behavior for Zuora `SoldTo` contact sync updates within CDot.",2
120981383,2022-12-28 09:52:33.198,Create documentation for how to augment the dictionary,"After introducing the dictionary to map system to friendly errors, we need to document how to extend the dictionary so that not only Fullfilment engineers but stakeholders (e.g., Support engineers) can introduce new friendly errors.

This will be the first iteration of the documentation and process. One place where this can be put in is the [architecture](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/doc/architecture) section of CustomersDot documentation.",1
120968780,2022-12-27 23:10:45.117,Allow Workato::CreateLeadWorker to retry lead creation failure,"
We found several unsuccessful Workato lead creations. 
- First one: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5418#note_1222258595. The root cause is unstable network `Net::ReadTimeout` https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5418#note_1222259741
- Second one: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5418#note_1223316962
- Third one: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5418#note_1224676382
- Fourth one: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5418#note_1225168532

Although there are different reasons for the above 4 unsuccessful cases, they could all succeed with a retry.

ATM, if `Workato::CreateLeadService.new.execute(lead_attrs)` returns `success: false`, `Workato::CreateLeadWorker` does NOT do anything.

We should retry Workato::CreateLeadService failures. (BTW: `Workato::CreateLeadWorker` is safe to retry -- if the lead already exists, Workato will update existing lead.)

**BTW**: searching from the production Lead table, it shows that: [Platypus::CreateLeadService also had some unsuccessful instances](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5445#note_1222271404), but we did not remedy them.",2
120760187,2022-12-21 16:40:05.621,Document new process for managing Customer associations with Zuora Billing Accounts,"### Problem

With the data structure changes introduced in https://gitlab.com/groups/gitlab-org/-/epics/8950+, team members outside of Fulfillment who routinely use CDot need to be aware of these changes.  In particular, CDot Admins who might manage Zuora Billing Account associations for Customers.

Previously, the Admin page for Customers allowed admins to change the `zuora_account_id` for a Customer as shown below.

![Screen_Shot_2022-12-21_at_11.43.56_AM](/uploads/d749e76bcf80a8079f75d347f3714b00/Screen_Shot_2022-12-21_at_11.43.56_AM.png)

When the new data structure goes live (`account_data_structure` feature flag enabled), this ability will change.  The `zuora_account_id` field on the Customers page will be removed.  Instead, the association to a Zuora Account will be managed through a Billing Account Memberships.  A Billing Account Membership can be created or removed which associates a Customer with a Billing Account record.  The following screenshot shows the new Billing Account Memberships page.

![Screen_Shot_2022-12-21_at_11.46.33_AM](/uploads/45f2b45a830253d8d885369e63a5898c/Screen_Shot_2022-12-21_at_11.46.33_AM.png)

The Billing Account is the record that has the association with a Zuora Account and has the `zuora_account_id` field as shown below.

![Screen_Shot_2022-12-21_at_11.48.56_AM](/uploads/a60922e01f2e5df89626c78f39478178/Screen_Shot_2022-12-21_at_11.48.56_AM.png)

### Proposal

Let's consider documenting this information and communicate this to team members in advance of rolling out the `account_data_structure` feature.

People include when communicating this documentation:
- Finance systems and Billing team (`@annapiaseczna` for instance)
- Support team

As noted by `@kevenhughes` [below](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5434#note_1234552915), [support workflows documented in the handbook](https://about.gitlab.com/handbook/support/license-and-renewals/workflows/) will likely need to be updated. For instance, the workflows [listed here](https://about.gitlab.com/handbook/support/license-and-renewals/workflows/customersdot/associating_purchases.html#add-subscription-management-contact-workflow).",2
120726787,2022-12-21 06:49:00.283,Add Marketplace order status poll endpoint to OpenAPI doc,"In issue https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4733+, we have created endpoint for Marketplace partners to poll order status.

We need to add this new endpoint to the openAPI doc https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/doc/api/openapi.yaml

### Problem

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",1
120673256,2022-12-20 08:00:37.077,[Feature flag] Enable switch_lead_creation_from_platypus_to_workato,"<!-- Title suggestion: [Feature flag] Enable description of feature -->

# Summary

<!-- Short description of what the feature is about and link to relevant other issues. -->

This issue is to rollout [Update CDot's BaseTrialService to route trials to Workato](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5013) on CustomersDot production,
that is currently behind the [switch_lead_creation_from_platypus_to_workato](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/187/edit) feature flag.

## Owners

- Team: ~""group::commerce integration"" 
- Most appropriate Slack channel to reach out to: `#g_commerce_integrations`
- Best individual to reach out to: @qzhaogitlab 
- PM: @courtmeddaugh 

## Stakeholders

<!--
Are there any other stages or teams involved that need to be kept in the loop?

- GITLAB_HANDLE of a PM
- The Support Team
- The Delivery Team
-->

## The Rollout Plan

- Partial Rollout with specific Customers on CustomersDot, [via Unleash](https://docs.gitlab.com/ee/operations/feature_flags.html#user-ids)
- Rollout on CustomersDot for a certain period (How long)
- Percentage Rollout on CustomersDot
- Rollout Feature for everyone as soon as it's ready

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? Sentry errors reports can also be useful to review -->

## Testing User/Customer IDs

<!--
List any Customer IDs for Customers that are happy to have this feature turned on early.

Remove if not applicable
-->

## Expectations

### What are we expecting to happen?

<!-- Describe the expected outcome when rolling out this feature -->

### What might happen if this goes wrong?

<!-- Should the feature flag be turned off? Any MRs that need to be rolled back? Communication that needs to happen? What are some things you can think of that could go wrong - data loss or broken pages? -->

### What can we monitor to detect problems with this?

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? -->

## Rollout Steps

### Rollout on non-production environments

- [x] Ensure that the feature MRs have been deployed to non-production environments, i.e. `customers-staging`.
- [x] Consider announcing that the flag will be enabled to potentially impacted groups, e.g. `#s_fulfillment_engineering`
- [x] Enable the feature globally on non-production environments by applying the appropriate environment, e.g. `customers-staging` and `customers-development`.
- [x] Notify the Software Engineers in Test (SETs) for Fulfillment via Slack and in a comment in this issue when enabling a feature flag in `customers-staging` as it can impact the QA pipeline.
- [x] Verify that the feature works as expected. Posting the QA result in this issue is preferable.

### Preparation before production rollout

- [x] Ensure that the feature MRs have been deployed to production
- [x] Ensure to update Workato URL and credentials in Ansible project.(Needs to receive [credentials](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5010#note_1215740301) first)
- [x] Check if the feature flag change needs to be accompanied with a
  [change management issue](https://about.gitlab.com/handbook/engineering/infrastructure/change-management/#feature-flags-and-the-change-management-process).
  Cross link the issue here if it does. -- Checked, not needed.
- [x] Ensure that you or a representative in Fulfillment can be available for at least 2 hours after feature flag updates in production.
  If a different developer will be covering, or an exception is needed, please inform the Fulfillment team in #s_fulfillment_engineering
- [x] Ensure any documentation has been updated -- There is only internal(developer facing documentation). Will update later. The major update would be https://gitlab.com/gitlab-org/gitlab/-/blob/master/doc/development/product_qualified_lead_guide/index.md. It is also mentioned in https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/doc/architecture/vendor_analysis/index.md and https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/doc/architecture/data_architecture_proposal.md
- [x] Announce on [the feature issue](ISSUE LINK) an estimated time this will be enabled on production if applicable
- [ ] If the feature might impact the user experience, notify `#s_fulfillment` and potentially `#support_gitlab-com`, as well as your team channel ([more guidance when this is necessary in the dev docs](https://docs.gitlab.com/ee/development/feature_flags/controls.html#communicate-the-change)).

### Global rollout on CustomersDot production

- [x] Confirm the feature flag is enabled on `staging` without incident
- [ ] Roll out the feature to targeted testing users first (if applicable)
- [x] If applicable, [incrementally roll out](https://docs.gitlab.com/ee/operations/feature_flags.html#percent-rollout) the feature.
- [x] Verify the change has the desired outcome with the limited rollout before enabling the feature globally on production.
- [x] Enable the feature globally on production environment
- [ ] Announce on [the feature issue](ISSUE LINK) that the feature has been globally enabled.
- [x] Wait for [at least one day for the verification term](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release).

### Release the feature

After the feature has been [deemed stable](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release),
the clean up should be done as soon as possible to permanently enable the feature and reduce complexity in the codebase.

<!-- The checklist here is to help stakeholders keep track of the feature flag status -->
- [x] Create a merge request to remove `<feature-flag-name>` feature flag
  - [x] Remove all references to the feature flag from the codebase
- [x] Ensure that the cleanup MR has been deployed to both staging and production
- [x] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [x] Ensure production environment is still working as expected
- [x] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [x] Close this rollout issue.

## Rollback Steps

- [ ] This feature can be disabled by performing the following actions:
  - [ ] Disable the Unleash flag on the [feature flag page](LINK TO THE FEATURE FLAG EDIT PAGE)",1
120667700,2022-12-20 05:23:17.748,Add product sub type attribute for subscriptions,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
For ramp subscriptions, we need to show different products (plan, CI minutes, storage) in their own sections as per the [new design](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3916/). For this we need an identifier on each product as to what type of product it is.  
![image](/uploads/ea5af87826e42aaecbf911d30d707916/image.png)

### Proposal
On the product level we need to add another attribute `sub_type` which will have value `plan`, `storage`, `ci-minutes` based on the kind of product. This will be used on the frontend to show different product section on the new subscription card.  
Also add the `rate_plan_id` which will be used to map each product against the ramps which will be sent in a different key in this issue - https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5375.

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",2
120657374,2022-12-19 21:19:08.068,Remove Timecop references,"### Problem

My VS Code extension for rubocop was complaining about a couple of invalid cops involving Timecop.  

```
.rubocop.yml: RSpec/TimecopFreeze has the wrong namespace - should be Gitlab/RSpec 
.rubocop.yml: RSpec/TimecopTravel has the wrong namespace - should be Gitlab/RSpec 
```

As it turns out, the Timecop gem was removed over a year ago in https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3202.  With that gem removed, there isn't much use for these cops.

### Proposal

There are a couple of things we can do to clean up after Timecop was removed:

- [x] Remove the custom cops, `RSpec/TimecopFreeze` and `RSpec/TimecopTravel` https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6166
- [x] Rename the custom Rspec metadata tag `timecop`.  We could use 2 separate tags instead, `travel_to` and `freeze_time`, which are a little more descriptive anyway. https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6167",1
120557137,2022-12-16 22:38:33.911,[Feature flag] Create SFDC Contact from Zuora Contact,"<!-- Title suggestion: [Feature flag] Enable description of feature -->

# Summary

Add logic so the SFDC Contacts are created based on the respective Zuora Account sold to contact and fallback to the 
customer only if no Zuora Account exist.

This issue is to rollout [Salesforce object creation behavior in CustomersDot](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4822) - Part2 on CustomersDot production,
that is currently behind the [`:create_sf_contact_from_zuora_contact`](LINK TO THE FEATURE FLAG EDIT PAGE) feature flag.

Feature flag: https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/186/edit

## Owners

- Team: ~""group::fulfillment platform"" 
- Most appropriate Slack channel to reach out to: `#g_fulfillment_platform`
- Best individual to reach out to: @tyleramos or @vshumilo 
- PM: @mgass1 

## Stakeholders

No other stakeholders.

## The Rollout Plan

Rollout Feature for everyone as soon as it's tested and approved in staging by the Salesforce team.

## Expectations

### What are we expecting to happen?

There are less duplications of SFDC accounts created associated to the same Zuora Billing Account.

### What might happen if this goes wrong?

- Disruptive exceptions in the code, failure in the creation of SFDC Contact and Accounts 

### What can we monitor to detect problems with this?

- Keep an eye on [Sentry](https://sentry.gitlab.net/gitlab/customersgitlabcom/#).
- Check `#s_fulfillment_status` for errors.

## Rollout Steps

### Rollout on non-production environments

- [x] Ensure that the feature MRs have been deployed to non-production environments, i.e. `customers-staging`.
- [x] Consider announcing that the flag will be enabled to potentially impacted groups, e.g. `#s_fulfillment_engineering`
- [x] Enable the feature globally on non-production environments by applying the appropriate environment, e.g. `customers-staging` and `customers-development`.
- [x] Notify the Software Engineers in Test (SETs) for Fulfillment via Slack and in a comment in this issue when enabling a feature flag in `customers-staging` as it can impact the QA pipeline.
- [x] Verify that the feature works as expected. Posting the QA result in this issue is preferable.

### Preparation before production rollout

- [x] Ensure that the feature MRs have been deployed to production
- [ ] ~~Check if the feature flag change needs to be accompanied with a
  [change management issue](https://about.gitlab.com/handbook/engineering/infrastructure/change-management/#feature-flags-and-the-change-management-process).~~
  Cross link the issue here if it does.
- [x] Ensure that you or a representative in Fulfillment can be available for at least 2 hours after feature flag updates in production.
  If a different developer will be covering, or an exception is needed, please inform the Fulfillment team in #s_fulfillment_engineering
- [x] Ensure any documentation has been updated
- [x] Announce on [the feature issue](ISSUE LINK) an estimated time this will be enabled on production if applicable
- [ ] ~~If the feature might impact the user experience, notify `#s_fulfillment` and potentially `#support_gitlab-com`, as well as your team channel ([more guidance when this is necessary in the dev docs](https://docs.gitlab.com/ee/development/feature_flags/controls.html#communicate-the-change)).~~

### Global rollout on CustomersDot production

- [x] Confirm the feature flag is enabled on `staging` without incident
- [x] Roll out the feature to targeted testing users first (if applicable)
- [x] If applicable, [incrementally roll out](https://docs.gitlab.com/ee/operations/feature_flags.html#percent-rollout) the feature.
- [x] Verify the change has the desired outcome with the limited rollout before enabling the feature globally on production.
- [x] Enable the feature globally on production environment
- [x] Announce on [the feature issue](ISSUE LINK) that the feature has been globally enabled.
- [x] Wait for [at least one day for the verification term](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release).

### Release the feature

After the feature has been [deemed stable](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release),
the clean up should be done as soon as possible to permanently enable the feature and reduce complexity in the codebase.

<!-- The checklist here is to help stakeholders keep track of the feature flag status -->
- [x] Create a merge request to remove `:create_sf_contact_from_zuora_contact` feature flag
  - [x] Remove all references to the feature flag from the codebase
- [x] Ensure that the cleanup MR has been deployed to both staging and production
- [x] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [x] Ensure production environment is still working as expected
- [x] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [x] Close this rollout issue.

## Rollback Steps

- [ ] This feature can be disabled by performing the following actions:
  - [ ] Disable the Unleash flag on the [feature flag page](LINK TO THE FEATURE FLAG EDIT PAGE)",2
120556911,2022-12-16 22:23:13.180,Update or remove `customers:update_country_for_invalid_customer_objects` task,"### Proposal

The [rake task](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/48829db15325c6d7b71e1c004c397db8c632a7dc/lib/tasks/data_maintenance/update_country_for_invalid_customer_objects.rake#L13) `customers:update_country_for_invalid_customer_objects` queries the `zuora_account_id` column on Customer multiple times.  We should consider whether we need this rake task going forward.  If not, we should delete it.  If so, let's update it to use the new billing account structure when the `account_data_structure` feature flag is enabled.",1
120556875,2022-12-16 22:21:30.531,Consider removing `zuora:export_vat_id` task,"### Proposal

The [rake task](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/965b897c955a9375cc72afae414f6245af2a33ff/lib/tasks/zuora.rake#L3) `zuora:export_vat_id` fetches CDot Customer records where `vat_code` is present and updates the Zuora Account if the `vat_code` does not match in Zuora.  This task was introduced over 3 years ago, so if we haven't used it since then, we should consider removing it to avoid updating it for the new account data structure.",1
120556708,2022-12-16 22:17:09.795,Update `clear_missing_zuora_account_ids` task,"### Proposal

The `customers:clear_missing_zuora_account_ids` [rake task](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/c38384799ec82d24f23bc21053cef90a5ff88613/lib/tasks/clear_missing_zuora_account_ids.rake#L10) queries the Customers table using the `zuora_account_id` column.  This should be updated as follows:

* When :account_data_structure enabled
  * Base the [`zuora_account_relation`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/c38384799ec82d24f23bc21053cef90a5ff88613/lib/tasks/clear_missing_zuora_account_ids.rake#L20) on the `BillingAccount` model
* When :account_data_structure disabled
  * Leave the `zuora_account_relation` as-is, based on the `Customer`

Updating the CustomersDot records, both `Customer` and `BillingAccount`, has already been addressed.",1
120556645,2022-12-16 22:14:47.388,Update FindOrCreateCustomerService,"### Proposal

The `FindOrCreateCustomerService` [references `customer.zuora_account_id?`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/350e078423a0ffb5229731c2991b04e24dbaaf73/app/services/find_or_create_customer_service.rb#L111) which is a magic Rails method that checks the presence of the `zuora_account_id` column on the customer.  This will need to be updated to check for presence of a `BillingAccountMembership` when the `account_data_structure` feature flag is enabled.

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

All references in tests should also be updated/deleted.",1
120556515,2022-12-16 22:09:19.270,Update Customer queries using zuora_account_id,"### Proposal

There are multiple places in the app that query a CDot Customer using the `zuora_account_id` column.  When the `account_data_structure` feature flag is enabled, the BillingAccountMembership should be used to fetch the first Customer associated with the BillingAccount.

- [`Subscription#sold_to_customer`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/95e76dcb7a135079d7bdc7ad511bce9ce95c573c/app/models/subscription.rb#L650)
- [`SeatLinkCreateService`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/4ae39fa629f11d88d5575837412df990e624b9a5/app/services/seat_link_create_service.rb#L116)
- [`SyncUpOrderCustomerService`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/29a6c940afb709517efed7002d37be47edc6a280/app/services/sync_up_order_customer_service.rb#L25)

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

Tests should be updated, including Model specs to ensure that that...

> BillingAccountMembership should be used to fetch the first Customer associated with the BillingAccount.

Think about any permutations / exceptions that might occur with fetching the `first` vs `last`.",2
120556334,2022-12-16 21:58:43.798,Update RetryDeclinedReconciliationJob,"### Proposal

[The `subscription_names` method](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/e9eaf1283947f750b763c9e179626f0bbb341284/app/jobs/retry_declined_reconciliation_job.rb#L51) in `RetryDeclinedReconciliationJob` finds subscriptions in Zuora by first fetching the first CDot Customer that matches the `zuora_account_id`.  This code should be refactored to query Zuora Subscriptions directly using `zuora_account_id` and not use the `Customer` model.  The `account_data_structure` feature flag should not be necessary to use if querying Zuora Subscriptions directly.

Another option that would require the feature flag: Consider fetching the subscriptions via the matching `BillingAccount` instead of the `Customer` as it also has access to the `raw_subscriptions` method.

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

Tests might need to be updated / created to ensure that this method does indeed send the request.  It might be prudent to also use a mock to mock the Zuora API so we are not surprised by a rogue response.",1
120556316,2022-12-16 21:56:56.935,Refactor Invoices to use Account instead of Customer,"### Proposal

References of `current_customer.zuora_account_id` in [`InvoicesController`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/e9eaf1283947f750b763c9e179626f0bbb341284/app/controllers/invoices_controller.rb#L35) could be updated to `current_zuora_account.id` because the `require_zuora_account` before_action is used.  Using `current_zuora_account` is preferable as it allows us to transition to multiple billing accounts per customer more easily, as this would be fewer places to update in a later iteration.

More importantly, the [`InvoicesFinder`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/ccc5b4d03aaa3929ab72b3a36fdc7b6eb14d672c/app/finders/invoices_finder.rb#L3), which is only [referenced once](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/e9eaf1283947f750b763c9e179626f0bbb341284/app/controllers/invoices_controller.rb#L11) in the app the `InvoicesController`, can be refactored as well.  This service should accept a `Zuora::Account` instead of a `customer`, as all that is used from customer is `zuora_account_id`.",2
120556198,2022-12-16 21:49:59.621,Redefine zuora_account_id in the Customer model,"### Problem

There are many places in the app where the `zuora_account_id` attribute is referenced Customer.  However, when the `account_data_structure` feature flag is enabled, we want to avoid using this attribute.  Instead, the Customer's membership to a BillingAccount should be used.

### Proposal

The easiest way to iterate towards a solution is to override the `zuora_account_id` getter method that ActiveRecord provides.  Something like the following might work:

```ruby
# customer.rb

def zuora_account_id
  if Unleash.enabled?(:account_data_structure)
    billing_accounts.pick(:zuora_account_id)
  else
    super
  end
end
```

We should consider memoizing this method as well to avoid multiple queries to billing_accounts, if the `zuora_account_id` is referenced multiple times (which it must be in some places).

This will allow us to continue using `customer.zuora_account_id` throughout the app but use the new BillingAccount structure to fetch the `zuora_account_id` when the feature flag is enabled.  

I think there could be places where we reference `zuora_account_id` from a Customer where we want the actual attribute instead of the overridden method (iow. value from the BillingAccount), even after the feature flag is enabled.   These could be updated to pull directly from the attribute (e.g. `customer['zuora_account_id']`) instead of using `customer.zuora_account_id`.  The [backfill rake tasks](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/361c240649937ca9d00c9e74837f3ea7902496a8/lib/tasks/data_maintenance/billing_accounts/backfill_with_customers.rake#L17) for example.

This will apply to many usages throughout the app, including these below:
- [`Customer#mark_as_confirmed`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/95e76dcb7a135079d7bdc7ad511bce9ce95c573c/app/models/customer.rb#L61)
- [`Customer.update_zuora_contact`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/95e76dcb7a135079d7bdc7ad511bce9ce95c573c/app/models/customer.rb#L59)
- [`UpdateContactService`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/361c240649937ca9d00c9e74837f3ea7902496a8/app/services/update_contact_service.rb)
- [`PaymentFormsController`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/9ae796fa8060281378ff6800f2ad0aefa582821b/app/controllers/payment_forms_controller.rb#L50)
- [`CustomersController`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/8c832b035b30960fcae88a517ffd25b524784a1e/app/controllers/api/customers_controller.rb#L41)",2
120555296,2022-12-16 21:19:24.348,Use billing_account instead of customer_id on Orders,"### Problem

As of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4804+, the `billing_account_id` column exists on Orders.  The `BillingAccount` has a `zuora_account_id` attribute which should be the SSoT for the association to the Zuora Account.  The `BillingAccount` also has memberships with Customers.  However, the Orders table still has a reference to the `customer_id` as well.  There are likely many places where the billing account associated with the Order should be used instead of the Customer.

### Proposal

When the `account_data_structure` feature flag is enabled, the `billing_account` associated with the Order could be used instead of `customer` in many cases.  For example, when the customer is used simply to access the Zuora Account.  In other cases, we could access customers through the billing account memberships.

We will eventually remove the `customer_id` from Orders as part of https://gitlab.com/groups/gitlab-org/-/epics/8949+ in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4805+.",5
120555051,2022-12-16 21:08:54.130,Use billing_account instead of zuora_account_id on Orders,"### Problem

As of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4804+, the `billing_account_id` column exists on Orders.  The `BillingAccount` has a `zuora_account_id` attribute which should be the SSoT for the association to the Zuora Account.  However, the Orders table still has a reference to the `zuora_account_id` as well, leading to confusion about which field should be used.

### Proposal

When the `account_data_structure` feature flag is enabled, the `billing_accounts.zuora_account_id` associated with the Order should be used instead of `orders.zuora_account_id`.  We will eventually remove the `zuora_account_id` from Orders as part of https://gitlab.com/groups/gitlab-org/-/epics/8949+ in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5127+.",3
120548358,2022-12-16 17:42:34.316,Update Salesforce::FindAccountService,"### Problem

There are places in the application where `salesforce_account_id` is referenced from `Customer` (to be renamed `User`), when the `:account_data_structure` feature flag (introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4794) is enabled, the `Customer`'s `BillingAccountMembership` should be used instead.

**This issue** proposes to update `Salesforce::FindAccountService` to rely on the BillingAccount model and associated record when the `:account_data_structure` feature flag is enabled.

Note: The legacy code will be removed in a later issue once the feature flag has been vetted and promoted in production.

### Proposal

Changes from https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5389+ should solve for the conditional to decide if the value needs to be updated within CDot.

[ADD] Update `salesforce_account_id` for `customers` **and** the `billing_accounts` records to keep them in sync

### Result

- Always update both `salesforce_account_id` values to keep them in sync

### Next steps (if any)

### How will we measure success?",1
120548348,2022-12-16 17:42:18.616,Update clear_missing_salesforce_account_ids task,"### Problem

There are places in the application where `salesforce_account_id` is referenced from `Customer` (to be renamed `User`), when the `:account_data_structure` feature flag (introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4794) is enabled, the `Customer`'s `BillingAccountMembership` should be used instead.

**This issue** proposes to update `clear_missing_salesforce_account_ids` to rely on the BillingAccount model and associated record when the `:account_data_structure` feature flag is enabled.

Note: The legacy code will be removed in a later issue once the feature flag has been vetted and promoted in production.

### Proposal

- When :account_data_structure enabled 
  - Base the `salesforce_account_relation` on the `BillingAccount` model 
- When :account_data_structure disabled 
  - Leave the `salesforce_account_relation` as-is, based on the `Customer` 

When updating the CustomersDot records based on the SFDC `missing_account_ids` update both:
- [LEAVE AS-IS] Update the customer `salesforce_account_id` to `nil`
- [ADD] Update the billing account `salesforce_account_id` to `nil` 

### Result

- The SSoT model is used depending on the `:account_data_structure` feature flag status.
- Always update both `salesforce_account_id` values to keep them in sync

### Next steps (if any)

### How will we measure success?",2
120548337,2022-12-16 17:42:05.227,Test Cleanup Logic Refactor,":bulb: Consider moving this to a cooldown, cleanup dedicated interval:
- Post https://gitlab.com/groups/gitlab-org/-/epics/8950+
- Pre https://gitlab.com/groups/gitlab-org/-/epics/8951+

### Problem

We want to remove duplicated logic from `TestAccountCleanupCronJob` and `TestDataCleanupTask` to avoid these diverging in the future as a result to changes on one but not the other. Ultimately conceptually feels like this logic should be similar.

### Proposal

Consolidate logic from `TestAccountCleanupCronJob` and `TestDataCleanupTask`
1. Extract the cleanup logic into a service including:
  - `remove_zuora_data`: extract to be reused
  - `remove_sf_data`: extract to be reused
  - `customer` deletion
1. Look into using `request_with_retries` in this consolidated logic by either:
  - using it consistently for all cases (I like this approach)
  - passing a `retry:` parameter.
- Call the new cleanup service directly from `TestAccountCleanupCronJob` and `TestDataCleanupTask`

### Acceptance Criteria

- New service is created, tested and set to replace the old logic.
- Old tests pass mostly unchanged.",2
120548313,2022-12-16 17:41:41.460,Redefine salesforce_account_id at the customer level,"### Problem

There are places in the application where `salesforce_account_id` is referenced from `Customer` (to be renamed `User`), when the `:account_data_structure` feature flag (introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4794) is enabled, the `Customer`'s `BillingAccountMembership` should be used instead.

**This issue** proposes to redefine the `salesforce_account_id` meaning at the `Customer` instance level to use its related billing account based on the status for the `:account_data_structure` feature flag.

Note: The legacy code will be removed in a later issue once the feature flag has been vetted and promoted in production.

### Proposal

Redefine `customer#salesforce_account_id` method to:

```ruby
def salesforce_account_id
  strong_memoize(:salesforce_account_id) do
    if Unleash.enabled?(:account_data_structure)
      billing_accounts.pick(:salesforce_account_id)
    else
      super
    end
  end
end
```

FYI, we might not be able to use `strong_memoize` to memoize the feature flagged code.  I ran into problems unit testing with this implementation.  In https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6164, I ended up using `@zuora_account_id ||= billing_accounts.pick(:zuora_account_id)` instead.

This should account for all the simple / direct usages of the `salesforce_account_id` in the context of:
- `Salesforce::CreateAccountWorker`
- `Update `CreateSalesforceContactService`
- `TestAccountCleanupCronJob` (refactor recommended: Issue 2)
- `TestDataCleanupTask` (refactor recommended: Issue 2)
- `Api::CustomersController`

### Acceptance criteria

1. `salesforce_account_id` is used from the customer when the `:account_data_structure` feature flag is disabled.
1. `salesforce_account_id` is used from the customer's associated billing account when the `:account_data_structure` feature flag is enabled.
1. The impact of the change in the mentioned simple / direct users of the value is validated / tested.

### Next steps (if any)

### How will we measure success?",2
120531115,2022-12-16 12:44:40.490,Instrumentation for ramp subscriptions display,"### Proposal

Instrument the following actions on the ramp subscription card:

1. `Change subscription` button click (with saas/sm differentiation)
2. `Link subscription to a group` button click

| Event Action | Event Label | Event Category | Location |
|----------------|--------------|-------------|----------|
| click_button | change_subscription_ramp_saas/change_subscription_ramp_sm | Webstore | */subscriptions/* |
| click_button | link_nampespace_ramp | Webstore | */subscriptions/* |

### Result

### Next steps (if any)

### How will we measure success?",2
120529084,2022-12-16 12:00:49.602,[Feature flag] Rollout of `display_ramp_subscriptions`,"<!-- Title suggestion: [Feature flag] Enable description of feature -->

# Summary

<!-- Short description of what the feature is about and link to relevant other issues. -->

This issue is to rollout [Ramps subscriptions display in CustomersDot](https://gitlab.com/groups/gitlab-org/-/epics/8748) on CustomersDot production,
that is currently behind the `display_ramp_subscriptions` feature flag which will be created in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5373.

## Owners

- Team: ~""group::billing and subscription management"" 
- Most appropriate Slack channel to reach out to: `#g_billing_and_subscription_management`
- Best individual to reach out to: `@snachnolkar @rhardarson ` 
- PM: `@tgolubeva` 

## Stakeholders

<!--
Are there any other stages or teams involved that need to be kept in the loop?

- GITLAB_HANDLE of a PM
- The Support Team
- The Delivery Team
-->

## The Rollout Plan

- Partial Rollout with specific Customers on CustomersDot, [via Unleash](https://docs.gitlab.com/ee/operations/feature_flags.html#user-ids)
- Rollout on CustomersDot for a certain period (How long)
- Percentage Rollout on CustomersDot
- Rollout Feature for everyone as soon as it's ready

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? Sentry errors reports can also be useful to review -->

## Testing User/Customer IDs

<!--
List any Customer IDs for Customers that are happy to have this feature turned on early.

Remove if not applicable
-->

## Expectations

### What are we expecting to happen?

<!-- Describe the expected outcome when rolling out this feature -->

### What might happen if this goes wrong?

<!-- Should the feature flag be turned off? Any MRs that need to be rolled back? Communication that needs to happen? What are some things you can think of that could go wrong - data loss or broken pages? -->

### What can we monitor to detect problems with this?

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? -->

## Rollout Steps

### Rollout on non-production environments

- [x] Ensure that the feature MRs have been deployed to non-production environments, i.e. `customers-staging`.
- [x] Consider announcing that the flag will be enabled to potentially impacted groups, e.g. `#s_fulfillment_engineering`
- [x] Enable the feature globally on non-production environments by applying the appropriate environment, e.g. `customers-staging` and `customers-development`.
- [x] Notify the Software Engineers in Test (SETs) for Fulfillment via Slack and in a comment in this issue when enabling a feature flag in `customers-staging` as it can impact the QA pipeline.
- [x] Verify that the feature works as expected. Posting the QA result in this issue is preferable.

### Preparation before production rollout

- [x] Ensure that the feature MRs have been deployed to production
- [ ] Check if the feature flag change needs to be accompanied with a
  [change management issue](https://about.gitlab.com/handbook/engineering/infrastructure/change-management/#feature-flags-and-the-change-management-process).
  Cross link the issue here if it does.
- [x] Ensure that you or a representative in Fulfillment can be available for at least 2 hours after feature flag updates in production.
  If a different developer will be covering, or an exception is needed, please inform the Fulfillment team in #s_fulfillment_engineering
- [ ] Ensure any documentation has been updated
- [ ] Announce on [the feature issue](ISSUE LINK) an estimated time this will be enabled on production if applicable
- [x] If the feature might impact the user experience, notify `#s_fulfillment` and potentially `#support_gitlab-com`, as well as your team channel ([more guidance when this is necessary in the dev docs](https://docs.gitlab.com/ee/development/feature_flags/controls.html#communicate-the-change)).

### Global rollout on CustomersDot production

- [x] Confirm the feature flag is enabled on `staging` without incident
- [ ] Roll out the feature to targeted testing users first (if applicable)
- [ ] If applicable, [incrementally roll out](https://docs.gitlab.com/ee/operations/feature_flags.html#percent-rollout) the feature.
- [ ] Verify the change has the desired outcome with the limited rollout before enabling the feature globally on production.
- [x] Enable the feature globally on production environment
- [x] Announce on [the feature issue](ISSUE LINK) that the feature has been globally enabled.
- [ ] Wait for [at least one day for the verification term](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release).

### Release the feature

After the feature has been [deemed stable](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release),
the clean up should be done as soon as possible to permanently enable the feature and reduce complexity in the codebase.

<!-- The checklist here is to help stakeholders keep track of the feature flag status -->
- [ ] Create a merge request to remove `<feature-flag-name>` feature flag
  - [ ] Remove all references to the feature flag from the codebase
- [ ] Ensure that the cleanup MR has been deployed to both staging and production
- [ ] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [ ] Ensure production environment is still working as expected
- [ ] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [ ] Close this rollout issue.

## Rollback Steps

- [ ] This feature can be disabled by performing the following actions:
  - [ ] Disable the Unleash flag on the [feature flag page](LINK TO THE FEATURE FLAG EDIT PAGE)",1
120528924,2022-12-16 11:57:49.938,Manual testing scenarios for display of ramp subscriptions,"### Proposal
This is the issue to list down the manual testing scenarios before going live with display of ramp subscriptions using the new design.  
Scenarios need to be added in the description.

**EntApps test cases:** https://docs.google.com/spreadsheets/d/1xmdJ6ToiCyFNtqjrNPvwcGR7gCvkskjLnZXwAzEMT40/edit#gid=1700034675

### Templates for manual testing
**Note:** _Some of these scenarios are very granular and may not need a separate screenshot / recording. They have been listed so that we can intentionally check these points once all the issues are tackled. Please skip the screenshot column if that scenarios doesn't warrant a separate screenshot as it might be covered in an earlier screenshot._

#### SaaS
|Sr. No | Scenario | Status | Screenshot / Recording |
|-------| ------ | ------ |-------------|
| 1 |Card with new design is shown for ramp subscription| :white_check_mark:  | ![image](/uploads/006c0a0f9e7ba127490fd9a9c2b44a46/image.png) |
| 2 |Main product name is shown when no group is attached| :white_check_mark:  | ![image](/uploads/588293c557095ec667a8892296f9d787/image.png)|
| 3 |Group name is shown when group is linked| :white_check_mark:  | ![image](/uploads/cdafc105a503ae1770d2b3bed59e258a/image.png)|
| 4 |Subscription number is shown correctly in the badge next to title| :white_check_mark:  | ![image](/uploads/4388eee6f1a9f34312d8459d80a58050/image.png)|
| 5 |Gitlab group is shown as not assigned when group is not assinged| :white_check_mark:  | ![image](/uploads/eccc9b43eb8016871cd2fbd70879c326/image.png)|
| 6 |Gitlab group name is shown correctly when group is assigned| :white_check_mark:  | ![image](/uploads/51b53957aec37859c72bd38661ebc5cc/image.png)|
| 7 |Date text shows correctly with scenarios for expires / renews / expired (check scenarios in design)| :white_check_mark: | ![image](/uploads/c02ccd9dc51bc60483b9115988c5e178/image.png)  ![image](/uploads/e218fece362615143f2709928ec4f0be/image.png) ![image](/uploads/116b86fe6015195e693da67eb9c9b3b5/image.png) ![image](/uploads/5021c33350eba44ab70c451abab0648a/image.png)|
| 8 |Tooltip is shown correctly with scenarios for expires / renews / expired (check scenarios in design)| :white_check_mark:  | ![image](/uploads/5cf547a03d98ba7d3a832335d3f7fe46/image.png) ![image](/uploads/413e2ce9323fd6068d2886b621dbf878/image.png) ![image](/uploads/041cb92f7f75c561c271318ce20d475d/image.png) ![image](/uploads/c58041ca208f6b0cc7d572cee065ccdc/image.png)|
| 9 |Link subscription to group button is shown when group is not attached| :white_check_mark:  |![image](/uploads/f260d881aecaa0e0ef1d94b63f13a1bf/image.png) |
| 10 |Link subscription to group button is not shown when group is attached| :white_check_mark:  | ![image](/uploads/8c14918e9dce5f3689b8bd5aa2c4da06/image.png)|
| 11 |Link subscription to group button links the group correctly| :white_check_mark:  | ![image](/uploads/4988199951a748714674338ee61097ff/image.png) |
| 12  |Actions menu is shown with change subscription option| :white_check_mark:  | ![image](/uploads/17fe1029600ddd18ee2e8e1513f8a879/image.png) |
| 13 |Clicking on change subscription in actions menu opens the modal correctly| :white_check_mark:  | ![image](/uploads/5c0dcecb019f6975fb7e6e0c86373f9f/image.png)|
| 14  |The change subscription modal can be closed successfully| :white_check_mark:  | N/A |
| 15  |Main product details section is shown correctly with main product title| :white_check_mark:  | ![image](/uploads/747923bd92a12093fbe8c80b16c885c1/image.png)|
| 16  |No of seats in main product details are shown from active ramp| :white_check_mark:  | ![image](/uploads/d4c705807d3294d06bf9694e21deb2d5/image.png)|
| 17 |No of seats in main product details section are shown from first ramp when subscription starts in the future| :white_check_mark: | ![image](/uploads/461dee19fd088b6cdeb24413cc3e96ca/image.png)|
| 18 |No of seats in main product details section are shown from last ramp when subscription has expired| :white_check_mark:  |  ![image](/uploads/cf6a76afd0b1d74e991ae91521f66348/image.png)|
| 19  |Main product ramp details are shown correctly in table| :white_check_mark:  | ![image](/uploads/95621412672ed32e4266b0ae3e1977f6/image.png) |
| 20  |Storage product details section is shown correctly with storage product title| :white_check_mark:  | ![image](/uploads/88bdc44601d4a396eef07496aaf71b1f/image.png)|
| 21 |Amount of storage in storage product details section is shown from active ramp| :white_check_mark:  | ![image](/uploads/0a4e5dabc97938bd779fa451ed93444a/image.png)|
| 22  |Amount of storage in storage product details section is shown from first ramp when subscription starts in the future| :white_check_mark:  |![image](/uploads/5bb46c3e58aa50a5ecf093f137b277e0/image.png) |
| 23 |Amount of storage in storage product details section is shown from last ramp when subscription has expired| :white_check_mark:  |![image](/uploads/dd222876511d762181d168beea36d086/image.png) |
| 24 |Storage product ramp details are shown correctly in table| :white_check_mark:  | ![image](/uploads/f540fd49fefa0126500813ea3b3706d3/image.png)|
| 25 |CI mins product details section is shown correctly with CI mins product title| :white_check_mark: | ![image](/uploads/dff46122202ff117d5da4548859a4123/image.png)|
| 26 |Number of CI mins in CI mins product details section is shown as total of all rate plan charges| :white_check_mark:  | ![image](/uploads/54a7222ecedad41e77a361e74b36e32a/image.png)|
| 27 |CI minute product rate plan charges are shown correctly in table| :white_check_mark:  | ![image](/uploads/2981e1aeef9cecdc8d938b0e69eb949a/image.png) | 


#### SM
|Sr. No | Scenario | Status | Screenshot / Recording |
|-------| ------ | ------ |-------------|
| 1 |Card with new design is shown for ramp subscription| :white_check_mark:   | ![image](/uploads/c14c1f79b519280169b36bf062416c1d/image.png)   |
| 2 |Main product name is shown|  :white_check_mark:  | ![image](/uploads/c14c1f79b519280169b36bf062416c1d/image.png)  |
| 3 |Subscription number is shown correctly in the badge next to title| :white_check_mark:   | ![image](/uploads/c14c1f79b519280169b36bf062416c1d/image.png)  |
| 4 |Gitlab group name section is not shown| :white_check_mark:   | ![image](/uploads/c14c1f79b519280169b36bf062416c1d/image.png)  |
| 5 |Date text shows correctly with scenarios for expires / renews / expired (check scenarios in design)|   :white_check_mark: | ![image](/uploads/c14c1f79b519280169b36bf062416c1d/image.png) ![image](/uploads/baa100abdb185ed454a49bb50f471983/image.png) ![image](/uploads/b5b6f3c28b1c1a133680d1d94aed5ed2/image.png) ![image](/uploads/d45aecc5630d4e38dfb51fb36ed83031/image.png) |
| 6 |Tooltip is shown correctly with scenarios for expires / renews / expired (check scenarios in design)|:white_check_mark:  | ![image](/uploads/b2b98b83f56afaed3a39065359707d0c/image.png) ![image](/uploads/bac7b6f48544f373447eb037970f1fb9/image.png) ![image](/uploads/3a0c4d75a0ef837f2084ca6ff8761417/image.png) ![image](/uploads/fe414a03a2d2336291e5a163841b6ef1/image.png)|
| 7 |Link subscription to group button is not shown| :white_check_mark:   | ![image](/uploads/c14c1f79b519280169b36bf062416c1d/image.png)  |
| 8 |Actions menu is shown with change subscription option| :white_check_mark:   | ![image](/uploads/716607c5fa632b6f3c74849e922bccc9/image.png)  |
| 9 |Clicking on change subscription in actions menu opens the modal correctly|  :white_check_mark:  | ![image](/uploads/f3b94b8316ed2282c414ada40548e222/image.png)  |
| 10 |The change subscription modal can be closed successfully| :white_check_mark:    | N/A  |
| 11 |Activation code section is shown correctly with links redirecting to correct links for cloud licenses| :white_check_mark:   | ![image](/uploads/f49617b1d70010d7b2f100e90597d555/image.png)  |
| 12 |Activation code can be copied correctly | :white_check_mark:   | ![image](/uploads/42a425c02096c596670dcbe7a5a876b5/image.png)  |
| 14 |Main product details section is shown correctly with main product title| :white_check_mark:   | ![image](/uploads/0f3ca98ed0cb1a45db497525b546b9c3/image.png)  |
| 15 |No of seats in main product details are shown from active ramp|  :white_check_mark:  | ![image](/uploads/0fa15be371db72dbd9833a2a14c5301c/image.png)  |
| 16 |No of seats in main product details section are shown from first ramp when subscription starts in the future| :white_check_mark:   | ![image](/uploads/7f19f18c452720f8c66bec74c54cbdea/image.png)  |
| 17 |No of seats in main product details section are shown from last ramp when subscription has expired|  :white_check_mark:  | ![image](/uploads/ab6f20f16d5ed55eddba747f0d8f7272/image.png)  |
| 18 |Main product ramp details are shown correctly in table|  :white_check_mark:  | ![image](/uploads/3341b634d54ff31ec228cc934faf9955/image.png)  |
| 19 |Storage product details section is shown correctly with storage product title|  :white_check_mark:  | ![image](/uploads/d7e32cb4ae8d2b7e0a4ffdd4a6a980ce/image.png)  |
| 20 |Amount of storage in storage product details section is shown from active ramp|  :white_check_mark:  |   ![image](/uploads/0f148d8970fe61b03b77d1dd56bfee88/image.png)|
| 21 |Amount of storage in storage product details section is shown from first ramp when subscription starts in the future| :white_check_mark:    | ![image](/uploads/84288ba234966939c9675f3e4caee858/image.png)  |
| 22 |Amount of storage in storage product details section is shown from last ramp when subscription has expired|  :white_check_mark:  | ![image](/uploads/54b194178966715e74c48bb1eee67098/image.png)  |
| 23 |Storage product ramp details are shown correctly in table| :white_check_mark:   | ![image](/uploads/20e8d85a7bd5d3ff083f76da08d563bf/image.png)  |
| 24 |CI mins product details section is shown correctly with CI mins product title| :white_check_mark:   |   ![image](/uploads/70d41a36d2aa2c7210817db18da103e8/image.png)|
| 25 |Number of CI mins in CI mins product details section is shown as total of all rate plan charges| :white_check_mark:    | ![image](/uploads/696b499bdeb6ad235f965742f92472a0/image.png)  |
| 26 |CI minute product rate plan charges are shown correctly in table| :white_check_mark:   | ![image](/uploads/5173b0a73ae1fca41ca96f2b2338343b/image.png)  |
| 27 |Activation code can be applied correctly to cloud licenses| :white_check_mark:   |![image](/uploads/fa8cd730cf5cc2b92de75177342bdf4e/image.png)  ![image](/uploads/46f5bca0476dba6bd589b620385f5114/image.png)  |
| 28 |Download license section is shown correctly for legacy licenses| :white_check_mark:   | ![image](/uploads/cebab23d9f95f085bd9a7e983d10b111/image.png) |
| 29 |Legacy license can be downloaded correctly| :white_check_mark:    | N/A |
| 30 |Legacy license can be copied correctly| :white_check_mark:  | ![image](/uploads/ac20c9e5b70a897d04ddea53f52a9efb/image.png) |
| 31 |Legacy license can be applied correctly|   |![image](/uploads/f71925a400fa731b090a20705ebb7540/image.png)  ![image](/uploads/ae1346edc11681ec25c9621b94de1767/image.png)  |

#### Other scenarios
|Sr. No | Scenario | Status | Screenshot / Recording |
|-------| ------ | ------ |-------------|
| 1 | It shows additional seats correctly in ramps when subscription is amended to add seats|:white_check_mark:    |![image](/uploads/2a5c32fda17b3bb38645e0027a13ae2d/image.png) ![image](/uploads/d97a8df6e7ac663893218c3c078236dc/image.png)   | 
| 2 | It shows additional storage correctly in ramps when subscription is amended to add storage|:white_check_mark:    |![image](/uploads/2a5c32fda17b3bb38645e0027a13ae2d/image.png) ![image](/uploads/d97a8df6e7ac663893218c3c078236dc/image.png)   | 
| 3 | It shows additional CI mins correctly in ramps when subscription is amended to add CI mins| :white_check_mark:   | ![image](/uploads/2a5c32fda17b3bb38645e0027a13ae2d/image.png) ![image](/uploads/d97a8df6e7ac663893218c3c078236dc/image.png)  | 
| 4 | If subscription has a true-up product, it shows up on the subscription card and information about it is clear| :white_check_mark:   | ![image](/uploads/8cd86c21bb7cf9ee0b5196408ae54dc7/image.png)  | 
| 5 | If subscription has professional services or other one-time addon product, it shows up on the subscription card and information about it is clear| :x: | [Not covered in initial launch](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5665#note_1264797787)  | 
| 6 | It shows subscription card with ramp details correctly for storage only ramp subscriptions |  :white_check_mark:    | ![image](/uploads/932341ec9cf8bd48eb34df9cfff65246/image.png)  | 
| 7 | It shows subscription card with ramp details correctly for CI minutes only ramp subscriptions| :white_check_mark:     | ![image](/uploads/bfc95bc61c1d91cddc0131b9e1c67e36/image.png)  | 

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

Share videos in [s_fulfillment_demo](https://gitlab.slack.com/archives/C01AMAB58R5)

### Demo
https://www.youtube.com/watch?v=XbfA0oL4Sjc

### How will we measure success?",2
120528242,2022-12-16 11:41:04.230,Add action buttons section to subscription-v2 component,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->
### Proposal
Add the action buttons section to 
1. Link subscription to GitLab group (only in case of SaaS)
2. Change subscription button which renders a modal telling the customer to get in touch with the sales team to make changes to the subscription.  

![image](/uploads/1caaae6af3fe0cf163f5dcc63d5d324c/image.png)
![image](/uploads/c71e548e01c5a5ff8065cf6e0a6c3b46/image.png)
![image](/uploads/6eb7f706e25f3a21ee01c58a450935fb/image.png)

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?

**Design:** https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3916/",2
120527673,2022-12-16 11:27:57.874,Add subscription activation section to subscription-v2 component,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->
### Proposal
Add the subscription activation section to the subscription-v2 component which can be used by the customer to activate their SM subscription.
![image](/uploads/561ab3d4534025c6c096ed9ed1d822e5/image.png)

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?

Design: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3916",1
102642045,2022-01-25 19:44:37.805,Namespace with extra_shared_runners_minutes_limit may prevent subscription provisioning,"**Note:** this issue specifically deals with CI minutes that were added without a purchase (ie via the chatops command) - there is a similar issue that deals with namespaces that have an existing CI minutes pack purchase: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3371+

Came across [a customer](https://gitlab.zendesk.com/agent/tickets/263986) (internal) who was unable to link their new subscription purchase through customersDot ""Change linked namespace"".

In the [related sentry error](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/3130777):

> Namespace change to xxxxxxxx is not allowed: Target namespace can't have additional CI minutes

I tracked this down to the customer having been at one point given extra minutes using the chatops function [`namespace minutes`](https://gitlab.com/gitlab-com/chatops/-/blob/5cdbfaecd14b0a8ee475a0fa3a2f6f09719aad77/lib/chatops/commands/namespace.rb#L65-75), which calls [`GitLab::Client#set_namespace_extra_minutes`](https://gitlab.com/gitlab-com/chatops/-/blob/5cdbfaecd14b0a8ee475a0fa3a2f6f09719aad77/lib/chatops/gitlab/client.rb#L42-45) and that invokes the API to set `extra_shared_runners_minutes_limit`.

This appears to come from the [namespace validator](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/1af3fcc24508a25e00b1cecc9f62ba15b7164aa2/lib/validators/namespace_transaction_validator.rb#L34) when called by [`UpdatePlanInfoService`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/services/gitlab/namespaces/update_plan_info_service.rb):

> if target_namespace.has_extra_shared_runners_minutes?

manually setting that value back to 0 (via API) allowed me to successfully link the customer's subscription from their cDot account.

In [some related discussions](https://gitlab.com/gitlab-com/support/toolbox/console-training-wheels/-/merge_requests/100#note_845461902), @tyleramos and @cwiesner noted that this validation may not be needed for all subscription updates, but perhaps more specifically for when a subscription is changing between namespaces.

# Reported examples

1. https://gitlab.zendesk.com/agent/tickets/263986
1. https://gitlab.zendesk.com/agent/tickets/277280
2. https://gitlab.zendesk.com/agent/tickets/314654 (Added 2022-Aug-05)
3. https://gitlab.zendesk.com/agent/tickets/313080  
1. https://gitlab.zendesk.com/agent/tickets/309643  
1. https://gitlab.zendesk.com/agent/tickets/309767  
1. https://gitlab.zendesk.com/agent/tickets/309296  
1. https://gitlab.zendesk.com/agent/tickets/313127  
1. https://gitlab.zendesk.com/agent/tickets/311366  
1. https://gitlab.zendesk.com/agent/tickets/309947
1. https://gitlab.zendesk.com/agent/tickets/315689
1. https://gitlab.zendesk.com/agent/tickets/316415
1. https://gitlab.zendesk.com/agent/tickets/316438
2. https://gitlab.zendesk.com/agent/tickets/332541

/cc @jhyson",5
101180467,2022-01-24 23:21:06.809,"Follow-up from ""Skip reconciliation when SM order cancelled""","The following discussion from !4257 should be addressed:

- [ ] @vshumilo started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4257#note_819799476):  (+4 comments)

> @tyleramos Do you know / remember why we want to update the order when the subscription is SaaS + with namespace associated only?
> 
> For the cases:
> - SaaS Subscription that is not linked to a namespace in Gitlab.com
> - SM
> 
> Don't we want to at least execute the [update_order](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/f1f8fd08819c755e782a971329b3bac743ff39dd/app/services/process_inactive_subscription_service.rb#L19) to keep it in sync with Zuora?
> 
> Ref: This service was created out of code from the `zuora_callbacks_controller` [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/commit/caba7cf0a41991b3cc7d0959c7e0ead7abe2b0f2)

During the `ProcessInactiveSubscriptionService` execution ONLY orders for SaaS subscriptions with an associated namespace on Gitlab.com are [updated to free](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/6e5407cf766e93cbfd11410f43314aace738b151/app/services/process_inactive_subscription_service.rb#L58-L62).

We want to keep the order up to date always including:
- SaaS subscriptions without an associated namespace
- SM subscriptions",2
100985172,2022-01-20 14:30:03.661,Remove obsolete field `usage_ping_required_metrics_enabled` from License,"### Problem

The column `usage_ping_required_metrics_enabled` in the `licenses` table is no longer used and should be removed. It was planned originally as part of Super Sonics but was pretty quickly replaced by the field `operational_metrics_enabled`. I don't believe this field was ever really used. You can find more context about the field change in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3248.

### Proposal

The end goal is to remove this column from the database but must be done in a few steps:

1. [x] - Ignore the column in https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4260 (Deployed)
1. [x] - Remove the column from the DB in https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4255 (Deployed)
1. [x] - Remove the ignore column logic in https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4261 (Deployed)",1
100967649,2022-01-20 10:38:32.699,Return empty on unathenticated requests for order_preview,"### Problem

New users can not purchase Storage without having CustomersDot account.

### Proposal

Remove the authenticated check for `order_preview` and instead check for user presence in the resolver itself. If the user is not present - return empty

### Result

New users are able to purchase Storage without having CustomersDot account

### Next steps (if any)

### How will we measure success?",2
100873104,2022-01-19 00:55:10.822,Add Customers API to check whether customer should see overage alerts for the subscription usage,"### Problem

As part of https://gitlab.com/gitlab-org/gitlab/-/issues/348481, we need to be able to determine whether customer should see overage alerts for the subscription usage ~~the subscription has the reconciliation flag enabled on Zuora~~, so that we only show alerts for the appropriate subscriptions.

ATM a subscription will be charged for usage overage in [several scenarios](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3934#note_818310692). This would change as we improve the process. If we won't(do not want to , or not ready to) charge the customer for a subscription's usage overage, we do not show the alert(otherwise it is confusing to customer).

This issue will iterate from show alert to `subscription has the reconciliation flag enabled on Zuora`, which I think it includes: 
- `Use case 3: Sale Assisted QSR` in the table.
- `Use case 6: self service QSR` in the table.

### Proposal

Create or modify an endpoint on the customers application to expose this information to the GitLab application and create the functionality on the GitLab application to fetch and cache this data.",5
100759720,2022-01-17 09:47:14.956,Zuora iframe date/month inputs are broken on narrow viewports,"Month/year input styles for payment information are broken on narrow viewports. This is reproducible on Edge and Firefox (maybe more) on screens from 320px to 343px and from 992px to 1200px.

### Problem

![Screenshot_2022-01-17_at_10.35.51](/uploads/cd895c8446df0e6ccbd3a7c12fae3ef1/Screenshot_2022-01-17_at_10.35.51.png)

Related issue: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2545

### Steps to reproduce

1. Make sure the CustomerDot is configured and working locally
1. Open the following link [http://localhost:5000/subscriptions/new?plan_id=2c92c0f97700a4f7017704c7fe465919](http://localhost:5000/subscriptions/new?plan_id=2c92c0f97700a4f7017704c7fe465919)
1. Choose `Add a new Credit Card` in payment method form
1. Resize browser

### Proposal

Fix payment styles, test in multiple browsers, make sure that it's properly updated in test and production Zuora. For guidance on updating Zuora iFrame styles, check [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/doc/setup/frontend.md#styling-zuoras-iframe).

When verified locally, please follow the steps described in [docs](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/doc/setup/frontend.md#update-compiled-css) to apply the resulted CSS to staging/production iframe.",2
102491013,2022-01-14 18:03:36.876,[SaaS] Send introductory email about user overages after purchase,"## Problem to solve

SaaS customers are being surprised and taken off-guard by Quarterly Subscription reconciliations. Because self-service SaaS customers have not historically been charged true-ups, the QSR process and the fact that they have to pay for overages is totally new. See tickets from customers [here](https://gitlab.com/gitlab-org/fulfillment-meta/-/issues/337).

## Intended users

This issue is just for SaaS customers.

* Group Owners of a group who has just purchased a subscription
* Only groups enrolled in quarterly subscription reconciliation. See exactly which use cases we're solving for in the [Epic description](https://gitlab.com/groups/gitlab-org/-/epics/7229#saas-customers).

## Proposal

After a subscription has been purchased for a group in GitLab, send an email to **all** group Owners 1 day after a subscription has been purchased to make them aware of how users are counted and how overages are handled.

We should send an email to all group Owners (not just the group Owner who purchased the subscription), because all group Owners should be aware of the overage behavior.

[Design here](https://gitlab.com/gitlab-org/gitlab/-/issues/347267/designs/Email_to_group_Owners_1_day_after_purchase_with_info_about_QSR.png)

#### Email copy

>>>

Subject line: Managing users in your subscription

Dear [customer],

Thank you for purchasing a GitLab.com subscription! As you get started, we want to make sure you understand some important billing information.

Your subscription cost is based on the maximum number of seats you use during the billing period. If you reach the number of seats in your subscription, you can continue to add users, but GitLab bills you for the overage. These bills occur every quarter.

Read more about quarterly reconciliation in [our product documentation](https://docs.gitlab.com/ee/subscriptions/quarterly_reconciliation.html).

If you have any questions about this process, [please reach out](https://support.gitlab.com/hc/en-us/requests/new?ticket_form_id=360000071293). We are happy to assist.

Thank you for your business!

GitLab Billing Team

>>>

## Implementation Plan


| Issue | Issue link|
|--|--|
| Create mailers | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3999 |
| MVC identify CustomersDot emails to send to | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4000 |
| Send introductory email 1 day after purchase | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4007 |
| Send introductory email 1 day after renewal | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4008 |
| Query GitLab.com for group owners emails and send | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4009 |",0
100615762,2022-01-13 22:53:28.795,Zuora Central Sandbox Refresh procedures,"### Problem

Last time [Zuora Central Sandbox was refreshed](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/financeops/finance-systems/-/issues/477), Fulfillment engineers were blocked from using CustomersDot stg while the refresh was happening, but even ran into to problems after the refresh was completed.  For instance, many engineers needed to request Zuora User access again to be able to log into the [Zuora web app](https://test.zuora.com/).  ~""Enterprise Applications"" apps is already working on improving the refresh process by putting together [this playbook of refresh steps](https://docs.google.com/document/d/1smfh7LnmKZYtQ5c9GfHxrhs5-7yUkIJQ4N1fywjNMq4/edit).

Another common problem encountered by people testing in CustomersDot stg after the refresh was the inability to make purchases ([example 1](https://gitlab.com/gitlab-org/gitlab/-/issues/327896#note_808722682), [example 2](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/financeops/finance-systems/-/issues/477#note_807833598)).  This was due to the fact that Customers in CDot stg had `zuora_account_id`s that no longer referenced accounts in Zuora Central Sandbox post refresh.  We are introducing a rake task in https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4229 which will clear these orphaned `zuora_account_ids` from CDot stg.

This issue is aimed at identifying any other ways we can improve our post-refresh steps as it pertains to CustomersDot.  Are there any other models that should be updated or cleared?  Here are some thoughts I had, but @fulfillment-group/be please offer up others you might have:

- Instead of simply clearing the `zuora_account_id` for customers, would there be value in truncating the entire `customers` table?  People using CDot stg could simply sign up for new customer accounts to avoid confusion.
- Consider truncating the `orders` table in CDot.  Given that `orders` is strongly tied to Zuora, this table is largely broken when Zuora is refreshed.  Orders with references to `zuora_subscription_name` and `zuora_subscription_id` would be broken.  Should we just start from a clean slate?  In fact, we risk running into collisions if we don't rectify this.

These are just a few idea to start us off.  Please feel free to add to this list or add your thoughts.

### Proposal

Create a rake task to truncate DB tables affected by the Zuora refresh.  This might be as simple as using the following command to truncate a list of tables:

```
ActiveRecord::Base.connection.truncate_tables([:table1_name, :table2_name])
```

This is a list of tables we could consider not truncating:

* `admins`
* `customers`: we will clear the zuora_account_ids that no longer match using a separate rake task
* `features`: to have the correct states of flipper feature flags after the refresh
* `feature_gates`
* `schema_migrations`
* `zuora_user_with_hosts`
* `coupons`: Check with @rcobb if this can/should be truncated
* `leads`: Check with `@a_akgun` if this can/should be truncated

We could include `local_records` in the list of tables to truncate but we'd need to recreate this data by [running the following command](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/f293ff2309025232e67d51c95171a8150cbf61e3/README.md#update-product-information): `IronBank::LocalRecords.export`.",3
100222528,2022-01-06 22:25:15.698,Discovery:  Is CDot impacted in any way to known changes of in the Quote objects in SFDC,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
Zuora CPQ data in SFDC changes once Orders is enabled in the related Zuora environment.  CDot integrates with SFDC and interacts with Zuora CPQ data.

### Proposal
Peer into business logic in CDot to understand if there are references to known Zuora CPQ data in SFDC that is changing.  List of impacted fields is found here:  https://gitlab.com/gitlab-com/business-technology/enterprise-apps/intake/-/issues/493#summary-findings-orders-with-quote-studio-v-production-no-orders

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result
Fulfillment team can sign off that normal booking processes between CDot<>Salesforce will not break due to the known CPQ data changes.

### Next steps (if any)
Nothing additional to the Proposal

### How will we measure success?
Fulfillment:Licensing approval and confirmation that no order-to-cash disruptions are expected due to the changes in CPQ when enabling Zuora Orders.",3
100217894,2022-01-06 19:46:18.027,[UX] Update subscription card with Ramp data and appropriate actions on Manage Subscriptions page,"## Problem

In order to support the new Zuora Orders and Ramps objects, we need to rethink 1) how ramped subscriptions should be displayed for the customers in the UI; and 2) what actions should be available for the ramped subscriptions.

1. When a subscription with Ramps is created in Zuora, it does not currently display clearly on the Manage Purchases page. 
1. Due to the complex nature of a Ramp deal, [sales ops has requested](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/intake/-/issues/505#note_809749301) that users cannot self-add seats or renew a ramp. They should instead be directed to sales.

For additional details about Ramps, [demos](https://gitlab.com/groups/gitlab-org/-/epics/8748#ramp-demos-in-zuora-and-sfdc) and [sample data](https://gitlab.com/groups/gitlab-org/-/epics/8748#sample-data), see the parent epic: https://gitlab.com/groups/gitlab-org/-/epics/8748+

## Proposal

### What we show to the customer

1. Display every ramp period on the subscription card, so that the customer is aware how many seats they have access to for the time period.
2. Hide all subscription action buttons (other than link subscription to SaaS group), and display a message that directs the customer to Sales for subscription changes ([sales ops' request](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/intake/-/issues/505#note_809749301)).

### What the customer can do

The subscription will be view only. Customer will not be able to make changes to the subscription via Customer Portal.

## Design

This is a fairly complicated topic, and updating how we display information in the subscription card is a major part of this, so I've recorded 2 videos to walk through the context and the changes.

* [Part 1/2: Ramps overview and why we can't use the current subscription card to display ramps](https://www.loom.com/share/d7fb7744acd14815ae909a64afacf6a4) (4 mins)
* [Part 2/2: Overview of subscription card changes and how ramped subscriptions are shown in the subscription card](https://www.loom.com/share/8f48c533691c43a6ac6349f1c7d37a13) (7.5 mins)

Questions that are answered in the video:

* Why can't we use the existing subscription card for ramps display?
* How does Zuora structure ramps data?
* What is the new subscription card display that's being proposed?
* How are we iterating into a new subscription card display? What is the MVC?

As I mentioned in the video, ramps will be the MVC of the subscription card information hierarchy updates. We'll handle other use cases in later iterations, and I've opened up [an issue for that](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5317). In the design section of this issue, you'll only find ramps-related mockups, so if you're looking for mockups for other use cases they can be found in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5317.

### Mockups and design resources

- Designs for ramps can be found in the design section of this issue
- [Figma file](https://www.figma.com/file/U9JvYVy1Ls9IKrrPw1vt38/Subscription-management?node-id=239%3A13266&t=9Up9sTBj5T9nmA8m-1)

## Solution validation

See [solution validation issue](https://gitlab.com/gitlab-org/ux-research/-/issues/2259#what-did-we-learn) for insights and recommendations",2
99115139,2021-12-15 23:47:21.649,Fulfillment dev review of Support CustomersDot console functions,"### SUMMARY

As a result of [this ask](https://gitlab.com/groups/gitlab-org/-/epics/6828#note_729956691) we want to review some Mechanizer functions to feedback support and possible detect some areas where the logic might not be inline with CustomersDot.

Review is associated to issue: https://gitlab.com/groups/gitlab-org/-/epics/6828#note_729956691

This issue exists to track the effort associated to the group and milestone as these labels cannot be set in the above referenced issue.

[Review is timeboxed](https://gitlab.com/groups/gitlab-org/-/epics/6828#note_748899271).

### OUTCOME

Highlighted functions were reviewed via MR (https://gitlab.com/gitlab-com/support/toolbox/console-training-wheels/-/merge_requests/89) with comments and suggestions.",1
99028152,2021-12-14 16:35:03.239,Incorrect purchase email styling,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you're about to submit isn't a duplicate.

Do not include confidential information!
--->

# Bug

## Summary

When testing the purchase flow on staging the current new purchase email seemed to be broken, it was missing styling and rendering incorrectly.

## Steps to reproduce

1. Buy a new subscription on staging
1. View `[GitLab Transactions] Your GitLab Premium/Ultimate Purchase` email

## Behavior

| What is the current *bug* behavior? | What is the expected *correct* behavior? |
| ------ | ------ |
| ![image](/uploads/d9a3d61ca7037df7a4c0c7027581f0f7/image.png) | ![image](/uploads/5bc25ff11b80b16415cdee6c1437e708/image.png) |",2
98996252,2021-12-14 09:21:08.928,Daily empty vcr cassettes not reporting anymore,"### Problem

The [daily empty vcr cassettes](https://gitlab.com/groups/gitlab-org/-/epics/6519) job has stopped reporting results. The last result is from Nov 11th [Slack link](https://gitlab.slack.com/archives/CL7SX4N86/p1636601563124400). The job is still running daily as it can be seen [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/jobs/1880866396). But it apparently failed at some point and has not reached the [reporting part](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/721ae19719c84b6265148cd50f8fc50770254d39/.gitlab-ci.yml#L198) of the job. It is allowed to [fail](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/721ae19719c84b6265148cd50f8fc50770254d39/.gitlab-ci.yml#L191) though.

### Proposal

Investigate why the job is not being executed correctly anymore and submit a fix.

### Result

Running daily empty vcr cassettes job.",2
98984758,2021-12-14 06:04:42.494,Update successful purchase modal to have one CTA,"### Problem

![image](https://gitlab.com/gitlab-org/customers-gitlab-com/uploads/45fe8ae1c9f6c58ef378145793918796/image.png)

The current modal has two CTA buttons. The main CTA `Activate your license` leads the user away from CDot into the [docs](https://docs.gitlab.com/ee/user/admin_area/license.html). This can be confusing and is not ideal.

### Proposal

We should only present one CTA button that should link to the `Manage purchases` page similar to the [original proposal](https://www.figma.com/file/ecx0Hv66uG2GYuLby8OBgU/Super-sonics%3A-Checkout-(without-enforcement-to-upgrade-to-14.0)?node-id=234%3A7062).

![Success-Modal](https://gitlab.com/gitlab-org/customers-gitlab-com/uploads/ca34e0b8d0cb2e6804dc539358e4c215/Success-Modal.png)

Relevant UX issue: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3870",1
98962946,2021-12-13 17:59:09.705,Fix broken link in purchase confirmation email,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you're about to submit isn't a duplicate.

Do not include confidential information!
--->

# Bug

## Summary

Clicking on `upload it to your GitLab instance` in the purchase confirmation email goes to a 404

## Steps to reproduce

- Purchase a license
- Check email
- Click on ""upload it to your GitLab instance""

## What is the current *bug* behavior?

Link goes to a 404 on the docs site

## What is the expected *correct* behavior?

Link should go to https://docs.gitlab.com/ee/user/admin_area/license.html

## Relevant logs and/or screenshots

![image](/uploads/14c6d4fc93f57e836d8accc961cc0c42/image.png)

<!--- ## Workarounds

(Ways to get around the issue)

## Reported examples

1.
1.
1.


Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",1
98941232,2021-12-13 12:28:55.671,"Change ""Upgrade"" button to ""Upgrade plan""","![image](/uploads/00686353a73a00585dba2ee48f2073e5/image.png)

## Proposal

Based on [this discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3860/designs/1_-_New_subscription_purchase.png#note_764671505) it was recommended we should be more explicit with the language surrounding Upgrades of tiers and Gitlab versions. We should change the button text from `Upgrade` to `Upgrade Plan`.",1
98528411,2021-12-06 14:24:08.450,Unify root and /subscription pages,"Now when `/plans` page is removed we can unify templates that we show on root and /subscription pages. Currently the only difference between them is where ""Buy new subscription"" link leads for users with active subscription.

| https://customers.staging.gitlab.com/ | https://customers.staging.gitlab.com/subscriptions |
| ------ | ------ |
| ![Screenshot_2021-12-06_at_15.14.31](/uploads/b5721ac65eab826ff2856adcdd7b9e6c/Screenshot_2021-12-06_at_15.14.31.png) | ![Screenshot_2021-12-06_at_15.10.43](/uploads/3d6318a42e14e58de6213f596a7e79ab/Screenshot_2021-12-06_at_15.10.43.png) |
| `Buy new subscription` is a link that leads to pricing page | `Buy new subscription` opens a modal window ![Screenshot_2021-12-06_at_15.15.36](/uploads/91dfa030cd18e8a77412db0fd685ac14/Screenshot_2021-12-06_at_15.15.36.png)|

### Suggestion

We should keep only one view. I would suggest to stick with a more simple one (current root). We should clean up th `SubscriptionController#index` and remove unnedeed views.

### Tech details to take care of during implementation (thanks @qzhaogitlab for checking it):

Check the details in the [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4124#note_752931041)

:arrow_right: This is the direction we chose.

* update `SubscriptionsController#index` to show a different (root) view
* clean up the `VisitorsController` -> previously, `VisitorsController`(as the root_url) handled both `authenticated` and `unauthenticated` users. Now we can keep only `handle_signed_in_user`
* cleanup old subscription index view & modal

:arrow_right: If we decide to keep /subscription page template (but we didn't!)

We could simply set `root to: 'subscriptions#index'` in [config/routes.rb](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/1a001e7db7b361b49dd4c2afb5fea829cc831955/config/routes.rb#L28)

But then we also need to clean up `SubscriptionsController#index`:

* simplify `@subscriptions = SubscriptionsFinder.for_customer(current_customer)`, just the same as current `VisitorsController#index`
* update the view file",2
98376313,2021-12-02 21:29:32.896,Customer salesforce_account_id is being set to null after first purchase in stg,"### Problem

As described in [this thread](https://gitlab.com/groups/gitlab-org/-/epics/6606#note_750835063), we are seeing opportunities fail to create when testing OH in staging.

Here's an example from the sidekiq.log:

```
2021-11-30T13:52:01.158Z 2382585 TID-gq1lwdct1 Salesforce::CreateOpportunityWorker JID-a22456205ad4b4671c1f5770 ERROR: {""message""=>""#<Salesforce::OpportunityNotCreated: Salesforce::OpportunityNotCreated>"", ""error_message""=>""Salesforce::OpportunityNotCreated"", ""args""=>[84005, ""A-S00055394"", ""8a8aa2e37d6ef23e017d702667464f52""]}
2021-11-30T13:52:01.159Z 2382585 TID-gq1lwdct1 Salesforce::CreateOpportunityWorker JID-a22456205ad4b4671c1f5770 INFO: fail: 1.312 sec
2021-11-30T13:52:01.159Z 2382585 TID-gq1lwdct1 WARN: {""context"":""Job raised exception"",""job"":{""class"":""Salesforce::CreateOpportunityWorker"",""args"":[84005,""A-S00055394"",""8a8aa2e37d6ef23e017d702667464f52""],""retry"":true,""queue"":""salesforce"",""jid"":""a22456205ad4b4671c1f5770"",""created_at"":1638264106.5169365,""enqueued_at"":1638280319.847346,""error_message"":""Salesforce::OpportunityNotCreated"",""error_class"":""Salesforce::OpportunityNotCreated"",""failed_at"":1638264107.6331813,""retry_count"":9,""retried_at"":1638273562.4499516},""jobstr"":""{\""class\"":\""Salesforce::CreateOpportunityWorker\"",\""args\"":[84005,\""A-S00055394\"",\""8a8aa2e37d6ef23e017d702667464f52\""],\""retry\"":true,\""queue\"":\""salesforce\"",\""jid\"":\""a22456205ad4b4671c1f5770\"",\""created_at\"":1638264106.5169365,\""enqueued_at\"":1638280319.847346,\""error_message\"":\""Salesforce::OpportunityNotCreated\"",\""error_class\"":\""Salesforce::OpportunityNotCreated\"",\""failed_at\"":1638264107.6331813,\""retry_count\"":9,\""retried_at\"":1638273562.4499516}""}
2021-11-30T13:52:01.159Z 2382585 TID-gq1lwdct1 WARN: Salesforce::OpportunityNotCreated: Salesforce::OpportunityNotCreated
2021-11-30T13:52:01.159Z 2382585 TID-gq1lwdct1 WARN: /home/fulansdep/CustomersDot/releases/20211130083215Z/app/services/salesforce/create_opportunity_objects_service.rb:188:in `create_salesforce_opportunity'
/home/fulansdep/CustomersDot/releases/20211130083215Z/app/services/salesforce/create_opportunity_objects_service.rb:4
```

After some investigation, we determined the source of the bug was a difference between the Order Processed callout and the New Subscription Created callout.

- `New Subscription Created` callout returns `<parameter name=""account_crm_id""></parameter>`
- `Order Processed` callout returns `<parameter name=""account_crm_id"">null</parameter>`

You can see this in the callout history for [this customer in api sandbox](https://apisandbox.zuora.com/apps/CustomerAccount.do?method=view&id=8ad09f8a7d769bad017d7990c06f3883).

### Proposal

Despite this likely being a bug in Zuora given the discrepancy in how the callouts are handled, we can account for this in CustomersDot when parsing the callout attributes from the request body.  CustomersDot can handle `""null""` value as a empty string.  The `Order Processed` callout should then be processed like other callouts at that point.",2
98197756,2021-11-30 20:16:30.177,Instance not able to seat link using existing cloud license,"### Problem

As described in these Slack threads ([first](https://gitlab.slack.com/archives/C029YFPUA6M/p1637926425309000) and [second](https://gitlab.slack.com/archives/C01BPM66KNE/p1638280781120700)), [a customer](https://customers.gitlab.com/admin/customer/221264) who was previously using a license file for their SM subscription ([link to Zuora subscription](https://www.zuora.com/apps/Subscription.do?method=view&id=8a129bb27d37d510017d3a23c8b814a6)), renewed their subscription (on Nov 19) before it was set to expire on Nov 24.  They decided to activate the renewed subscription on Nov 22.  The customer was understandably confused because the new synced cloud license showed information from the subscription term that was about to expire.  They waited until Nov 24 to see if the new subscription details would be synced but found they didn't sync.  Attempts to manually sync the subscription were also unsuccessful.

On Nov 24, when the new subscription term was set to start, CustomersDot received a seat link request at 03:26:17 and a [cloud license](https://customers.gitlab.com/admin/license/1009153) was generated for the new term, but this license didn’t seem to get persisted to the instance. Because the new license didn’t get persisted, all future seat link attempts from the instance (auto or manual) used [its current (outdated) license](https://customers.gitlab.com/admin/license/1009081) key.  In this particular case, it appears the seat link requests for the previous day (report_timestamp = 2021-11-23 12:00:14) updated the LicenseSeatLink records instead of creating new ones.  As part of that update, the `license_id` was updated to [the new cloud license](https://customers.gitlab.com/admin/license/1009153).  The link to the instance’s license was lost.

We can see this in the previous versions of this LicenseSeatLink:
```
license seat link (ver 1):
  id: 2832633
  report_timestamp: 2021-11-23 12:00:14
  updated_at: Tue, 23 Nov 2021 15:59:57
  license_id: 1009080

license seat link (ver 2):
  updated_at: Tue, 23 Nov 2021 16:02:36
  license_id: 1009081 (a new license because customer `name` changed)

license seat link (ver 3):
  updated_at: Wed, 24 Nov 2021 03:26:17
  license_id: 1009153 (a new license because `users_count` changed to 30)
```

This meant the [lookup here](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/8c1409ed275594ae63487d1fb85a726297c296f5/app/controllers/api/v1/seat_links_controller.rb#L59) to find the `SelfManagedInstanceActivation` record will no longer work with the existing license.  That’s why we see from Nov 24 until a workaround was used to fix seat link that all `LicenseSeatLink` records created (between nov 24 to 30) did not have a corresponding `license_id` (because they were not considered part of ""cloud sync"".

### Proposal

CustomersDot should avoid updating `license_id` in the `SeatLinkCreateService`, and instead simply add a new `LicenseSeatLink` record instead.  If this logic were used, the next manual or auto seat link request from the customer's instance likely would have resolved the seat link connection and persisted the license for the new term.",2
97836212,2021-11-23 20:51:54.240,OH Testing: UC-12,"## Summary

This is a specific testing issue for use case 12 on https://gitlab.com/groups/gitlab-org/-/epics/6606

### Testing DRIs

|Tester ID | Tester Name | Status |
|:---:|---|---|
| 1 |  @a_luna | UC-12a :white_check_mark: Completed & Passed <br> UC-12b :white_check_mark: Completed & Passed <br> UC-12c :white_check_mark: Completed & Passed |
| 2 |  |  |

### UC-12: Quarterly reconciliation adds seats to a subscription

<details>
<summary>UC-12.a: Self-managed subscription</summary>

| Step ID | Test Step   | Description | Expected Outcome | Testable? | Pass/Fail |
|---------|--------|----|----------|:---:|:---:|
| T-1     | Purchase Premium for 5 users (12 months)                                             | New Subscription Purchase. SM Premium link: https://customers.staging.gitlab.com/subscriptions/new?plan_id=2c92a01176f0d50a0176f3043c4d4a53                                                                                                                   | (1) Purchase flow is successful. <br> <br> (2) Completes with legacy license and activation code email.                                                                                                                                                                                                                                                                                                                                                                                                                                                           |Y | |
| T-2     | Activate license                                                                     | Receive the code via email and follow the activation steps in the email. Must be on version xx.x+                                            | (1) The instance successfully activates and provisions paid features. <br> <br> (2) `Turn On Cloud Licensing` flag in Zuora is set to `Yes` <br> <br> (3) `Turn On Seat Reconciliation` flag in Zuora in Zuora is set to `Yes`|Y | |
| T-3     | View license/subscription details                                                    | Navigate to the Subscription page in the SM instance to verify the license details are accurate                                              | Validate Subscription `start date`, `end date`, `Users in License` <br> <br> Billable Users count should be `1`, Max Users count should be `1`, Users in License count should be `5`, Users over License count should be `0`                                                                                                                                                                                                                                                                                                                                      |Y | |
| T-4     | Create 6 users in your instance. Assign them to a group with the role of `developer` | https://docs.gitlab.com/ee/user/profile/account/create_accounts.html <br> <br> https://docs.gitlab.com/ee/user/group/#add-users-to-a-group             | This is not a test, just a required step for the test. Expected outcome is to have 7 billable users on the instance.                                                                                                                                                                                                                                                                                                                                                                                                                                    | N/A| N/A|
| T-5     | View license/subscription details                                                    | Navigate to the Subscription page in the SM instance to verify the instance has exceed its licensed user count                               | This is not a test to verify a new feature, just a step to validate your test steps until now are valid.                                                                                                                                                                                                                                                                                                                                                                                                                                                |N/A |N/A |
|T-6| Purchase 2 users in CustomersDot |Select `Add seats`, purchase `2` additional seats|Expect that the purchase will prorate the charge for the remainder of the subscription period. This is not a test, just a required step for the test. |N/A|
|T-7| Receive purchased users | (1) One tester can use the `Sync` button on the instance to immediately provision the 2 purchased users, (2) One test can wait 24 hours to verify that the 2 users are provisioned after the next sync job|Y| |
| T-8     | View license/subscription details| Navigate to the Subscription page in the SM instance to verify `Users in License` = `7` <br> <br> Billable Users count should be `7`, Max Users count should be `7`, Users in License count should be `7`, Users over License count should be `0`  |Y |N/A |
| T-9     | Q1 reconciliation occurs| This reconciliation step will need to be simulated/forced by development.| This subscription is eligible for quarterly reconciliation because they are sending us data, but there is no overage, so no add-on is processed.        |Y | |
| T-10     | Block 2 users in the instance| https://docs.gitlab.com/ee/api/users.html#block-user                                                                                         | This is not a test, just a required step for the test.|N/A |N/A |
| T-11     | View license/subscription details| Navigate to the Subscription page in the SM instance to verify user counts.| Billable Users count should be `5`, Max Users count should be `7`, Users in License count should be `7`, Users over License count should be `0` <br> <br> This is not a test to verify a new feature, just a step to validate your test steps until now are valid.                                                                                                                                                                                                                                                                                                |N/A |N/A |
| T-12    | Q2 reconciliation occurs| This reconciliation step will need to be simulated/forced by development.                                                                    | This subscription is elgible for quarterly reconciliation because they are sending us data, but there is no overage, so no add-on is processed.|Y| |
| T-13    | Add 4 new users and assign them to projects with role ""maintainer""                   | https://docs.gitlab.com/ee/user/profile/account/create_accounts.html https://docs.gitlab.com/ee/user/project/members/#add-users-to-a-project | This is not a test, just a required step for the test.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |N/A |N/A |
| T-14    | View license/subscription details                                                    | Navigate to the Subscription page in the SM instance to verify user counts.                                                                  | Billable Users count should be `9`, Max Users count should be `9`, Users in License count should be `7`, Users over License count should be `2` <br> <br> This is not a test to verify a new feature, just a step to validate your test steps until now are valid.                                                                                                                                                                                                                                                                                                |N/A |N/A |
| T-15    | Q3 reconciliation occurs                                                             | This reconciliation step will need to be simulated/forced by development.                                                                    | (1) the customer is charged for an overage of `2` Premium user for the remaining 1 quarter of the agreement. <br> <br>(2) email sent to customer <br> <br>(3) The system records that reconciliation was performed <br> <br>(4) Data sent to SFDC - [opp created? details?] | Y| |
| T-16    | View license/subscription details                                                    | Navigate to the Subscription page in the SM instance to verify user counts.                                                                  | Billable Users count should be `9`, Max Users count should be `9`, Users in License count should be `9`, Users over License count should be `0` <br> <br> This is not a test to verify a new feature, just a step to validate your test steps until now are valid.                                                                                                                                                                                                                                                                                               |N/A |N/A|
| T-17    | Add 4 new users and assign them to projects with role ""guest""                        | https://docs.gitlab.com/ee/user/profile/account/create_accounts.html <br> <br> https://docs.gitlab.com/ee/user/project/members/#add-users-to-a-project | This is not a test, just a required step for the test.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |N/A |N/A|
| T-18    | View license/subscription details                                                    | Navigate to the Subscription page in the SM instance to verify user counts.                                                                  | Billable Users count should be `13`, Max Users count should be `13`, Users in License count should be `9`, Users over License count should be `4` <br> <br> This is not a test to verify a new feature, just a step to validate your test steps until now are valid.                                                                                                                                                                                                                                                                                              |N/A |N/A|
| T-19   | No Q4 reconciliation occurs.                                                         |                                                                                                                                              | We cannot test this real-world step since we are forcing reconciliations.                                                                                                                                                                                                                                                                                                                                                                                                                                                                               | N/A|N/A|

</details>

<details>
<summary>UC-12.b: SaaS subscription</summary>

| Step ID | Test Step   | Description| Expected Outcome |Testable? | Pass/Fail|
|---------|--------|----|----------|:---:|:---:|
|T-1     | Create a group in staging.gitlab.com with 5 users (team members). Just select existing users. | This is not a test, just a required step for the test.|N/A|N/A|
|T-2| Purchase Premium  | New SaaS Subscription Purchase for created group. SaaS Premium link: https://customers.staging.gitlab.com/subscriptions/new?plan_id=2c92a00d76f0d5060176f2fb0a5029ff <br> <br> This is not a test, just a required step for the test.                                                        | (1) Purchase flow is successful for 5 users. <br> <br> (2) Completes with email confirmation.                                                                                                                                                                                                                                                                                                                                                                                                   |N/A | N/A|
|T-3 | Confirm billing details|This is not a test, just a required step for the test.                                                        |In staging.gitlab.com, navigate to Group > Settings > Billing, Validate Subscription `start date`, `end date`, `Seats in subscription` = `5`|N/A | N/A|
| T-4 | Add 2 users (team members) to you group with the role of `developer`. Just select existing users. | https://docs.gitlab.com/ee/user/group/#add-users-to-a-group    <br> <br> This is not a test, just a required step for the test.                                                                | Expected outcome is to have 7 billable users on the instance.                                                                                                                                                                                                                                                                                                                                                                                                                                    | N/A| N/A|
| T-5     | View subscription details | This is not a test, just a required step for the test. (note the values are updated every 24 hours).<br/><br/>To force the refresh, SSH into staging.gitlab.com, open the rails console and run the following steps:<br/>`ns = Namespace.find <Group ID> # Find this in the top of group main page (i.e. https://staging.gitlab.com/<Group Name>)`<br/>`gs = ns.gitlab_subscription`<br/>`gs # Verify that it reflects what is shown on the Billing page`<br/>`gs.refresh_seat_attributes! # This will force the refresh`<br/>`gs # Verify that it reflects the updated seat numbers`<br/>`gs.save!`                                                       | Navigate to Group > Settings > Billing. `Seats in subscription` s/b `5`, `Seats currently in use` s/b `7`, `Max seats used` s/b `7`, `Seats owed` s/b `2` (note these values are updated every 24 hours).                                                                                                                                                                                                                                                                                                                                                                                                                                                        |N/A |N/A |
|T-6 | Make a purchase in CustomersDot |Select `Add seats`, purchase `3` additional seats|Expect that the purchase will prorate the charge for the remainder of the subscription period. This is not a test, just a required step for the test. |N/A|
| T-7     | Q1 reconciliation occurs| This reconciliation step will need to be simulated/forced by development.<br/><br/>SSH into customers.staging.gitlab.com (requires access), open a fresh rails console and run the following steps:<br/>`ns_id = <Group ID> # Find this in the top of group main page (i.e. https://staging.gitlab.com/<Group Name>)`<br/>`order = Order.where(gl_namespace_id: ns_id).first # Verify that gl_namespace_name is the name of the group you created`<br/>`order.reconciliations.count # Verify that one exists for this order`<br/>`r = order.reconciliations.first # Check that the reconciliation_done_at is nil.`<br/> `Reconciliations::UpdateSaasUserCountService.new(r).execute`<br/>`ReconciliationService.new(r).execute`<br/>`r.reload # Verify that user count is the expected amount and no errors`                                                                    | This subscription is eligible for quarterly reconciliation because they are sending us data, but there is no overage, so no add-on is processed.      |Y | |
| T-8     | Remove 2 users (team members) from the group| https://docs.gitlab.com/ee/user/group/#remove-a-member-from-the-group                                                                                        | This is not a test, just a required step for the test.|N/A |N/A |
| T-9     | View subscription details| This is not a test, just a required step for the test.                                                        | Navigate to Group > Settings > Billing. `Seats in subscription` s/b `8`, `Seats currently in use` s/b `5`, `Max seats used` s/b `7`, `Seats owed` s/b `0` (note these values are updated every 24 hours)                   |N/A |N/A |
| T-10    | Q2 reconciliation occurs                                                             | This reconciliation step will need to be simulated/forced by development.  <br> <br>Open a fresh rails console to avoid any caching problems from the last reconciliation event and follow the steps from the previous reconciliation above.                                                                  | (1) The customer is not charged for any overage <br> <br> (2) No email is sent to the customer <br> <br> (3)The system records that while usage data was received, there was no overage so no reconciliation was performed.                                                                                                                                                                                                                                                                                                                                                   |Y| |
| T-11    | Add 4 new users (team members) and assign them to projects with role ""maintainer"". Just select existing users.                   | https://docs.gitlab.com/ee/user/project/members/#add-users-to-a-project | This is not a test, just a required step for the test.|N/A |N/A |
| T-12     | View subscription details| This is not a test, just a required step for the test.                                                        |Navigate to Group > Settings > Billing. `Seats in subscription` s/b `8`, `Seats currently in use` s/b `9`, `Max seats used` s/b `9`, `Seats owed` s/b `1` (note these values are updated every 24 hours)                   |N/A |N/A |
| T-13    | Q3 reconciliation occurs| This reconciliation step will need to be simulated/forced by development.  <br> <br>Open a fresh rails console to avoid any caching problems from the last reconciliation event and follow the steps from the previous reconciliation above. <br> After the `Reconciliations::UpdateSaasUserCountService.new(r).execute` step, run the commands in [this comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3824#note_758028735) | (1a) Where cc on file: the customer is charged for an overage of `1` Premium user for the remaining 1 quarter of the agreement. <br> - ALTERNATE TEST- <br> (1b) Where cc not on file: [tbd] <br> <br>(2a) Where reconciliation successful + payment successful: email sent to customer <br> - ALTERNATE TEST- <br> (2b) Where reconciliation was not successful due to payment error: [tbd] <br> - ALTERNATE TEST- <br> (2c) Where reconciliation was success + no cc on file: [tbd] <br> <br>(3) The system records that reconciliation was performed <br> <br>(4) Data sent to SFDC - [opp created? details?] | Y| |
| T-14     | View subscription details|This is not a test, just a required step for the test.                                                        | Navigate to Group > Settings > Billing. `Seats in subscription` s/b `9`, `Seats currently in use` s/b `9`, `Max seats used` s/b `9`, `Seats owed` s/b `0` (note these values are updated every 24 hours)                   |N/A |N/A |
| T-15    | Add 4 new users (team members) and assign them to projects with role ""guest"". Just select existing users.                        | https://docs.gitlab.com/ee/user/project/members/#add-users-to-a-project | This is not a test, just a required step for the test.|N/A |N/A|
| T-16     | View subscription details| This is not a test, just a required step for the test.                                                        |Navigate to Group > Settings > Billing. `Seats in subscription` s/b `9`, `Seats currently in use` s/b `13`, `Max seats used` s/b `13`, `Seats owed` s/b `4` (note these values are updated every 24 hours)                  |N/A |N/A |
| T-17   | No Q4 reconciliation occurs. | This reconciliation step will need to be simulated/forced by development.  <br> <br>Open a fresh rails console to avoid any caching problems from the last reconciliation event and follow the steps from the previous reconciliation above.  | The reconciliation should be skipped with a skip reason of `last_quarter`. | N/A |

</details>

<details>
<summary>UC-12.c: SaaS subscription with an Add-on </summary>

Follow the same steps as above, but after purchasing the plan at step T-2, also purchase additional storage. 

Link to purchase storage package: https://customers.staging.gitlab.com/subscriptions/new?plan_id=2c92a00f7279a6f5017279d299d01cf9.

</details>",1
97768252,2021-11-22 21:46:53.410,OH Testing: UC-11,"## Summary

This is a specific testing issue for use case 11 on https://gitlab.com/groups/gitlab-org/-/epics/6606

### Testing DRIs

|Tester ID | Tester Name | Status |
|:---:|---|---|
| 1 | @a_luna | :white_check_mark: Completed & Passed |
| 2 |  |  |

### UC-11: Sales-assisted subscription cancellation

#### Self-managed subscription

| Step ID | Test Step   | Description | Expected Outcome | Testable? | Pass/Fail |
|---------|--------|----|----------|:---:|:---:|
| T-1     | Purchase SM Premium for 5 users | Navigate to the purchase page for Premium SM 1 year subscription.  To make this easier given the plans page is no longer available in staging, [here is a shortcut to the purchase page](https://customers.staging.gitlab.com/subscriptions/new?plan_id=2c92a01176f0d50a0176f3043c4d4a53). | Purchase flow is successful. The success modal should have a link to activation instructions and a link to the newly created subscription. | Y | |
| T-2     | View subscription details | Navigate to the ""Manage Subscription"" page in CustomersDot staging to verify the subscription details are accurate. | Subscription details show the correct Start date, Purchase date, Product, and Quantity (5). | Y | |
| T-3     | View the Order in CustomersDot backend | SSH to the CustomersDot staging server and open a rails console.  Find the order associated with the newly purchased subscription. | The order should have a `subscription_id`, `subscription_name` and `product_rate_plan_id` for this subscription. | Y | |
| T-4     | Find the Subscription in Zuora | Search for the subscription by subscription name in https://test.zuora.com/platform/webapp. Click on the matching result. | View the subscription detail page in Zuora. | Y | |
| T-5     | Create an Order | Click the blue ""Create Order"" button from the Subscription detail page in Zuora. Click the ""More Order Actions"" link, then select ""Cancel Subscription"".  Click ""Continue"" on the resulting modal, then ""Activate"" the order to confirm the cancellation. | A completed order that cancels the subscription. | Y | |
| T-6     | Verify subscription was cancelled | Refresh the ""Manage Subscriptions"" page in CustomersDot. | The subscription should no longer appear in the list. | Y | |


#### SaaS subscription

| Step ID | Test Step   | Description | Expected Outcome | Testable? | Pass/Fail |
|---------|--------|----|----------|:---:|:---:|
| T-1     | Purchase SaaS Premium for 5 users | Navigate to the purchase page for Premium SaaS 1 year subscription.  To make this easier given the plans page is no longer available in staging, [here is a shortcut to the purchase page](https://customers.staging.gitlab.com/subscriptions/new?plan_id=2c92a00d76f0d5060176f2fb0a5029ff). | Purchase flow is successful. The success modal should have a link to activation instructions and a link to the newly created subscription. | Y | |
| T-2     | View subscription details | Navigate to the ""Manage Subscription"" page in CustomersDot staging to verify the subscription details are accurate. | Subscription details show the correct Start date, Purchase date, Product, and Quantity (5). | Y | |
| T-3     | View the Order in CustomersDot backend | SSH to the CustomersDot staging server and open a rails console.  Find the order associated with the newly purchased subscription. | The order should have a `subscription_id`, `subscription_name` and `product_rate_plan_id` for this subscription. | Y | |
| T-4     | Find the Subscription in Zuora | Search for the subscription by subscription name in https://test.zuora.com/platform/webapp. Click on the matching result. | View the subscription detail page in Zuora. | Y | |
| T-5     | Create an Order | Click the blue ""Create Order"" button from the Subscription detail page in Zuora. Click the ""More Order Actions"" link, then select ""Cancel Subscription"".  Click ""Continue"" on the resulting modal, then ""Activate"" the order to confirm the cancellation. | A completed order that cancels the subscription. | Y | |
| T-6     | Verify subscription was cancelled | Refresh the ""Manage Subscriptions"" page in CustomersDot. | The subscription should no longer appear in the list. | Y | |
| T-7     | View the Order in CustomersDot backend | SSH to the CustomersDot staging server and open a rails console.  Reload the order from before. | The order should have been updated with these values:<br>- `subscription_id`: `nil`<br>- `subscription_name`: `nil`<br>- `product_rate_plan_id`: `Plan::FREE_PLAN` | Y | |",1
97765341,2021-11-22 20:56:12.470,OH Testing: UC-10,"## Summary

This is a specific testing issue for use case 10 on https://gitlab.com/groups/gitlab-org/-/epics/6606

### Testing DRIs

|Tester ID | Tester Name | Status |
|:---:|---|---|
| 1 | @tyleramos | :white_check_mark: Completed & Passed |
| 2 |  |  |

### UC-10: Customer renews an existing EoA subscription
<details>
<summary>UC-10a: Self-managed subscription</summary>

| Step ID | Test Step   | Description | Expected Outcome | Testable? | Pass/Fail |
|---------|--------|----|----------|:---:|:---:|
| T-1     | Login to Zuora | Login to Zuora Central Sandbox and go to the [Customer Account list](https://test.zuora.com/apps/CustomerAccount.do?menu=Z-Billing). Search for the customer account you use in customers.staging.gitlab.com by email address and click on the Customer Account. | On the Customer Account Page | N | |
| T-2     | Prep a Zuora Order | From the Customer Account page, click on the ""Create Order"" button from the Customer Account page. Click the ""Create Subscription"" button. Leave the default settings except set the following custom fields in Zuora to `Yes`: `EoA Starter Bronze Offer Accepted?`, `Contract Auto Renew`, `Contract Seat Reconciliation`, `Contract Operational Metrics`, `Turn On Seat Reconciliation`, `Turn on Auto Renew`, `Turn On Operational Metrics`.  Click the ""Continue"" button. | On the screen to pick Products and Charges. | N | |
| T-3     | Select the Product | From the Products screen, search for ""Self-Managed - Premium"" and expand the list of Charges.  Check the box for ""Self-Managed - Premium - 1 Year"". Click the ""Add Product"" button at the bottom of the page. Click the ""Review Order"" button. If all looks good, click the ""Activate"" button. | A completed Order which created a subscription with the SM Premium 1 yr plan. | Y | |
| T-4     | Receive email with legacy license and activation code | Receive the activation code and legacy license key via email. | The email should contain an activation code and the legacy license key. | Y | |
| T-5     | View subscription details | Navigate to the ""Manage Subscription"" page in CustomersDot staging to verify the subscription details are accurate. | Subscription details show the correct Start date, Purchase date, Product, and Quantity (1). | Y | |
| T-6     | Process a Bill Run | Process a bill run in Zuora for the customer so future web store pricing is correct. Follow [these instructions](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/d537a1c591ca45d56d7029b79bcf4a9d23a3eb78/doc/flows/sales_assisted_subscription_creation_workflow.md). | Verify the renewal price is discounted to be $6 per seat per month ($72 a year). | Y | |
| T-7     | View the Renewal page | From the ""Manage Subscription"" page in CustomersDot staging, click the ""Renew"" button. | Verify the renewal price is discounted to be $6 per seat per month ($72 a year). | Y | |
| T-8     | Renew the subscription | Confirm the renewal | (1) Verify the subscription was renewed for the next term and displays correctly in CustomersDot. <br><br> (2) Verify 2 Orders (each with their own amendment) were created in Zuora: one for the renewal and another for the Update Product (price uplift). The price uplift should have the key description `EoA Bronze / Starter Price Uplift`. | Y | |
| T-9     | View another Renewal | From the ""Manage Subscription"" page in CustomersDot staging, click the ""Renew"" button again. | Verify the renewal price is discounted to be $9 per seat per month ($108 a year). | Y | |
| T-10    | Renew the subscription | Confirm the renewal | (1) Verify the subscription was renewed for the next term and displays correctly in CustomersDot. <br><br> (2) Verify 2 Orders (each with their own amendment) were created in Zuora: one for the renewal and another for the Update Product (price uplift). The price uplift should have the key description `EoA Bronze / Starter Price Uplift`. | Y | |

</details>

<details>
<summary>UC-10b: SaaS subscription</summary>

| Step ID | Test Step   | Description | Expected Outcome | Testable? | Pass/Fail |
|---------|--------|----|----------|:---:|:---:|
| T-1     | Login to Zuora | Login to Zuora Central Sandbox and go to the [Customer Account list](https://test.zuora.com/apps/CustomerAccount.do?menu=Z-Billing). Search for the customer account you use in customers.staging.gitlab.com by email address and click on the Customer Account. | On the Customer Account Page | N | |
| T-2     | Prep a Zuora Order | From the Customer Account page, click on the ""Create Order"" button from the Customer Account page. Click the ""Create Subscription"" button. Leave the default settings except set the following custom fields in Zuora to `Yes`: `EoA Starter Bronze Offer Accepted?`, `Contract Auto Renew`, `Contract Seat Reconciliation`, `Turn On Seat Reconciliation`, `Turn on Auto Renew`.  Click the ""Continue"" button. | On the screen to pick Products and Charges. | N | |
| T-3     | Select the Product | From the Products screen, search for ""SaaS - Premium"" and expand the list of Charges.  Check the box for ""SaaS - Premium - 1 Year"". Click the ""Add Product"" button at the bottom of the page. Click the ""Review Order"" button. If all looks good, click the ""Activate"" button. | A completed Order which created a subscription with the SM Premium 1 yr plan. | Y | |
| T-4     | Receive email for purchase | Receive an email indicating the purchase was successful and instructions for assigning the namespace for the subscription. | The email should contain instructions for assigning the namespace for the subscription. | Y | |
| T-5     | View subscription details | Navigate to the ""Manage Subscription"" page in CustomersDot staging to verify the subscription details are accurate. | Subscription details show the correct Start date, Purchase date, Product, and Quantity (1). | Y | |
| T-6     | Process a Bill Run | Process a bill run in Zuora for the customer so future web store pricing is correct. Follow [these instructions](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/d537a1c591ca45d56d7029b79bcf4a9d23a3eb78/doc/flows/sales_assisted_subscription_creation_workflow.md). | Verify the renewal price is discounted to be $6 per seat per month ($72 a year). | Y | |
| T-7     | View the Renewal page | From the ""Manage Subscription"" page in CustomersDot staging, click the ""Renew"" button. | Verify the renewal price is discounted to be $6 per seat per month ($72 a year). | Y | |
| T-8     | Renew the subscription | Confirm the renewal | (1) Verify the subscription was renewed for the next term and displays correctly in CustomersDot. <br><br> (2) Verify 2 Orders (each with their own amendment) were created in Zuora: one for the renewal and another for the Update Product (price uplift). The price uplift should have the key description `EoA Bronze / Starter Price Uplift`. | Y | |
| T-9     | View another Renewal | From the ""Manage Subscription"" page in CustomersDot staging, click the ""Renew"" button again. | Verify the renewal price is discounted to be $9 per seat per month ($108 a year). | Y | |
| T-10    | Renew the subscription | Confirm the renewal | (1) Verify the subscription was renewed for the next term and displays correctly in CustomersDot. <br><br> (2) Verify 2 Orders (each with their own amendment) were created in Zuora: one for the renewal and another for the Update Product (price uplift). The price uplift should have the key description `EoA Bronze / Starter Price Uplift`. | Y | |

</details>

<details>
<summary>UC-10c: SaaS subscription with an Add-on</summary>

| Step ID | Test Step   | Description | Expected Outcome | Testable? | Pass/Fail |
|---------|--------|----|----------|:---:|:---:|
| T-1     | Login to Zuora | Login to Zuora Central Sandbox and go to the [Customer Account list](https://test.zuora.com/apps/CustomerAccount.do?menu=Z-Billing). Search for the customer account you use in customers.staging.gitlab.com by email address and click on the Customer Account. | On the Customer Account Page | N | |
| T-2     | Prep a Zuora Order | From the Customer Account page, click on the ""Create Order"" button from the Customer Account page. Click the ""Create Subscription"" button. Leave the default settings except set the following custom fields in Zuora to `Yes`: `EoA Starter Bronze Offer Accepted?`, `Contract Auto Renew`, `Contract Seat Reconciliation`, `Turn On Seat Reconciliation`, `Turn on Auto Renew`.  Click the ""Continue"" button. | On the screen to pick Products and Charges. | N | |
| T-3     | Select the Product | From the Products screen, search for ""SaaS - Premium"" and expand the list of Charges.  Check the box for ""SaaS - Premium - 1 Year"". Click the ""Add Product"" button at the bottom of the page. Click the ""Review Order"" button. If all looks good, click the ""Activate"" button. | A completed Order which created a subscription with the SM Premium 1 yr plan. | Y | |
| T-4     | Receive email for purchase | Receive an email indicating the purchase was successful and instructions for assigning the namespace for the subscription. | The email should contain instructions for assigning the namespace for the subscription. | Y | |
| T-5     | View subscription details | Navigate to the ""Manage Subscription"" page in CustomersDot staging to verify the subscription details are accurate. | Subscription details show the correct Start date, Purchase date, Product, and Quantity (1). | Y | |
| T-6     | Process a Bill Run | Process a bill run in Zuora for the customer so future web store pricing is correct. Follow [these instructions](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/d537a1c591ca45d56d7029b79bcf4a9d23a3eb78/doc/flows/sales_assisted_subscription_creation_workflow.md). | Verify the renewal price is discounted to be $6 per seat per month ($72 a year). | Y | |
| T-7     | Purchase a Storage Add-on | Navigate to Settings -> Usage quotas in staging.gitlab.com for your Group. Click on the tab for ""Storage"", then click the link to ""Buy additional storage"". Fill in the form leaving quantity at 1 and confirm the purchase. | Purchase flow is successful. | Y | |
| T-8     | View the Renewal page | From the ""Manage Subscription"" page in CustomersDot staging, click the ""Renew"" button. | Verify the renewal price is discounted to be $6 per seat per month ($72 a year). | Y | |
| T-9     | Renew the subscription | Confirm the renewal | (1) Verify the subscription was renewed for the next term and displays correctly in CustomersDot. <br><br> (2) Verify 2 Orders (each with their own amendment) were created in Zuora: one for the renewal and another for the Update Product (price uplift). The price uplift should have the key description `EoA Bronze / Starter Price Uplift`. | Y | |
| T-10    | View another Renewal | From the ""Manage Subscription"" page in CustomersDot staging, click the ""Renew"" button again. | Verify the renewal price is discounted to be $9 per seat per month ($108 a year). | Y | |
| T-11    | Renew the subscription | Confirm the renewal | (1) Verify the subscription was renewed for the next term and displays correctly in CustomersDot. <br><br> (2) Verify 2 Orders (each with their own amendment) were created in Zuora: one for the renewal and another for the Update Product (price uplift). The price uplift should have the key description `EoA Bronze / Starter Price Uplift`. | Y | |

</details>",1
97706044,2021-11-22 02:01:16.247,Unable to save credit card validation due to name length,"## Problem

https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2988223/?referrer=gitlab_plugin

Specific event: https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2988223/events/58585295/


```
Stacktrace (most recent call first):

  lib/gitlab/logger_helpers.rb:24:in `public_send'
    Gitlab::Logger.public_send(log_level, object, options) # rubocop:disable GitlabSecurity/PublicSend
  lib/gitlab/logger_helpers.rb:24:in `log'
    Gitlab::Logger.public_send(log_level, object, options) # rubocop:disable GitlabSecurity/PublicSend
  lib/gitlab/logger_helpers.rb:13:in `log_error'
    log(:error, error, extra: extra)
  app/services/zuora_callbacks/credit_card_validation_service.rb:60:in `mark_valid_cc_for_user'
    log_error(
  app/services/zuora_callbacks/credit_card_validation_service.rb:18:in `execute'
    mark_valid_cc_for_user
  app/controllers/zuora_callbacks_controller.rb:26:in `credit_card_validation'
    ).execute
  lib/middleware/maintenance.rb:25:in `call'
    @app.call(env)
  lib/middleware/health_check/health_check_responder.rb:14:in `call'
    return @app.call(env) if format.nil? || (ip_blocked(env) && not_authenticated(env))
...
(78 additional frame(s) were not displayed)

unable to save credit card validation
```

Kibana: https://log.gprd.gitlab.net/goto/a59f573cb130fe1b14eee41e521714cf

## Proposal

Update character constraint on Credit Card Holder Name from 26 to 50

## Implementation Plan

Update this area of code from `26` to `50` https://gitlab.com/gitlab-org/gitlab/-/merge_requests/71032#note_692224348",3
97528220,2021-11-18 07:49:39.304,Git push fails due to 10GB project size limit even additional storage is available,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you're about to submit isn't a duplicate.

Do not include confidential information!
--->

# Bug

## Summary

A customer pre-purchase Additional storage for their group namespace while none of the project under the namespace has reached the 10GB limit. When the customer try to do git Push which cause the project to go above the 10GB limit, the push is rejected.

## Steps to reproduce

1. Purchase Additional Storage for a namespace when none of the project has reach the limit yet
1. Do a git push to the project that would cause the project to go above the 10GB limit
1. Observe the push being rejected

## What is the current *bug* behavior?

Git push is rejected even though there's additional storage available for the group that the project is under.

## What is the expected *correct* behavior?

Git push command should come through when there's additional storage available.

## Relevant logs and/or screenshots

(Paste any relevant logs - please use code blocks (```) to format console output,
logs, and code as it's tough to read otherwise.)

```
batch response: Your push has been rejected, because this repository has exceeded its size limit of 10 GB by 660 MB. Please contact your GitLab administrator for more information.
Uploading LFS objects: 0% (0/30), 0 B | 0 B/s, done.
```

## Workarounds

Reach out to support so we can manually change the limit as a workaround.

## Reported examples

1. https://gitlab.zendesk.com/agent/tickets/248670
1. https://gitlab.zendesk.com/agent/tickets/254399
1.

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",3
97394786,2021-11-16 03:47:27.482,Send Future subscription info thru seat link,"### Problem

In https://gitlab.com/gitlab-org/gitlab/-/issues/338657 we need to display future subscription information in self managed instance.

### Proposal

We pass future subscription information through seat link to the self managed instance.

### Result

### Next steps (if any)

https://gitlab.com/gitlab-org/gitlab/-/issues/338657

### How will we measure success?",2
97387694,2021-11-15 22:21:33.826,OH Testing: UC-9,"## Summary

This is a specific testing issue for use case 9 on https://gitlab.com/groups/gitlab-org/-/epics/6606

### Testing DRIs

|Tester ID | Tester Name | Status |
|:---:|---|---|
| 1 | @tyleramos | :white_check_mark: @tyleramos |
| 2 |  |  |

### UC-9: SaaS Subscription created through sales-assisted order

| Step ID | Test Step   | Description | Expected Outcome | Testable? | Pass/Fail |
|---------|--------|----|----------|:---:|:---:|
| T-1     | Login to Zuora | Login to Zuora Central Sandbox and go to the [Customer Account list](https://test.zuora.com/apps/CustomerAccount.do?menu=Z-Billing). Search for the customer account you use in customers.staging.gitlab.com by email address and click on the Customer Account. | On the Customer Account Page | N | |
| T-2     | Prep a Zuora Order | From the Customer Account page, click on the ""Create Order"" button from the Customer Account page. Click the ""Create Subscription"" button. Leave the default settings except set the following custom fields in Zuora to `Yes`: `Contract Auto Renew`, `Contract Seat Reconciliation`, `Turn On Seat Reconciliation`, `Turn on Auto Renew`.  Click the ""Continue"" button. | On the screen to pick Products and Charges. | N | |
| T-3     | Select the Product | From the Products screen, search for ""SaaS - Ultimate"" and expand the list of Charges.  Check the box for ""SaaS - Ultimate - 1 Year"". Click the ""Add Product"" button at the bottom of the page. Click the ""Review Order"" button. If all looks good, click the ""Activate"" button. | A completed Order which created a subscription with the SaaS Ultimate 1 yr plan. | Y | |
| T-4     | Receive email with setup instructions | Receive an email from CustomersDot with instructions for completing the setup of the subscription by selecting the group to associate with the subscription. | The email should contain instructions for assigning a group to the subscription. | Y | |
| T-5     | View subscription details | Navigate to the ""Manage Subscription"" page in CustomersDot staging to verify the subscription details are accurate. | Subscription details show the correct Start date, Purchase date, Product, and Quantity. | Y | |",1
97386009,2021-11-15 21:30:06.503,OH Testing: UC-8,"## Summary

This is a specific testing issue for use case 8 on https://gitlab.com/groups/gitlab-org/-/epics/6606

### Testing DRIs

|Tester ID | Tester Name | Status |
|:---:|---|---|
| 1 | @tyleramos | :white_check_mark: Completed & Passed |
| 2 | @a_luna | :white_check_mark: Completed & Passed |

### UC-8: SM Subscription created through sales-assisted order

| Step ID | Test Step   | Description | Expected Outcome | Testable? | Pass/Fail |
|---------|--------|----|----------|:---:|:---:|
| T-1     | Login to Zuora | Login to Zuora Central Sandbox and go to the [Customer Account list](https://test.zuora.com/apps/CustomerAccount.do?menu=Z-Billing). Search for the customer account you use in customers.staging.gitlab.com by email address and click on the Customer Account. | On the Customer Account Page | N | |
| T-2     | Prep a Zuora Order | From the Customer Account page, click on the ""Create Order"" button from the Customer Account page. Click the ""Create Subscription"" button. Leave the default settings except set the following custom fields in Zuora to `Yes`: `Contract Auto Renew`, `Contract Seat Reconciliation`, `Contract Operational Metrics`, `Turn On Seat Reconciliation`, `Turn on Auto Renew`, `Turn On Operational Metrics`.  Click the ""Continue"" button. | On the screen to pick Products and Charges. | N | |
| T-3     | Select the Product | From the Products screen, search for ""Self-Managed - Ultimate"" and expand the list of Charges.  Check the box for ""Self-Managed - Ultimate - 1 Year"". Click the ""Add Product"" button at the bottom of the page. Click the ""Review Order"" button. If all looks good, click the ""Activate"" button. | A completed Order which created a subscription with the SM Ultimate 1 yr plan. | Y | |
| T-4     | Receive email with legacy license and activation code | Receive the activation code and legacy license key via email. | The email should contain an activation code and the legacy license key. | Y | |
| T-5     | View subscription details | Navigate to the ""Manage Subscription"" page in CustomersDot staging to verify the subscription details are accurate.  Verify the activation code is shown and can be copied. Verify you can download the license file.  | (1) Subscription details show the correct Start date, Purchase date, Product, and Quantity (1). <br><br> (2) The Activation Code is shown and can be copied to clipboard. <br><br> (3) License file can be downloaded. | Y | |",1
97385598,2021-11-15 21:17:47.366,OH Testing: UC-6,"## Summary

This is a specific testing issue for use case 6 on https://gitlab.com/groups/gitlab-org/-/epics/6606

### Testing DRIs

|Tester ID | Tester Name | Status |
|:---:|---|---|
| 1 | @tyleramos | :white_check_mark: Completed & Passed |
| 2 |  |  |

### UC-6: Customer upgrades an existing SM subscription

| Step ID | Test Step   | Description | Expected Outcome | Testable? | Pass/Fail |
|---------|--------|----|----------|:---:|:---:|
| T-1     | Purchase SM Premium for 5 users | Navigate to the purchase page for Premium SM 1 year subscription.  To make this easier given the plans page is no longer available in staging, [here is a shortcut to the purchase page](https://customers.staging.gitlab.com/subscriptions/new?plan_id=2c92a01176f0d50a0176f3043c4d4a53). | Purchase flow is successful. The success modal should have a link to activation instructions and a link to the newly created subscription. | Y | |
| T-2     | View subscription details | Navigate to the ""Manage Subscription"" page in CustomersDot staging to verify the subscription details are accurate. | Subscription details show the correct Start date, Purchase date, Product (Premium), and Quantity (5). | Y | |
| T-3     | Upgrade the subscription | From the Manage Subscriptions page in CustomersDot staging, click the ""Upgrade"" button. Change the plan to Ultimate and confirm the purchase. | Purchase flow is successful. | Y | |
| T-4     | Receive the renewal email with legacy license and activation code | Receive the activation code and legacy license key via the email. | The email should contain an Ultimate license with the same activation code as before but the legacy license key should be new. | Y | |
| T-5     | View subscription details | Navigate to the ""Manage Subscription"" page in CustomersDot staging to verify the subscription details are accurate. | Subscription details show the correct Start date (in 2021), Purchase date (in 2021), Product (Ultimate), and Quantity (5). | Y | |",1
97381850,2021-11-15 19:48:31.488,OH Testing: UC-7,"## Summary

This is a specific testing issue for use case 7 on https://gitlab.com/groups/gitlab-org/-/epics/6606

### Testing DRIs

|Tester ID | Tester Name | Status |
|:---:|---|---|
| 1 | @tyleramos | :white_check_mark: Completed & Passed  |
| 2 |  |  |

### UC-7: Customer upgrades an existing SaaS subscription

| Step ID | Test Step   | Description | Expected Outcome | Testable? | Pass/Fail |
|---------|--------|----|----------|:---:|:---:|
| T-1     | Find a group in https://staging.gitlab.com/ with an existing plan subscription | Find a group that already has a plan. If you do not have one, you can follow steps 1-4 of [use case 2](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3790).  You can check the group plan by navigating to Settings -> Billing. | The Billing page shows a Group that is currently on Premium and able to be upgraded to Ultimate.  | Y | |
| T-2     | Upgrade plan to Ultimate | Click on the Upgrade button for Ultimate. Fill in the form and confirm the purchase. | Purchase flow is successful. | Y | |
| T-3     | View subscription details | Navigate to the ""Manage Subscription"" page in CustomersDot staging to verify the subscription details are accurate.  | Subscription details show the correct Start date, Purchase date, Product (Ultimate), and Quantity. | Y | |
| T-4     | View Billing page | Navigate to Group's Billing page in staging.gitlab.com. | The Group should be shown as ""currently using the Ultimate SaaS Plan (Formerly Gold)"". | Y | |",1
97381594,2021-11-15 19:40:00.892,OH Testing: UC-5,"## Summary

This is a specific testing issue for use case 5 on https://gitlab.com/groups/gitlab-org/-/epics/6606

### Testing DRIs

|Tester ID | Tester Name | Status |
|:---:|---|---|
| 1 | @tyleramos | :white_check_mark: Completed & Passed |
| 2 |  |  |

### UC-5: Customer renews an existing SaaS subscription

#### UC-5a: SaaS subscription without Add-ons

| Step ID | Test Step   | Description | Expected Outcome | Testable? | Pass/Fail |
|---------|--------|----|----------|:---:|:---:|
| T-1     | Find a group in https://staging.gitlab.com/ with an existing plan subscription | Find a group that already has a plan. If you do not have one, you can follow steps 1-4 of [use case 2](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3790).  You can check the group plan by navigating to Settings -> Billing. | The Billing page shows a Group that is currently on Premium.  | Y | |
| T-2     | View subscription details | Navigate to the ""Manage Subscription"" page in CustomersDot staging to verify the subscription details are accurate.  | Subscription details show the correct Start date, Purchase date, Product (Premium), and Quantity. | Y | |
| T-3     | Renew the subscription | From the Manage Subscriptions page in CustomersDot staging, click the ""Renew"" button. Change the plan to Ultimate, change Active users from 1 (assuming the initial count was 1) to 3, and confirm the purchase. | Purchase flow is successful. | Y | |
| T-4     | View subscription details | Navigate to the ""Manage Subscription"" page in CustomersDot staging to verify the subscription details are accurate.  | (1) Subscription details show the correct Start date (in 2022), Purchase date (in 2021), Product (Ultimate), and Quantity (3). <br><br> (2) The next renewal date is in 2023. | Y | |
| T-5     | View Billing page | Navigate to Group's Billing page in staging.gitlab.com. | Because the renewal should not be active yet, the Group should be shown as ""currently using the Premium SaaS Plan (Formerly Silver)"". The subscription details table should show ""Seats in subscription"" as 1. | Y | |

#### UC-5b: SaaS subscription with Add-ons

| Step ID | Test Step   | Description | Expected Outcome | Testable? | Pass/Fail |
|---------|--------|----|----------|:---:|:---:|
| T-1     | Find a group in https://staging.gitlab.com/ with an existing plan subscription, plus an Add On | Find a group that already has a plan, plus an Add On for Storage or CI minutes. If you do not have one, you can follow steps 1-10 of [use case 2](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3790).  You can check the group plan by navigating to Settings -> Billing. You can check the Storage or CI minutes by navigating to Settings -> Usage Quotas. | The Billing page shows a Group that is currently on Premium. The Usage Quotas page shows a Group with additional minutes or Storage.  | Y | |
| T-2     | View subscription details | Navigate to the ""Manage Subscription"" page in CustomersDot staging to verify the subscription details are accurate.  | Subscription details show at least two products (one for Premium and another for the Add On) with correct Start date, Purchase date, Product, and Quantity. | Y | |
| T-3     | Renew the subscription | From the Manage Subscriptions page in CustomersDot staging, click the ""Renew"" button. Change the plan to Ultimate, change Active users from 1 (assuming the initial count was 1) to 3, and confirm the purchase. | Purchase flow is successful. | Y | |
| T-4     | View subscription details | Navigate to the ""Manage Subscription"" page in CustomersDot staging to verify the subscription details are accurate.  | (1) Subscription details shows 2 products (Plan and Add On) with the correct Start date (in 2022), Purchase date (in 2021), Product (Ultimate or Storage/CI Minutes), and Quantity. <br><br> (2) The next renewal date is in 2023. | Y | |
| T-5     | View Billing page | Navigate to Group's Billing page in staging.gitlab.com. | Because the renewal should not be active yet, the Group should be shown as ""currently using the Premium SaaS Plan (Formerly Silver)"". The subscription details table should show ""Seats in subscription"" as 1. | Y | |",1
97380582,2021-11-15 19:25:42.818,OH Testing: UC-4,"## Summary

This is a specific testing issue for use case 4 on https://gitlab.com/groups/gitlab-org/-/epics/6606

### Testing DRIs

|Tester ID | Tester Name | Status |
|:---:|---|---|
| 1 | @tyleramos | :white_check_mark: Completed & Successful |
| 2 |  |  |

### UC-4: Customer renews an existing SM subscription

| Step ID | Test Step   | Description | Expected Outcome | Testable? | Pass/Fail |
|---------|--------|----|----------|:---:|:---:|
| T-1     | Purchase SM Premium for 5 users | Navigate to the purchase page for Premium SM 1 year subscription.  To make this easier given the plans page is no longer available in staging, [here is a shortcut to the purchase page](https://customers.staging.gitlab.com/subscriptions/new?plan_id=2c92a01176f0d50a0176f3043c4d4a53). | (1) Purchase flow is successful. The success modal should have a link to activation instructions and a link to the newly created subscription. <br><br> (2) The following custom fields in Zuora are set to `Yes`: `Contract Auto Renew`, `Contract Seat Reconciliation`, `Contract Operational Metrics`, `Turn On Seat Reconciliation`, `Turn on Auto Renew`, `Turn On Operational Metrics` <br><br> (3) The following custom fields in Zuora are not set: `Turn On Cloud Licensing` | Y | |
| T-2     | View subscription details | Navigate to the ""Manage Subscription"" page in CustomersDot staging to verify the subscription details are accurate.  Verify the activation code is shown and can be copied. Verify you can download the license file.  | (1) Subscription details show the correct Start date, Purchase date, Product, and Quantity (5). <br><br> (2) The Activation Code is shown and can be copied to clipboard. <br><br> (3) License file can be downloaded. | Y | |
| T-3     | Renew the subscription | From the Manage Subscriptions page in CustomersDot staging, click the ""Renew"" button. Change the plan to Ultimate, change Active users from 5 to 6, and confirm the purchase. | Purchase flow is successful. | Y | |
| T-4     | Receive the renewal email with legacy license and activation code | Receive the activation code and legacy license key via the renewal email. | The email should contain the same activation code as before but the legacy license key should be new.  The user limit in the email should now show 6. The now Ultimate license should start in 2022 and expire in 2023. | Y | |
| T-5     | View subscription details | Navigate to the ""Manage Subscription"" page in CustomersDot staging to verify the subscription details are accurate. | (1) Subscription details show the correct Start date (in 2022), Purchase date (in 2021), Product (Ultimate), and Quantity (6). <br><br> (2) The next renewal date is in 2023. | Y | |",1
97379608,2021-11-15 19:12:25.917,OH Testing: UC-3,"## Summary

This is a specific testing issue for use case 3 on https://gitlab.com/groups/gitlab-org/-/epics/6606

### Testing DRIs

|Tester ID | Tester Name | Status |
|:---:|---|---|
| 1 | @tyleramos | :white_check_mark: Completed & Passed |
| 2 |  |  |

### UC-3: Customer purchases an Add-on subscription

| Step ID | Test Step   | Description | Expected Outcome | Testable? | Pass/Fail |
|---------|--------|----|----------|:---:|:---:|
| T-1     | Find or create a group in https://staging.gitlab.com/ | Either find a group that does not already have a plan or create a new one on https://staging.gitlab.com/.  You can check the group plan by navigating to Settings -> Billing. | The Billing page shows a Group is able to be upgraded to Premium or Ultimate.  | Y | |
| T-2     | Purchase additional Storage | Navigate to Settings -> Usage quotas in staging.gitlab.com for your Group. Click on the tab for ""Storage"", then click the link to ""Purchase more storage"". Fill in the form leaving quantity at 1 and confirm the purchase. | Purchase flow is successful. | Y | |
| T-3     | View subscription details | Navigate to the ""Manage Subscription"" page in CustomersDot staging to find a new subscription was created and verify the subscription details are accurate.  | Subscription details shows a single product for ""Gitlab Storage 10GB - 1 Year"" under the subscription, with the correct Start date, Purchase date, Product, and Quantity (1). | Y | |
| T-4     | View Usage Quotas page | Navigate to Settings -> Usage quotas in staging.gitlab.com for your Group. Click on the tab for ""Storage"". | The Group should have additional storage available after the purchase (10 GiB). | Y | |
| T-5     | Purchase additional Storage | Navigate to Settings -> Usage quotas in staging.gitlab.com for your Group. Click on the tab for ""Storage"", then click the link to ""Purchase more storage"". Fill in the form leaving quantity at 1 and confirm the purchase. | Purchase flow is successful. | Y | |
| T-6     | View subscription details | Navigate to the ""Manage Subscription"" page in CustomersDot staging to find the subscription from earlier and verify the subscription details are accurate.  | Subscription details now shows 2 products, each for ""Gitlab Storage 10GB - 1 Year"" under the subscription, with the correct Start date, Purchase date, Product, and Quantity (1). | Y | |
| T-7     | View Usage Quotas page | Navigate to Settings -> Usage quotas in staging.gitlab.com for your Group. Click on the tab for ""Storage"". | The Group should have additional storage available after the purchase (20 GiB). | Y | |",1
97376774,2021-11-15 18:10:48.348,OH Testing: UC-2,"## Summary

This is a specific testing issue for use case 2 on https://gitlab.com/groups/gitlab-org/-/epics/6606

### Testing DRIs

|Tester ID | Tester Name | Status |
|:---:|---|---|
| 1 | @tyleramos | :white_check_mark: Completed & Passed |
| 2 |  |  |

### UC-2: Customer purchases a new SaaS subscription

| Step ID | Test Step   | Description | Expected Outcome | Testable? | Pass/Fail |
|---------|--------|----|----------|:---:|:---:|
| T-1     | Find or create a group in https://staging.gitlab.com/ | Either find a group that does not already have a plan or create a new one on https://staging.gitlab.com/.  You can check the group plan by navigating to Settings -> Billing. | The Billing page shows a Group is able to be upgraded to Premium or Ultimate.  | Y | |
| T-2     | Purchase a Premium SaaS plan | Click on the Upgrade button for Premium. Fill in the form and confirm the purchase. | Purchase flow is successful. | Y | |
| T-3     | View subscription details | Navigate to the ""Manage Subscription"" page in CustomersDot staging to verify the subscription details are accurate.  | Subscription details show the correct Start date, Purchase date, Product, and Quantity (likely 1 unless your groups has more users). | Y | |
| T-4     | View Billing page | Navigate to Group's Billing page in staging.gitlab.com. | The Group should be shown as ""currently using the Premium SaaS Plan (Formerly Silver)"". The subscription details table should show  ""Seats in subscription"" as 1 (unless you purchased more seats). | Y | |
| T-5     | Add more seats | From the Manage Subscriptions page in CustomersDot staging, click the ""Add More Seats"" button. Set the additional seats to 2 and confirm the purchase. | Purchase flow is successful. | Y | |
| T-6     | View subscription details | Navigate to the ""Manage Subscription"" page in CustomersDot staging to verify the subscription details are accurate. | Subscription details show the correct Start date, Purchase date, Product, and Quantity (likely 3 unless your groups had more users initially). | Y | |
| T-7     | View Billing page | Navigate to Group's Billing page in staging.gitlab.com. | The Group should be shown as ""currently using the Premium SaaS Plan (Formerly Silver)"". The subscription details table should show  ""Seats in subscription"" as 3 (unless you purchased more seats initially). | Y | |
| T-8     | Purchase additional Storage | Navigate to Settings -> Usage quotas in staging.gitlab.com for your Group. Click on the tab for ""Storage"", then click the link to ""Purchase more storage"". Fill in the form leaving quantity at 1 and confirm the purchase. | Purchase flow is successful. | Y | |
| T-9     | View subscription details | Navigate to the ""Manage Subscription"" page in CustomersDot staging to verify the subscription details are accurate.  | Subscription details shows an additional product for ""Gitlab Storage 10GB - 1 Year"" under the subscription, with the correct Start date, Purchase date, Product, and Quantity (1). | Y | |
| T-10    | View Usage Quotas page | Navigate to Settings -> Usage quotas in staging.gitlab.com for your Group. Click on the tab for ""Storage"". | The Group should have additional storage available after the purchase (10.0 GiB). | Y | |
| T-11    | Purchase another Storage pack | Navigate to Settings -> Usage quotas in staging.gitlab.com for your Group. Click on the tab for ""Storage"", then click the link to ""Purchase more storage"". Fill in the form leaving quantity at 1 and confirm the purchase. | Purchase flow is successful. | Y | |
| T-12    | View subscription details | Navigate to the ""Manage Subscription"" page in CustomersDot staging to verify the subscription details are accurate.  | Subscription details shows 2 additional products, each for ""Gitlab Storage 10GB - 1 Year"" under the subscription, with the correct Start date, Purchase date, Product, and Quantity (1). | Y | |
| T-13    | View Usage Quotas page | Navigate to Settings -> Usage quotas in staging.gitlab.com for your Group. Click on the tab for ""Storage"". | The Group should have additional storage available after the purchase (20 GiB for the 2 additional packs purchased). | Y | |",1
97374051,2021-11-15 17:12:59.846,OH Testing: UC-1,"## Summary

This is a specific testing issue for use case 1 on https://gitlab.com/groups/gitlab-org/-/epics/6606

### Testing DRIs

|Tester ID | Tester Name | Status |
|:---:|---|---|
| 1 | @tyleramos | :white_check_mark: Completed & Passed |
| 2 |  |  |

### UC-1: Customer purchases a new SM subscription

| Step ID | Test Step   | Description | Expected Outcome | Testable? | Pass/Fail |
|---------|--------|----|----------|:---:|:---:|
| T-1     | Purchase SM Premium for 5 users | Navigate to the purchase page for Premium SM 1 year subscription.  To make this easier given the plans page is no longer available in staging, [here is a shortcut to the purchase page](https://customers.staging.gitlab.com/subscriptions/new?plan_id=2c92a01176f0d50a0176f3043c4d4a53). | (1) Purchase flow is successful. The success modal should have a link to activation instructions and a link to the newly created subscription. <br><br> (2) The following custom fields in Zuora are set to `Yes`: `Contract Auto Renew`, `Contract Seat Reconciliation`, `Contract Operational Metrics`, `Turn On Seat Reconciliation`, `Turn on Auto Renew`, `Turn On Operational Metrics` <br><br> (3) The following custom fields in Zuora are not set: `Turn On Cloud Licensing` | Y | |
| T-2     | Receive email with legacy license and activation code | Receive the activation code and legacy license key via email. | The email should contain an activation code and the legacy license key. | Y | |
| T-3     | View subscription details | Navigate to the ""Manage Subscription"" page in CustomersDot staging to verify the subscription details are accurate.  Verify the activation code is shown and can be copied. Verify you can download the license file.  | (1) Subscription details show the correct Start date, Purchase date, Product, and Quantity (5). <br><br> (2) The Activation Code is shown and can be copied to clipboard. <br><br> (3) License file can be downloaded. | Y | |
| T-4     | Add more seats | From the Manage Subscriptions page in CustomersDot staging, click the ""Add More Seats"" button. Set the additional seats to 2 and confirm the purchase. | (1) Purchase flow is successful. <br><br> (2) The following custom fields in Zuora are set to `Yes`: `Contract Auto Renew`, `Contract Seat Reconciliation`, `Contract Operational Metrics`, `Turn On Seat Reconciliation`, `Turn on Auto Renew`, `Turn On Operational Metrics` <br><br> (3) The following custom fields in Zuora are not set: `Turn On Cloud Licensing` | Y | |
| T-5     | Receive email with legacy license and activation code | Receive the activation code and legacy license key via email. | The email should contain the same activation code as before but the legacy license key should be new.  The user limit in the email should now show 7. | Y | |
| T-6     | View subscription details | Navigate to the ""Manage Subscription"" page in CustomersDot staging to verify the subscription details are accurate.  Verify the activation code is shown and can be copied. Verify you can download the license file.  | (1) Subscription details show the correct Start date, Purchase date, Product, and Quantity (7). <br><br> (2) The Activation Code is shown and can be copied to clipboard. <br><br> (3) License file can be downloaded. | Y | |",1
97186348,2021-11-11 16:54:09.844,QSR Amendment.Name Process + Orders API,"### Problem

Quarterly Subscription Reconciliation (QSR) and Auto-Renewal amendments are currently being identified in Zuora by by populating Amendment.Name with the following:

1. `Automated seat reconciliation` - for QSR
2. `AutoRenew by CustomersDot` - for Auto-Renewal

These Amendment Names are also being used to identify invoices related to QSR and Auto-Renewal.

With the full transition to Zuora Orders, the Amendment object is being replaced by the Order objects.  As part of this epic https://gitlab.com/groups/gitlab-org/-/epics/8665+, we will stop using Amendments to make subscription changes.  Therefore, we need a way to identify QSR and Auto-Renewal on the Order and Invoice objects.

### Proposal

1. **Transitioning from Amendment.Name:** use the `Order.Description` field when we transition to Orders API. This will be sufficient in identifying Orders that are generated from the QSR/Auto-Renewal processes, even if multiple order actions are utilized in the auto-renewal process. (this issue).
    - [x] QSR: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3784 (this issue)
    - [x] Auto renewal: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5017 
2. **Traversing from Order to Invoice**: to ensure a completely accurate 1:1 relationship between Order and Invoice, we should stamp the Invoice with a value to identify QSR/Auto-Renewal. (epic: https://gitlab.com/groups/gitlab-org/-/epics/8898)

### Result

Orders and Invoices related to QSR and Auto-Renewal are easy to identify in Zuora.

### Next steps (if any)


### How will we measure success?",2
97110941,2021-11-10 15:41:31.871,Use constants for amendment types consistently,"## Proposal

Amendment types are referenced inconsistently throughout the CustomersDot code.  There is an `Amendment::Types` module where type constants are defined and these constants are used in some places.  There are different constants defined in `AmendGenerator`.  In many other places, strings are used instead of constants.  Let's update CustomersDot to reference one set of constants if possible.  It probably makes sense to define all the possible constants in `Amendment::Types`.

## Original discussion

The following discussion from !4063 should be addressed:

- [ ] @cwiesner started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4063#note_729757014):  (+1 comment)

    > **thought (non-blocking):** I wonder if it makes sense to move these strings into constants :thinking: If I understand it correctly, these are similar to the ones defined in `Zuora::Order` ([here](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/3a3804e1fc1aa8d74a3c4b12d4c509fc82232af0/lib/zuora/order.rb#L13)), right?
    > 
    > Here's also the usage of `Amendment::Types::NEW_SUBSCRIPTION`. So do you think there's a single place to define all of these? :thinking:",2
100161491,2021-11-10 15:04:08.888,Allow Support team to create Starter temporary licenses in CustomersDot,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
After the implementation of [[BE, FE] Improve trial license generation user experience in CustomersDot (#101)](https://gitlab.com/gitlab-org/license-gitlab-com/-/issues/101) it is no longer possible to create Starter trial licenses. \
This makes sense for (potential) customers as the Starter plan is being phased out, and no longer available as a new subscription. \
The L&R Support team however has to create temporary Starter licenses on a very regular basis, to help out customers that are still on Starter and experiencing problems during renewal. At the request of the Sales team or by L&R Support's own initiative a temporary license is provided to ensure continuity.

### Proposal

Re-instate the ability to generate a trial starter plan in Customers Portal app for the L&R Support team.

Note: Teresa: I'm thinking it's a simple rollback but please let me know if not.

### Result
The L&R Support team can create Starter temporary licenses again.

### Next steps (if any)

### How will we measure success?
Happy customers, happy L&R Support team, happy Sales team.

### Reported examples

1. gitlab-com/support/internal-requests#10827
1. gitlab-com/support/internal-requests#11084
1. gitlab-com/support/internal-requests#11581
1. https://gitlab-federal-support.zendesk.com/agent/tickets/2051
1. gitlab-com/support/internal-requests#11851
1. gitlab-com/support/internal-requests#11943
1. gitlab-com/support/internal-requests#11944
1. https://gitlab-federal-support.zendesk.com/agent/tickets/2106
1. https://gitlab.zendesk.com/agent/tickets/260553",2
97031347,2021-11-09 17:38:03.900,[Feature flag] Rollout redirect for /plans page,"# Summary

<!-- Short description of what the feature is about and link to relevant other issues. -->

This issue is to rollout [Remove the CustomersDot plans page and direct users to the marketing pricing page](https://gitlab.com/groups/gitlab-org/-/epics/6806) on CustomersDot production,
that is currently behind the [`redirect_plans_page`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/108/edit) feature flag.

## Owners

- Team: Purchase
- Most appropriate Slack channel to reach out to: `#g_purchase`
- Best individual to reach out to: @dzubova
- PM: @tgolubeva 

## Stakeholders

<!--
Are there any other stages or teams involved that need to be kept in the loop?

- GITLAB_HANDLE of a PM
- The Support Team
- The Delivery Team
-->

## The Rollout Plan

- Rollout Feature for everyone as soon as it's ready

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? Sentry errors reports can also be useful to review -->

## Expectations

### What are we expecting to happen?

What happens when user reaches [https://customers.gitlab.com/plans](https://ustomers.gitlab.com/plans)?

Independently from login status users will be redirected to [https://customers.gitlab.com/](https://customers.gitlab.com/)

What happens when user reaches [https://customers.gitlab.com/](https://customers.gitlab.com/)?

| x | Before | After |
| ------ | ------ | ------ |
| Case 1: User is logged in | Redirect to `/subscription` page | Render subscription list on the root page (no redirect) |
| Case 2: User is not logged in | Redirect to `/plans` page | Redirect to `/customer/sign_in`, when credentials provided - see above :arrow_up: |
| Case 3: Admin is logged in and impersonating user | Redirect to `/subscription` page (for impersonated user) | Render subscription list on the root page (for impersonated user) |
| Case 4: Admin is logged in | Redirect to `/plans` page | Redirect to `/customer/sign_in` |
| Case 5: New user is logged in (no subscriptions before) | Redirect to `/plans` page | Sees empty state  with 2 buttons on root page |

### What might happen if this goes wrong?

If we receive a feedback about problems with log in or redirect problems we should immediately rollback the FF

### What can we monitor to detect problems with this?

<!-- Which dashboards from https://dashboards.gitlab.net are most relevant? -->

- [#s_fulfillment_status](https://gitlab.slack.com/archives/CL7SX4N86)
- [Sentry](https://sentry.gitlab.net/gitlab/customersgitlabcom/?query=is%3Aunresolved)

## Rollout Steps

### Rollout on non-production environments

- [x] Ensure that the feature MRs have been deployed to non-production environments, i.e. `customers-staging`.
- [x] Consider announcing that the flag will be enabled to potentially impacted groups, e.g. `#s_fulfillment_engineering`
- [x] Enable the feature globally on non-production environments by applying the appropriate environment, e.g. `customers-staging` and `customers-development`.
- [x] Verify that the feature works as expected. Posting the QA result in this issue is preferable.

### Preparation before production rollout

- [x] Ensure that the feature MRs have been deployed to production
- [x] Check if the feature flag change needs to be accompanied with a
  [change management issue](https://about.gitlab.com/handbook/engineering/infrastructure/change-management/#feature-flags-and-the-change-management-process).
  Cross link the issue here if it does.
- [x] Ensure that you or a representative in Fulfillment can be available for at least 2 hours after feature flag updates in production.
  If a different developer will be covering, or an exception is needed, please inform the Fulfillment team in #s_fulfillment_engineering
- [x] Ensure any documentation has been updated
- [x] Announce on [the feature issue](ISSUE LINK) an estimated time this will be enabled on production if applicable
- [x] If the feature might impact the user experience, notify `#s_fulfillment` and potentially `#support_gitlab-com`, as well as your team channel ([more guidance when this is necessary in the dev docs](https://docs.gitlab.com/ee/development/feature_flags/controls.html#communicate-the-change)).

### Global rollout on CustomersDot production

- [x] Confirm the feature flag is enabled on `staging` without incident
- [ ] Roll out the feature to targeted testing users first (if applicable)
- [ ] If applicable, [incrementally roll out](https://docs.gitlab.com/ee/operations/feature_flags.html#percent-rollout) the feature.
- [ ] Verify the change has the desired outcome with the limited rollout before enabling the feature globally on production.
- [x] Enable the feature globally on production environment 
- [x] Announce on [the feature epic](https://gitlab.com/groups/gitlab-org/-/epics/6806) that the feature has been globally enabled.
- [x] Wait for [at least one day for the verification term](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release).

### Release the feature

After the feature has been [deemed stable](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release),
the clean up should be done as soon as possible to permanently enable the feature and reduce complexity in the codebase.

<!-- The checklist here is to help stakeholders keep track of the feature flag status -->
- [x] Create a merge request to remove `redirect_plans_page` feature flag https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4124
  - [x] Remove all references to the feature flag from the codebase
- [x] Ensure that the cleanup MR has been deployed to both staging and production
- [x] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [x] Ensure production environment is still working as expected
- [x] Remove the Unleash feature flag from the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [x] Close this rollout issue.

## Rollback Steps

- [ ] This feature can be disabled by performing the following actions:
  - [ ] Disable the Unleash flag on the [feature flag page](LINK TO THE FEATURE FLAG EDIT PAGE)",1
97007078,2021-11-09 12:37:27.121,Generate API specs with running requests test traffic through Optic,"We can automate REST API documentation by running our requests tests and documenting the resulted diff with Optic.

@jameslopez has a fork of the middleware that could get handy for proxying test traffic https://github.com/bluegod/ruby-rack-fixture/tree/fix-readme

Dev notes:

To add a gem

```
gem 'optic-middleware', git: 'git@github.com:bluegod/ruby-rack-fixture.git', branch: 'fix-readme'
```

and follow https://github.com/bluegod/ruby-rack-fixture/tree/fix-readme documentation",2
96972080,2021-11-08 22:41:30.239,"Follow-up from ""Update Staging documentation with relevant user""","The following discussion from !4050 should be addressed:

- [ ] @ebaque started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4050#note_724226215):  (+1 comment)

    > @cmcfarland As part of user provisioning process, would it be possible to add `/home/fulansdep/.rbenv/shims` to `fulansdep`'s `PATH` please? Or should I just simply add that in `fulansdep`'s dotfiles manually on the server?
    > 
    > That would make running rake tasks on Staging a bit more easier.",2
96954185,2021-11-08 16:45:58.374,Ramps Discovery: Review Ramp subscription data in Zuora to inform provisioning plan,"### Problem

The overall goal of this issue is to learn how CustomersDot supports ramps (multi-year subscriptions) once Orders Harmonization is live in Zuora Central Sandbox and the `orders_harmonization` feature is enabled in customers.staging.gitlab.com.  Orders Harmonization will be tested as part of https://gitlab.com/gitlab-org/gitlab/-/issues/343474 so that issue is a blocker for this.

~""Enterprise Applications"" will be creating use cases as part of an investigative spike issue, https://gitlab.com/gitlab-com/business-technology/enterprise-apps/intake/-/issues/385#investigative-spike.  

### Proposal

Once [Orders Harmonization](https://gitlab.com/groups/gitlab-org/-/epics/6641) dev work is complete and the feature has been enabled in CustomersDot staging, ~""Enterprise Applications"" will create Ramp use cases in Zuora API Sandbox and Zuora Central Sandbox as documented in [this issue](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/intake/-/issues/129).  This is estimated to start 2021-11-15, and completed by 2021-11-19.

The Fulfillment team will observe and document behavior in CustomersDot.  We should be able to start this effort by 2021-11-22.

Here's a list of this we should check:
- Were callouts received and processed as expected for ramp subscriptions?
  - Emails delivered?
  - Offline license generated for 1st year of subscription?
- Are ramp subscriptions displayed correctly in the ""Manage Subscriptions"" page for customers?
  - Does the download/copy License function as expected?  It should have created the license for the first year of the subscription's multi-year term.
- Is support able to manually create licenses effectively for the 2nd year or later of the multi year subscription?

If anything is found that requires Fulfillment work, we should note it in this issue and notify @teresatison as it could impact the delivery date for Ramps.

### Test Data
Ramps data has been generated in the dev environment (via Zuora API SB 1) for Fulfillment review. Test scenarios are listed out [here](https://docs.google.com/spreadsheets/d/1iCOjbZySCKxtLpjab8pBAP_1w440AyiaS30nAiLSifM/edit#gid=1534882502).",5
96817014,2021-11-05 16:58:24.716,Update usages of /plans page on GitLab,"We are migrating from https://customers.gitlab.com/plans to https://about.gitlab.com/pricing/ and need to update links to /plans page that present in GitLab.

| Case | Screenshot | Should lead to |
| ------ | ------ | ------ |
| For free accounts we have a link in the navigation | ![Screenshot_2021-11-05_at_17.09.42](/uploads/aeb608177e528ef59254745390e99ae7/Screenshot_2021-11-05_at_17.09.42.png) | https://about.gitlab.com/pricing/ |
| For feature promotions we have a link in the sidebar | ![Screenshot_2021-11-05_at_17.24.41](/uploads/4a1a66b670e8d291110948e7834e94c9/Screenshot_2021-11-05_at_17.24.41.png) | https://about.gitlab.com/pricing/ |
| For feature promotions if the license has expired we have a link in the sidebar| ![Screenshot_2021-11-05_at_17.28.44](/uploads/165657bc8c825af02f434cafe0c6ec83/Screenshot_2021-11-05_at_17.28.44.png) | https://about.gitlab.com/pricing/ |
| On admin subscription page when no license applied | ![Screenshot_2021-11-05_at_17.33.57](/uploads/b58aa0eb240ffbc51aff3dd02f2150a6/Screenshot_2021-11-05_at_17.33.57.png) | https://about.gitlab.com/pricing/ |

Developers note: To release a feature simultaneously we could use a feature flag to set condition for these links. Lag between two releases is tolerable as we will have /plans redirect to root in place, the flow won't be completely broken - means no 404s.",2
96805587,2021-11-05 15:10:29.769,Make Fulfillment projects M1 compatible,"We have new teammate starting end of November.

Since Apple has discontinued Intel based laptops our new teammember will get a M1 laptop.

It's difficult enough to start in a new company with a new tech stack without running into problems that only occur on your machine.

We should make sure our projects are M1 compatible.",2
96617264,2021-11-02 19:14:02.217,"Follow-up from ""Add Feature Flag to removing CDot Plans page""","The following discussion from !3967 should be addressed:

- [ ] @vshumilo started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3967#note_721389363): 

    > **suggestion:** We can create a small follow up ticket to address the remaining case when `:zuora_application_down` is enabled.",1
96268929,2021-10-27 15:57:41.184,Missing :access_token authentication option,"Errors::PlatypusAppAuthSidekiq/Platypus::CreateLeadWorker
Missing :access_token authentication option

We get the following errors today on Sentry.
- https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2916270/events/


### Steps
- [x] Identify the root cause of the error
- [x] Check if the leads got transferred thanks to 3 retries.



### Corrective actions
- [x] Improve the error handling
- [x] 56 leads are stuck at CustomersDot. Build the job to fix it.
- [x] Log the sending issues in the leads table",3
96273916,2021-10-25 19:27:26.442,Licensing Email to Partner,"## Summary

Today, licensing emails are sent to the End User: Sold To contact. Given the 3-tier model of these orders, the Partner Contact facilitating the purchase of GitLab needs to receive the licensing email in addition to the End User.  For detailed requirements about licensing email updates, see [this issue](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/bsa/business-systems-analysts/-/issues/132).

## Requirements

Customize the existing license email for e-marketplace orders to send a courtesy cop (cc) the Reseller Contact.

## Scope

- https://gitlab.com/gitlab-com/business-technology/enterprise-apps/intake/-/issues/445

## Proposal

- CustomersDot does have some logic already for resellers.
  - If a subscription is considered to be managed by a reseller (e.g. `invoice_owner_id != account_id`), then the customer account associated with the subscription will not be allowed to login to CustomersDot.
  - When the license email is sent to the customer and the subscription is managed by a reseller, a reseller notification email is sent to the reseller. The email used for the reseller is pulled from the work_email of the subscription invoice_owner contact account.
- The [issue description](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/bsa/business-systems-analysts/-/issues/132#details) states the ""contact is different from the Sell To, Invoice Owner, or Bill To contacts and will most likely not be stored in Zuora"". Given that, it sounds like we would have to fetch this information from SFDC which would be new work. However, the step to create data in SFDC is after this step, so I'm not sure where we should get this information.
- I'm curious what this means for the existing reseller logic. Would this need to be modified or disabled for E-Disty subscriptions?
- Would the Partner Contact email address be added to the existing email, or would it require a new email with specialized copy? The former would likely be less effort.
- Weight: 3-5 (This one is difficult to say with certainty based on the questions above)

_* proposal and weight extracted from Tyler's analysis [here](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/bsa/business-systems-analysts/-/issues/132#note_713339231)_",5
96273949,2021-10-25 19:17:31.820,[Purchase] SubscribeService: CustomersDot Data,"## Summary

After Zuora has received all the necessary information, the SubscribeService API should create the customer account with all related info in CustomersDot. The customer then needs to be provisioned a license(s).  For detailed requirements for what records and data need to be created in Customers Dot, see [this issue](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/bsa/business-systems-analysts/-/issues/134).

## Requirements

Ensure all customer, subscription and license records are created in CustomersDot.

## Proposal

- The [issue description here](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/bsa/business-systems-analysts/-/issues/129#cdot-data-creation) mentions ""After Zuora has received all necessary information, the SubscribeService API should create the customer account"". I'm wondering if this is a hard requirement for the customer account to be created after. The `SubscribeService` in CDot currently requires a customer object so it would likely be easier to reuse this service if we created the customer before sending the information to Zuora.
- I have some questions about the [list of fields here](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/bsa/business-systems-analysts/-/issues/134#customersdot-data-requirements), but I don't think we have to work through these now as they probably wouldn't impact the LOE significantly.
- Weight: 3

_* proposal and weight extracted from Tyler's analysis [here](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/bsa/business-systems-analysts/-/issues/134#note_713337543)_",3
96273702,2021-10-25 19:07:13.044,[Purchase] SubscribeService: Zuora Data,"## Summary

Once compliance has passed, the SubscribeService API should create the customer account and related subscription information in Zuora. For detailed requirements for what records and data need to be created in Zuora, see [this issue](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/bsa/business-systems-analysts/-/issues/127).

## Requirement

Ensure all customer and subscription records are created in Zuora.

## Proposal

- Based on the current requirements in the [issue description](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/bsa/business-systems-analysts/-/issues/127#zuora-requirements), I think Fulfillment engineers would have a difficult task knowing what's expected of the new subscribe API endpoint right now. This might be my confusion, but I thought the purpose of this issue was to define the transaction from CustomersDot into Zuora. However, the description includes information about Quote-related objects, which I thought were SFDC-related, and that this information would be fed into SFDC after successful entry into Zuora (as part of https://gitlab.com/gitlab-com/business-technology/enterprise-apps/bsa/business-systems-analysts/-/issues/128).
- What would be helpful to assess LOE for this issue might be to understand what exactly needs to be sent in the subscribe API request to Zuora. Or another way to think about it might be to understand how this the Zuora subscribe request differs from the current request from a web direct purchase.
- Just to confirm, the new CustomersDot API will only handling new subscription purchases, correct? Or does it also need to handle subscription updates from Arrow.
- Weight:8 (based on the unknowns so far)

_* proposal and weight extracted from Tyler's analysis [here](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/bsa/business-systems-analysts/-/issues/127#note_713335446)_",8
96106871,2021-10-25 18:52:38.758,Visual Compliance Check for E-Disty,"## Summary

When an order is first submitted, received by Platypus and by Customers API, a callout to Visual Compliance must be made to validate that the End User information is on a denied parties list. [This document](https://docs.google.com/presentation/d/1hD1xgEyJL1U1eyvTci6NNlCdIur4PkB16GO52wjZRgk/edit#slide=id.g5d8fd53174_0_44) provides more information on how Visual Compliance works today for sales assisted deals.

If compliance check fails, Arrow needs to be notified of order rejection. If compliance check passes, the order should proceed and data should continue to flow through GitLab's internal systems.

## Requirement

Ensure all Arrowsphere Orders are submitted through Visual Compliance prior to booking.

## Potential Options

### Option 1: Use CDot Existing API

- A pre-requisite to this step will be to [enable VC in CustomersDot](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3393), date TBD.
- The `ComplianceCheckService` can likely be re-used for the new subscribe API endpoint to be used by Platypus.
  * Currently the `ComplianceCheckService` is utilized in a `before_action` filter for a few controller actions: customer registration and subscriptions controller actions (new, edit, renew, autorenew).
- The tricky part will be making sure the input from Arrow matches the expectation for the visual compliance API. It expects 3 parameters: `company`, `country`, `state`. It's difficult to say because we don't have access to docs, but I believe it uses [the ISO_3166 standard](https://en.wikipedia.org/wiki/ISO_3166-1#Current_codes).
- The other piece to sort out is what to do when compliance fails. The requirements say ""Arrow needs to be notified of order rejection"". Are there any more specifics known for this requirement? Is Arrow looking for a specific HTTP code? I'm not sure we need to know all the specifics at this point for estimation, as long as the expected response isn't too involved.


### Option 2: Create Platypus Callout
* The original decision for e-disty implementation was for Platypus to own the compliance check
* After meeting with Visual Compliance, API setup does seem straightforward & doable, however there will be an additional cost to proceeding this way

##### Pricing Info
* Annual price of approximately 12,000 USD given standard 3 year term and leveraging of existing Gitlab/Descartes Visual Compliance master terms
* One-time $2,500 integration service and activation setup fee for the initial implementation effort which covers a dedicated implementation consultant, sandbox/test environment, and concierge service to ensure solution is up and running as efficiently as possible

## Proposal

As of June 2 2022, we are leaning towards implementing Option 1, with some alterations.  The original plan for Option 1 was to first enable existing VC solution (as part of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3393).  The existing VC solution was disabled in production because of a discrepancy between the countries that VC was blocking and the countries that GitLab wanted to block.  However, with v1 of the Distributor e-Marketplace solution with Arrowsphere, we only need to account for US-based orders, making the existing VC API a possibility at least in the short-term.

The current proposal is to implement and enable VC just for the marketplace API as a short-term solution to be able to release v1.  Long-term, the VC solution in CDot will be replaced with RiskRate.",3
95692923,2021-10-19 12:28:14.371,Backend: Update orders table to set product_rate_plan_id of new OSS plan (for existing orders),"### Problem to solve

We need to update GL.com database to set GitLab subscription hosted_plan_id of `opensource` after the CustomersDot is able to sync `opensource` for Order having a subscription `Plan::ULTIMATE_SAAS_OSS_1_YEAR`.

### Proposal

- [x] Write a rake task to do the following 
     1. Find the Orders within CustomersDot having product_rate_plan_id = Plan::ULTIMATE_SAAS_OSS_1_YEAR
     1. Sync changes to the gl_namespace_id within order to GL.com to update gitlab_subscriptions as `opensource`
- [x] Get the MR merged into main branch.
- [x] Verify the rake command on staging.  
- [x] Turn on the flag `opensource_plans` for production. 
- [x] Run the rake task and verify that the data is updated correctly

In case there is an unexpected error

1. Turn off the [flag `opensource_plan`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
2. Invoke OnCall duty person to run the following on GL.com console. 

```ruby
GitlabSubscription.where(hosted_plan_id: 135).update_all(hosted_plan_id: 101)
```",3
95679216,2021-10-19 10:33:53.124,Sync opensource plan code to GL when order is created,"### Description

Zuora issues a callback when a Zuora admin/sales creates a `opensource` subscription for a customer. 

The customer receives an email about the new subscription and steps to assign a namespace to the new subscription. 

The CustomersDot need to [sync `opensource` plan id](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/services/gitlab/namespaces/update_plan_info_service.rb#L124) to GL.com. This would notify the GL.com to use the `opensource` plan for the namespace.  

### Proposal

Update method [PlansFinder find](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/61b2dead60696ac0a9bddbbbc69890f217f2ea75/app/models/plans_finder.rb#L53) method to return plan_id as opensource for the OSS product_rate_plan_i

### Result

The new plan synced to GL.com is not `ultimate` but `opensource`

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

The unit test for `find` should be created/updated to accommodate the behavior.",3
95620770,2021-10-18 14:57:05.558,Validate presence of zuora_subscription_id in LicenseSeatLink model,"The following discussion from !3949 should be addressed:

- [ ] @ebaque started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3949#note_703493550):  (+1 comment)

    > **Nitpick**: A bit unrelated to this MR: I just noticed that while we have `validates: zuora_subscription_name, presence: true` in `LicenseSeatLink`, we don't have the same for `zuora_subscription_id`. And there's no `null: false` for the related column at the DB level.
    > 
    > Not a big deal, as `LicenseSeatLink.where(zuora_subscription_id: nil).count` returns `0` in prod. But maybe worth having a follow-up MR to add a validation for `zuora_subscription_id`? WDYT?",1
95533154,2021-10-16 17:55:51.451,Instrument Customer Portal Subscription management flows (SaaS and Self-Managed),"## Summary

As we begin to improve the measurement of our full e-commerce funnel we need to ensure we have proper instrumentation across all purchase flows so we can measure each step of the funnel. 

This issue will focus on subscription management flows in Customer Portal.

* Collection tool: Snowplow
* Release behind the feature flag (separate from https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3689): `tracking_subscription_management`

### Information to track (Self-Managed)

| Type | Description | Location | Event Category | Event Action | Event Label |
| ------ | ------ | ----- | ----- | ----- | ------ |
| Event | User clicks `Upgrade` | */subscriptions/A-* | Webstore | Click | Upgrade subscription | 
| Event | User clicks `Add more seats` | */subscriptions/A-* | Webstore | Click | Add seats |
| Event | User clicks `Cancel subscription` | */subscriptions/A-* | Webstore | Click | Cancel subscription |
| Event | User clicks `Renew` | */subscriptions/A-* | Webstore | Click | Renew subscription |


### Information to track (SaaS)

| Type | Description | Location | Event Category | Event Action | Event Label |
| ------ | ------ | ----- | ----- | ----- | ------ |
| Event | User clicks `Upgrade` | */subscriptions/A-* | Webstore | Click | Upgrade | 
| Event | User clicks `Add more seats` | */subscriptions/A-* | Webstore | Click | Add seats |
| Event | User clicks `Cancel subscription` | */subscriptions/A-* | Webstore | Click | Cancel subscription |
| Event | User clicks `Renew` | */subscriptions/A-* | Webstore | Click | Renew subscription |
| Event | User clicks `Buy more CI minutes` | */subscriptions/A-* | Webstore | Click | Buy CI minutes |
| Event | User clicks `Buy more storage` | */subscriptions/A-* | Webstore | Click | Buy Storage |
| Event | User clicks `Change linked namespace` | */subscriptions/A-* | Webstore | Click | Change namespace |

Any other information we should be tracking as part of the subscription management? For example:

* `Add more seats` - track full transaction
* `Upgrade` - track full transaction
* `Renew` - track full transaction
* `Buy more CI minutes`/Buy more storage` - track full transaction
* `Change linked namespace` - track full transaction
* `Cancel` - is already tracked
```
Event Category : subscription_card
Event Action : subscription_auto_renew
Event Label : cancelled
Event Property : experiment
```

### Implementation plan

|||
|-|-|
| Add [`tracking_subscription_management`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/114/edit) Feature Flag | gitlab-org/customers-gitlab-com!4126 |
| Add tracking events for SM/SaaS Subscription management flow | https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4787  |
| Add tracking events for SaaS **specific** Subscription management flow | https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4838  |
| Add BE tracking for full transactions | https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4825  |
| Extra: split SubscriptionButtons into 3 smaller compoents | https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4788  |

## Dashboard

Request for a dashboard from the Product Analytics team: https://gitlab.com/gitlab-data/product-analytics/-/issues/539",2
95533083,2021-10-16 17:49:42.368,Instrument Customer Portal New Subscription Purchase flow (Self-Managed),"## Summary

As we begin to improve the measurement of our full e-commerce funnel we need to ensure we have proper instrumentation across all purchase flows so we can measure each step of the funnel. 

* Collection tool: Snowplow
* Release behind the feature flag ([`tracking_new_ee_subscription`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/113/edit))

## Information to track

| Type | Description | Location | Event Category | Event Action | Event Label |
| ------ | ------ | ----- | ----- | ----- | ------ |
| Pageview | Records pageviews for each page in the purchasing flow | */subscriptions/new* |
| Event | User changes active users count | */subscriptions/new* | Webstore | Click | Active users | 
| Event | User adds new credit card | */subscriptions/new* | Webstore | Click | Add new card |
| Event | User clicks ""buy subscription"" | */subscriptions/new* | Webstore | Click | Purchase subscriptoin |
| Event | User clicks on ""activate your license"" | */subscriptions/new* | Webstore | Click | Activate your license | 
| Event | User views their subscription | */subscriptions/new* | Webstore | Click | View your subscription | 
| Event | User copies cloud license activation code | */subscriptions/A-* | Webstore | Click | Copy cloud license code |


Any other information we should be tracking as part of the new subscription purchase flow?

### Implementation plan

|||
|-|-|
| Add [`tracking_new_ee_subscription`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/113/edit) Feature Flag | gitlab-org/customers-gitlab-com!4114 |
| Add Tracking helper fro FE tracking |https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4446|
| Add tracking events for Self-Managed New Subscription flow | https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4448  |
| Add `google_analytics_id` and `customer_id` to snowplow events | https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4438  |
| Add backend events at the start and end of the subscription flow | https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4466  |
| Add new customerDot standard schema as default | https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/4505 |
| Add a new iglu schema for customerDot | https://gitlab.com/gitlab-org/iglu/-/merge_requests/76 |

## Dashboards

Please note these funnels track first-time (net new) purchases for SaaS and SM:

* [SaaS Purchase Funnel (via /billings page)](https://app.periscopedata.com/app/gitlab:safe-dashboard/985319/SaaS-Purchase-Flow-Funnel)
* [SaaS Purchase Funnel (All views to checkout page)](https://app.periscopedata.com/app/gitlab:safe-dashboard/1022191/Saas-purchase-flow-funnel-(all-views-to-checkout-page))
* [WIP: Self-Managed Purchase Flow Funnel (via Customer Portal)](https://app.periscopedata.com/app/gitlab:safe-dashboard/1019118/WIP:Subscription-purchase-flow-for-Customer-Portal)",5
95527637,2021-10-16 12:37:20.996,Sync 50_000 minutes for OpenSource plans,"### Description

A customer when buys a paid subscription via CustomerDot, [CI minutes are synced](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/lib/namespace_params_generator.rb#L50) from CustomersDot to GitLab.com.

As per the new requirements, the CI minutes for new opesource program should be 50_000 as [noted here](https://gitlab.com/groups/gitlab-org/-/epics/6895#note_706068096). 

### Proposal

Update [method `gitlab_pipeline_minutes`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/models/plan.rb#L463) to sync 50_000 minutes for an opensource plan. 

### Result

Customer when subscribes to opensource plans have 50_000 CI minutes.

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

Unit tests should be updated to ensure the new minute count is reflected.

We should also consider an integration test to validate the behavior between CustomersDot -> GitLab",2
95489790,2021-10-15 13:18:08.594,Add opensource plan information in Plans API,"### Description

On the billings page of a namespace, [plans information](https://gitlab.com/gitlab-org/gitlab/-/blob/master/ee/app/controllers/groups/billings_controller.rb#L20) is fetched via API by making call to CustomersDot. 

The information received via API is then used by the billings page to display what an admin can upgrade their plans to. For example - If the namespace is on Premium plan then they can upgrade to Ultimate plan and disable the upgrade option for Premium plan. 

### Proposal

1. Create new OSS plan id `opensource` within the plans model in CustomersDot
1. Modify the plans controller to send opensource plan to GL.com.
1. Create a new feature flag `opensource_plan` within CustomersDot.
1. Display `[OSS] Ultimate SaaS Plan` on the billings page of GitLab.com",3
95441098,2021-10-14 16:15:51.931,Check display of credit card errors,"### Problem

When entering an invalid credit card number, the error message is not correctly display (noticed in this [merge request](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3953#note_704042847)):

| System | Screenshot |
| ------ | ------ |
| GitLab | ![Screen_Shot_2021-10-14_at_5.43.52_PM](/uploads/0235d2d4f203a3637b8ef69d1c9fb9b4/Screen_Shot_2021-10-14_at_5.43.52_PM.png) |
| CustomersDot | ![Screen_Shot_2021-10-14_at_6.12.34_PM](/uploads/6611812234f4e82f0330ebcda5d05a45/Screen_Shot_2021-10-14_at_6.12.34_PM.png) |

The GitLab screenshot was taken in a project's `setting` -> `CI/CD` under the `Runners` section, e.g.: http://localhost:3000/foo1/bar1/-/settings/ci_cd#js-runners-settings

For comparison, when entering an invalid expiration date the error message is displayed differently:

![Screen_Shot_2021-10-14_at_5.47.43_PM](/uploads/e59a1eb650ece1a880ff4b6af00d9d19/Screen_Shot_2021-10-14_at_5.47.43_PM.png)

### Proposal

Check if this styling can be changed to display errors better.

### Result

Errors are properly displayed.",2
95305446,2021-10-12 18:28:46.993,Improve performance of `/gitlab_plans` endpoint,"### Problem
When investigating Purchase error spend (https://gitlab.com/gitlab-org/gitlab/-/issues/342844), it was observed that the `/gitlab_plans` endpoint is slow to respond. It seems to average locally around 2 seconds with spikes to 5 or more seconds. The latency in this endpoint causes the Billing page in GitLab to frequently take over 5 seconds to load.

### Proposal

Since this endpoint is static and appears to be CPU bound, we should target 500ms or less response time. We should investigate the speed of JSON serialization, etc.

Based on Tyler's assessment [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3677#note_702863713), with him having [fixed](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3677#note_705168537) one of the use cases, we just have this one remaining to address:

> If `namespace_id` is provided, it will be used to lookup the related order for that namespace and find the associated subscription in Zuora ([code reference](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/2c3cd06d36ec0a1535fca0ee96b7bfee2b36b052/app/controllers/plans_controller.rb#L34)). Later, the products are also fetched from Zuora and this is a slow process (\~1.3s on my local machine). This is necessary to determine which plan the namespace is already using, price for upgrades, etc. We will likely need to focus our efforts on ways to improve this lookup.

### Next steps (if any)


### How will we measure success?
Endpoint responds in 500ms or less",3
95043882,2021-10-07 13:27:15.985,Write docs for /subscription routes,"Write yaml files to describe endpoints under /subscriptions

In the best case you should be able to send/receive requests in the already setup docs

#### Implementation plan
| Step | Issue |
| ------ | ------ |
| Setup documentation | https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3509 |
| Write docs for /subscription | 👉 you are here |",3
94826252,2021-10-04 19:23:35.316,[UX] User flows for CustomersDot Support Admin Tool,"This issue is to track efforts documenting top-level user flows across the CustomersDot Support Admin Tool. The goal is to use the defined JTBD in the parent epic and map user flows across the pages required to achieve the job.

_An example of previous user flow documentation work can be found in the [[UX] Document all flows between GitLab.com <> Customers, License, Zuora](https://gitlab.com/groups/gitlab-org/-/epics/3603) epic_

## :dart: Tasks (WIP)
- [x] Document user flows 
  - [x] Generate an Offline license
  - [x] Resend a license
  - [x] Find customers by email

## :art: Documentation

**[Mural Board](https://app.mural.co/t/gitlab2474/m/gitlab2474/1636995607862/095e896771fc71dad28d7ec5d185537cb5c12f0c?sender=tnoah8818)**",3
94826110,2021-10-04 19:20:08.232,[UX] IA Documentation for CustomersDot Support Admin Tool,"This issue is to track efforts mapping the information hierarchy evaluation for the CustomersDot Support Admin Tool.

## :dart: Tasks

- [x] List all top-level navigation pages
- [x] Perform a high-level content inventory across each top-level page
- [x] Track themes and patterns of information across pages

## :art: Documentation

**[Mural Board](https://app.mural.co/t/gitlab2474/m/gitlab2474/1636995607862/095e896771fc71dad28d7ec5d185537cb5c12f0c?sender=tnoah8818)**",3
94785821,2021-10-04 09:38:51.024,Provide an alternative to using ngrok in local environments,"### Problem

Related to https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2466 - after configuring Gitpod, we realised that `ngrok` was also needed for callout configuration.

According to https://about.gitlab.com/handbook/security/#other-servicesdevices

> Do not use tools designed to circumvent network firewalls for the purpose of exposing your laptop to the public Internet. An example of this would be using ngrok to generate a public URL for accessing a local development environment. 

### Proposal

Replace ngrok with an indirect proxy that forwards callouts from Zuora without the need to open a port in your computer. A few alternatives I thought of:

- Use https://gitlab.com/jameslopez/zsim to simulate the callouts API by querying the Zuora notifications API
- Create a proxy server that receives all dev callouts from Zuora and displays a copy & paste `curl` URL+payload we could replay in our local environment (Okta log in needed into the tool)

### Result

Safe local environments",3
94705541,2021-10-01 19:54:08.880,Replace references to created_at in displaying Purchase Date,"### Problem

As described in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3556, in order to support Zuora Orders Harmonization in CustomersDot, we need to remove dependencies to Amendments in the `Product` class.  Amendments are currently used by `Product` objects to fetch `created_date` from the amendment used by [the `Product#created_at` method](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/ac33b9df3ddfd21f27eaad5e452d86394ecb7384/app/models/product.rb#L52).  This is used in CustomersDot [in various places for various reasons](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3556#note_690684649).

This issue in particular focuses on the usage of `created_at` for displaying the Purchase Date for a Subscription.

![purchases_after](/uploads/1d56c2a1e860a67ca4ddbb31fdd2895b/purchases_after.png)

[`ProductPresenter`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/94af84f55889ecbe0cbed93e38ac707fb96bce9a/app/presenters/product_presenter.rb#L23) - `created_at` is included in the set of product attributes. It was added in https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/1733, to show the purchase date of a product on the FE.

### Proposal

[To Be Determined]

In [this thread](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3556#note_692789137) we discussed a couple of ways to approach this.

* Proposed solution A: Remove purchased date from the display on subscription card in the FE, then remove reference from the presenter
* Proposed solution B: If solution A does not work, we could replace `created_at` with the original RPC created_date (same as the solution for CI minutes)

Update: As of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3556#note_692928087, we decided to keep purchase date information for now (unless it turns out to be a big problem to implement).  We'll go with proposed solution B.

### Result

A few less dependencies on `Product#created_at` which allows us to eventually remove amendment as a dependency altogether.",0
94703643,2021-10-01 18:46:55.900,Replace references to created_at in sorting products,"### Problem

As described in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3556, in order to support Zuora Orders Harmonization in CustomersDot, we need to remove dependencies to Amendments in the `Product` class.  Amendments are currently used by `Product` objects to fetch `created_date` from the amendment used by [the `Product#created_at` method](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/ac33b9df3ddfd21f27eaad5e452d86394ecb7384/app/models/product.rb#L52).  This is used in CustomersDot [in various places for various reasons](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3556#note_690684649).

This issue in particular focuses on removing the usage of `created_at` in product sorting logic.

1. ~~[`Subscription#filtered_add_on_products`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/c7cc2593ba6b692acf619e603bec6d6124ef504e/app/models/subscription.rb#L581) - `created_at` is used to sort the array of products by the created date.~~  <-- This will be handled as part of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3656.
1. [`StorageService#purchased_storage_packs`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/5e9d586c623cf67708b5b22ba15fc2f329d6f725/app/services/gitlab/hosted_plans/purchased_add_ons/storage_service.rb#L33) - `created_at` is used to sort an array of storage products by the created date.

### Proposal

It was determined in [this thread](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3556#note_691793880) that a sufficient replacement for `created_at` would be to use the `effective_start_date` of the Rate Plan Charge on the Product.

### Result

A few less dependencies on `Product#created_at` which allows us to eventually remove amendment as a dependency altogether.",1
94703468,2021-10-01 18:41:45.426,Replace references to created_at from CI Minutes related logic,"### Problem

As described in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3556, in order to support Zuora Orders Harmonization in CustomersDot, we need to remove dependencies to Amendments in the `Product` class.  Amendments are currently used by `Product` objects to fetch `created_date` from the amendment used by [the `Product#created_at` method](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/ac33b9df3ddfd21f27eaad5e452d86394ecb7384/app/models/product.rb#L52).  This is used in CustomersDot [in various places for various reasons](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3556#note_690684649).

This issue in particular focuses on removing the usage of `created_at` in code that relates to CI minutes usage and syncing.

1. [`Subscription#recently_purchased_ci_minutes`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/c7cc2593ba6b692acf619e603bec6d6124ef504e/app/models/subscription.rb#L531) - `created_at` is used to filter the CI minute pack products to those created/new since the last sync with GL.com.
1. [`CiMinutesService#execute`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/d871eb5b8f66de492890bdef5854ea53fa978890/app/services/gitlab/hosted_plans/purchased_add_ons/ci_minutes_service.rb#L34) - `created_at` is used to determine the time of the last ci minute purchase.
1. [`CiMinutesParamsGenerator#run`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/36d636f03b4d5ff1ba527ba4d559fc6e8e5b8785/lib/add_ons/ci_minutes_params_generator.rb#L19) - `created_at` is used to sync CI minutes info to GL.com. Specifically, for each CI minute product on the subscription, the expiration date is sent using the `created_at` date + 1 year.
1. [`Subscription#ci_minutes_packs`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/6abfda2cd85cca9af735b0f51b82bac3a7f75cd3/app/models/subscription.rb#L240) - `created_at` is used to sort the array of products by the created date.

### Proposal

It was determined in [this thread](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3556#note_691673940) that a sufficient replacement for `created_at` would be to use the `created_date` of the Original Rate Plan Charge on the Product.  [This comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3556#note_692693889) gives nice code examples and justification.

```
> ci_minute_packs.map { |p| p.rate_plan_charge.original.created_date }
=> [""2021-09-29T12:50:53.000-07:00"", ""2021-09-29T12:55:45.000-07:00"", ""2021-10-01T07:46:33.000-07:00""]
```

### Result

A few less dependencies on `Product#created_at` which allows us to eventually remove amendment as a dependency altogether.",3
94703168,2021-10-01 18:30:19.280,Replace references to created_at in Subscription#trueup_products,"### Problem

As described in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3556, in order to support Zuora Orders Harmonization in CustomersDot, we need to remove dependencies to Amendments in the `Product` class.  Amendments are currently used by `Product` objects to fetch `created_date` from the amendment used by [the `Product#created_at` method](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/ac33b9df3ddfd21f27eaad5e452d86394ecb7384/app/models/product.rb#L52).  This is used in CustomersDot [in various places for various reasons](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3556#note_690684649).

This issue in particular focuses on removing the usage of `created_at` in [the `Subscription#trueup_products` method](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/eadc95bbcf3256171bd5da0dfe521aa92465b086/app/models/subscription.rb#L210).

### Proposal

It was determined in [this thread](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3556#note_691640374) that a sufficient replacement for `created_at` would be to use the `effective_start_date` of the Rate Plan Charge on the Product.

### Result

A few less dependencies on `Product#created_at` which allows us to eventually remove amendment as a dependency altogether.",1
94688369,2021-10-01 14:02:31.089,Improve maintenance mode coverage,"## Problem

As we've been preparing for an upcoming planned Zuora outage in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3538, we performed some testing of our own [maintenance mode feature flag](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/48/edit), `:zuora_application_down`.  We want to turn this feature on to show the maintenance page throughout the duration of the planned outage because without Zuora, CustomersDot will not function properly.

During testing of the maintenance mode, it was discovered that when the feature is enabled, the maintenance page/message is only covered for [the `VisitorsController`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/d671030532e737bbb15669861d259f01c2a48875/app/controllers/visitors_controller.rb#L5).  However, if users are already logged into CustomersDot, they will not see the maintenance mode.  For instance, if they are on the subscriptions page or making a purchase, no message will be shown.

## Proposal

Show the maintenance mode message across more of the application, especially when logged in.  

We could also improve the look of the maintenance mode message, but this would just be a nice-to-have. :smile:",1
94433254,2021-09-28 09:15:03.416,Update docs for CustomersDot plans page,"### Documentation

We will need to update all references to the CustomersDot plans page in the docs.

Is there a way to search the docs for all instances of links to `customers.gitlab.com/plans`? I found a couple and listed them below, but I am sure there are more.

#### Should be updated with how to purchase CI Minutes
* ✔️ [Purchase additional CI minutes](https://docs.gitlab.com/ee/subscriptions/gitlab_com/#purchase-additional-ci-minutes) - ~~will be updated with https://gitlab.com/gitlab-org/gitlab/-/merge_requests/68359~~ updated with https://gitlab.com/gitlab-org/gitlab/-/merge_requests/74115 to decouple from CI Minutes release
* [Handling CI minutes](https://about.gitlab.com/handbook/support/license-and-renewals/workflows/saas/ci_minutes.html) - no link detected
* ✔️ [Pricing FAQ](https://about.gitlab.com/pricing/faq/)
* ✔️ [Shared runners blog post](https://about.gitlab.com/blog/2020/01/21/windows-shared-runner-beta/)
* ✔️ [Customer FAQ CI/CD](https://about.gitlab.com/pricing/faq-consumption-cicd/)

#### This is linked by mistake, should be admin
✔️ https://about.gitlab.com/handbook/sales/commercial/smb/#tools

#### Should be safe exchange https://customers.gitlab.com/plans with https://customers.gitlab.com
* ✔️ [Get Started](https://about.gitlab.com/get-started/)
* ✔️ [Marketing Bizible](https://about.gitlab.com/handbook/marketing/marketing-operations/bizible/#bizible-channel-and-sub-channel-mapping)
* ✔️ [Data sources for data team](https://about.gitlab.com/handbook/business-technology/data-team/platform/#data-sources)",2
94433082,2021-09-28 09:11:46.824,"Create empty state for ""Manage Subscriptions""","Create a component for empty state ""Manage subscriptions"" page

* For ""Manage subscription"" page conditionally show empty state component or subscriptions list, see [subscription_list.vue](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/a7bee5cb82383a5af196385ed75fb110d9651229/app/frontend/javascripts/subscription/components/subscription_list.vue#L30-32)
* Update link on the ""Buy new subscription"" button

All changes should be behind Feature Flag",2
94432891,2021-09-28 09:09:05.119,Add a redirect for /plans,For the plans controller redirect /plans to root /. Use `redirect_plans_page` Feature Flag,1
94432741,2021-09-28 09:06:14.659,Remove /plans redirect under Feature Flag,"Add `redirect_plans_page` FF and use to update root controller to 

- remove redirect to /plans page 
- show sign_in page to not logged in users 
- show subscription list to logged in users",2
94353815,2021-09-27 09:44:16.432,Clean up /plans code,"After rolling out FF `redirect_plans_page`, we need to do a following clean up

- Find usages of plans url in CustomersDot code and replace it with https://about.gitlab.com/pricing/ (for example [subscription_buttons.vue](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/fbb6cb8a0dc1e6e417078585262737a4ddb74b1e/app/frontend/javascripts/subscription/components/subscription_buttons.vue#L241), or root / for [community_program_controller.rb](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/85de06517abbf06e2e53fc73594bb0136bcff1d5/app/controllers/subscriptions/community_program_controller.rb#20), update diagrams, docs, deploy [const](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/fae5f8fbe9435a15e981fbbb3dc605239c467236/bin/deploy) 
- Find usages of plans url in GitLab code and replace it with https://about.gitlab.com/pricing/ for [_promote_issue_weights.html.haml](https://gitlab.com/gitlab-org/gitlab/blob/master/ee/app/views/shared/promotions/_promote_issue_weights.html.haml#L27). Replace it with https://customer.gitlab.com/ for [subscription_portal.rb](https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/subscription_portal.rb#L37) and [docs](https://gitlab.com/gitlab-org/gitlab/blob/master/doc/subscriptions/gitlab_com/index.md#L359)
- There might be more, please check during implementation
- Remove obsolete views [index.html.haml](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/0c56a7b766ad4805a3025a0bd436f5dbcb0318d6/app/views/plans/index.html.haml) and [_addon_card.html.haml](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/1e344ed954437a1cad3f78594ab1ed9de5ddfcf9/app/views/plans/_addon_card.html.haml)",2
94258408,2021-09-24 13:55:20.140,SubscriptionTermStartWorker should only process Active subscriptions,"## Problem

I noticed when working on #2565, [this specific error in Sentry](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2449665/events/3f4c992fc07d45d8a234f4ca3938182a/) where the `SubscriptionTermStartWorker` is processing a callout and does not find the Subscription in Zuora leading to the error.  This error is due to 2 things:

1. The Subscription from the callout was already cancelled so it is not found in the Zuora query because we only find Active Subscriptions [here](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/8cd4b49bb71c00887b5c3dd99bd07b339743d186/app/workers/zuora_callout/base_worker.rb#L32).
1. The SubscriptionTermStart callout must be defined incorrectly in Zuora production.  I noticed the `subscription_id` actually contains a leading space in the XML body which you can see in the Sentry error (see below).  This causes [the fallback query here](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/8cd4b49bb71c00887b5c3dd99bd07b339743d186/app/workers/zuora_callout/base_worker.rb#L33) not to find the subscription either.

    ```
    <parameter name="" subscription_id"">2c92a00e7bde360b017be47e5a335732</parameter>
    ```  
## Proposal

The `SubscriptionTermStartWorker` can be adjusted to only process subscriptions with a status of ""Active"".  This should solve item 1 from above.

For item 2, I will reach out to someone in ~""Enterprise Applications"" to assist in updating the callout definition.",1
94127341,2021-09-22 15:27:46.532,CDot Subscription Owner Association/Creation for Amendment and Renewal,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
In the sales process, salespeople are required to provide information on a Quote about the CDot User that is managing the particular purchase.  For sales-engaged new biz, the contact that is ultimately passed to Zuora as the Zuora Sold To associated with the Zuora Account and Subscription is used to create or associate a CDot User with a Zuora Account/Subscription.  For Amendment and Renewal sales-engaged deals, no User management takes place in CDot to associate any new contacts with a namespace.  This causes provisioning lags that impact revenue recognition because license emails may not be sent to the appropriate use (that is not represented in CDot or not associated with a namespace/Zuora Subscription).

### Proposal
https://gitlab.com/gitlab-com/business-technology/enterprise-apps/intake/-/issues/319#note_676389738

Update [the `FindOrCreateCustomersService`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/a370c2b4b1a4fec50a6be2291c7b0ec7c73e0cd7/app/services/find_or_create_customer_service.rb#L34) to only find Customers using email address.  This means avoid the fallback find logic using `zuora_account_id`.  If new sold to contact information is received in a callout and the email address does not exist, CDot should create a new customer and associate it to the order and account.

### Result
All sales-engaged deals have Zuora Sold-To contact created and/or associated with a Zuora Subscription/Account/Namespace.

### Next steps (if any)
Fulfillment (@tgolubeva) and EntApps (@mquitevis) have already brainstormed a high-level solution.  Next steps are Fulfillment prioritization and working on a detailed solution.

### How will we measure success?
The Zuora Sold To Contact received licensing emails for all deal types (New business, Amendments, Renewals)

### Communication Plan
- [x] When problem/solution validation begins, re-engage cross-functional team members: Mark, Jessica, Sarah, Jesse and Tatyana.
- [~] If and when user design work is deemed necessary and design work starts, communicate the beginning of this development phase.
- [x] When development work begins, communicate status.",2
94028966,2021-09-21 10:40:58.006,List of add-ons scenarios and proposal for subscription creation and amendment,"In light of the discussions that arose from [this](https://gitlab.com/gitlab-org/gitlab/-/issues/338546#note_674633581) and [this](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3620) and with the aim of

- have clarity on how add-on purchases are supposed to behave (in CDot, GitLab and Zuora)
- have clear test scenarios we can use when manually probing the feature

here you find a table of the different scenarios that will need to be covered while completing the [CI Minutes](https://gitlab.com/groups/gitlab-org/-/epics/5391) and [Storage](https://gitlab.com/groups/gitlab-org/-/epics/5789) Epics.

All here refers to Saas.

### CI Minutes current scenarios

The following scenarios describe _how it currently_ works (IOW, CI Minutes are purchased via CDot and Plan via GitLab.com).

It is assumed that

- a **different** Group is created for each scenario
- Storage will behave the same as CI Minutes

| Scenario | Description | Current CDot | Current Zuora | Current GitLab |
|-|-|-|-|-|
| TC-1 | Buy `CI Minutes x 1` once from CDot, assign to Group (Free) | ![Screenshot_2021-09-21_at_14.59.24](/uploads/037c4d1b1c66a7051588126cc2e3b4e8/Screenshot_2021-09-21_at_14.59.24.png) | ![Screenshot_2021-09-21_at_15.00.55](/uploads/357530ed5c5d088b875b8a713aa90fd3/Screenshot_2021-09-21_at_15.00.55.png) | ![Screenshot_2021-09-21_at_15.00.19](/uploads/1fde429d295f25aee7bb41ecd9579560/Screenshot_2021-09-21_at_15.00.19.png) |
| TC-2 | Buy `CI Minutes x 1` twice, assign to the same Group (Free) | ![Screenshot_2021-09-21_at_15.08.38](/uploads/f9571830906bc58607d9e1988b1e4213/Screenshot_2021-09-21_at_15.08.38.png) | ![Screenshot_2021-09-21_at_15.09.41](/uploads/2aebdde4734e6a814a6e2c2053c73fe9/Screenshot_2021-09-21_at_15.09.41.png) | ![Screenshot_2021-09-21_at_15.08.53](/uploads/5b35d694d54abfa70937bd0024f91aa4/Screenshot_2021-09-21_at_15.08.53.png) |
| TC-3 | Buy `CI Minutes x 1` once, assign to Group and **after** buy a Premium Sub and assign it to Group | ![Screenshot_2021-09-21_at_15.15.45](/uploads/2c6e16269eb79bd3ddea1dcc6282d4a3/Screenshot_2021-09-21_at_15.15.45.png) | ![Screenshot_2021-09-21_at_15.16.30](/uploads/21df9514fbf85c87cfae81777db269cb/Screenshot_2021-09-21_at_15.16.30.png) | ![Screenshot_2021-09-21_at_15.14.11](/uploads/006f87fec01e891ee9c47fd6001bd4d5/Screenshot_2021-09-21_at_15.14.11.png) |
| TC-4 | Buy a Premium Plan and **after** buy `CI Minutes x 1` once and assign it to Group | ![Screenshot_2021-09-21_at_15.26.42](/uploads/5dc6327006ecfabc8a4101be57f72b39/Screenshot_2021-09-21_at_15.26.42.png) | ![Screenshot_2021-09-21_at_15.27.07](/uploads/69a1edb434744a6eb21499935b800bd6/Screenshot_2021-09-21_at_15.27.07.png) | ![Screenshot_2021-09-21_at_15.27.54](/uploads/13e5aa87e6d6c7da8ac207fd92217b8b/Screenshot_2021-09-21_at_15.27.54.png) |
| TC-5 | Buy a Premium Plan and **after** buy `CI Minutes x 1` from 'Buy more CI minutes' in the sub card | ![Screenshot_2021-09-21_at_15.33.29](/uploads/302ad5c2ba144f7f76d6006eb6bba7cb/Screenshot_2021-09-21_at_15.33.29.png) | ![Screenshot_2021-09-21_at_15.34.05](/uploads/3aad08f4a92dc7386a1b1a9cc3c7da1e/Screenshot_2021-09-21_at_15.34.05.png) | ![Screenshot_2021-09-21_at_15.34.39](/uploads/f7cab4e71f37a94e21be55ce71d74704/Screenshot_2021-09-21_at_15.34.39.png) |
| TC-6 | Buy `CI Minutes x 1` from CDot, assign to Group. Than buy  `CI Minutes x 1`from GitLab flow and assign it to the same group | ![](https://gitlab.com/gitlab-org/gitlab/uploads/cab81de4665e92360ed79ee375460aa6/Screenshot_2021-11-17_at_16.28.40.png) |N/A | ![](https://gitlab.com/gitlab-org/gitlab/uploads/1dfe7c19293665b4f0a50b80cd548f51/Screenshot_2021-11-17_at_16.28.54.png) |",1
93938053,2021-09-20 00:35:00.386,Community Programs - update the login/register flow to reflect UX design,"### Problem

Related to this bug discovered during testing https://gitlab.com/gitlab-org/fulfillment-meta/-/issues/311#note_677677051

When going through the Community Program signup flow, a customer is asked to register/login first, then select the plan type (SaaS or Self-Manage). If they select SaaS, they are dropped into the checkout page without a way to create a group.  This video shows the current experience https://gitlab.com/gitlab-org/fulfillment-meta/-/issues/311#note_678467160

The original design asked for a different flow.

The SaaS or SM selection should be prior to sign in, and [here's the reasoning](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2677/designs/User_flow.png#note_531957098). A SaaS customer should never see the option to Sign in or Register, only the `Continue with Gitlab.com account` button. If we don't do it this way and the SaaS customer registers a new CustomersDot account, it won't be connected to their GitLab.com account and they won't be able to complete the flow. 


### Proposal

Update the flow to reflect the UX design.

* exclude the landing page from requiring a user login
* when accessing the claim page:
  * if no login: redirect to either register page (for self-managed) or to log in with GitLab page (for SaaS) based on `edition` query string variable
  * if the user is logged in, continue the flow to the claim page without any redirect


### Result

### Next steps (if any)

### How will we measure success?",2
93883151,2021-09-17 19:17:28.621,Group address fields together on the Customer info page,"## Problem

When looking at the customer info page (i.e. https://customers.gitlab.com/admin/customer/xxxx), it is difficult to see the full address, as the address fields are randomly ordered on the page.

## Proposal

Move `Address 1` and `Address 2` fields to be near `Country`, `State`, `City` and `Zip code`.",2
93821802,2021-09-17 00:43:44.223,[Engineering]: Pitch a paid plan when users click to purchase CI minutes,"# Experiment summary
We believe we can increase paid conversion by informing users of their paid plan options when they go to purchase CI minutes.

# Hypothesis
Users who purchase CI minutes may not know that CI minutes are included with a paid plan. A paid plan may be a better fit for users who are so engaged as to use all of the free minutes allocated to them.

Currently, the experience gives users no information around the free CI minutes included in the paid plans.
| Current Purchase Page | 
| ------ | 
| ![Screen_Shot_2021-09-13_at_3.12.42_PM](/uploads/183308a897b9e059b0e32d48a34c9688/Screen_Shot_2021-09-13_at_3.12.42_PM.png) |

# Business problem
At times, the features of our paid plans are not easily found when initially/casually using the platform.

# Proposed Solution

Inform users of the paid plan options on the purchase page.
- For all free users, we present them with information in the form of a banner about upgrading to GitLab Premium. We then link them to the new subscription purchase flow.
- For premium users who are subscription owners, we present them with information in the form of a banner about upgrading to GitLab Ultimate. We then link them to the CustomersDot Upgrade flow.

| What GitLab Free Users See: | What GitLab Premium Subscription Owners See: |
| ------ | ------ |
| ![Screen_Shot_2021-09-23_at_1.30.55_PM](/uploads/a742da2e783c3427326fae152bb8d035/Screen_Shot_2021-09-23_at_1.30.55_PM.png) | ![Screen_Shot_2021-09-23_at_1.31.06_PM](/uploads/6c48448e806ae7be3afec17ad7ddbb47/Screen_Shot_2021-09-23_at_1.31.06_PM.png) |

#### [Design File](https://www.figma.com/file/ND2SnuptLEBZRtLx5QTMXK/UX-Pitch-a-paid-plan-when-users-click-to-purchase-CI-minutes?node-id=3%3A22)",2
93800768,2021-09-16 14:49:33.460,Allow Admins to set Zuora Subscription Super Sonics flags to NULL in the Admin UI,"### Problem

Admins are able to check boxes on the Zuora Subscriptions Admin page in CustomersDot which can set a few custom fields in Zuora.  Checking the box sets the field to ""Yes"".  Later if you uncheck a box, it sets the field to ""No"".  This was fine when the initial design assumed all these fields would either be ""Yes"" or ""No"" but NULL is also a valid state, especially in the dual licensing approach.  

![Screen_Shot_2021-09-16_at_10.36.23_AM](/uploads/c19b85d7aba596cb99f3bd9584af22c4/Screen_Shot_2021-09-16_at_10.36.23_AM.png)

Admins should have the ability set the fields to NULL as well.  It's also unclear if an unchecked box means ""No"" or NULL.

### Proposal

Update the Zuora Subscriptions Admin page from using checkboxes to dropdowns that contain all three options: ""Yes"", ""No"", and NULL.

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

Feature specs should be added to accompany this change in addition to any related unit specs.

- Tests that ensure that the various data types (boolean, nil) behave appropriately",2
93780933,2021-09-16 09:54:52.318,[Feature Flag] Enable `new_ci_provisioning` flag,"<!-- Title suggestion: [Feature flag] Enable description of feature -->

# Summary

<!-- Short description of what the feature is about and link to relevant other issues. -->

This issue is to rollout the new [CI minutes provisioning](https://gitlab.com/groups/gitlab-org/-/epics/5715) on CustomersDot production,
that is currently behind the [`new_ci_provisioning`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/102/edit) feature flag.

## Owners

- Team: ~""group::utilization"" 
- Most appropriate Slack channel to reach out to: `#g_utilization`
- Best individual to reach out to: `@vij`
- PM: `@amandarueda` 

## The Rollout Plan

- Rollout Feature for everyone as soon as it's ready

This feature is running in parallel with existing provisioning and as such is as yet unused on GitLab.com so it can roll out to everyone whilst we monitor and validate the data being created.

## Expectations

### What are we expecting to happen?

We will expect to start seeing API requests in the Kibana logs, between CustomersDot and GitLab.

This will result in the creation of `Ci::Minutes::AdditionalPack` records on GitLab when minutes are purchased, and updates to those packs when linked namespaces are changed.

### What might happen if this goes wrong?

We may see an increase in errors if an unforeseen scenario occurs.

The result of this would be incorrect data being applied in GitLab.com, the severity of which is low because the data is as yet unused and we have a separate rake task for re-syncing the same data which can always run if/when the problem is resolved.

We can disable the feature flag safely if this occurs, which will prevent further data creation.

### What can we monitor to detect problems with this?

We can/should monitor the following after enabling:

**Staging:**

- [#s_fulfillment_status](https://gitlab.slack.com/archives/CL7SX4N86)
- [Kibana logs for API endpoints](https://nonprod-log.gitlab.net/goto/2b4f611b3e6c912061b19e1502722cf5)
- [Create packs Sentry](https://sentry.gitlab.net/gitlab/customersgitlabcom/?query=is%3Aunresolved+syncminutesjob)
- [Transfer packs Sentry](https://sentry.gitlab.net/gitlab/customersgitlabcom/?query=is%3Aunresolved+transfer)


**Production:**

- [#s_fulfillment_status](https://gitlab.slack.com/archives/CL7SX4N86)
- [Kibana logs for API endpoints](https://log.gprd.gitlab.net/goto/dad196f12169b034bd809671da17fb2b)
- [Create packs Sentry](https://sentry.gitlab.net/gitlab/customersgitlabcom/?query=is%3Aunresolved+syncminutesjob)
- [Transfer packs Sentry](https://sentry.gitlab.net/gitlab/customersgitlabcom/?query=is%3Aunresolved+transfer)

## Rollout Steps

### Rollout on non-production environments

- [x] Ensure that the feature MRs have been deployed to non-production environments, i.e. `customers-staging`.
- [x] Enable the feature globally on non-production environments by applying the appropriate environment, e.g. `customers-staging` and `customers-development`.
- [x] Verify that the feature works as expected. Posting the QA result in this issue is preferable.

### Preparation before production rollout

- [x] Ensure that the feature MRs have been deployed to production
- [x] Check if the feature flag change needs to be accompanied with a
  [change management issue](https://about.gitlab.com/handbook/engineering/infrastructure/change-management/#feature-flags-and-the-change-management-process).
  Cross link the issue here if it does.
- [x] Ensure that you or a representative in Fulfillment can be available for at least 2 hours after feature flag updates in production.
  If a different developer will be covering, or an exception is needed, please inform the Fulfillment team in #s_fulfillment_engineering
- [x] Ensure any documentation has been updated
- [x] If the feature might impact the user experience, notify `#s_fulfillment` and potentially `#support_gitlab-com`, as well as your team channel ([more guidance when this is necessary in the dev docs](https://docs.gitlab.com/ee/development/feature_flags/controls.html#communicate-the-change)).

### Global rollout on CustomersDot production

- [x] Confirm the feature flag is enabled on `staging` without incident
- [ ] Roll out the feature to targeted testing users first (if applicable)
- [ ] If applicable, [incrementally roll out](https://docs.gitlab.com/ee/operations/feature_flags.html#percent-rollout) the feature.
- [ ] Verify the change has the desired outcome with the limited rollout before enabling the feature globally on production.
- [x] Enable the feature globally on production environment 
- [x] Wait for [at least one day for the verification term](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release).

### Release the feature

After the feature has been [deemed stable](https://about.gitlab.com/handbook/product-development-flow/feature-flag-lifecycle/#including-a-feature-behind-feature-flag-in-the-final-release),
the clean up should be done as soon as possible to permanently enable the feature and reduce complexity in the codebase.

<!-- The checklist here is to help stakeholders keep track of the feature flag status -->
- [x] Create a merge request to remove `new_ci_provisioning` feature flag
  - [x] Remove all references to the feature flag from the codebase
- [x] Ensure that the cleanup MR has been deployed to both staging and production
- [x] Disable the feature flag via the [CustomersDot dashboard](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags)
- [x] Ensure production environment is still working as expected
- [x] Remove the [Unleash feature flag](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/102/edit)
- [x] Close this rollout issue.

## Rollback Steps

- [ ] This feature can be disabled by performing the following actions:
  - [ ] Disable the Unleash flag on the [feature flag page](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/102/edit)",1
93738657,2021-09-15 18:02:42.297,Show activation information in the Admin UI,"### Problem

Admins are able to view Cloud Activation data in the Admin UI currently, but the information shown is very basic.  The fields include subscription name, activation code, created date, and super sonics aware.

![Screen_Shot_2021-09-15_at_1.45.05_PM](/uploads/ad0ab422252f8721095a91d91b449b56/Screen_Shot_2021-09-15_at_1.45.05_PM.png)

It would be useful for Admins to be able to tell if a customer has activated any instances with a particular code, and when that might have occurred.

### Proposal

For a particular `CloudActivation` record, we should add a link to another page listing all of the `SelfManagedInstanceActivations`.  We would need to join information from the `SelfManagedInstances` table as well

This page could be a simple table with the following columns:

- `self_managed_instances.instance_identifier`
- `self_managed_instance_activations.activated_at`

### Result

An Admin could easily tell if/when instances have been activated with a particular activation code.

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

This change would require a new model and associated specs with appropriate associations.  This also applies to the new controller.",2
93735174,2021-09-15 16:43:24.907,[Community Programs Renewal] Add success modal to renewal page,"Show modal window if transaction was successful [modal](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/75adc85589a351f9aa523a4ca2f1bd46e7c3d09a/app/frontend/javascripts/purchase/components/purchase_success_modal.vue)

We need two versions of this component: SaaS and SelfManaged

Buttons link to https://gitlab.com/ for SaaS and https://customers.gitlab.com/subscriptions for SelfManaged

| SaaS | SelfManaged |
| ------ | ------ |
| ![Screenshot_2021-09-15_at_18.39.35](/uploads/7ef0cef40c371a66abc6d5590a2d7045/Screenshot_2021-09-15_at_18.39.35.png)| ![Screenshot_2021-09-15_at_18.39.47](/uploads/ed4fe1e3e317c90dccc67282ef5934f6/Screenshot_2021-09-15_at_18.39.47.png)|

Design issue: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2747/",2
93734696,2021-09-15 16:37:00.575,[Community Programs Renewal] Add purchase confirmation to renew page,"Add purchase confirmation [component](
https://gitlab.com/gitlab-org/customers-gitlab-com/blob/f86054a4cb83d5536a2f5093830b4b47d7a55ff0/app/frontend/javascripts/purchase/components/purchase_confirmation_card.vue)

![Screenshot_2021-09-15_at_18.35.49](/uploads/db3fab2d140b1dba01402d0d9874b8a0/Screenshot_2021-09-15_at_18.35.49.png)

Design issue: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2747/",1
93734111,2021-09-15 16:33:48.903,[Community Programs Renewal] Add coupon input to renew page,"Add [component](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/fa85e92d41afbdd97d324d6a4a37f0cba16529e5/app/frontend/javascripts/subscription/components/coupon_code_input.vue) to the renew page

![Screenshot_2021-09-15_at_18.29.50](/uploads/6cc47e0206b955b0089e98f915393734/Screenshot_2021-09-15_at_18.29.50.png)

Design issue: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2747/",2
93732395,2021-09-15 16:28:11.748,[Community Programs Renewal] Add a renew landing page,"* add a new route `/subscriptions/community_program/renew`
* re-use templates that we build for CE subscription `community_subscription_landing_page.vue`

Buttons link to `/subscriptions/community_program/my_renewal`
* add a new route `/subscriptions/community_program/my_renewal`
similar to https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/3dcda9b79ed975fc0b18f5f01941de4d38bff91b/app/controllers/subscriptions_controller.rb#L117

If user has only one subscription -> redirect directly to `/subscriptions/community_program/A-SXXXXX/renew`, if more than one -> to `/subscriptions`

![Screenshot_2021-09-15_at_18.07.09](/uploads/84a0f3e7cdb5624b0540f4c69a083798/Screenshot_2021-09-15_at_18.07.09.png)

Design issue: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2747/",3
93654648,2021-09-14 16:05:57.137,[CI Minutes Provisioning] AdditionalPack testing plan,"### Summary

We have introduced a new concept of an `Ci::Minutes::AdditionalPack` model on GitLab for handling the new provisioning of CI minutes purchases from CustomersDot.

This new model has API endpoints that allow us to (re-)sync purchased packs as well as transfer them between namespaces (currently, only when subscriptions are moved).

Further information is available in the proposal document, [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/doc/ci_minutes/provisioning_proposal.md).

The current status of this work is that creation and transferring of packs is implemented, but currently un-used on the GitLab side (see the [epic](https://gitlab.com/groups/gitlab-org/-/epics/5715) for more detail).

This means that CI minutes balance and consumption is still using the old `namespace#extra_shared_runners_minutes_limit`, so although the individual parts are tested at a unit level, we can't easily write E2E tests for this _new_ provisioning yet (someone please correct me if there's a simple way of doing this without UI changes to test against).

So for now, in order to test the current work end to end, I've created a test plan that I've been working against which I'll document here.

We can use this plan for checking off scenarios during our manual testing, and eventually using it as a basis for writing automated QA tests.


### Setup

As mentioned above, given there's no UI you can use to verify changes on the GitLab side, we'll need to use a rails console to do it manually, so firstly, here are some (hopefully) useful console snippets for verifying each step:

**Ensure feature flag enabled: **

```ruby
Unleash.enabled?(:new_ci_provisioning)
```

This is currently [toggled on](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags?scope=featureFlags&page=1) for `customers-development` and `customers-staging` environments.

**Check purchased pack counts on GitLab:**

```ruby
# Total packs count:
Ci::Minutes::AdditionalPack.count

# a User's packs and count:
user.reload
user.namespace.ci_minutes_additional_packs
user.namespace.ci_minutes_additional_packs.count
user.namespace.ci_minutes_additional_packs.sum(&:number_of_minutes)

# a Group's packs and count:
group.reload
group.ci_minutes_additional_packs
group.ci_minutes_additional_packs.count
group.ci_minutes_additional_packs.sum(&:number_of_minutes)
```

### The Tests:

#### Buying packs:

- **Buy minutes for user**
    - [ ] Check additional packs count
    - [ ] Check additional packs number of minutes
        - **Buy more minutes for User**
            - [ ] Check additional packs count
            - [ ] Check additional packs number of minutes
- **Buy minutes for group**
    - [ ] Check additional packs count
    - [ ] Check additional packs number of minutes
        - **Buy more minutes for group**
            - [ ] Check additional packs
            - [ ] Check additional packs number of minutes
- **Buy subscription for user**
    - **Buy minutes for user**
        - [ ] Check additional packs count
        - [ ] Check additional packs number of minutes
        - **Buy more minutes for user**
            - [ ] Check additional packs
- **Buy subscription for Group**
    - **Buy minutes for group**
        - [ ] Check additional packs count
        - [ ] Check additional packs number of minutes
        - **Buy more minutes for group**
            - [ ] Check additional packs count
            - [ ] Check additional packs number of minutes
- **Buy minutes for a trial** (`/-/trials/new`)
  - [ ] Check additional packs count
  - [ ] Check additional packs number of minutes

#### Transferring packs (`Change linked namespace`):

- **User to Group**
  - [ ] Check additional packs count on User is zero
  - [ ] Check additional packs count and number of minutes on Group
  - **Buy more minutes for Group**
    - [ ] Check additional packs count
    - [ ] Check additional packs number of minutes
- **Group to User**
  - [ ] Check additional packs on Group is zero
  - [ ] Check additional packs count and number of minutes on User
  - **Buy more minutes for User**
    - [ ] Check additional packs count
    - [ ] Check additional packs number of minutes
- **Group to Group**
  - [ ] Check additional packs on originating Group is zero
  - [ ] Check additional packs count and number of minutes on target Group
  - **Buy more minutes for Group**
    - [ ] Check additional packs count
    - [ ] Check additional packs number of minutes


#### Notes

The syncing of packs happens asynchronously, so updates may take a few seconds whilst waiting for the Zuora callbacks to be processed.

There is a [known issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3597) when buying additional minutes for a subscription that has a future dated renewal - these tests will **not currently work** with those subscriptions",1
93461574,2021-09-10 13:24:56.318,Add name field to GraphQL Subscription Type,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Systems other than CDot might need to be aware of a Subscription name.

### Proposal

It would be useful on some occasions (such as the one born from this [issue](https://gitlab.com/gitlab-org/gitlab/-/issues/338546#note_674033407)) to retrieve the name of a Subscription.

This is [how it can be done](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3720#note_674681374).",1
93443323,2021-09-10 08:08:06.861,CloudActivation returning empty subscription instead of nil,"https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2801577

Some cloud activation were triggered but the current subscription cannot be found.

## `A-S00019212`

There are no current or future versions. The last one ended in Sat, 12 Sep 2021.

Activation code was created in Thu, 09 Sep 2021 22:21:04.

We will need to investigate why activation code was created for this customer who does not have a subscription.",1
93435690,2021-09-10 05:37:37.988,Zuora iFrame is not always aware of the current customer,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

When used in different a context than CDot, the Zuora iframe does not seem to always be aware of who's the current customer. This leads to the rejection of some actions to amend existing subscriptions (for more details, [here](https://gitlab.com/gitlab-org/gitlab/-/issues/338546#note_674033407)).

### Proposal

Use the already implemented `user_id` to retrieve the customer that has sent the request and its Zuora account.",1
93405959,2021-09-09 15:08:35.886,[Community Programs Renewal] Add customer information to the renew page,"Add customer information [component](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/76db4040e6294daa2da5ae813f667c54d34781a5/app/frontend/javascripts/subscription/components/customer_information.vue)

![Screenshot_2021-09-09_at_17.06.58_copy](/uploads/8b319c4312394cfee1f36791225561a5/Screenshot_2021-09-09_at_17.06.58_copy.png)

Design issue: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2747/",1
93399931,2021-09-09 13:39:10.645,[Community Programs Renewal] Add description to renew page,"Add description component to Community Program renew page

We need two versions of this component: SaaS and SelfManaged

* for SelfManaged version add a collapsible element with a hint text from [subscription_renew.vue](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/a8d38ed9bd91be182e6288ff341a0c736713788f/app/frontend/javascripts/subscription/components/subscription_renew.vue#L337). We already have this element glued in the `subscripton_renew` component so it is a good time to extract it and use in two places

| SaaS | SelfManaged |
| ------ | ------ |
| ![Screenshot_2021-09-09_at_15.36.57](/uploads/4577a476190ea4407650bbd330d39b26/Screenshot_2021-09-09_at_15.36.57.png) | ![Screenshot_2021-09-09_at_15.37.28](/uploads/7d8437a9e0773765a20d911556004062/Screenshot_2021-09-09_at_15.37.28.png) |

Design issue: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2747/",3
93396410,2021-09-09 12:56:43.098,[Community Programs Renewal] Add a renew page,"* Add a new route `/subscriptions/community_program/A-SXXXXXX/renew`
* Add basic titles to the page 

![Screenshot_2021-09-09_at_14.55.48](/uploads/c484be56dcf75482e446973c2a04f694/Screenshot_2021-09-09_at_14.55.48.png)

Design issue: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2747/",3
93395426,2021-09-09 12:42:25.034,[Community Programs Renewal] Enable renew buttons for subscription card,"Show ""renew"" buttons on `/subscriptions` page for Community Program card

Link for the button should lead to `/subscriptions/community_program/A-SXXXXXX/renew`

Button should only show up when `community_program_renewals` feature flag is turned on (and when its up for renewal)
 
[Community Program Subscription Renewal Setup instructions](https://gitlab.com/groups/gitlab-org/-/epics/5711#steps-to-setup)",2
93394764,2021-09-09 12:31:30.773,[Community Programs Renewal] Add renewal info banner,"Add a renewal info banner to Community Program card on `/subscriptions` page. The banner should show up 3 months before the expiration.

[Related implementation conversation](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3575#note_886396335)

Banner should only show up when `community_program_renewals` FF is turned on.

[Edge case] If customer has more than one community program subscription under an account, we should display an alert for each community program subscription subscription that is up for renewal with `Renew` CTA in a list at the top

`application` leads to:

* GitLab for Education link: https://about.gitlab.com/solutions/education/join/#application
* GitLab for Open Source link: https://about.gitlab.com/solutions/open-source/join/#application
* GitLab for Start-ups is not relevant, because that program is only a single-year subscription (no renewals)



![Screenshot_2021-09-09_at_14.28.23](/uploads/4fdf553f6c3d548f11e4f34d79cf6ead/Screenshot_2021-09-09_at_14.28.23.png)

Design issue: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2747/

[Community Program Subscription Renewal Setup instructions](https://gitlab.com/groups/gitlab-org/-/epics/5711#steps-to-setup)",2
93387344,2021-09-09 10:30:14.357,Do not repeat quote_invoice if quoted_invoice_amount is present,"The following discussion from !3751 should be addressed:

- [ ] @shreyasagarwal started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3751#note_673204753): 

    > @qzhaogitlab Thank you for the call and clearing my doubts. Do you think we can call to quote the invoice only once and not call if the `quoted_invoice_amount` is already filled ?

If after quote_invoice succeed, the `email_notification` failed, the job will retry. During the retry, it will `quote_invoice` again. In this case, we do not need to repeat the quote_invoice.",1
93355364,2021-09-08 20:47:19.603,Modify the subscription_update endpoint to support an Order Processed callout,"### Background

As discussed in https://gitlab.com/gitlab-com/business-technology/enterprise-apps/intake/-/issues/322#note_666782612, Order action callouts are triggered for each order action (add product, remove product, etc) added to a processed order.  This is similar to amendment callouts, however there is one big difference.  With Amendments, each Amendment processed yields a new version of the subscription.  This isn't necessarily the case with Order Actions.

When processing Amendment callouts in CustomersDot, CustomersDot will only consider a callout if the subscription status is Active in order to avoid provisioning a subscription multiple times.  For instance, if a subscription was upgraded from premium to ultimate, a `RemoveProduct` amendment and `NewProduct` Amendment would be created but only the last Amendment (e.g. NewProduct) would have an ""Active"" subscription status, as that is the latest subscription.

If we use Order Action callouts, we would need a way to determine the last callout to process and skip the others.  Otherwise, CustomersDot would provision a subscription multiple times.  

### Proposal

Instead of configuring Order Action processed callouts, we should use Order processed callouts.  This would yield only one callout, no matter how many Order Actions were processed, eliminating the step of determining which callout to process.

We'd have to make some adjustments in callout processing code where `amendment_type` is currently referenced.  Callout params would not contain this parameter.  This would have to be queried from the Order Actions types associated with the Order in Zuora.

FYI, it doesn't look like Orders are supported by IronBank, the gem used in CustomersDot.  This will be added as part of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3568.",5
93355169,2021-09-08 20:41:34.627,Update IronBank to support Orders,"### Background

As part of updating CustomersDot to work with the Orders Harmonization feature in Zuora, CustomersDot needs to be able to query Orders and Orders Actions.  This will be helpful in processing ""Order Processed"" callouts sent by Zuora for Order related transactions.

It does not appear that [IronBank](https://github.com/zendesk/iron_bank), the gem used by CustomersDot to interact with Zuora, supports Order related resources.

### Proposal

Let's investigate whether we can update the IronBank gem to add resources for `Order` and `OrderAction`.  We could also submit a merge request to the IronBank project to contribute to the open source project.

[Here's the Orders object model](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/BA_Orders_Object_Model) from the Zuora docs for reference.",3
93281482,2021-09-07 18:34:04.187,"Follow-up from ""Introduce a flag to stop reconciliations""","The following discussion from !3812 should be addressed:

- [ ] @rpereira2 started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3812#note_671518810): 

    > **suggestion (non-blocking)**: We can add a spec showing that it returns `eligible_for_reconciliation: false` if the feature flag is off.",1
93277666,2021-09-07 17:15:28.396,"Follow-up from ""Remove storage_plan Feature Flag""","The following discussion from !3784 should be addressed:

- [ ] @vshumilo started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3784#note_669109888):  (+1 comment)

    > **suggestion (non-blocking):** Looks like there is an opportunity here for further clean up - follow up.
    > 
    > I think one easy win will be to remove these `enabled:` key/values + get rid of `enabled_add_ons` and start using `add_ons` directly.

### Acceptance Criteria

Consolidate the `PlansHelper`: `enabled_add_ons` and `add_ons` methods by removing the `enabled` attribute now that is `true` for all cases. Depending on the approach, update the [usage](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/2373988852a2bd1e3441fc63a11c37bc58161f53/app/views/plans/index.html.haml#L54) of the `enabled_add_ons` with the final method name.",1
93247248,2021-09-07 09:28:47.319,Unlink subscription job sends email for existing namespaces,"### Problem
I noticed a few emails to unlink a .com subscription locally that didn't seem right. They were sent despite of the namespace existing on my local GitLab instance. The reason for this was that my local GitLab instance wasn't ready to run yet and returned a 502 error.

### Proposal
Modify [UnlinkedComSubscriptionNotificationJob](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/d72d861f03fcfe394b0320d48f9ae23bc55d3372/app/jobs/unlinked_com_subscription_notification_job.rb) to not try to unlink a subscription if the error code of the GitLab request returns a 50x error. Alternatively, only execute the logic to unlink when the error code is 404.

### Result
Not sending emails for existing namespaces when the GitLab request results in a 50x error.",1
127416194,2023-05-02 10:01:00.661,Add export to Provisions overview in Admin,"### Problem

To track the provision failure/success rate, there needs to be a way to get the report of the failed provisions.

### Proposal

Add the export function to Provisions in the Admin.

### Result

Ability to export Provisions",1
127406315,2023-05-02 06:24:44.495,Add unit tests for ChangeNamespaceOverageSummary,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

After the changes from https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/7244, the component has a link to a specific page.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

To make the component more resilient to future changes, let's add some unit tests.

### Result

### Next steps (if any)

### How will we measure success?",1
127325565,2023-04-28 15:47:45.901,Add `Zuora Subscriptions` readonly Admin action,"### Problem

Some readonly admins often require / might benefit from having access to a readonly version of the Zuora Subscriptions action (Zuora Subscriptions tab when you click on a customer or billing account.).

Recently as part of a compliance update we removed the access to this tab for 400+ team members because these team members were moved to readonly and this actions is currently only available for Admin managers.

[More optional context here - External](https://gitlab.slack.com/archives/CMJ8JR0RH/p1682680293916259)

### Proposal

- Update the `zuora_subscriptions` action so it is possible to render its associated view as readonly
- Allow the `zuora_subscriptions` action for readonly Admins

### Approval for merging

@mgass1 Would you please :white_check_mark: this issue for approval? (A reaction to this comment should be enough)

I have referenced the [external conversation](https://gitlab.slack.com/archives/CMJ8JR0RH/p1682680293916259) for the MR reviewers reference but given this is a roles related change, want to make sure there is a formal ""this is OK to to ship from the product perspective"" for the maintainer merging this.",2
127324350,2023-04-28 15:12:32.465,Change sold to/bill to contact wording to subscription/billing contact,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Follow up from comment https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5890#note_1337326253

> `Bill to` and `Sold to` are rather technical terms that I'm not sure we should be exposing to the customer. Additionally, we don't give the user any information about what the difference is between bill to / sold to.

### Proposal

consider calling them `Subscription contact` and `Billing contact` and adding some information text below the header for each.

Something like:

### Subscription contact

This individual is the primary contact for the subscription and receives notifications and instructions on applying the subscription and keeping it up to date.

### Billing contact

This individual is the primary contact for billing and receives the invoices for all purchases.

### Result

### Next steps (if any)

### How will we measure success?",1
127320648,2023-04-28 13:32:49.585,"Follow-up from ""Use namespace from the params""","The following discussion from !7180 should be addressed:

- [x] @rkumar555 started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/7180#note_1372229961): 

    > **Suggestion(:non_blocking)** I think it is better to sort this array alphabetically.

- [x] @rkumar555 started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/7180#note_1372236921): 

    > **Suggestion(:non_blocking):** I think it is more cleaner. WDYT?

```suggestion
        let(:namespace_attrs) { namespace.with_indifferent_access }namespace.w_i_a
```

- [x] @rkumar555 started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/7180#note_1372243287): 

    > **Suggestion(:non_blocking):** WDYT to write like this? I don't have this project setup so I can not test and be sure if this works.

- [x] @rkumar555 started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/7180#note_1372248115): 

    > **Suggestion(:non_blocking):** How do you think to write like this if this works?

```ruby
expect(customer.orders.last).to be_trial
```",1
127226447,2023-04-26 17:08:34.737,Update SaaS New Subscription Mailer to be more generic,"## Problem

The current sales-assisted ""new subscription"" mailer is sent to all customers who purchase a SaaS subscription (new, renewal or updated) that isn't linked to a namespace. The wording is currently slightly different by including or excluding the word ""new"" in the email subject and body depending on a new subscription purchase or an update purchase to the subscription.

## Proposal

Make the SaaS new subscription mailer more generic by:

* Updating the first sentence from `Thanks for purchasing a GitLab subscription.` to `Thank you for your GitLab purchase!`
* Updating the second sentence from `To set up your new subscription` to `To set up your subscription`

### Details

<details><summary>Current email screenshot</summary>
![image](/uploads/a9a9658443afb73ac17acb2dc87215a5/image.png)

</details>


<details><summary>Current email text</summary>

``` 
	
Hi Courtney👋
Thanks for purchasing a GitLab subscription. To set up your new subscription, you must link it to a group. Complete the following instructions.

1. Create your GitLab account
   If you are already registered, sign in.

   Register

2. Select the group for your subscription
Create a new group or for an existing group, make sure you have the Owner role.

3. Sign in to your Customers Portal account
    * If you purchased from our Sales team, we've sent you an email with instructions to set a password and access your Customers Portal account.
    * If you purchased from an authorized reseller, you won't yet have access to your Customers Portal account. Contact our support team to complete the remaining steps.

4. Link your GitLab account and subscription
    * Link your GitLab user account to your Customers Portal account.
    * Link the subscription to your namespace.
  
5. Confirm your subscription is linked
To confirm your subscription is linked to a group, view your GitLab SaaS subscription.

If you require assistance, contact GitLab support.


Thanks,

The GitLab Team	
```

</details>






### Text Proposal

``` 
	
Hi Courtney👋
Thank you for your GitLab purchase! To set up your subscription, you must link it to a group. Complete the following instructions.

1. Create your GitLab account
   If you are already registered, sign in.

   Register

2. Select the group for your subscription
Create a new group or for an existing group, make sure you have the Owner role.

3. Sign in to your Customers Portal account
    * If you purchased from our Sales team, we've sent you an email with instructions to set a password and access your Customers Portal account.
    * If you purchased from an authorized reseller, you won't yet have access to your Customers Portal account. Contact our support team to complete the remaining steps.

4. Link your GitLab account and subscription
    * Link your GitLab user account to your Customers Portal account.
    * Link the subscription to your namespace.
  
5. Confirm your subscription is linked
To confirm your subscription is linked to a group, view your GitLab SaaS subscription.

If you require assistance, contact GitLab support.


Thanks,

The GitLab Team	
```

</details>


### Result
Mailer is relevant to all customers buying a GitLab.com subscription without an associated namespace.",1
127190585,2023-04-26 08:20:12.334,Resolve Ruby 2 deprecations caught from Sentry,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Deprecations warning caught from Sentry:

- [x] 1. [RUBY2 DEPRECATION: ](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/4126430/?referrer=slack)/home/customersdot/CustomersDot/releases/20230426060457Z/app/services/salesforce/create_quote_objects_service.rb:14: warning: The called method `initialize' is defined here 
- [x] 2. [RUBY2 DEPRECATION: ](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/4126431/?referrer=slack)/home/customersdot/CustomersDot/releases/20230426060457Z/app/services/create_order_service.rb:26: warning: The called method `execute' is defined here
- [ ] 3. ~[RUBY2 DEPRECATION:](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/4126432/?query=logger%3A%22manual_exception_capture%22) /home/customersdot/CustomersDot/shared/vendor/bundle/ruby/2.7.0/gems/iron_bank-5.2.6/lib/iron_bank/queryable.rb:46: warning: The called method `where' is defined here~ See: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/6360



**Follow up:**

- [x] 4. Based on Comment: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/7222#note_1369018495, refactor spec: https://gitlab.com/gitlab-org/customers-gitlab-com/blob/6f1cc0a7d81266ffdb664bb3a6f9f9f27a599c7f/spec/services/salesforce/create_quote_objects_service_spec.rb#L8-19
### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result 

### Next steps (if any)

### How will we measure success?",3
127113151,2023-04-24 14:36:49.138,Create custom Warning class to catch deprecation,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
As a part of Ruby 3 upgrade, enable deprecation warning to catch any codepath that doesn't have specs yet.

More context: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/6022#note_1364593894
### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",2
127093321,2023-04-24 08:50:35.152,South Korea lookup in SanctionsChecker is resulting in North Korea,"### Problem

When the Zuora account's sold to or bill to has the country set to `Korea, (Republic of)`, the alpha3 lookup results in finding it as North Korea instead of South Korea.

- [Example 1](https://console.cloud.google.com/logs/query;cursorTimestamp=2023-04-23T00:23:07.917Z;query=%228a12929e8799adc80187ab782d3e4704%22%0Atimestamp%3D%222023-04-23T00:23:07.917Z%22%0AinsertId%3D%22ezslv1fe6cuss%22;timeRange=P2D?project=gitlab-subscriptions-prod)
- [Example 2](https://console.cloud.google.com/logs/query;cursorTimestamp=2023-04-21T15:26:16.684Z;query=%228a1280098799981d0187a46c4039269d%22%0Atimestamp%3D%222023-04-21T15:26:16.684Z%22%0AinsertId%3D%223c9my9f3023wd%22;timeRange=2023-04-21T13:10:08.487Z%2F2023-04-22T03:10:08.487Z?project=gitlab-subscriptions-prod)

### Proposal

Use the same fix as introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3939 for the customer creation. This fix uses a lookup with `World.all_countries` before using the `ISO3166::Country.find_country_by_name` lookup to find the correct alpha3 code.

### Result

Lookup for `Korea, (Republic of)` is correctly identified as South Korea and provisioning isn't blocked by the `SanctionsChecker`.",1
127044479,2023-04-21 17:37:49.752,Sync Account worker should create a BillingAccount if it doesn't exist,"### Problem

Currently the `ZuoraCallout::SyncResource::AccountWorker` logs an error and returns an unsuccessful result if a BillingAccount doesn't exist in CDot but the Zuora Account exists.  This could lead to problems where a BillingAccounts aren't available in CDot when needed.  This may also help with race conditions as we start working on a new sync mechanism for Zuora Contacts in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/6285+.

[Sentry issues for Production](https://sentry.gitlab.net/gitlab/customersgitlabcom/?query=is%3Aunresolved+No+BillingAccount+found)

### Proposal

Let's update the `ZuoraCallout::SyncResource::AccountWorker` to no longer log an error for this and instead create the BillingAccount using the data from Zuora.",2
126951401,2023-04-20 02:40:35.331,Allow admin forward of cloud activation code even if there is an activated instance present,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Similar to https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5530, when admin tries to forward activation code, it is blocked when existing activated instance is present.

### Proposal

Allow admin to forward activation code regardless of activation instance being present or not

### How will we measure success?",1
126929027,2023-04-19 14:09:54.372,CI minutes provisioning not working after two days of its purchase,"### Problem

In https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/6102+, a fix to only provision current CI minutes purchases and not future dated one was implemented. It was just discovered when investigating a [failed provision](https://gitlab.slack.com/archives/C049W1SNRV1/p1681866001597449) that this introduced a new bug which prevents to provision CI minutes if they weren't provisioned within the first two days of its purchase. It turned out that since CI minutes is a one time purchase, the effective period is only two days long:

![Screenshot_2023-04-19_at_12.55.00_PM](/uploads/49ef20d07a3ef4263710e1081ad09770/Screenshot_2023-04-19_at_12.55.00_PM.png)

Before the mentioned issues was implemented, the CustomersDot's `Order` record and its `subscription` record was used. But with the fix the `current_subscription` is used. This led to the CI minutes not being returned after those two days because of this logic [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/bbc73401606fd0a45655c8c00b7f1cc35043192c/app/models/subscription.rb#L82) that only selects products where today's date is covered within their effective dates.

### Proposal

When filtering the products to be effective as of today, add a special condition to check if the product is CI minutes (`rate_plan_charge.rate_plan.product_rate_plan_id == Plan::CI_1000_MINUTES_PLAN`) AND today's date is greater or equal to the effective start date of the rate plan charge.

We could also set the effective end date to be the effective start date + 12 months which would be similar to how it's done on the [GitLab side](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/a584f70cdeb9df7ecda3494daf696bf80d49c3ef/lib/add_ons/ci_minutes_params_generator.rb#L19).

### Result

Return the correct amount of purchased CI minutes for the current subscription regardless of its Zuora effective date period.",2
126889812,2023-04-18 15:41:26.009,Provision failure for cloud license undecided subscriptions,"# Bug

## Summary

When self managed subscription is cloud license undecided (i.e. turn_on_cloud_licensing__c is NULL), and when a license of the same subscription already exists, provision will raise ""NoMethodError: undefined method `valid?' for nil:NilClass"" error.

## What is the current *bug* behavior?

Provision will fail.

## What is the expected *correct* behavior?

Provision will succeed.

## Relevant logs and/or screenshots

* https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/4124224/?query=is%3Aresolved%20%22undefined%20method%20%60valid%3F%27%20for%20nil%3ANilClass%22
* https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/4123506/?referrer=gitlab_plugin

## Workarounds

(Ways to get around the issue)

## Reported examples

A total of 5 errors has occurred.

https://customers.gitlab.com/admin/provision/44684

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",1
126685278,2023-04-14 20:19:47.997,Skip the invalid country validation on Customer,"### Problem

As described in https://gitlab.com/groups/gitlab-org/-/epics/10349+, we want to be able to use BillingAccount Contacts more in CDot instead of using Customer data, and one area in particular for this epic is in Compliance.  We need to remove CDot's dependence on using the `country` attribute on the Customer model for compliance checks when a customer becomes a paid customer.  This allows CDot to more effectively manage BillingAccounts with multiple BillingAccountMemberships.

In particular, there are validations on this attribute on Customer model that should no longer apply for paid Customers.  In order to remove these validations, we want to make sure CDot prevents these Customers/Users from registering to begin with.  Once we effectively prevent registration and purchases, we should be able to remove the validations.

### Proposal

In this issue, CDot should skip the [invalid country validation on Customer](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/32cde3637e1a9b987a7dcc8f6354168253ad272f/app/models/customer.rb#L50) when the `compliance_v2` feature flag is enabled.

We are able to safely remove this validation assuming other checks are in place to prevent web-direct purchases up-front.  Those checks will be handled in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/6257 and https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/6258.  This will help avoid unexpected errors that are encountered in other unrelated CDot logic.

#### Rollout

We will rollout this change behind a new feature flag called `compliance_v2`.",1
126616973,2023-04-13 19:51:32.459,Embargoed country redundancy check for provisioning-related callout workers,"### Problem

As described in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/6053+, there are a few methods of preventing operations from embargoed countries or companies currently in CDot.  There are Customer model validations that prevent a sale, pre-transaction.  There is also an ""EmbargoChecker"" service for specific countries (Russia, Belarus) and products (SM).  In both circumstances, the country field on the Customer model is used.  However as we want to embrace using Contact data for the Zuora Account when a Customer converts to paid, this logic will need to be updated.

Provisioning is handled through a few services that process Zuora callouts: [ZuoraCallbackWorker](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/fdfe35c10eb1b72120f7732d69b19cece0172180/app/workers/zuora_callback_worker.rb) and [SubscriptionTermStartWorker](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/26741557a159d7d6c6a5084fe0fe06aa9aba2a3a/app/workers/zuora_callout/subscription_term_start_worker.rb).  These services have [logic to find or create a customer](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/32cde3637e1a9b987a7dcc8f6354168253ad272f/app/workers/zuora_callout/base_worker.rb#L24) which currently fail ungracefully when the Sold To Contact/Customer is from a Country on the rejection list due to [this validation](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/32cde3637e1a9b987a7dcc8f6354168253ad272f/app/models/customer.rb#L51).

### Proposal

In this issue, let's add a redundancy check to these Zuora Callback workers that relate to provisioning to verify the country is not one of the Embargoed List (see below).  This check should validate against the country of the Sold To and Bill To Contact.

* Cuba
* Iran
* Democratic People's Republic of Korea
* Sudan
* Syria

This change can be released without the use of a feature flag as it can be applied independently of other changes mentioned in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/6053#note_1347043834.

Currently callout workers fail at [this step](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/1bbc5a161bc07335bf46c08b4b2364f3a73c8849/app/workers/zuora_callout/base_worker.rb#L24) where the customer if either created or updated based on callout attributes.

- [Sentry issue](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/4099448/?query=is%3Aunresolved%20country) for the `SubscriptionTermStartWorker`
- [Sentry issue](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/4099799/?query=is%3Aunresolved%20country) for the ZuoraCallbackWorker

We should update these workers with code to verify country.  If it's invalid, the worker could log the event as info or warn, then skip processing the remainder of the worker.  

It's worth noticing that the `AuditProvisionService` will make note that the provision was skipped because of an unsupported country [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/58055f39852434752768d4d7f51cc4d0817871c0/app/services/provisions/audit_provision_service.rb#L56).",3
126585722,2023-04-13 08:37:12.975,Resolve Ruby 2 deprecations in workers,"# Using the last argument as keyword parameters is deprecated

Deprecation messages:

- [ ] `create_opportunity_for_upcoming_reconciliation_worker`:

```shell
? test_salesforce/create_opportunity_for_upcoming_reconciliation_worker#perform_when_reconciliation_id_is_absent_logs_but_does_not_raise_error_to_avoid_retry
: - |
    DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/spec/workers/salesforce/create_opportunity_for_upcoming_reconciliation_worker_spec.rb:45: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
    /builds/gitlab-org/customers-gitlab-com/spec/support/helpers.rb:24: warning: The called method `expect_worker_to_log_error' is defined here

```

- [ ] `zuora_callback_worker`:

```shell
? test_zuora_callback_worker#perform_with_an_active_subscription_when_customer_is_known_when_subscription_belongs_to_an_ee_plan_sends_a_license_notification_to_the_customer
: - |
    DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/spec/support/helpers/next_instance_of.rb:36: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
    /builds/gitlab-org/customers-gitlab-com/app/services/license_notification_service.rb:9: warning: The called method `initialize' is defined here
? test_zuora_callback_worker#perform_with_an_active_subscription_when_customer_is_known_when_subscription_belongs_to_an_ee_plan_calls_the_provisions/update_checkpoint_service
: - |
    DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/app/workers/zuora_callback_worker.rb:78: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
    /builds/gitlab-org/customers-gitlab-com/app/services/license_notification_service.rb:9: warning: The called method `initialize' is defined here
```

## How to resolve?

- Option 1: maybe `**` should be added to the call?
- Option 2: Rewrite the code to keyword arguments completely.",1
126585719,2023-04-13 08:37:09.751,Resolve Ruby 2 deprecations in services,"# Using the last argument as keyword parameters is deprecated

Deprecation messages:

- [ ] `services/auto_renew/send_ineligible_for_upcoming_renewal_notification_service.yml`:

```shell
---
? test_auto_renew/send_ineligible_for_upcoming_renewal_notification_service#execute_when_passed_a_self_managed_order_when_the_payload_only_has_an_unsuccessful_last_reconciliation_error_behaves_like_it_is_eligible_for_sending_a_notification_tracks_notification_event
: - |
    DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/app/services/auto_renew/send_ineligible_for_upcoming_renewal_notification_service.rb:174: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
    /builds/gitlab-org/customers-gitlab-com/lib/gitlab/tracking.rb:29: warning: The called method `track_event' is defined here

```

<hr>


- [ ] `services/auto_renew/send_upcoming_notification_service.yml`:

```shell
---
? test_auto_renew/send_upcoming_notification_service#execute_behaves_like_an_sm_subscription_notification_when_subscription_is_eligible_for_the_email_updates_the_notified_at_timestamp
: - |
    DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/app/services/auto_renew/send_upcoming_notification_service.rb:32: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
    /builds/gitlab-org/customers-gitlab-com/lib/gitlab/tracking.rb:29: warning: The called method `track_event' is defined here

```

<hr>


- [ ] `services/gitlab/upgrade_subscription_plan_service.yml`:

```shell
---
? test_gitlab/upgrade_subscription_plan_service#execute_when_not_in_preview_mode_when_successful_sends_order_creation_request_to_zuora
: - |
    DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/app/services/gitlab/upgrade_subscription_plan_service.rb:29: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
    /builds/gitlab-org/customers-gitlab-com/app/services/gitlab/upgrade_subscription_plan_service.rb:52: warning: The called method `sync_to_salesforce' is defined here

```

<hr>


- [ ] `services/license_notification_service.yml`:

```shell
---
? test_license_notification_service#execute_when_subscription_is_for_a_legacy_license_with_a_passed_in_license_when_the_force_notifications_flag_is_set_to_true_calls_provisions/track_success_service_for_the_given_subscription
: - |
    DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/spec/services/license_notification_service_spec.rb:9: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
    /builds/gitlab-org/customers-gitlab-com/app/services/license_notification_service.rb:9: warning: The called method `initialize' is defined here
? test_license_notification_service#initialize_with_a_passed_force_notifications_flag_sets_instance_variables_and_returns_an_instance_of_the_class
: - |
    DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/spec/services/license_notification_service_spec.rb:47: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
    /builds/gitlab-org/customers-gitlab-com/app/services/license_notification_service.rb:9: warning: The called method `initialize' is defined here
? test_license_notification_service#initialize_with_a_passed_renewal_amendment_flag_sets_instance_variables_and_returns_an_instance_of_the_class
: - |
    DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/spec/services/license_notification_service_spec.rb:35: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
    /builds/gitlab-org/customers-gitlab-com/app/services/license_notification_service.rb:9: warning: The called method `initialize' is defined here

```

<hr>


- [ ] `services/licenses/find_from_license_key_service.yml`:

```shell
---
test_licenses/find_from_license_key_service#execute_returns_license_data:
- |
  DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/app/services/licenses/find_from_license_key_service.rb:6: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
  /builds/gitlab-org/customers-gitlab-com/app/services/licenses/find_from_license_key_service.rb:9: warning: The called method `initialize' is defined here

```

<hr>


- [ ] `services/provisions/audit/order_callout_service.yml`:

```shell
---
? test_provisions/audit/order_callout_service#execute_when_no_provision_was_returned_(due_to_an_error_during_the_creation)_returns_logs_an_error_and_does_not_call_the_auditing_service
: - |
    DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/vendor/ruby/2.7.0/gems/active_interaction-5.1.0/lib/active_interaction/concerns/runnable.rb:98: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
    /builds/gitlab-org/customers-gitlab-com/app/services/provisions/audit/base_service.rb:9: warning: The called method `initialize' is defined here
? test_provisions/audit/order_callout_service#execute_when_a_subscription_was_not_found_only_audits_provisions_for_a_found_subscription_and_logs_an_error_for_missing_ones
: - |
    DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/vendor/ruby/2.7.0/gems/active_interaction-5.1.0/lib/active_interaction/concerns/runnable.rb:98: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
    /builds/gitlab-org/customers-gitlab-com/app/services/provisions/find_or_create_service.rb:10: warning: The called method `initialize' is defined here

```

<hr>


- [ ] `services/provisions/audit_provision_service.yml`:

```shell
---
? test_provisions/audit_provision_service#execute_when_the_provision_is_:started_when_the_subscription_cannot_be_found_in_zuora_when_callout_did_not_originate_from_a_qa_run_when_in_production_logs_an_error
: - |
    DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/vendor/ruby/2.7.0/gems/active_interaction-5.1.0/lib/active_interaction/concerns/runnable.rb:98: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
    /builds/gitlab-org/customers-gitlab-com/app/services/provisions/notification_service.rb:12: warning: The called method `initialize' is defined here

```

<hr>


- [ ] `services/salesforce/create_lead_service.yml`:

```shell
---
test_salesforce/create_lead_service.execute_creates_the_lead:
- |
  DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/spec/services/salesforce/create_lead_service_spec.rb:20: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
  /builds/gitlab-org/customers-gitlab-com/app/services/salesforce/create_object_service.rb:16: warning: The called method `execute' is defined here

```

<hr>


- [ ] `services/salesforce/create_opportunity_objects_service.yml`:

```shell
---
? test_salesforce/create_opportunity_objects_service#initialize_when_optional_arguments_are_not_given_initializes_a_new_instance_with_default_values_for_optional_arguments
: - |
    DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/spec/services/salesforce/create_opportunity_objects_service_spec.rb:34: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
    /builds/gitlab-org/customers-gitlab-com/app/services/salesforce/create_opportunity_objects_service.rb:12: warning: The called method `initialize' is defined here

```

<hr>


- [ ] `services/salesforce/create_quote_rate_plan_service.yml`:

```shell
---
? test_salesforce/create_quote_rate_plan_service#initialize_when_a_product_rate_plan_id_provided_sets_@product_rate_plan_id_using_provided_plan
: - |
    DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/spec/services/salesforce/create_quote_rate_plan_service_spec.rb:39: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
    /builds/gitlab-org/customers-gitlab-com/app/services/salesforce/create_quote_rate_plan_service.rb:18: warning: The called method `initialize' is defined here
test_salesforce/create_quote_rate_plan_service.execute_calls_the_instance_method_execute_for_the_newly_created_instance:
- |
  DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/spec/support/shared_examples/services/salesforce/execute_class_method.rb:6: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
  /builds/gitlab-org/customers-gitlab-com/app/services/salesforce/create_object_service.rb:16: warning: The called method `execute' is defined here

```

<hr>


- [ ] `services/salesforce/create_quote_service.yml`:

```shell
---
? test_salesforce/create_quote_service#execute_with_an_opportunity_id_that_exists_in_salesforce_logs_the_querying_for_the_salesforce_opportunity
: - |
    DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/spec/services/salesforce/create_quote_service_spec.rb:49: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
    /builds/gitlab-org/customers-gitlab-com/app/services/salesforce/create_quote_service.rb:21: warning: The called method `initialize' is defined here

```

<hr>


- [ ] `services/salesforce/find_or_create_lead_service.yml`:

```shell
---
? test_salesforce/find_or_create_lead_service.execute_when_lead_is_created_from_the_registration_page_when_it_creates_a_new_lead_with_status_open
: - |
    DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/spec/services/salesforce/find_or_create_lead_service_spec.rb:40: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
    /builds/gitlab-org/customers-gitlab-com/app/services/salesforce/create_object_service.rb:16: warning: The called method `execute' is defined here

```

<hr>


- [ ] `services/self_service/subscriptions/create_service.yml`:

```shell
---
? test_self_service/subscriptions/create_service#execute_when_supplied_valid_params_with_promo_code_supplied_tracks_promo_code_events
: - |
    DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/app/services/self_service/subscriptions/create_service.rb:114: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
    /builds/gitlab-org/customers-gitlab-com/lib/gitlab/tracking.rb:29: warning: The called method `track_event' is defined here

```

<hr>


- [ ] `services/subscriptions/version_manager.yml`:

```shell
---
? test_subscriptions/version_manager#find_on_when_an_operable_version_is_found_returns_a_subscription_object_with_expected_rate_plans
: - |
    DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/spec/services/subscriptions/version_manager_spec.rb:9: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
    /builds/gitlab-org/customers-gitlab-com/app/services/subscriptions/version_manager.rb:5: warning: The called method `initialize' is defined here

```

<hr>


- [ ] `services/unlinked_com_subscription_notification_service.yml`:

```shell
---
test_unlinked_com_subscription_notification_service#execute_when_order_is_blank_does_not_send_the_email:
- |
  DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/spec/services/unlinked_com_subscription_notification_service_spec.rb:45: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
  /builds/gitlab-org/customers-gitlab-com/app/services/unlinked_com_subscription_notification_service.rb:8: warning: The called method `initialize' is defined here
test_unlinked_com_subscription_notification_service#initialize_sets_instance_variables:
- |
  DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/spec/services/unlinked_com_subscription_notification_service_spec.rb:26: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
  /builds/gitlab-org/customers-gitlab-com/app/services/unlinked_com_subscription_notification_service.rb:8: warning: The called method `initialize' is defined here

```

<hr>


- [ ] `services/update_contact_service.yml`:

```shell
---
? test_update_contact_service#execute_when_zuora_account_is_found_when_zuora_contact_is_found_when_billing_account_is_not_found_while_it_should_be_updated_logs_an_error
: - |
    DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/spec/services/update_contact_service_spec.rb:160: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
    /builds/gitlab-org/customers-gitlab-com/spec/support/helpers.rb:12: warning: The called method `expect_to_log_error' is defined here
? test_update_contact_service#execute_when_zuora_account_is_found_when_zuora_contact_is_found_when_zuora_account_needs_to_be_updated_when_the_billing_account_cannot_be_updated_logs_the_update_error
: - |
    DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/spec/services/update_contact_service_spec.rb:224: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
    /builds/gitlab-org/customers-gitlab-com/spec/support/helpers.rb:12: warning: The called method `expect_to_log_error' is defined here

```

<hr>


- [ ] `services/zuora/orders/post_subscription_creation_service.yml`:

```shell
---
? test_zuora/orders/post_subscription_creation_service_when_success_with_default_payment_id_when_payment_method_is_wire_transfer_when_new_customer_updates_default_payment_id_of_the_zuora_account_and_sets_auto_pay_to_false
: - |
    DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/vendor/ruby/2.7.0/gems/active_interaction-5.1.0/lib/active_interaction/concerns/runnable.rb:98: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
    /builds/gitlab-org/customers-gitlab-com/app/services/customers/update_billing_account_service.rb:7: warning: The called method `initialize' is defined here

```

<hr>


- [ ] `services/zuora/orders/subscription_update_service.yml`:

```shell
---
? test_zuora/orders/subscription_update_service#initialize_when_customer_param_is_nil_sets_the_customer_value_to_subscriptions_sold_to_customer
: - |
    DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/spec/services/zuora/orders/subscription_update_service_spec.rb:22: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
    /builds/gitlab-org/customers-gitlab-com/app/services/zuora/orders/subscription_update_service.rb:13: warning: The called method `initialize' is defined here
test_zuora/orders/subscription_update_service#initialize_when_customer_param_is_not_nil_sets_the_customer_value_to_pass_param:
- |
  DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/spec/services/zuora/orders/subscription_update_service_spec.rb:31: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
  /builds/gitlab-org/customers-gitlab-com/app/services/zuora/orders/subscription_update_service.rb:13: warning: The called method `initialize' is defined here

```

<hr>


## How to resolve?

- Option 1: maybe `**` should be added to the call?
- Option 2: Rewrite the code to keyword arguments completely.",1
126585715,2023-04-13 08:37:05.706,Resolve Ruby 2 deprecations in serializers,"# Using the last argument as keyword parameters is deprecated

Deprecation messages:

- [x] `subscription_plan_serializer`:

```shell
---
test_subscription_plan_serializer#as_json_returns_upgrade_prices:
- |
  DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/app/models/plans_finder.rb:29: warning: Passing the keyword argument as the last hash parameter is deprecated
  /builds/gitlab-org/customers-gitlab-com/vendor/ruby/2.7.0/gems/iron_bank-5.2.6/lib/iron_bank/cacheable.rb:35: warning: The called method `where' is defined here
```

## How to resolve?

- Option 1: maybe `**` should be added to the call?
- Option 2: Rewrite the code to keyword arguments completely.",1
126585707,2023-04-13 08:36:54.915,Resolve Ruby 2 deprecations in spec/requests,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",1
126585700,2023-04-13 08:36:48.959,Resolve Ruby 2 deprecations in models,"# Using the last argument as keyword parameters is deprecated

Deprecation messages:

- [ ] `subscription`:

```shell
---
test_subscription#user_count_is_expected_to_eq_311:
- |
  DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/spec/models/subscription_spec.rb:1221: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
  /builds/gitlab-org/customers-gitlab-com/spec/support/stub_zuora_calls.rb:66: warning: The called method `product_mock' is defined here

```

<hr>

- [ ] `license.yml`:

```shell
---
test_license.build_from_subscription_with_subscription_cloud_license_flags_enabled:_true_builds_a_new_record:
- |
  DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/lib/gem_extensions/iron_bank/local.rb:14: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
  /usr/local/lib/ruby/2.7.0/csv.rb:679: warning: The called method `parse' is defined here
- |
  DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/app/models/plans_finder.rb:29: warning: Passing the keyword argument as the last hash parameter is deprecated
  /builds/gitlab-org/customers-gitlab-com/vendor/ruby/2.7.0/gems/iron_bank-5.2.6/lib/iron_bank/cacheable.rb:35: warning: The called method `where' is defined here
- |
  DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/app/services/salesforce/create_opportunity_objects_service.rb:8: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
  /builds/gitlab-org/customers-gitlab-com/app/services/salesforce/create_opportunity_objects_service.rb:12: warning: The called method `initialize' is defined here
- |
  DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/app/models/subscription.rb:211: warning: Passing the keyword argument as the last hash parameter is deprecated
  /builds/gitlab-org/customers-gitlab-com/vendor/ruby/2.7.0/gems/iron_bank-5.2.6/lib/iron_bank/cacheable.rb:35: warning: The called method `where' is defined here

```

<hr>

## How to resolve?

- Option 1: maybe `**` should be added to the call?
- Option 2: Rewrite the code to keyword arguments completely.",1
126585693,2023-04-13 08:36:45.023,Resolve Ruby 2 deprecations in lib,"# Using the last argument as keyword parameters is deprecated

Deprecation messages:

- [ ] `manual_retry_custom_auto_renew`:

```shell
---
? test_data_maintenance/manual_retry_custom_auto_renew#execute_when_the_amendment_service_throws_an_error_updates_the_zuora_subscription_with_the_error
: - |
    DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/app/services/auto_renew_service.rb:188: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
    /builds/gitlab-org/customers-gitlab-com/lib/gitlab/tracking.rb:29: warning: The called method `track_event' is defined here

```

<hr>

- [ ] `tracking`:

```shell
---
test_gitlab/tracking_tracking_events_.self_describing_event_can_track_self_describing_events:
- |
  DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/spec/lib/gitlab/tracking_spec.rb:171: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
  /builds/gitlab-org/customers-gitlab-com/lib/gitlab/tracking.rb:76: warning: The called method `self_describing_event' is defined here
test_gitlab/tracking_tracking_events_.event_can_track_events:
- |
  DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/spec/lib/gitlab/tracking_spec.rb:137: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
  /builds/gitlab-org/customers-gitlab-com/lib/gitlab/tracking.rb:62: warning: The called method `event' is defined here

```

<hr>

- [ ] `queues`:

```shell
---
test_health_check/queues_when_there_are_too_many_enqueued_items_processes_the_requested_queue:
- |
  DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/lib/health_check/custom.rb:5: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
  /builds/gitlab-org/customers-gitlab-com/lib/health_check/queues.rb:4: warning: The called method `check' is defined here

```

<hr>

- [ ] `subscriptions`:

```shell
---
? test_zuora/client/subscriptions.get_when_valid_is_expected_to_eq_{:account_id=>""8ad09f8a7f01ada8017f045de71428c2"",_:account_name=>""danny's_org"",_:account_number=>""a00...ng__c=>nil,_:turn_on_operational_metrics__c=>nil,_:turn_on_seat_reconciliation__c=>nil,_:version=>8}
: - |
    DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/spec/lib/zuora/client/subscriptions_spec.rb:16: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
    /builds/gitlab-org/customers-gitlab-com/lib/zuora/client/subscriptions.rb:9: warning: The called method `get' is defined here

```

<hr>

- [ ] `digital_signature`:

```shell
---
test_zuora/digital_signature#valid?_when_params_are_valid_when_payment_type_is_""ach""_is_expected_to_equal_true:
- |
  DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/lib/zuora/digital_signature.rb:15: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
  /builds/gitlab-org/customers-gitlab-com/lib/zuora/digital_signature.rb:35: warning: The called method `initialize' is defined here

```

<hr>

## How to resolve?

- Option 1: maybe `**` should be added to the call?
- Option 2: Rewrite the code to keyword arguments completely.",1
126585691,2023-04-13 08:36:41.996,Resolve Ruby 2 deprecations in jobs,"# Using the last argument as keyword parameters is deprecated

Deprecation messages:

- [ ] `sync_expired_order_job`:

```shell
---
test_gitlab/sync_expired_order_job_yields_the_block_with_the_order_when_providing_a_block:
- |
  DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/app/jobs/gitlab/sync_expired_order_job.rb:9: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
  /builds/gitlab-org/customers-gitlab-com/app/jobs/gitlab/sync_expired_order_job.rb:12: warning: The called method `perform' is defined here
- |
  DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/lib/gem_extensions/iron_bank/local.rb:14: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
  /usr/local/lib/ruby/2.7.0/csv.rb:679: warning: The called method `parse' is defined here

```

<hr>

- [ ] `invoice_collect`:

```shell
---
test_zuora/operations/invoice_collect#perform_raises_error_on_connection_failure:
- |
  DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/vendor/ruby/2.7.0/gems/activejob-7.0.4.3/lib/active_job/execution.rb:59: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
  /builds/gitlab-org/customers-gitlab-com/app/jobs/zuora/operations/invoice_collect.rb:8: warning: The called method `perform' is defined here

```

<hr>

- [ ] `unlinked_com_subscription_notification_job`:

```shell
---
? test_unlinked_com_subscription_notification_job_when_order_has_no_gitlab_namespace_id_does_not_call_unlinked_com_subscription_notification_service
: - |
    DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/spec/jobs/unlinked_com_subscription_notification_job_spec.rb:13: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
    /builds/gitlab-org/customers-gitlab-com/app/jobs/unlinked_com_subscription_notification_job.rb:9: warning: The called method `perform' is defined here

```

<hr>

## How to resolve?

- Option 1: maybe `**` should be added to the call?
- Option 2: Rewrite the code to keyword arguments completely.",1
126585688,2023-04-13 08:36:37.982,Resolve Ruby 2 deprecations in finders,"# Using the last argument as keyword parameters is deprecated

Deprecation messages:

- [ ] `invoices_finder`:

```shell
---
test_invoices_finder.for_zuora_account_find_payments_through_zuora/payment:
- |
  DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/app/finders/invoices_finder.rb:19: warning: Passing the keyword argument as the last hash parameter is deprecated
  /builds/gitlab-org/customers-gitlab-com/vendor/ruby/2.7.0/gems/iron_bank-5.2.6/lib/iron_bank/queryable.rb:46: warning: The called method `where' is defined here

```

<hr>


## How to resolve?

- Option 1: maybe `**` should be added to the call?
- Option 2: Rewrite the code to keyword arguments completely.",1
126585677,2023-04-13 08:36:23.877,Resolve Ruby 2 deprecations in spec/features,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",1
126585669,2023-04-13 08:36:14.061,Resolve Ruby 2 deprecations in experiments,"# Using the last argument as keyword parameters is deprecated

Deprecation messages:

- [ ] `application_experiment`:

```shell
---
test_application_experiment#track_tracks_the_event_with_the_expected_arguments_and_merged_contexts:
- |
  DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/vendor/ruby/2.7.0/gems/rspec-mocks-3.12.3/lib/rspec/mocks/message_expectation.rb:143: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
  /builds/gitlab-org/customers-gitlab-com/lib/gitlab/tracking.rb:62: warning: The called method `event' is defined here

```

<hr>

## How to resolve?

- Option 1: maybe `**` should be added to the call?
- Option 2: Rewrite the code to keyword arguments completely.",1
126585655,2023-04-13 08:35:56.145,Resolve Ruby 2 deprecations in controllers,"# Using the last argument as keyword parameters is deprecated

Deprecation messages:

- [x] `application_controller`:

```shell
---
? test_application_controller#store_location_when_the_request_is_a_get_request_does_not_store_the_location_for_non_navigational_format_requests
: - |
    DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/spec/controllers/application_controller_spec.rb:29: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
    /builds/gitlab-org/customers-gitlab-com/vendor/ruby/2.7.0/gems/rails-controller-testing-1.0.5/lib/rails/controller/testing/integration.rb:14: warning: The called method is defined here
```

<hr>

- [x] `licenses_controller`:

```shell
---
test_licenses_controller_get_show_when_authenticated_when_license_creation_is_not_allowed_when_json_logs_error:
- |
  DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/app/controllers/licenses_controller.rb:21: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
  /builds/gitlab-org/customers-gitlab-com/lib/gitlab/logger_helpers.rb:11: warning: The called method `log_error' is defined here

```

<hr>

- [x] `subscription_upgrades_controller`:

```shell
---
? test_subscription_upgrades_controller_when_subscription_is_for_dotcom_post_create_when_logged_in_when_successful_upgrade_response_when_additional_seats_params_set_returns_success
: - |
    DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/spec/controllers/subscription_upgrades_controller_spec.rb:376: warning: Passing the keyword argument as the last hash parameter is deprecated
    /builds/gitlab-org/customers-gitlab-com/lib/zuora/responders/upgrade_amendment_response.rb:18: warning: The called method `initialize' is defined here
? test_subscription_upgrades_controller_when_subscription_is_for_dotcom_post_create_when_logged_in_when_not_successful_upgrade_response_logs_an_error
: - |
    DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/spec/controllers/subscription_upgrades_controller_spec.rb:446: warning: Passing the keyword argument as the last hash parameter is deprecated
    /builds/gitlab-org/customers-gitlab-com/lib/zuora/responders/upgrade_amendment_response.rb:18: warning: The called method `initialize' is defined here
? test_subscription_upgrades_controller_when_subscription_is_for_dotcom_get_preview_when_logged_in_when_not_successful_upgrade_response_returns_422
: - |
    DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/spec/controllers/subscription_upgrades_controller_spec.rb:298: warning: Passing the keyword argument as the last hash parameter is deprecated
    /builds/gitlab-org/customers-gitlab-com/lib/zuora/responders/upgrade_amendment_response.rb:18: warning: The called method `initialize' is defined here

```

<hr>

- [x] `subscriptions_controller`:

```shell
---
? test_subscriptions_controller_put_#update_when_amending_the_subscription_is_successful_behaves_like_successful_amend_a_subscription_when_not_previewing_and_updating_products_when_request_is_for_a_ci_minutes_behaves_like_tracking_tracks_snowplow_event
: - |
    DEPRECATION WARNING: /builds/gitlab-org/customers-gitlab-com/lib/gitlab/tracking.rb:18: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call
    /builds/gitlab-org/customers-gitlab-com/lib/gitlab/tracking.rb:29: warning: The called method `track_event' is defined here

```

## How to resolve?

- Option 1: maybe `**` should be added to the call?
- Option 2: Rewrite the code to keyword arguments completely.",1
126564731,2023-04-12 20:34:07.913,Automate gem cache update when Gemfile lock is updated,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
Changes to our gems causes our cache-assets job to fail. We currently have to manually run the `cache-gems-update` job to resolve the failures.

### Proposal
Automate the job so it runs automatically when Gemfile/lock changes are detected.


<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result
No manual intervention is required when gems are updated.

### Next steps (if any)
Also investigate if this is an issue for node dependencies. If so, create an issue to automatically run `cache-node-updates` on changes.

### How will we measure success?",1
126555483,2023-04-12 15:44:36.493,Two specs using zuora_payment_iframe failing,"### Problem

Two specs in the `rspec` job are causing failing frequently and causing many failing pipelines.

```
Failures:
  1) purchase new cloud subscriptions without payment methods successfully purchase a GitLab.com subscription
     Failure/Error: expect(page).to have_no_css('.gl-spinner-container')
       expected not to find visible css "".gl-spinner-container"", found 1 match: """"
     # ./spec/features/new_gitlab_subscription_spec.rb:64:in `block (3 levels) in <top (required)>'
  2) purchase new EE Subscriptions when payment method does not exist successfully purchase an EE subscription
     Failure/Error:
       within_frame(find(:css, 'iframe#z_hppm_iframe')) do
         find('#input-creditCardNumber').set(credit_card_number)
         select(exp_month, from: 'input-creditCardExpirationMonth')
         select(exp_year, from: 'input-creditCardExpirationYear')
         find('#input-cardSecurityCode').set(cvv)
         find('#input-creditCardHolderName').set(name)
       end
     Capybara::ElementNotFound:
       Unable to find visible css ""iframe#z_hppm_iframe""
     # ./spec/support/helpers/zuora_iframe_test_helpers.rb:13:in `fill_zuora_payment_iframe'
     # ./spec/features/new_ee_subscription_spec.rb:59:in `block (3 levels) in <top (required)>'
```

### Proposal

Determine what caused these to fail now or at least find a solution to get them passing again.",1
126387544,2023-04-07 21:43:00.498,Resolver to preview seat addition,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

In the seat purchase workflow, the customer is provided with a preview of the seat addition before confirming to purchase.

Currently, this uses the `subscription#update` endpoint with `preview: true` to obtain the invoice information.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Create a resolver that can be used to retrieve invoice details to add seats to a subscription.
Since the preview does not make any change to any objects, we do not create a mutation. In order to add seats, the [mutation](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5583) will be used.

### Result

The resolver can be used to preview invoice for a seat addition.

### Next steps (if any)

### How will we measure success?",2
126215853,2023-04-04 12:35:04.135,"Manual Legacy License creation does not take custom email, company and name info","### Problem

When creating a custom Legacy License in the Admin (`/admin/license/new_license`), any values entered in the fields for email, company and name won't be reflected in the created license when a subscription ID was entered. This is because those values are always overridden in [these lines](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/fdfe35c10eb1b72120f7732d69b19cece0172180/app/models/license.rb#L313-315) which are triggered in a [before validation callback](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/fdfe35c10eb1b72120f7732d69b19cece0172180/app/models/license.rb#L85).

The [original functionality](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5412) was implemented with a select of a customer on the manual Legacy License creation page. When a customer was selected, this override would kick in and no manual values were accepted in the form.

With the transition away from customers and to billing accounts, this functionality broke because when a subscription is present, the billing account will be present as well and results in triggering the override.

### Proposal

There are (at least) two possible ways to resolve this:

1. Introduce a billing account select in the Legacy License creation form to clearly enforce the override similar to how a select existed for customer in the past ([original MR](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/5412)). This also means that if no billing account was selected, the entered data from the form has to be used. 
2. Avoid overriding the three values if they were entered into the form.

### Result

Ability to manually override the email, company and name in the manual creation form for a Legacy License.",2
126163299,2023-04-03 11:53:47.687,Update factory_bot_rails to version 6 to get support of positional arguments,Update `factory_bot_rails` to version 6.2.0 at least to get support of positional arguments: https://github.com/thoughtbot/factory_bot/blob/main/NEWS.md#620-may-7-2021,1
126075767,2023-03-31 16:13:58.465,Remove customer memoization related to billing account attrs,"### Summary

Related issue: !6952

Relevant discussion: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6952#note_1332774510

For the `Customer` we memoize the `zuora_account_id` and `salesforce_account_id` values when loaded the first time from the billing account using an instance variable.

Given this memoization can happen in the same request when the associated `billing_accounts` collection for the customer can change + that instance variables are not reloaded on customer reload we end up with the wrong associated values for the entire request (the initial value).

### Porposal

Remove the memoization for `Customer#zuora_account_id` and `Customer#salesforce_account_id`.

Rollout this using the `remove_customer_account_ids_memoization` feature flag (in case we run into a significant slow down in queries). Note we are not expecting for this to impact significantly performance but want to be extra careful. We will leave the flag in place a couple of days and then drop it as part of this same issue.

### Feature rollout using `remove_customer_account_ids_memoization` feature flag

- [ ] MR removing the memoization is deployed to staging
- [ ] MR removing the memoization is deployed to production
- [ ] [Flag](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/206/edit) is enabled in staging (wait until next day to continue)
- [ ] [Flag](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/206/edit) is enabled in production (wait 1 / 2 days to continue)
- [ ] MR removing the feature flag is deployed to production
- [ ] [Flag](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/206/edit) is disabled for all environments
- [ ] [Flag](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/206/edit) is deleted",2
126074032,2023-03-31 15:23:05.714,Remove unused additional_seat_price_per_year from upgrade_amendment_response,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
Discovered when adding fields in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5868

The [additional_seat_price_per_year](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/4b5712225e8872d251feee1a332759c1b55aed7f/lib/zuora/responders/upgrade_amendment_response.rb#L125) in `upgrade_amendment_response` is unused. 

### Proposal
Remove the field from the file and associated tests to avoid lingering dead code. Verify the removal for both frontend and backend code.

### Result

### Next steps (if any)

### How will we measure success?",1
126012678,2023-03-30 18:13:48.690,Refactor Change Namespace FE test to not use internal wrapper.vm methods,"

### Problem
`components/change_namespace_form_spec.js` tests rely heavily on internal vm methods (such as `wrapper.vm.complete` and unnecessary `waitForPromises`/`nextTick`s. The internal vm behavior can be different between vue2 and vue3, so we should avoid using them. 

### Proposal
Refactor tests in `components/change_namespace_form_spec.js` to no longer use internal vm methods or unnecessary `waitForPromises`/`nextTick`s. This will assist in the Vue3 migration.

### Result

### Next steps (if any)

### How will we measure success?",1
125934844,2023-03-29 08:05:10.798,Update haml-rails to 2.1.0,Update `haml-rails` gem to 2.1.0 to unblock updating of `gitlab-styles` gem to version 10.0.0,1
125875721,2023-03-28 08:02:31.468,Update gem pry to 0.14.2,"Update gem `pry` to version 0.14.2 to get it working with Ruby 3.2. Otherwise we have this error:

```
NameError: undefined method `=~' for class `Pry::Code'
/builds/gitlab-org/customers-gitlab-com/vendor/ruby/3.2.0/gems/pry-0.13.1/lib/pry/code.rb:342:in `<class:Code>'
/builds/gitlab-org/customers-gitlab-com/vendor/ruby/3.2.0/gems/pry-0.13.1/lib/pry/code.rb:32:in `<class:Pry>'
/builds/gitlab-org/customers-gitlab-com/vendor/ruby/3.2.0/gems/pry-0.13.1/lib/pry/code.rb:5:in `<main>'
<internal:/usr/local/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:37:in `require'
<internal:/usr/local/lib/ruby/3.2.0/rubygems/core_ext/kernel_require.rb>:37:in `require'
/builds/gitlab-org/customers-gitlab-com/vendor/ruby/3.2.0/gems/bootsnap-1.13.0/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:32:in `require'
```
## Breaking changes?

None. See the changelog here https://github.com/pry/pry/blob/master/CHANGELOG.md#v0142v0142-january-9-2023",1
125824912,2023-03-27 12:16:39.317,Monitoring of ramps rollout,"## Summary

This is the monitoring issue to make sure that the ramp subscriptions created in production are displayed as expected in the new subscription card design. We need a way to identify ramp subscriptions created in production. Maybe we could check with the sales team on this.  
Keep adding items to the tasks that need to be taken care in the monitoring stage i.e. post rollout of ramp subscriptions in production.

## How to Monitor

Use either of the processes below (not everyone might have access to Data Query). The output from both should be the same.

### Using Zuora Data Query

Use the following steps to check for ramp subscriptions in production:    

1. Login to Zuora production through Okta.
2. Create a new data query - https://www.zuora.com/platform/apps/data-query/queries/new
3. Query to use - `select Subscriptionnumbers, * from orders o inner join ramp r on o.Id = r.OrderId LIMIT 10`.
3. Run query.
4. Copy any 1 subscription number.
4. Search for this subscription number in Zuora subscriptions page - https://www.zuora.com/apps/Subscription.do?menu=Z-Billing.
4. Copy the corresponding Customer name.
5. Sign in to Customers Portal production as admin user through Okta.
6. Go to `Customers` tab in Customers Portal admin view.
7. Search of the copied customer name.
8. Impersonate the customer as admin to check that the ramp subscription card is shown properly with expected details and subscription management buttons hidden. Can use this [list of scenarios](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5384) to verify if the subscription card shows as expected.
9. Repeat the above steps for 5 customers.


### Using Zuora Report

Additional details in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/6129#note_1332193491.

1. Login to Zuora production through Okta.
2. Go to Reports > `Tatyana - Shared` > `Subscriptions with Ramps` > click Run Summary Report (most recently created subscriptions will be at the top).
1. Copy `Sold To: Work Email` or `Account: Name`.
5. Sign in to Customers Portal production as admin user through Okta.
6. Go to `Customers` tab in Customers Portal admin view.
7. Search of the copied customer email or name.
8. Impersonate the customer as admin to check that the ramp subscription card is shown properly with expected details and subscription management buttons hidden. Can use this [list of scenarios](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5384) to verify if the subscription card shows as expected.
9. Repeat the above steps for 5 subscriptions.",1
125693241,2023-03-23 17:02:14.061,Update specs to consume Matterhorn pricing,"As part of [Matterhorn](https://internal-handbook.gitlab.io/handbook/product/pricing/matterhorn/) we are increasing the pricing of Premium plans.

Our tests assert correct price in multiple scenarios. What this means is that we have assertions that monthly price is exactly 19$. 

With https://gitlab.com/gitlab-com/business-technology/enterprise-apps/financeops/finance-systems/-/issues/1117#note_1326126105+ this price is no longer correct and we should update our tests accordingly",1
125674100,2023-03-23 10:01:38.578,Avoid speculation of overages in  SM auto-renewal emails,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication.

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

# Feature Request

## Problem

Customers are [confused](https://gitlab.com/gitlab-org/fulfillment-meta/-/issues/920#note_1316701978) by the wording used in the renewal emails regarding overages:

> ... you may have unpaid seat overages for your instance.

## Proposal

Change the wording to avoid speculation:

> ... {+we could not determine whether+} you ~~may~~ have unpaid seat overages for your instance.

## How will we measure success?",1
125645120,2023-03-22 17:19:43.800,"Update the Admin ""skip email confirmation"" checkbox","### Problem

Based on [feedback (external slack link)](https://gitlab.slack.com/archives/C04NTCL7465/p1679324109109919?thread_ts=1679037493.612869&cid=C04NTCL7465):

> Question on this, is the “skip email confirmation” option only relevant when updating the email address?
The current UI makes it a permanent setting, it seems, for the account. I wonder if it makes more sense to be a one-time option when making an email update?

### Proposal

~~1. Update the UI so it is only displayed when the email is updated.~~ (`rails_admin` is really restrictive about the UI changes it allows it is very difficult to introduce customizations like this.

2. :white_check_mark: Rephrase the checkbox copy to make it clear it applies to an email update.

**New copy:** `if checked when the email is updated, skips the email confirmation`",1
125619387,2023-03-22 09:41:56.532,Update help text for Customer account email address,"### Problem

We currently show ""We use this email for notifications about your subscriptions."" for the Account details email address provided by the customer.

![image](/uploads/9a92816c107113347dd0d7fdfb9f799c/image.png)

As we are introducing `Bill To` and `Sold To` contact for the customer, we should update the help text to reflect its purpose.

FYI: [Related conversation](https://gitlab.com/gitlab-org/gitlab/-/issues/330608/designs/Link_CDot_account_to_GitLab.com_account_with_the_same_email__when_CDot_account_is_already_linked_to_a_different_GitLab.com_account__AND_CDot_account_has_active_subscriptions_.png#note_1296416109).

### Proposal

Update help text for Customer account email address to reflect its purpose. This should be made conditional, if a GitLab.com account is connected or not.

#### Connected GitLab.com account:

> This is your Customers Portal account email address and is linked to your GitLab.com account.

#### No connected GitLab.com account:

> This is your Customers Portal account email address.


### Result

Customers are better informed about the different purposes of Account email, `Bill To` and `Sold To` email.",1
125618623,2023-03-22 09:27:15.476,Inconsistency - Showing cents in some places and not in others,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

We're not being consistent in what we show our users. In some places we show cents `41.04` but in other places we round to a whole number. From a brief glance at the code this looks like inconsistent use of the `formatMoney` function.

| Page and decimal | Screenshot |
| ------ | ------ |
| New subscription - 2 decimals | ![Screenshot_2023-03-17_at_12.36.08](/uploads/e72f4d19fbd0fe0d88468eaa130c07ce/Screenshot_2023-03-17_at_12.36.08.png) |
| Renew - 2 decimals |  ![Screenshot_2023-03-17_at_12.37.53](/uploads/12d47db4f500ed2dbb64a9b45d2acf14/Screenshot_2023-03-17_at_12.37.53.png)|
| Subscriptions overview - 0 decimals | ![Screenshot_2023-03-22_at_9.56.08_AM](/uploads/2598aac37e7cca04f8ddd06de77da022/Screenshot_2023-03-22_at_9.56.08_AM.png) **Zuora data** ![Screenshot_2023-03-22_at_9.56.39_AM](/uploads/30a26a03bcdc15a52df308ca29f390d7/Screenshot_2023-03-22_at_9.56.39_AM.png)|



### Proposal

* Audit usages of `formatMoney` (also looks like we've got components where we only import the function)
* Consistently use 2 decimals - Can possibly be enforced with a helper function

### Result

Consistency in what we display

### Availability and Testing
E2E tests `number_to_currency` options will need to be updated in some places as well. A few key areas to note:
- `qa/page/component/ramp_subscription_card.rb` - remove `precision: 0`, so that whole prices will have .00 for cents
- `qa/vendor/gitlab/page/component/order_summary.rb` - remove `strip_insignificant_zeros: true`, so that trailing zeros are not stripped",2
125616182,2023-03-22 08:27:12.123,Update gitlab-styles to 10.0.0 at least,"# Summary

Update gem `gitlab-styles` to version 10.0 at least to bring newest Rubocop version that support Ruby 3.

## Breaking changes

Yes. Newer version will add a bunch of new cops that we have to deal with:

```
Gemspec/DeprecatedAttributeAssignment: # new in 1.30
  Enabled: true
Gemspec/RequireMFA: # new in 1.23
  Enabled: true
Lint/UselessRescue: # new in 1.43
  Enabled: true
Naming/BlockForwarding: # new in 1.24
  Enabled: true
Style/ArgumentsForwarding: # new in 1.1
  Enabled: true
Style/ArrayIntersect: # new in 1.40
  Enabled: true
Style/CollectionCompact: # new in 1.2
  Enabled: true
Style/ConcatArrayLiterals: # new in 1.41
  Enabled: true
Style/DocumentDynamicEvalDefinition: # new in 1.1
  Enabled: true
Style/EmptyHeredoc: # new in 1.32
  Enabled: true
Style/EndlessMethod: # new in 1.8
  Enabled: true
Style/EnvHome: # new in 1.29
  Enabled: true
Style/FetchEnvVar: # new in 1.28
  Enabled: true
Style/FileRead: # new in 1.24
  Enabled: true
Style/FileWrite: # new in 1.24
  Enabled: true
Style/HashConversion: # new in 1.10
  Enabled: true
Style/HashExcept: # new in 1.7
  Enabled: true
Style/IfWithBooleanLiteralBranches: # new in 1.9
  Enabled: true
Style/InPatternThen: # new in 1.16
  Enabled: true
Style/MagicCommentFormat: # new in 1.35
  Enabled: true
Style/MapCompactWithConditionalBlock: # new in 1.30
  Enabled: true
Style/MapToHash: # new in 1.24
  Enabled: true
Style/MapToSet: # new in 1.42
  Enabled: true
Style/MinMaxComparison: # new in 1.42
  Enabled: true
Style/MultilineInPatternThen: # new in 1.16
  Enabled: true
Style/NegatedIfElseCondition: # new in 1.2
  Enabled: true
Style/NestedFileDirname: # new in 1.26
  Enabled: true
Style/NilLambda: # new in 1.3
  Enabled: true
Style/ObjectThen: # new in 1.28
  Enabled: true
Style/OperatorMethodCall: # new in 1.37
  Enabled: true
Style/QuotedSymbols: # new in 1.16
  Enabled: true
Style/RedundantArgument: # new in 1.4
  Enabled: true
Style/RedundantConstantBase: # new in 1.40
  Enabled: true
Style/RedundantDoubleSplatHashBraces: # new in 1.41
  Enabled: true
Style/RedundantEach: # new in 1.38
  Enabled: true
Style/RedundantInitialize: # new in 1.27
  Enabled: true
Style/RedundantSelfAssignmentBranch: # new in 1.19
  Enabled: true
Style/RedundantStringEscape: # new in 1.37
  Enabled: true
Style/SelectByRegexp: # new in 1.22
  Enabled: true
Style/StringChars: # new in 1.12
  Enabled: true
Style/SwapValues: # new in 1.1
  Enabled: true
Capybara/MatchStyle: # new in 2.17
  Enabled: true
Capybara/NegationMatcher: # new in 2.14
  Enabled: true
Capybara/SpecificActions: # new in 2.14
  Enabled: true
Capybara/SpecificMatcher: # new in 2.12
  Enabled: true
RSpec/BeEq: # new in 2.9.0
  Enabled: true
RSpec/BeNil: # new in 2.9.0
  Enabled: true
RSpec/ChangeByZero: # new in 2.11
  Enabled: true
RSpec/DuplicatedMetadata: # new in 2.16
  Enabled: true
RSpec/ExcessiveDocstringSpacing: # new in 2.5
  Enabled: true
RSpec/IdenticalEqualityAssertion: # new in 2.4
  Enabled: true
RSpec/NoExpectationExample: # new in 2.13
  Enabled: true
RSpec/PendingWithoutReason: # new in 2.16
  Enabled: true
RSpec/RedundantAround: # new in 2.19
  Enabled: true
RSpec/SkipBlockInsideExample: # new in 2.19
  Enabled: true
RSpec/SortMetadata: # new in 2.14
  Enabled: true
RSpec/SubjectDeclaration: # new in 2.5
  Enabled: true
RSpec/VerifiedDoubleReference: # new in 2.10.0
  Enabled: true
RSpec/Capybara/MatchStyle: # new in 2.17
  Enabled: true
RSpec/Capybara/NegationMatcher: # new in 2.14
  Enabled: true
RSpec/Capybara/SpecificActions: # new in 2.14
  Enabled: true
RSpec/Capybara/SpecificFinders: # new in 2.13
  Enabled: true
RSpec/Capybara/SpecificMatcher: # new in 2.12
  Enabled: true
RSpec/FactoryBot/ConsistentParenthesesStyle: # new in 2.14
  Enabled: true
RSpec/FactoryBot/FactoryNameStyle: # new in 2.16
  Enabled: true
RSpec/FactoryBot/SyntaxMethods: # new in 2.7
  Enabled: true
RSpec/Rails/AvoidSetupHook: # new in 2.4
  Enabled: true
RSpec/Rails/HaveHttpStatus: # new in 2.12
  Enabled: true
RSpec/Rails/InferredSpecType: # new in 2.14
  Enabled: true
RSpec/Rails/MinitestAssertions: # new in 2.17
  Enabled: true
RSpec/Rails/TravelAround: # new in 2.19
  Enabled: true
Rails/ActionControllerFlashBeforeRender: # new in 2.16
  Enabled: true
Rails/ActionControllerTestCase: # new in 2.14
  Enabled: true
Rails/ActionOrder: # new in 2.17
  Enabled: true
Rails/ActiveSupportOnLoad: # new in 2.16
  Enabled: true
Rails/AddColumnIndex: # new in 2.11
  Enabled: true
Rails/CompactBlank: # new in 2.13
  Enabled: true
Rails/DeprecatedActiveModelErrorsMethods: # new in 2.14
  Enabled: true
Rails/DotSeparatedKeys: # new in 2.15
  Enabled: true
Rails/DuplicateAssociation: # new in 2.14
  Enabled: true
Rails/DuplicateScope: # new in 2.14
  Enabled: true
Rails/DurationArithmetic: # new in 2.13
  Enabled: true
Rails/EagerEvaluationLogMessage: # new in 2.11
  Enabled: true
Rails/ExpandedDateRange: # new in 2.11
  Enabled: true
Rails/FreezeTime: # new in 2.16
  Enabled: true
Rails/I18nLazyLookup: # new in 2.14
  Enabled: true
Rails/I18nLocaleAssignment: # new in 2.11
  Enabled: true
Rails/I18nLocaleTexts: # new in 2.14
  Enabled: true
Rails/IgnoredColumnsAssignment: # new in 2.17
  Enabled: true
Rails/MigrationClassName: # new in 2.14
  Enabled: true
Rails/RedundantPresenceValidationOnBelongsTo: # new in 2.13
  Enabled: true
Rails/RedundantTravelBack: # new in 2.12
  Enabled: true
Rails/ResponseParsedBody: # new in 2.18
  Enabled: true
Rails/RootJoinChain: # new in 2.13
  Enabled: true
Rails/RootPathnameMethods: # new in 2.16
  Enabled: true
Rails/RootPublicPath: # new in 2.15
  Enabled: true
Rails/StripHeredoc: # new in 2.15
  Enabled: true
Rails/TimeZoneAssignment: # new in 2.10
  Enabled: true
Rails/ToFormattedS: # new in 2.15
  Enabled: true
Rails/ToSWithArgument: # new in 2.16
  Enabled: true
Rails/TopLevelHashWithIndifferentAccess: # new in 2.16
  Enabled: true
Rails/TransactionExitStatement: # new in 2.14
  Enabled: true
Rails/UnusedIgnoredColumns: # new in 2.11
  Enabled: true
Rails/WhereMissing: # new in 2.16
  Enabled: true
Rails/WhereNotWithMultipleConditions: # new in 2.17
  Enabled: true
```",1
125615729,2023-03-22 08:15:45.944,Update gem webmock to 3.18.1,"Update gem webmock to 3.18.1

## Breaking changes

None. https://github.com/bblimke/webmock/blob/v3.18.1/CHANGELOG.md",1
125615712,2023-03-22 08:15:24.869,Update gem date to 3.3.3,"# Summary

Installation (building) of [gem `date`](https://rubygems.org/gems/date) current fails on Ruby 3.2 with the following error:

```
date_core.c:7289:5: error: implicit declaration of function 'rb_check_trusted' is invalid in C99 [-Werror,-Wimplicit-function-declaration]
    rb_check_trusted(self);
    ^
```

Update to the latest available version - 3.3.3.

## Breaking changes?

None. Link to the changelog - https://github.com/ruby/date/releases/tag/v3.0.0",1
125615699,2023-03-22 08:14:55.795,Update gem pg to 1.4.6,"# Summary

Installation (building) of [gem `pg`](https://rubygems.org/gems/pg) current fails on Ruby 3.2 with the following error:

```
pg_result.c:1590:58: error: use of undeclared identifier 'rb_cData'
        rb_cPGresult = rb_define_class_under( rb_mPG, ""Result"", rb_cData );

```

Update to the latest available version - 1.4.6.

## Breaking changes?

[None.](https://github.com/ged/ruby-pg/blob/master/History.md#v123-2020-03-18-michael-granger-gedfaeriemudorg)",1
125585612,2023-03-21 15:02:12.249,Implement error codes for purchase flow errors,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

When errors are matched using strings, they are quite fragile to changes in the backend and string mismatches. An example of this is when the `{""email"": [""has already been taken""]}` error was translated to the [description here](https://gitlab.com/gitlab-org/gitlab/-/issues/330608#initial-problem) with a different character, leaving the error handled sub-optimally.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Implemented error codes for each of the [purchase errors](https://gitlab.com/groups/gitlab-org/-/epics/9543#proposal) as [discussed here](https://gitlab.com/groups/gitlab-org/-/epics/9543#note_1221457048) and [here](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/109662/diffs#note_1274594411).",5
125577541,2023-03-21 12:31:13.940,Creation of the BillingAccountContact model,"This issue is part of the creation and implementation of the `BillingAccountContact` model to cache the ""Bill to"" and ""Sold to"" Zuora contacts:

1. [Rename current BillingAccountContact helper class](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/6056) (closed)
1. **Creation of the `BillingAccountContact` model** :point_left: You are here
1. [Implementation of `BillingAccountContact` and sync with Zuora](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/6067)
1. [Data backfill for existing `BillingAccount` objects](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/6068)

### Proposal

This issue tracks effort related to the creation of the `BillingAccountContact` model. This model will hold `Zuora::Contact` data as well as the `zuora_contact_id` related to the object we want to save.

A `BillingAccountContact` object will ultimately be the SSOT for customer contact details, which means that contact detail fields in `Customer` should also be present in `BillingAccountContact` (we may want to be consistent with the new Presenter introduced via [this MR](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6838)). 

`BillingAccountContact` objects will only be created to hold Bill to and Sold to contact data, given a `BillingAccount` object. This means that `BillingAccount#sold_to` and `BillingAccount#bill_to` references will have to be added: this mimics the architecture behind `Zuora::Account` (ie. access of these contact objects via `zuora_account.bill_to` and `zuora_account.sold_to`, even if they are the same object (which is often the case))

Work on this issue should not be about implementation.

### Result

Passing tests.",3
125555461,2023-03-20 21:39:32.593,Remove localVue usages from tests,"* **Why?** `localVue` is one of the most confusing feature in `@vue/test-utils` and [we do not need it at all](https://gitlab.com/gitlab-org/gitlab/-/issues/220482)
* **How?** Use `Vue.use` instead",1
125551559,2023-03-20 19:12:14.171,Rename current BillingAccountContact helper class,"This issue is part of the creation and implementation of the `BillingAccountContact` model to cache the ""Bill to"" and ""Sold to"" Zuora contacts:

1. **Rename current BillingAccountContact helper class** :point_left: You are here
2. [Creation of the `BillingAccountContact` model](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/6066)
3. [Implementation of `BillingAccountContact` and sync with Zuora](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/6067)
4. [Data backfill for existing `BillingAccount` objects](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/6068)

### Problem

There's a `BillingAccountContact` class that's currently being called from `BillingAccount#contact`. 

### Proposal

We want to make the `BillingAccountContact` class name available for the new model. This issue tracks effort to rename the existing `BillingAccountContact` into something else.

### Result

Passing tests.",2
125544296,2023-03-20 16:15:50.085,Validate assumptions about Compliance in CustomersDot,"### Background

The ~""group::fulfillment platform"" team is looking to improve contact management in CustomersDot as part of https://gitlab.com/groups/gitlab-org/-/epics/9831+.  In this epic we will be introducing the concept of BillingAccount Contacts to CDot which will store data about the Bill To and Sold To Contacts for a BillingAccount.  More details can be found in this [proposal doc](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/doc/architecture/contacts_management_proposal.md).  This new concept will have an impact on Compliance in CustomersDot.

Compliance is performed in CDot in a few different ways at the moment:

1. Visual Compliance (Sanctions Screening Tool)
    - This tool screens purchaser information (name, country, and state (for USA/CAN purchasers only) against various sanctions and denied party lists, supplied from SFDC and creates an export hold in SFDC when a) a potential match is detected and/or b) for purchases originating from high risk countries. This screening occurs when an opportunity or quote is created in SFDC. 
    - This tool was briefly enabled in CDot in 2021 and then disabled because it blocked more purchases than expected (unnecessarily). For this reason, web direct purchasers are currently only screened post-purchase. 
    - Visual Compliance will be replaced by a new tool, Navex Risk Rate, in April 2023 in SFDC. Visual Compliance will be retired shortly thereafter. We plan to subsequently enable Risk Rate or an equivalent for web direct purchases, however, the plan is not yet defined. In the meantime, Risk Rate will screen these purchasers, post purchase as Visual Compliance does currently. 
    -   See [issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4857) to remove Visual Compliance for non-Marketplace usage.
2. EmbargoChecker service
    - An internal control implemented per [Issue 4166](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4166), the [`EmbargoChecker`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/43b599e2dc1d52d074d97da549167c2b44a8bf69/lib/embargo_checker.rb) verifies if a Customer's country or IP location is Russia or Belarus before allowing important actions, like updating or renewing a Subscription. 
    - This control ensures compliance with trade control laws implemented in response to the Russian invasion of Ukraine. It, for example, prevents the customer's independent renewal of self-managed subscriptions, which are in most cases prohibited by export control law; and allows Legal an opportunity to identify, on a case-by-case basis, exceptions to that general prohibition, to screen individual customers in Visual Compliance/Risk Rate pre-purchase, and to screen the purchasers' paying bank (many of which have been sanctioned).  
    - Note: the Embargo Checker is country-based and does not consider whether any given purchaser is identified on a sanctions list. 
3. Country validations on Customer record
    - This validates the `country` field for a Customer record is not included in a hard-coded list, [`World::COUNTRIES_TO_REJECT`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/f628a9a0ffc0d6a99181684bab3c417eb671d1a7/lib/world.rb#L32).

As seen above, the Customer record is used heavily for compliance, but as we introduce Sold To Contacts into CDot, this seems like the more appropriate object to use for Compliance checks.

### Questions

Before going to far down ~""workflow::solution validation"", we'd have some questions for ~""group::compliance"".

1. Thinking about the sales-assisted flow, if SFDC / Zuora have customer data for embargoed countries/companies, and sends a callout to CDot for provisioning, should it be allowed?
    - For example, if CDot receives a callout where the SoldTo contact has a country of China, should CDot continue with provisioning access?
2. What entity should be considered when thinking about compliance?
    - Is it the individual that’s logged in (Customer) or the BillingAccount they belong to (SoldTo)?
    - How is this done in SFDC? Is it based on Account address? SoldTo Address?
3. What is the latest plan for RiskRate?
    - Status update?
    - How do we plan to use it for information generated via CDot (i.e. web direct flows)?

### Results

Once we have answers to these questions, we can confidently update the [contacts management proposal doc](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/doc/architecture/contacts_management_proposal.md) and create more issues for https://gitlab.com/groups/gitlab-org/-/epics/9831.",2
125332906,2023-03-15 19:56:05.918,QSR banner should only display if QSR is enabled,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

## Problem

Offline Cloud License customers are seeing upcoming QSR banners in their instance, while not being on QSR or not necessarily having exceeded their seat count.

The work for QSR's for Offline customers has not yet been completed by ~""group::billing and subscription management"" (see [related epic](https://gitlab.com/groups/gitlab-org/-/epics/7471)). However, we recently became aware that SM customers on an Offline license are seeing QSR upcoming banners.

~""group::provision"" [setup a banner](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3355) a year back for Offline customers notifying them of an upcoming QSR: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3355/designs/Automated_license_file_quaterly_reconciliation_alerts.png

These are shown 14 days prior, 7 days prior and 1 day after the reconciliation due date. These were established with the assumption of QSR support for offline customers.

However, the banner text states `You have more active users than your license allows for. (or than are allowed by your license.) Before \*\*date\*\* you must get reconciled? GitLab must reconcile your subscription/license?` - without ever having any awareness if the user has *actually* exceeded their seat count.

## Proposal
Update the banner logic to only display if `turn_on_seat_reconciliation__c` is `Yes` - otherwise this should not be shown.",1
125292256,2023-03-15 10:42:21.680,Collect all deprecation warnings for Ruby 3,"Ruby 3 and 3.2 has many breaking changes when it comes to Ruby 3 itself.
To provide a smooth update, we need to collect all deprecations in our code base and resolve them one by one.

Run CI or all tests with `env RUBYOPT=""-W:deprecated` to get all places with deprecations.

Adopting the workflow from GitLab https://gitlab.com/gitlab-org/gitlab/-/issues/257438",1
125291990,2023-03-15 10:40:13.684,Make sure all tests pass with Ruby 3,"See the title :smile: 

Once we add Ruby 3 to the CI pipeline we have to ensure all tests pass and we have no deprecation warnings in the log.

This issue is most likely will be converted into a sub-epic to align tests according to their domains across Fulfillment teams.",5
125291974,2023-03-15 10:39:55.035,Investigate possible gem updates for Ruby 3 compatibility,"This issue holds all gems that need to be updated in order to run CustomersDot on Ruby 3.2.

| Name       | Works on Ruby 3? | Updated? | Breaking changes | MR |
| ------     | ------ | ------ | ------ | ------ |
| [webmock](https://rubygems.org/gems/webmock)  |  Yes   |  No    |  No    |        |
| [countries](https://rubygems.org/gems/countries) |  Yes   |  No    |  Yes    |        |
| [pg](https://rubygems.org/gems/pg) |  Yes   |  No    |  No    |        |
| [date](https://rubygems.org/gems/date) |  Yes   |  No    |  No    |        |",5
125270801,2023-03-14 23:40:00.621,Retire AmendSubscriptionService and AmendmentBaseService,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

As part of final cleanup, delete amendment related services:

* Delete `AmendSubscriptionService` service and its spec file
* Delete `AmendmentBaseService` service and its spec file. Since `Gitlab:: UpgradeSubscriptionPlanService` used to inherit `AmendmentBaseService`, move used methods to the `UpgradeSubscriptionPlanService` class.
* Delete `Zuora::Actions::Amend` and `.amend` method in subscription model

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",2
125266018,2023-03-14 20:10:07.469,Retire `amendment` related params in Salesforce::CreateQuoteRatePlanChargeService service,"The following discussion from !6721 should be addressed:

- [x] @a_luna started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6721#note_1313922963):  (+1 comment)

    > **question:** Are we considering retiring these `amendment` related params as well? 
    > 
    > Since the calls to `create_salesforce_quote_rate_plan_charge` are getting this parameter set to `nil`, these parameters are always sent as `nil` too :thinking: 
    > 
    > Although this could probably be tackled in a follow up to keep this MR from getting larger :sweat_smile: :thinking:",2
125104403,2023-03-10 14:31:55.799,Updating Customer Email as an Admin user,"# Bug

## Summary

There are times when Support team need to update a customersDot email address per request of the customer, or in order to send a license file to the intended recipient after [a Zuora contact change took place](https://gitlab.zendesk.com/agent/tickets/383199) that the customer was not expecting (e.g. separate subscription closed won).  This is relevant even for creating/sending legacy licenses since they will pull Zuora contact info regardless of the email address entered into the form.

In the past, [this was a simple update/save](https://about.gitlab.com/handbook/support/license-and-renewals/workflows/customersdot/associating_purchases.html#process).  Now, with some recent changes to the platform, its require the email addresses to be confirmed by the customer, even when changed through admin actions, and it creates kind of an undesirable scenario for both us and the customer.  We should be able to circumvent this from the admin side.

For one, cdot sends 2 emails out per change, an ""FYI this happened"" and a ""please confirm this happened"".  That's fine in a vacuum, but it may unintentionally be spamming the customer, especially if the email address is being changed only temporarily.  For two, it breaks our workflow to ""Change the email in the new account for example: person@example.com to person_edited@example.com""; `person_edited` is not a real address and therefore can't get the confirmation email, but that's sort of the point with that workflow to swap addresses around.

Also, I notice it updates Zuora BTST immediately, even when cdot still reflects the previous email address.  That may or may not be intentional?

## What is the expected *correct* behavior?

From the admin side, we should be able to update contact information without relying on the customer to confirm their address.  Or, we should have the means to confirm it for them without email.  In a perfect world, we should never need to change cdot contact info for them, but there are many relevant reasons for why support needs to change cdot info on behalf of the customer

## Workarounds

In some cases, you can change the email to update Zuora, send the license, then update it back in cdot.  This does probably spam the customer with multiple notifications that the address has been changed.

## Reported examples

1. https://gitlab.zendesk.com/agent/tickets/383199
1. https://gitlab.zendesk.com/agent/tickets/382845
1.

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",2
125097120,2023-03-10 11:47:34.077,CustomersDot one-time sign in URL visible to read-only admin users,"In the `https://customers.gitlab.com/admin/customer/####` page, the one-time sign-in URL for the customer is visible to all admin users. 

This could lead to impersonation, which should not be allowed for read-only roles. See the list of roles in: https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/doc/setup/okta.md#group-meaning",1
125059975,2023-03-09 17:59:49.001,Cleanup Subscription#recently_renewed_with_multiple_amendments method,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

When using Amend API to perform a renewal operation, each type resulted in a separate amendment. For e.g. when upgrading a subscription, multiple amendments to Renew, Add product and Remove product will be generated. The latest version of the subscription may or may not be the Renewal amendment. Thus, when Zuora triggered a callback, the `amendment_types` attribute may or may not include `RenewSubscription`.

To circumvent this limitation, the method `Subscription#recently_renewed_with_multiple_amendments` was introduced to check if any of the amendments associated with the last transaction subscription included a `Renewal`.

The method is used when sending [online cloud notification](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/ea526eded21642fd041170da5a53fe2f61f6425e/app/services/online_cloud_license_notification_service.rb#L14) email. Now that all renewals occur using Orders API, the first condition `renewal_amendment` should return `true` when the transaction included a Rewewal- as [`amendment_types` callback attribute](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/ea526eded21642fd041170da5a53fe2f61f6425e/app/workers/zuora_callout/order_processed_worker.rb#L47) includes all [order action types translated into respective amendment types](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/ea526eded21642fd041170da5a53fe2f61f6425e/app/workers/zuora_callout/order_processed_worker.rb#L41).

Consequently, the `Subscription#recently_renewed_with_multiple_amendments` method should be ready to cleanup.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Before dropping the method, confirm the method is no longer being used:

- [x] Add a logger in the [`recently_renewed_with_multiple_amendments?` method](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/ea526eded21642fd041170da5a53fe2f61f6425e/app/models/subscription.rb#L618) to ensure the code path does not reach the point when `base_subscription_id` is returned. This will confirm Amend API is not used for any of the existing workflows where the cloud notification is sent
- [x] Verify for all Renewal use cases `OnlineCloudLicenseNotificationService#execute` sends appropriate email (see https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5944#note_1313873775)

- [x] Once above two verification is complete, the method can be dropped (and inclusion of logger module).

### Result

Cleanup of unused code.

### Next steps (if any)

### How will we measure success?",2
125052325,2023-03-09 15:13:14.787,Display a unique identifier in the Billing Account search list,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication.

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

# Feature Request

## Problem

Searching a Billing account by name shows similar entries in the list when multiple Billing Accounts with the same name exists. This makes it a gamble when we need to associate a customer to a specific Billing account.

![Screenshot_2023-03-09_at_18.09.36](/uploads/dcb8266f48f4115e8efacaa92c27fd1c/Screenshot_2023-03-09_at_18.09.36.png)

## Proposal

Display the Zuora Account ID or Billing Account ID in the list displayed during a search

## Workaround

 In the new billing account membership, search a customer by email address, and in billing account, search by Zuora Account ID",1
125031032,2023-03-09 09:35:51.278,Add Ruby 3 CI pipeline,"Add Ruby 3 pipeline for running our CI jobs.

- [x] Add `3.2.1` to `.tool-versions`
- [x] Ensure pipeline can be run on that version: the easiest way is to remove `ruby` from `Gemfile`.",5
125015276,2023-03-09 07:00:33.443,Add logging to Sync BillingAccount name to Customer company,"The following discussion from !6726 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6726#note_1304713465): 

    > **Suggestion (non-blocking):** We could add logging for the success and error cases here.  If an update fails, it might be nice to know why.
    > 
    > I don't see this as a blocker as we can always add it later if needed.",1
124993799,2023-03-08 18:47:06.775,"Follow-up from ""Remove account_data_structure flag in Order model""","### Proposal

A few suggestions came up in the review of https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6699 that I wanted to follow-up on separately to avoid delays in getting that MR merged.  Each of the following items involve test refactoring:

* [x] Remove `:with_zuora_account_id` trait in Customer factory https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6752
* [x] Remove `:with_salesforce_account_id` trait in Customer factory https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6752
* [x] Include `billing_account` creation in the `:with_zuora_account` trait https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6764
* [x] Replace `:with_billing_account_membership` usages where `create_zuora_account` helper is also used in favor of `:with_zuora_account` trait. https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6769
* [x] Refactor `with_billing_account_membership` trait in [Customer factory](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/spec/factories/customers.rb#L69) to stop using the `zuora_account_id` field https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6812

### Follow-up from https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6699

Discussion Thread: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6699#note_1304799044",2
124990196,2023-03-08 17:40:31.129,Mailgun integration with Slack,"We're currently going through a (sporadic) Mailgun outage. We found out about this after some investigation done yesterday (Feb 21st). It would be more convenient and better for general awareness to have Mailgun updates sent directly to our `#s_fulfillment_status` Slack channel.

This issue tracks effort to have integrate Mailgun with Slack. More info about how to do this here: https://www.mailgun.com/resources/integrations/slack/",3
124988326,2023-03-08 17:25:56.491,"Follow-up from ""Update implementation to identify professional services""","The following discussion from !6671 should be addressed:

- [ ] @vshumilo started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6671#note_1302936956):  (+2 comments)

    > **praise / thought (non-blocking):** Nice to see this update where we can reference a product name consistently instead of trying to cover all the plans that can be updated anytime in Zuora.
    > 
    > As long as we have a convention or established agreement that this will always be the product name :fingers_crossed: 
    > 
    > Do you know if this is documented somewhere? Else I think it will be a nice follow up to just add some context around this in the docs and tag the stable counterparts.",1
124976871,2023-03-08 15:07:35.773,Marketplace API: Add missing descriptions to OpenAPI spec,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

The [Marketplace API spec](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/doc/api/marketplace_openapi.yaml?plain=1) doesn't currently have request and response descriptions for the following operations:

- [/oauth/token](https://customers.staging.gitlab.com/openapi_docs/marketplace#/marketplace/post_oauth_token)
- [/api/v1/marketplace/subscriptions](https://customers.staging.gitlab.com/openapi_docs/marketplace#/marketplace/post_api_v1_marketplace_subscriptions)
- [/api/v1/marketplace/subscriptions/{external_subscription_id}](https://customers.staging.gitlab.com/openapi_docs/marketplace#/marketplace/get_api_v1_marketplace_subscriptions__external_subscription_id_)

| | | |
| ------ | ------ |------ |
| ![Screenshot_2023-03-08_at_16.00.59](/uploads/b856ae367268513d2fb77c4dd8d9d20d/Screenshot_2023-03-08_at_16.00.59.png)      | ![Screenshot_2023-03-08_at_16.05.16](/uploads/2b5e779650aae43fdd254b513cb92657/Screenshot_2023-03-08_at_16.05.16.png)        | ![Screenshot_2023-03-08_at_16.05.37](/uploads/4922e758f5fb687b9b2e10816e88fb10/Screenshot_2023-03-08_at_16.05.37.png)  |


### Proposal

In the [Marketplace openapi.yaml](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/doc/api/marketplace_openapi.yaml?plain=1):
  - Add meaningful descriptions for all request parameters and response fields.
  - Specify which parameters are required.
  - Provide type of parameter and field (boolean, string, integer).

This will also ensure the spec is aligned with the [OpenAPI Specification](https://oai.github.io/Documentation/specification).

### Who can complete this issue

- A developer with knowledge of the API to update the Marketplace openapi.yaml.
- A technical writer to review for style, language, and comprehension.

### Next steps (if any)

### How will we measure success?",2
124953662,2023-03-08 09:34:20.413,Simplify Salesforce classes arguments forwarding,"There are several Salesforce classes, the class method `def self.execute` and initializer `def initialize` have a long argument list.

Explicitly declare such as long argument list has some disadvantages:
- every copy of these argument lists need to be updated, when we update(add, rename, or remove) an argument
- the codes looks messy, thus less readable

We could use the `triple-dot syntax` to simplify them. As we already used in several codes in CustomersDot, such as in [CreateSalesforceContactService](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/46f7dda523ae373270a8ad0cdba4facfdc972083/app/services/create_salesforce_contact_service.rb#L4-6)

```
  def self.execute(...)
    new(...).execute
  end

```

### Problem

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",1
124909569,2023-03-07 20:47:00.270,Remove instances of AmendSubscriptionService in specs,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

There are a few instances where in `AmendSubscriptionService` is stubbed in specs such as:

- [`SubscriptionsController` spec](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/54d8d8bbda8810f42e5403861b852abb6da1b950/spec/controllers/subscriptions_controller_spec.rb#L1194)
- [Renewal](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/54d8d8bbda8810f42e5403861b852abb6da1b950/spec/features/existing_customers/renewal_spec.rb#L10) spec

Most of them use Order related services, and the invocation of `AmendSubscriptionService` is duplicated.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Find and remove the `AmendSubscriptionService` stub. Ensure no changes to current functionality of existing specs and that they continue to pass.

### Result

### Next steps (if any)

### How will we measure success?",1
124889062,2023-03-07 15:10:24.817,Remove activation code display dependency on super_sonics_aware,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
Given the [backfill completed that generated activation codes for all remaining customers](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5604), any customer with customer portal access should be able to self-activate with cloud licensing. Because cloud licensing does not have any legal terms component, there is no reason to have a condition on whether or not to display the activation code based on if the customer is super sonics aware or not.

### Proposal
Remove the `super_sonics_aware` check for the different displays of legacy license / activation codes in the customer portal.

Related code is here: https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/f628a9a0ffc0d6a99181684bab3c417eb671d1a7/app/presenters/subscription_presenter.rb#L213

### Result
Any customer with customer portal access can self-activate cloud licensing, as outlined in https://gitlab.com/gitlab-org/fulfillment-meta/-/issues/1034+.

### Reported Examples

1. https://gitlab.zendesk.com/agent/tickets/385142
2. https://gitlab.zendesk.com/agent/tickets/378605",2
124888581,2023-03-07 15:02:01.887,Show Bill To / Sold To instead of Customer data at checkout if Customer has a membership,"### Proposal

At checkout, for Customers with BillingAccountMemberships, let's show Bill To / Sold To Contact information instead of Customer information.  You can see how the Customer information is presented in the screenshot below.

This change should be behind [the feature flag](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5873), `key_contacts_management`.

![Screenshot_2023-03-07_at_10.05.39_AM](/uploads/6fb9f7796617922d277fef16e6b098af/Screenshot_2023-03-07_at_10.05.39_AM.png)",2
124886706,2023-03-07 14:36:05.435,Hide address fields in Account details form if Customer has a membership,"### Proposal

On the Account Details form when logged in as a Customer (shown below), the address fields should be removed when a Customer has a BillingAccountMembership.  The Customer address fields will not be used in app logic when a Customer converts to a paid Customer (ie. has a membership with a BillingAccount).

This change should be behind [the feature flag](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5873), `key_contacts_management`.

![Screenshot_2023-03-07_at_9.39.43_AM](/uploads/be7c9544175ac1672e45b7368a6d590c/Screenshot_2023-03-07_at_9.39.43_AM.png)",2
124885673,2023-03-07 14:21:31.360,Hide address fields in the Admin if Customer has a membership,"### Proposal

On the Customer show page in CDot Admin (shown below), hide the address fields when a Customer has a BillingAccountMembership.  The Customer address fields will not be used in app logic when a Customer converts to a paid Customer (ie. has a membership with a BillingAccount).

This change should be behind [the feature flag](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5874), `key_contacts_management_admin`.

![Screenshot_2023-03-07_at_9.43.28_AM](/uploads/f9e7079bda2107febb526599aba80756/Screenshot_2023-03-07_at_9.43.28_AM.png)",1
124885043,2023-03-07 14:11:15.841,Upgrade rspec-rails to version 6,"Update `rspec-rails` gem from `4.0.1` to `6.0.1`.

Changelog: https://github.com/rspec/rspec-rails/blob/main/Changelog.md

It provides support for Rails 7 and fixes some of the tests that are failing for Rails 7 at the moment.",1
124816543,2023-03-06 18:05:08.556,Track License Type on License detail view in CustomersDot Admin,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
When viewing `Licenses` in CustomersDot Admin, you can sort licenses by type of Cloud, Offline Cloud, Legacy Licenses & Trial. However, when I click on the `Show` button to view details of an individual license, I can't see from that view the license type. It would be helpful to have this so when I look at an individual license, I can easily identify the type.

![image](/uploads/679b02d3e96e240d8616980fc0ed881c/image.png)

### Proposal


Add a field that tracks type of license in this screen:

![image](/uploads/6a3d5cb8aef73ce1a23a901d1548c194/image.png)

It could also be useful to add this as a column in the `List of Licenses` view if possible.

### Result
From the detail license view, I can tell what license type it is.

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

- Tests should be added to ensure that this new data appears on the Show page.  (Feature? Controller#show spec?)
- Test that the column appears in the `List of Licenses` view",1
124809222,2023-03-06 16:11:21.673,Deprecate Customer address fields if a membership exists,"### Problem

There are a few places in the application that use Customer address information.  There could be places however that should use the address information from the Zuora Account key contacts instead.

### Proposal

Let's remove the usage of Customer address fields if a BillingAccountMembership exists for that Customer.  This could involve the following:

- [x] Review all app code for places where address is referenced from Customer.
- [x] Update any places where the address data can be accessed from the Billing Account key contacts.",2
124780511,2023-03-06 09:16:25.254,Remove add_column_with_default migration helper,"Remove `add_column_with_default` migration helper.

**Why?** `type_cast` method removed support for specifying the column but, luckily, we can remove this migration helper as we migrated to PSQL 12 and it's no longer required.",1
124718481,2023-03-04 00:43:04.551,Consider disable/hide the production Marketplace openapi doc page,"ATM the Marketplace openapi doc page is available on all environments:
- https://customers.gitlab.com/openapi_docs/marketplace
- https://customers.staging.gitlab.com/openapi_docs/marketplace
- http://localhost:5000

Should we consider to hide this page on production server(https://customers.gitlab.com/openapi_docs/marketplace)?
- For openapi doc purpose, staging server is enough for people to understand and try/play with the APIs
- I think we do not expect anyone will play those APIs on production server. 
   - It is dangerous. If people `place order` from the production page, it does **not** go through Marketplace partner's system. there is no history on partner's system to audit -- which is not expected I think. 
   - It does not bring too much convenience either. People needs to have Marketplace partner's **production client_id/client_secret** to be able to try the APIs on production page https://customers.gitlab.com/openapi_docs/marketplace. 
      - For GitLab developers, if for issue investigation, we would directly get that data from DB, rather than `get client_id/client_secret from DB, and then go back to the web page to try`.

So, the proposal is, hide the production page https://customers.gitlab.com/openapi_docs/marketplace. It is only available on non-production environmebnt(staging, localhost, stag-ref)
   - another option is: disable `try it out` feature on production. -- I do not prefer this option, because: unless we have an easier way to switch it off, it may require us to maintain a separate copy of [marketplace_openapi.yaml](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/doc/api/marketplace_openapi.yaml)


BTW: the [Marketplace partners overview page](https://docs.gitlab.com/ee/integration/partner_marketplace.html#marketplace-api-specification) only link to staging server(https://customers.staging.gitlab.com/openapi_docs/marketplace)

### Problem

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?",1
124704198,2023-03-03 17:53:44.508,Refactor Salesforce object creation logic to remove references of Subscribe and Amend API,"The following discussion from !6635 should be addressed:

- [ ] @qzhaogitlab started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6635#note_1298549447):  (+2 comments)

    > **sorry another question**: this [code](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/7c69ad620b411f58fe3d1370fba65f6826c15439/app/services/salesforce/create_quote_objects_service.rb#L58-65) might be able to clean up. 
    > 
    > Am I right that, it should not go to this condition `elsif amendments.empty?` any more?  After removed `Zuora::Actions::Subscribe`, the logic here looks still safe, though. 
    > 
    > But, maybe we could keep it here, and we will clean up this code after we removed `Zuora::Actions::Amend` in the future? Is this the plan? 
    > 
    > ```
    >       if order_number.present?
    >         handle_with_zuora_order(quote_result)
    >       # fallback to existing Subscribe/Amend API implementation
    >       elsif amendments.empty?
    >         handle_new_subscription(quote_result)
    >       else
    >         handle_existing_subscription(quote_result)
    >       end
    > 
    > ``

As noted in the thread above, there are a couple of refactoring improvements that can be done in the SalesForce object / opportunity creation workflow:

- [x] Pass `order_number` when creating SalesForce objects in the new subscription workflow. This will result in the [`handle_with_zuora_order` method](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/7c69ad620b411f58fe3d1370fba65f6826c15439/app/services/salesforce/create_quote_objects_service.rb#L59) to be invoked. As it already invokes the `handle_new_subscription` method if `CreateSubscription` order action is present, the objects should be created as expected. MR: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6696
- [x] remove method #handle_existing_subscription and #create_objects_for_existing_subscription in favor of #handle_with_zuora_order in Salesforce::CreateQuoteObjectsService (MR: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6721) 

**Parameter changes**:

- [x] `amendments` parameter can be dropped as well as Orders API does not pass `amendments`.  (MR: https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6721) 
- [ ] ~~`order_number` is currently an optional parameter. We can make it mandatory param similar to `subscription_name`, `invoice_id` by moving it up in the param list. The default value of `nil` could be misleading. This should help in contributing towards https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4994 to a slight extent :slight_smile:~~ See https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5862#note_1302778650",3
124642142,2023-03-02 18:10:46.992,Remove references of Subscribe and Amend API from documentation,"The following discussion from !6635 should be addressed:

- [x] @qzhaogitlab started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6635#note_1298514821):  (+1 comment)

    > **question**: while `Zuora::Actions::Subscribe` is removed, there are still some reference in some documentation. WDYT of create some followup issue for documentation cleanup?  Or, maybe we already have issue for this purpose? 
    > 
    > For example, some documents refer to `Subscribe`, such as 
    > - doc/flows/purchase_flow.md: 
    >    - C->>Z: Request to create Subscription (POST /v1/orders OR POST /v1/action/subscribe)
    >    - Z->>C: Callout to /zuora_callback/order_processed (Orders API) OR /zuora_callback/subscription_update (Subscribe API)
    > - ... ...",1
124635475,2023-03-02 16:01:00.515,Vue 2 to 3 migration working group,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
- [Vue3 breaking changes](https://v3-migration.vuejs.org/breaking-changes/)
- [Output of ESLint Vue3-essentials run](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/6878) 

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

### Result

### Next steps (if any)

### How will we measure success?

### Implementation Options
- Investigate [Vue CodeMod](https://github.com/vuejs/vue-codemod)
- Investigate other codemod frameworks (ex: https://github.com/facebook/jscodeshift)

### @Vue/Compat Changes
Lets us maintain compatibility between Vue2 and Vue3. Example [GitLab epic](https://gitlab.com/groups/gitlab-org/-/epics/9013).
- [ ] Allow option for Jest tests to run with compat 
  - [Gitlab UI MR](https://gitlab.com/gitlab-org/gitlab-ui/-/merge_requests/3087/diffs#881d5d47bdc17ef8facebef59b68b5fc099a0293_2_10) , [issue](https://gitlab.com/gitlab-org/gitlab-ui/-/issues/1984)
  - Can be introduced before test fixes so that infrastructure is in place when ready to swap over

### Test Improvements (from https://gitlab.com/groups/gitlab-org/-/epics/5102#plan)

* [x] [Upgrade @vue/test-utils to 1.x version](https://gitlab.com/groups/gitlab-org/-/epics/4255)
  * **Why?** Our current version is more than one year old. It has multiple annoying bugs fixed in current version. Additionally new version contains significant deprecations (which leads to higher quality tests) and important runtime validations (for example, operating on destroyed wrappers will throw warnings)
  * **How?** Fix failing tests and VTU itself
* [x] [Act on each kind of deprecations in @vue/test-utils 1.x](https://gitlab.com/groups/gitlab-org/-/epics/3856)
  * **Why?** Each deprecation is road blocker for upgrade to Vue3. Most of deprecations are bad code smells
  * **How?** See relevant epic for details. Some of deprecations are just ""find & replace"" things, some (like usage of `methods` and `setMethods`) requires significant specs refactoring
* [ ] Cleanup codebase based on new VTU features (epic TBD)
  * **Why?** Improve and simplify our test suite. Get rid of that `nextTick`!
  * **How?** Search and destroy. Some of these things could be done with codemod
  - [ ] Remove excessive `nextTick` calls. `trigger`, `setProps`, etc. now return `nextTick` inside, so they could be just awaited
  - [ ] Remove useless stubs. VTU now renders all slots by default, so some stubs could be removed
* [ ] Remove `localVue` usage - [Issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/6058)
  * **Why?** `localVue` is one of the most confusing feature in `@vue/test-utils` and [we do not need it at all](https://gitlab.com/gitlab-org/gitlab/-/issues/220482)
  * **How?** 95% of this action could be done via code mod + [we have MR pending with fix](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/47729)
* [x] [Convert remaining tests from our legacy `mountComponent` / `mountComponentWithStore` helpers to `@vue/test-utils`](https://gitlab.com/groups/gitlab-org/-/epics/5110)
  * **Why?** `@vue/test-utils` is official supported way of testing components
  * **How?** Rewrite each test manually :cry: 
* [ ] [Clean unnecessary 'Vue.extend' uses in Jest tests](https://gitlab.com/groups/gitlab-org/-/epics/2418)
  * **Why?** It is simply not needed and adds additional complexity and slowness to our test suite
  * **How?** Most of these could be removed with codemod
* [x] Unify our `nextTick` usage
  * **Why?** See [RFC](https://gitlab.com/gitlab-org/frontend/rfcs/-/issues/47) for rationale
  * **How?** Most of these could be done with codemod
* [ ] Switch to `async` / `await`
  * **Why?** See excellent [RFC by @rkuba](https://gitlab.com/gitlab-org/frontend/rfcs/-/issues/45) for details 
  * **How?** Some of these could be implemented with codemod
* [ ] [Remove direct modification of Vue instances](https://gitlab.com/groups/gitlab-org/-/epics/5105)
  * **Why?** Modifying internal instance state makes test fragile and leaks implementation details to the test
  * **How?** Each case should be approached individually :cry: 
* [ ] [Remove spying on Vue components methods](https://gitlab.com/groups/gitlab-org/-/epics/5106)
  * **Why?** Modifying internal instance behavior decreases test value and leaks implementation details to the test
  * **How?** Each case should be approached individually :cry:
* [ ] Implement eslint rules to prevent most annoying issues
  * **Why?** Everything what could be automated should be automated
  * [ ] https://gitlab.com/gitlab-org/frontend/eslint-plugin/-/issues/12
  * [x] [mountHelper](https://gitlab.com/gitlab-org/frontend/eslint-plugin/-/issues/9)
* [ ] Update docs to reflect recent changes
* [x] [Simplify our tests with `enableAutoDestroy`](https://gitlab.com/groups/gitlab-org/-/epics/8915)
  * **Why?** teardown of wrappers happens in each test we use. We could automate it with new VTU feature
  * **How?** [GitLab implementation](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/100389/diffs#2ac2280da424b755cb0a2f4e999a182bd6fed132_15_16)
  * [ESLint rule](https://gitlab.com/gitlab-org/frontend/eslint-plugin/-/merge_requests/99/diffs) was introduced in GL
* [ ] Get rid of old callback style tests, replace it with promise-based
* [ ] [Get rid of `setData` calls and `data()` as mount option in Vue testing suite](https://gitlab.com/groups/gitlab-org/-/epics/7330)",2
124631711,2023-03-02 15:02:36.349,Orders entity not used when calculating EoA renewal price,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

When a subscription is renewed based on EoA starter / bronze offer terms, the [description in the amendment record](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/e88993e6fa567f72e1eb5207be0a87954f16cc5c/app/services/amendment_base_service.rb#L162) is set to `'EoA Bronze / Starter Price Uplift'`. With the transition to Orders API, this description was set in the charge overrides, accessible in Rate plan charge record (source: [`AddProduct`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/e88993e6fa567f72e1eb5207be0a87954f16cc5c/app/services/zuora/orders/actions/param_constructor/add_product.rb#L73), [`UpdateProduct`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/e88993e6fa567f72e1eb5207be0a87954f16cc5c/app/services/zuora/orders/actions/param_constructor/update_product.rb#L28) order actions)

However, while calculating the renewal price, we use the [count of amendments](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/e88993e6fa567f72e1eb5207be0a87954f16cc5c/app/services/eoa_starter_bronze/offer_renewals_count_service.rb#L14) that have description set to `'EoA Bronze / Starter Price Uplift'`. It does not account for the charge overrides, which can result in a lower count and thereby returning the lower tier price.

This should likely not have an impact as of now, as we transitioned to Orders API for renewals on [January 19th](use_orders_api_subscription_update_workflow). For all EoA starter / bronze renewals following it, the count of description in amendment records represent the correct count. The charge overrides description will become relevant when the subscriptions are renewed the next time (i.e. the following year).

Spot checked a few subscriptions in production:

- [A-S00014461](https://www.zuora.com/apps/Subscription.do?method=view&id=8a12881086832d1e0186a19b26c312a2) (related renewal [Order](https://www.zuora.com/orders#/view/O-00100142))
- [A-S00008155](https://www.zuora.com/apps/Subscription.do?method=view&id=8a12827c86832d1d01869ed74c622ff7) (related renewal [Order](https://www.zuora.com/orders#/view/O-00103234)) 
- [A-S00038277](https://www.zuora.com/apps/Subscription.do?method=view&id=8a12827c86832d1d0186990541d41535) (related renewal [Order](https://www.zuora.com/orders#/view/O-00094065))

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

When calculating the next renewal price for EoA starter / bronze subscriptions, use Amendment description **and** charge overrides description. 

### Result

EoA step price is calculated accurately.

### Next steps (if any)

### How will we measure success?",2
124616010,2023-03-02 10:58:02.579,Add word wrapping to namespace selector,"### Problem

The namespace selector label is wider tat the form itself (screenshot is from Change linked namespace page)

![Screenshot_2023-03-02_at_10.28.41_AM](/uploads/8e6c1e070a8a3cce1addb7553c44230d/Screenshot_2023-03-02_at_10.28.41_AM.png)

### Proposal

Add word wrapping to the namespace selector

### Result

### Next steps (if any)

### How will we measure success?",1
124407120,2023-02-28 09:25:06.255,Upgrade flipper and related gems,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

Update `flipper` and all related gems to support Rails 7.

## Breaking changes

None.",2
124268389,2023-02-24 17:14:04.013,[Code cleanup] Deprecate Subscribe API related services,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Now that we have transitioned to Orders API to create subscription, services used in the Subscribe API can be removed.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

With the migration to Orders API to create subscription, this MR removes a few outdates classes:

* `SubscribeService` used to create subscription using Subscribe API
* job to invoke Subscribe API (`Zuora::Actions::Subscribe`)
* stubbing of Zuora Subscribe API in `StubZuoraCalls`

### Result

### Next steps (if any)

### How will we measure success?",1
124202822,2023-02-23 15:45:48.770,Use Orders API in PostZuoraRefreshTask,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

`PostZuoraRefreshTask` currently uses [`SubscribeService`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/89d7d77cb32369f6e061cdefd667db637672e2dd/lib/tasks/quality/post_zuora_refresh.rake#L27) to create subscription for E2E pipeline after Zuora Central Box is refreshed.

### Proposal

<!-- Consult with `@gitlab-com/business-technology/enterprise-apps/zuora-architects` on the ~""Enterprise Applications"" team if Zuora business logic is involved. -->

Update the task to use Orders API instead.

### Result

### Next steps (if any)

### How will we measure success?",1
124157432,2023-02-23 00:07:51.010,"Investigate renewal auto-discount ""should_show_promo_message""","### Problem
The field we use to [control promo messaging during a manual renewal, ""should_show_promo_message""](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/app/views/subscriptions/renew.html.haml#L11) is not behaving consistently.

For subscription `A-S00198548` in `staging`, the field is `false` when viewing https://customers.staging.gitlab.com/subscriptions/A-S00198548/renew, but checking it in a console returns true.

- This could be because of the memoization we do here https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/app/models/subscription.rb#L681
- Since this is used in the context of a manual renewal, we should check if we are changing products, similar to https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/app/services/self_service/subscriptions/update_service.rb#L87",1
124130262,2023-02-22 14:15:46.040,Ramp subscription with storage add-on in different intervals syncs all add-ons directly,"### Problem

When a ramp subscription has a storage add-on in interval 1 and another one in interval 2, both storage add-ons will be synced directly to GitLab.com.

### Proposal

The storage amount is calculated in [Gitlab::HostedPlans::PurchasedAddOns](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/67d97edcc5db3acfb89d89045911556380a49e94/app/services/gitlab/hosted_plans/purchased_add_ons/storage_service.rb). To sync the right amount, the storage add-ons need to be checked for the term start date.

### Result

Syncing correct amount of storage add-ons for ramp subscriptions.

### Next steps (if any)

### How will we measure success?",2
124129905,2023-02-22 14:10:44.080,Skip notification check for Online Cloud ramp subscription raises error,"### Problem

While testing ramp scenarios for https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/5468+, I encountered an exception `undefined method 'attributes' for nil:NilClass` when renewing a Online Cloud ramp subscription that was previously activated on an instance. This happens because when the `LicenseNotificationService` is called for an Online Cloud subscription the `license` method [returns `nil`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/a034215fb51579f24072cdaa45b6975cecf7c4bc/app/services/license_notification_service.rb#L34) which will then fail when checking if the notification should be skipped [here](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/a034215fb51579f24072cdaa45b6975cecf7c4bc/app/services/license_notification_service.rb#L92). More specifically, it fails when the most recent license is compared to the license which return `nil`.

While an error is raised, the service is still sending out the emails to the customer. But if a reseller email has to be sent it would fail.

### Proposal

Return early in the skip notification check when the subscription is for an Online Cloud subscription.

### Result

Fix the exception and allow reseller emails to be sent.",1
124119042,2023-02-22 11:00:50.361,Work with tracking locally without manually updating code to point to port,"### Problem

Currently to debug local tracking we need to manually update [tracking.rb#L93](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/lib/gitlab/tracking.rb#L93) to point it to port `9090`. This is the port for [snowplow-micro](https://gitlab.com/gitlab-org/snowplow-micro-configuration) that we use for local test configuration.

### Proposal

Introduce a condition that would check `Rails.env.development?` and set `SnowplowTracker::AsyncEmitter.new('localhost:9090', protocol: 'http')` if it's a dev environment.

Update existing docs -> remove the manual step from it.

### Result

Better dev workflow for manual tracking testing :star:",1
124108984,2023-02-22 08:31:36.964,Upgrade Rails gem to 7.0,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

Official migration guide from Rails 6.1 to Rails 7 - https://guides.rubyonrails.org/upgrading_ruby_on_rails.html#upgrading-from-rails-6-1-to-rails-7-0

This issue covers the gem update and resolving any test failure we might encounter after updating it.

- [x] Update `rails` gem to 7
- [x] Run https://guides.rubyonrails.org/upgrading_ruby_on_rails.html#the-update-task
 
# Things to verify

- [x] tests!
- [x] https://guides.rubyonrails.org/upgrading_ruby_on_rails.html#key-generator-digest-class-changing-to-use-sha256 Possible drop of sessions if we not include cookie rotator. We use Devise and it uses SHA256 already so, in theory, we should not be affected.",2
124108770,2023-02-22 08:26:16.397,Update health_check gem,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

Officially this gem does not support Rails 7 yet but maintainers say it should work - https://github.com/Purple-Devs/health_check/issues/123

# Breaking changes

See the issue above for the note about SMTP settings.",2
124108727,2023-02-22 08:25:42.558,Update ActiveSupport cache format to version 7,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

Once the #5794 is deployed and all Puma workers are booted we can switch the serialization format to version 7. https://guides.rubyonrails.org/upgrading_ruby_on_rails.html#new-activesupport-cache-serialization-format",1
124108723,2023-02-22 08:25:35.384,Pin ActiveSupport cache format to version 6.1,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

Rails 7 introduced new serialization format for ActiveSupport but before enabling it we must ensure all existing Puma workers still use the old format as new format can't be decoded by Rails 7 workers. 

https://guides.rubyonrails.org/upgrading_ruby_on_rails.html#new-activesupport-cache-serialization-format",1
124108714,2023-02-22 08:25:16.483,Remove active_record_data_types,"We have a special mapping configured for time zone aware `DateTime`s in `ActiveRecord`. This file was copied from GitLab but not it blocks our upgrade to Rails 7:

1. https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/config/initializers/active_record_data_types.rb
2. https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/main/config/initializers/active_record_table_definition.rb

Current mappings between ActiveRecord and PostgreSQL data types:

```ruby
[[:binary, {:name=>""bytea""}],
 [:bit, {:name=>""bit""}],
 [:bit_varying, {:name=>""bit varying""}],
 [:boolean, {:name=>""boolean""}],
 [:box, {:name=>""box""}],
 [:cidr, {:name=>""cidr""}],
 [:circle, {:name=>""circle""}],
 [:citext, {:name=>""citext""}],
 [:date, {:name=>""date""}],
 [:daterange, {:name=>""daterange""}],
 [:datetime, {:name=>""timestamp""}],
 [:datetime_with_timezone, {:name=>""timestamptz""}],
 [:decimal, {:name=>""decimal""}],
 [:float, {:name=>""float""}],
 [:hstore, {:name=>""hstore""}],
 [:inet, {:name=>""inet""}],
 [:int4range, {:name=>""int4range""}],
 [:int8range, {:name=>""int8range""}],
 [:integer, {:name=>""integer"", :limit=>4}],
 [:interval, {:name=>""interval""}],
 [:json, {:name=>""json""}],
 [:jsonb, {:name=>""jsonb""}],
 [:line, {:name=>""line""}],
 [:lseg, {:name=>""lseg""}],
 [:ltree, {:name=>""ltree""}],
 [:macaddr, {:name=>""macaddr""}],
 [:money, {:name=>""money""}],
 [:numrange, {:name=>""numrange""}],
 [:oid, {:name=>""oid""}],
 [:path, {:name=>""path""}],
 [:point, {:name=>""point""}],
 [:polygon, {:name=>""polygon""}],
 [:primary_key, ""bigserial primary key""],
 [:string, {:name=>""character varying""}],
 [:text, {:name=>""text""}],
 [:time, {:name=>""time""}],
 [:tsrange, {:name=>""tsrange""}],
 [:tstzrange, {:name=>""tstzrange""}],
 [:tsvector, {:name=>""tsvector""}],
 [:uuid, {:name=>""uuid""}],
 [:xml, {:name=>""xml""}]]
```",1
124107891,2023-02-22 08:15:48.462,Update paper_trail gem to 12.3.0,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

`paper_trail` added support for Rails 7 in [12.2.0](https://github.com/paper-trail-gem/paper_trail/blob/master/CHANGELOG.md#1220-2022-01-21). We need to update this gem to version 13 at least.

# Breaking changes

~~Despite version 12 has [some breaking changes](https://github.com/paper-trail-gem/paper_trail/blob/master/CHANGELOG.md#1200-2021-03-29) and [version 13 too](https://github.com/paper-trail-gem/paper_trail/blob/master/CHANGELOG.md#1300-2022-08-15) I don't think we are affected by them.~~",2
124107820,2023-02-22 08:15:08.092,Update spring to version 4,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

`spring` gem doesn't support Rails 7 out of the box so we have to update it to version 3 at least.

# Breaking changes

None.",1
124107809,2023-02-22 08:14:57.070,Update simple_token_authentication gem,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

`simple_token_authentication` gem depends on `actionmailer` and `actionpack` gems:

```
actionmailer (>= 3.2.6, < 7)
actionpack (>= 3.2.6, < 7)
```

These gems will be updated to version 7 so `simple_token_authentication` blocks the Rails 7 upgrade. 
Just upgrade this gem.

# Breaking changes

None.",1
124080145,2023-02-21 20:51:20.534,Remove seat check validation for cloud licenses,"
### Problem
There is currently a seat check in place for activating a cloud license when true-ups are present: https://gitlab.com/gitlab-org/gitlab/-/blob/9d97c3c6dea8569b4a05ed510811a6dc0a699357/ee/app/models/license.rb#L511

This can result in customers being blocked from accessing their purchased self-managed subscriptions.

### Proposal

Remove the seat check validation for cloud licenses (whether true-ups are present or not).

### Result
A customer can access a self-managed subscription with cloud licensing without any current user check occurring.",2
124047780,2023-02-21 10:29:36.198,Add cancel/resume subscription specific tracking,"### Problem

Currently we are tracking clicks on subscription card buttons. This shows a general interest on features but doesn't reflect that user wants to actually do this action.

### Proposal

Update the existing tracking for subscription card buttons and add tracking to the actual pages.

Attention: some tracking is already implemented, we would just need to update the event labels & actions.

#### Cancel subscription

For all the tracking events set `event_label` as `cancel_subscription_sm` / `cancel_subscription_saas`

**Attention:** The modal only exists for SaaS users

| FE/BE | Page | Description | Event category | Event action |
| ------ | ------ | ------ |  ------ | ------ |
|FE| `/subscriptions/` | ![Screenshot_2022-11-15_at_21.55.26](/uploads/b997c4aa43267f33dabffdf69e9b801d/Screenshot_2022-11-15_at_21.55.26.png) <br> User clicks `Cancel subscription` button <br>  | Webstore | `click_card` |
|FE| `subscriptions/` | ![Screenshot_2022-11-15_at_21.56.18](/uploads/92463230fe641805f0c917d65862cf1c/Screenshot_2022-11-15_at_21.56.18.png) <br> In the modal that appears user clicks `Cancel subscription` button <br>  | Webstore | `click_modal` |
|BE| - | Transaction is successful  | SubscriptionsController | `transaction_successful` |
|BE| - | Transaction has failed **Note:** we don't have a try/catch around this action, we might need to add it to catch this failure | SubscriptionsController | `transaction_failed` |

#### Resume subscription

For all the tracking events set `event_label` as `resume_subscription_sm` / `resume_subscription_saas`

**Attention:** There is extra confirmation, the click on the button on the card is the only FE event

| FE/BE | Page | Description | Event category | Event action |
| ------ | ------ | ------ |  ------ | ------ |
|FE| `/subscriptions/` | ![Screenshot_2022-11-15_at_22.02.20](/uploads/cd9d2f1c24951046bdad9015dcbb6827/Screenshot_2022-11-15_at_22.02.20.png) <br> User clicks `Resume subscription` button <br>  | Webstore | `click_card` |
|BE| - | Transaction is successful  | SubscriptionsController | `transaction_successful` |
|BE| - | Transaction has failed  | SubscriptionsController | `transaction_failed` |

### Next steps (if any)

After the issue is done please let `@nraisinghani` know because we need to update the values in the related dashboard.",2
28833008,2019-12-17 15:53:02.419,Slightly broken style for editing ACH payment method,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you're about to submit isn't a duplicate.

Do not include confidential information! 
--->

### Summary

Editing an ACH account is broken, I believe it like that for too long.

### Steps to reproduce

1. Login with an account that has ACH payment method
1. Go to payment methods page
1. Edit an ACH payment method account
1. Notice the broken style

### What is the current *bug* behavior?

Slightly broken style

### What is the expected *correct* behavior?

Correct centered style without borders touching other borders.

### Relevant logs and/or screenshots

![Screen_Shot_2019-12-16_at_17.10.56](/uploads/128044f42fbcc5ac70fdfc5c992fce0a/Screen_Shot_2019-12-16_at_17.10.56.png)


<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",3
28820116,2019-12-17 10:12:42.889,Wrong text color for .alert-info,"### Summary

Wrong text color for `.alert-info`, it's showing white text instead of `#0c5460`. I believe it's related to scss imports orders.


### Steps to reproduce

1. Login to the customers portal with an account that doesn't have any invoice.
2. Go to the invoices page.
3. Notice the alert that says ""You do not currently have any invoices.""

### What is the current *bug* behavior?

White text on a light background, barely readable.

### What is the expected *correct* behavior?

Dark text (`#0c5460`) on a light background.

### Relevant logs and/or screenshots

![Screen_Shot_2019-12-17_at_13.04.59](/uploads/cf75312848608352b1f44e819ddaa43f/Screen_Shot_2019-12-17_at_13.04.59.png)",3
28513785,2019-12-13 09:52:44.285,Enable Pajamas styles without effecting non-migrated pages,"
<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

Related: https://gitlab.com/gitlab-org/customers-gitlab-com/issues/936

### Problem

How can we enable Pajamas styles without affecting non-converted pages (see overrides already introduced here https://gitlab.com/gitlab-org/customers-gitlab-com/blob/staging/app/frontend/stylesheets/_overrides.scss)

### Proposal

Determine strategy for preventing style bleedover.

* Ensure no naming overlap
* Ensure overrides are in place for name overlap 

### Result

We can turn `pajamas_design_system` on without effecting non-migrated pages

### Next steps (if any)

### How will we measure success?",3
28441243,2019-12-13 02:52:07.107,Rename Salesforce-related workers to use Salesforce namespace,"The following discussion from !815 should be addressed:

- [ ] @jejacks0n started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/815#note_259585437):  (+1 comment)

    > Salesforce::CreateOpportunityWorker?
    > 
    > I know, let's not go renaming a worker without a shim, but introducing a Salesforce namespace makes some sense based on the rest of my review.",2
28427415,2019-12-12 22:52:36.878,Add %w[] to be the enforced syntax in Rubocop rules,"### Problem

We see changes requested on MRs and we should add linting rules for these things when they come up so they don't delay or block MR reviews.

### Proposal

You can [see that a maintainer is looking for consistency](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/693#note_246783831) around using `%w()` vs. `%w[]`. A great way to handle this is to use linting rules. I propose we add this to the official linting rules if this is the case on the gitlab repo.

### Result

We'll see less comments on MRs around linting rules that are undefined and contributors will have less specific knowledge to be aware of.

### Next steps (if any)

Enjoy not having to think about this.

### How will we measure success?

Maybe less delays on MRs?",1
28425056,2019-12-12 21:38:00.774,Users should be able to purchase a .com plan while on trial,"### Problem

This issue was addressed in https://gitlab.com/gitlab-org/customers-gitlab-com/issues/355 but unfortunately continues to exist. Users continue to submit tickets to support and we have manually disable the trial so they can purchase. 
 
![Screen_Shot_2019-12-12_at_5.24.29_PM](/uploads/0dcaee500709d9aa2136b7d0de051260/Screen_Shot_2019-12-12_at_5.24.29_PM.png)

### Steps to reproduce 
 
Have admin access to a free namespace > Start a trial in that namespace > select an upgrade option/navigate to the customers app > log in (creating separate issues for problems related to this) > select to purchase Bronze/Silver or Gold > attempt to upgrade the namespace that's active in the trial and you will be unable to it will be grayed out as seen in the screenshot above. 
 
### Proposal

Allow users to select their group during the purchase process even if the group is part of a trial.",2
28411021,2019-12-12 15:13:28.318,[Deprecate Zuora SOAP] Remove SOAP code in the workers,"### Problem
Once the Zuora REST update is complete and the SOAP code is no longer needed, we will have plenty of unused legacy code that should be removed.

### Proposal
We can remove the Zuora SOAP API code and related feature flags. This issue focuses on cleaning up the SOAP logic and feature flags found in the workers which was added in #924.

As mentioned in [this discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/842/diffs#note_266564532), while we are removing the feature flag, we could also remove [the `Zuora::Invoice.invoice_files` method](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/842/diffs#6a78e4db8c9a26637fed7d2e2ae66f3fc6da5d50_9_14) in favor of an association (`with_many :invoice_files`) instead.

### Result
A cleaner code base with less feature flags.

### Next steps (if any)

### How will we measure success?",1
28410910,2019-12-12 15:09:43.806,[Deprecate Zuora SOAP] Remove SOAP code related to the Zuora callback controller,"### Problem
Once the Zuora REST update is complete and the SOAP code is no longer needed, we will have plenty of unused legacy code that should be removed.

### Proposal
We can remove the Zuora SOAP API code and related feature flags. This issue focuses on cleaning up the SOAP logic and feature flags found in the `ZuoraCallbacksController` which was added in #923.

### Result
A cleaner code base with less feature flags.

### Next steps (if any)

### How will we measure success?",1
28350645,2019-12-12 11:40:50.965,Structural testing of stories,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

Our stories render our components in different scenarios and with different props.

This is a good chance to leverage [storyshots](https://storybook.js.org/docs/testing/structural-testing/) for smoketesting. Read: assert `this component renders without a runtime error`

I strongly recommend using [`renderOnly`](https://github.com/storybookjs/storybook/tree/master/addons/storyshots/storyshots-core#renderonly) to assert the stories since the snapshots will generate too much noise to be of any real use.",3
28346113,2019-12-12 09:48:31.974,Expose source maps to Sentry and reduce noise from ie11 errors,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
Since Sentry does not have access to our javascript source-maps our Sentry bug reports point to a minified bundle.

This makes debugging needlessly hard.
### Proposal
Expose source-maps to Sentry.

Determine whether we should [host or upload source-maps](https://docs.sentry.io/platforms/javascript/sourcemaps/#hosting--uploading) to Sentry.

**Questions about hosting**

Many of our routes are behind an authentication: is this going to be a problem?

**Questions about uploading**

Our JS bundle is generated on a server outside of CI with [cookbooks](https://gitlab.com/gitlab-cookbooks/cookbook-customers-gitlab-com)

Do we need the same server to upload the source-maps?
Is source-map generation deterministic and can be hashed on content?

### How will we measure success?
We're able to make sense of error messages like https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1118262/?query=is:unresolved",5
28313074,2019-12-11 13:47:12.061,Investigate possibility of using JsRoutes for bringing routes to FE,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

We don't have nice and convenient way of getting corrects Rails routes on front-end side or in a Vue application.

### Proposal

Let's investigate possible usage of this gem - [JsRoutes](https://github.com/railsware/js-routes/issues/237)

Consider the simple Vue application that should send a request to the API endpoint `/countries`.  What are our options here to provide the correct route to this Vue application?

**First option: use `data-` attributes from HAML**

```haml
#js-app{ data: { country_end_point: countries_url } }
```

**Pros:**

* We pass the correct URL to the application;
* Changes on the backend will propagate to front-end without making changes to front-end

**Cons:**

* Additional property for the Vue application.

**Second option: `gon` gem**

```ruby
gon.routes = {
  countries_url: countries_url
}
```

```javascript
export default {
  name: 'JsApp',
  methods: {
    fetchCountries() {
      axios.get(gon.routes.countries_url);
    }
  }
}
```

**Pros:**

* We have the correct URL;
* We don't need to create an extra property in the Vue application;
* Changes on the backend will propagate to front-end without making changes to front-end

**Cons:**

* We have to manually add a new route to `gon`;
* We make our component ""too smart"" due to accessing the `gon` inside of it,

**Third option: JsRoutes gem**

```ruby
gon.routes = JsRoute.generate
```

```javascript
export default {
  name: 'JsApp',
  methods: {
    fetchCountries() {
      axios.get(gon.routes.countries_url);
    }
  }
}
```

**Pros:**

* We have the correct URL;
* We don't need to create an extra property in the Vue application;
* Changing the route on the backend doesn't affect the front-end.

**Cons:**

* Extra gem in our `Gemfile`;
* Possible exposing of protected routes.

### Result

### Next steps (if any)

### How will we measure success?",3
28149508,2019-12-09 20:05:47.997,[REST Update] Move Subscribe and Contact service to use REST api,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
The services, viz., `SubscribeService`, `UpdateContactService` and `LicenseNotificationService` is accessing zuora objects using SOAP apis.

### Proposal
Modify the services to use IronBank objects instead.

Also, please verify if any other service has been missed in the above list.

### Result

### Next steps (if any)

### How will we measure success?",2
28149414,2019-12-09 20:01:30.475,[REST Update] Move workers to use REST api,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
The workers, viz., `CreateSalesforceOpportunityWorker`, `CreateAmendmentWorker`, `BulkDownloadInvoice` is accessing zuora objects using SOAP apis.

### Proposal
Modify the workers to use IronBank objects instead.

Also, please verify if any other worker has been missed in the above list.

### Result

### Next steps (if any)

### How will we measure success?",2
28149310,2019-12-09 19:57:27.463,[REST Update] Update Zuora callback controller to use REST apis,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
The zuora callback controller finds subscription using SOAP api.

### Proposal
Update the api call to use the IronBank query instead.

### Result

### Next steps (if any)

### How will we measure success?",1
28149256,2019-12-09 19:54:48.878,[REST Update] Move mailers to use REST apis,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
AdminMailer and CustomerMailer currently fetch records using SOAP apis. 

### Proposal
Add support for the mailers to fetch records from IronBank instead.

### Result

### Next steps (if any)

### How will we measure success?",2
28149158,2019-12-09 19:51:28.918,[REST Update] Download of Invoice files in Payment History page,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
Download of invoices is currently using SOAP apis.

### Proposal
Move the download and display of Invoice files in ReceiptsController to use REST apis from IronBank gem.

### Result

### Next steps (if any)

### How will we measure success?",1
28132391,2019-12-09 12:15:15.603,Add Vue integration to Sentry,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

With a [Vue integration](https://docs.sentry.io/platforms/javascript/vue/) to Sentry we can get a more detailed error report when something breaks in Vue.",1
28108262,2019-12-09 10:25:32.137,Ensure SentryJS does not break local development,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
We're loading Sentry from a CDN https://gitlab.com/gitlab-org/customers-gitlab-com/blob/staging/app%2Fviews%2Fshared%2F_sentry_js_lib.html.haml and exposing it on a global level.

That means that manually calling `captureException` for example in [`payment_methods_plugin`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/staging/app/assets/javascripts/payment_methods_plugin.js#L90) reaches for a global `Sentry`.

Since Sentry is not active in local development, this causes an `undefined` error, which hides what the underlying error actually was.

### Proposal
Package Sentry in an NPM package and ensure it does not break local development.

Not breaking local development is built-in to Sentry, so if we follow the documented setup route; we should be fine.
### Result

### Next steps (if any)

### How will we measure success?",1
28031362,2019-12-06 18:05:51.258,Update frontend packages regularly,"We had a meeting with @leipert about when and how often the project's dependencies should be updated.

The [meeting agenda](https://docs.google.com/document/d/17_xKVL37ao3RAb2N-L7RiYeTIUnSRLmw4eeHSxOWh44/edit) contains drawbacks, benefits and concerns about this topic.

What @leipert suggested we do is to start with gitlab's packages (`@gitlab/ui` and `@gitlab/svgs`) and enable renovate bot to send MRs.

It could start smaller and safer by enabling the bot to update some of the devDependencies like eslint and all related packages, if all went smoothly for couple weeks then we can increase the volume of the packages being updated regularly.

### Proposal

Setup renovate bot to start sending MRs about updated packages.

### Result

Relatively up to date packages, with smaller changes at a time.

### Next steps (if any)

- Schedule the task at a milestone.
- Decide which packages to start with.
- The assignee can consult with @leipert if they needed help.

### How will we measure success?",6
28030292,2019-12-06 17:22:44.700,Handle save failures on updating default payment method - throw and handle exception,"The following discussion from !620 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/620#note_256094641): 

    > You may have already thought about this but I wanted to highlight that this `save!` would have thrown an error before if the save failed, whereas our REST implementation does not.  I tried tracing this upstream and it doesn't appear that we really handle these error gracefully.  I'm also not sure how much it actually occurs.  It may not be worth changing what you've done but we could create a followup ~""technical debt"" issue for gracefully handling this error.  WDYT?",1
28023128,2019-12-06 14:19:26.731,"Change /receipts to /invoices, implement a redirect","<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
We currently have page within the customers portal with the URL `/receipts` that does not actualyl display receipts. It displays invoices. We are updating the front end link titles as part of the pajamas migration to say `View Invoices` but without updating the URL to `/invoices` we may generate some confusion for customers. 

### Proposal
* Change `/receipts` to `/invoices` 
* Implement a redirect on `/receipts` to take users that directly navigate via bookmark/history to `/invoices`

### Result
URLs and link titles reference the same thing - invoices

### Next steps (if any)
* Monitor traffic to `/receipts` and when it gets down to a small number (ex: <10 in a month) remove the redirect",2
27993660,2019-12-05 19:00:50.915,[REST Update] Incorrect value stored when updating a Zuora resource's attribute with `nil` value,"The following discussion from !666 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/666#note_255369755):  (+1 comment)

    > I noticed a bug when testing this on staging after the deploy.  When the `opportunity_id` being updated on the Zuora subscription is `nil`, the resulting value is stored as `""userdata: NULL""` through the REST API logic instead of `nil` as it did with the SOAP logic.  This isn't a blocker for this rolling to production as it's behind the feature flag.  I wanted to note that I'll open an issue to tackle it now.",1
27952958,2019-12-04 20:52:28.810,Add a test that renders the receipts index action,"### Problem
An [MR](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/741/diffs) was introduced that broke the receipts index action.  There was no test coverage for that view so we were unaware the page was broken after deployment to production.  

### Proposal
[We've since reverted the MR](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/788), but as suggested by @jejacks0n, we should at least add test coverage for the receipts index action to avoid this happening in the future.

### Result
Better test coverage, preventing future outages.

### Next steps (if any)

### How will we measure success?",1
27946772,2019-12-04 17:15:31.751,[Deprecate Zuora SOAP] Remove active_zuora gem and references,"### Problem
Once the Zuora REST update is complete and the SOAP code is no longer needed, we will have plenty of unused legacy code that should be removed.

### Proposal
Ensure that no `active_zuora` related code is still in use (e.g. look for references to `Z::`).  Remove all code using `active_zuora` and remove the gem dependency.

Also, remove any remaining references to the `zuora_rest_api` feature flag ([including the default state for specs](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/bd8553ec262bbccf24710272d0bac51fa7da22d7/spec/spec_helper.rb#L21)) or [the `zuora_rest_api` metadata tag](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/staging/spec/rails_helper.rb#L57) in the test suite.

### Result
A cleaner codebase. :sparkles: 

### Next steps (if any)

### How will we measure success?",2
27946630,2019-12-04 17:10:26.930,[Deprecate Zuora SOAP] Remove SOAP code related to listing subscription,"### Problem
Once the Zuora REST update is complete and the SOAP code is no longer needed, we will have plenty of unused legacy code that should be removed.

### Proposal
We can remove the Zuora SOAP API code and related feature flags.  This issue focuses on cleaning up the SOAP logic and feature flags related to listing subscriptions which was added in #761.

### Result
A cleaner code base with less feature flags.

### Next steps (if any)

### How will we measure success?",1
27946536,2019-12-04 17:07:11.760,[Deprecate Zuora SOAP] Remove SOAP code related to subscription amendments,"### Problem
Once the Zuora REST update is complete and the SOAP code is no longer needed, we will have plenty of unused legacy code that should be removed.

### Proposal
We can remove the Zuora SOAP API code and related feature flags. This issue focuses on cleaning up the SOAP logic and feature flags related to subscription amendments which was added in #758.

### Result
A cleaner code base with less feature flags.

### Next steps (if any)

### How will we measure success?",2
27938659,2019-12-04 14:42:04.227,[Deprecate Zuora SOAP] Remove SOAP code related to subscription updates,"### Problem
Once the Zuora REST update is complete and the SOAP code is no longer needed, we will have plenty of unused legacy code that should be removed.

### Proposal
We can remove the Zuora SOAP API code and related feature flags.  This issue focuses on cleaning up the SOAP logic and feature flags related to subscription updates which was added in #759.  [As suggested here](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/666#note_254197888), we can also remove the `Subscription.update` class method as it is no longer needed with the REST implementation.

### Result
A cleaner code base with less feature flags.

### Next steps (if any)

### How will we measure success?",2
27931477,2019-12-04 12:15:28.132,Add set default checkbox to payment method edit method,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

In order to apply the new design for the payment method edit page under the `pajamas_design_system` feature flag, we need to add a checkbox to the form that will set the edited payment method as the default one.

The problem is that change is not handled on the backend.

### Proposal

Introduce the necessary changes under `pajamas_design_system` feature flag to handle adding a checkbox to the edit form that when checked will set the edited payment method as the default one.

### Result

Move forward with &1788 and unblock work on !772.",2
27908493,2019-12-03 20:45:20.668,Move `update_subscription_with_opportunity_id` logic to a Subscription model method,"The following discussion from !666 should be addressed:

- [x] @asubramanian1 started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/666#note_254061488):  (+4 comments)

    > Not sure if this method would belong to controller, since it has database related changes. Do you think it would be better suited to add to a model class?",1
27908356,2019-12-03 20:37:16.993,Consider reusing `update_subscription_with_opportunity_id` in more places,"The following discussion from !666 should be addressed:

- [ ] @asubramanian1 started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/666#note_254040384):  (+2 comments)

    > Do you think we could reuse the `update_subscription_with_opportunity_id` method here?",2
27904712,2019-12-03 18:59:38.288,Move custom error classes out of CreateSalesforceOpportunityWorker,"The following discussion from !666 should be addressed:

- [ ] @asubramanian1 started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/666#note_254037870):  (+1 comment)

    > What are your thoughts on adding errors to the [errors](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/staging/lib/errors.rb) class? One of the purpose being they could be reused elsewhere too.",1
27890482,2019-12-03 13:33:19.188,:christmas_tree: Suspend deployments during December 2019 holidays,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

We should suspend all production deployments from 23rd December, 2019 to the 1st January, 2020, both included.

Please raise any concerns or comments in this issue.

There will be limited coverage as most people will be away. This should effectively limit the need to have someone on call to resolve any development related issues in production during the holidays period.

We'll need 2 volunteers from the teams to add/remove the label and notify Slack.

## Process

- [x] @tyleramos On the **20th, December, 2019** add the ~""production::blocker"" label to this issue.
- [x] @tyleramos Then, notify #g_fulfillment, #g_growth_engineering, #support_fulfillment, and #production about the freeze
- [x] @nicolasdular On the **2nd, January, 2020** remove the ~""production::blocker"" label from this issue.
- [x] @nicolasdular Then, notify #g_fulfillment, #g_growth_engineering, #support_fulfillment, and #production about the unfreeze

Please keep this issue public.

cc @fulfillment-group @gl-growth ",0
27885989,2019-12-03 11:03:55.679,Create a flag for indicating existing subscriptions for a customer,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

We have a special condition for hiding some menu items in the navigation bar. If a customer has at least one purchase we show the menu item `Manage purchases` otherwise it's hidden. Right now we have [a special method](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/staging/app/controllers/application_controller.rb#L50) for checking that condition. The problem is this method makes HTTP requests to Zuora for getting the list of subscriptions. And we do that every time we load our navigation bar.

You can test it locally by adding `httplog` gem to your `Gemfile` then go any page and start refreshing the page.

### Proposal

Create a special column for the Customer for indicating existing subscriptions for a customer.

### Result

Decreasing the amount of requests to Zuora and improved page load.

### Next steps (if any)

### How will we measure success?",2
27878183,2019-12-03 08:08:24.661,Potentially adopt a new API library,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Right now we are using Rails controllers to add API endpoints, missing out on features like versioning and making it more difficult if we were to expand this API.

### Proposal

Discuss whether we want to use [Grape](https://github.com/ruby-grape/grape), [GraphQL](https://graphql-ruby.org/), or another library.

My understanding is that we are moving towards GraphQL on GitLab, but we should choose the best that fit our needs regardless.

### Next steps

We should then create a separate issue to discuss whether we want to migrate existing endpoints.

cc @fulfillment-group @gl-growth",2
27865258,2019-12-02 20:54:05.193,Stable Zuora crendentials for CI,"### Problem
From time to time, normal Zuora passwords need to be updated from time to time as per the Zuora password retention policy.  Whenever this occurs to the Zuora credentials used for CI, there is confusion and blocked pipelines.

### Proposal
@rdavila suggested changing the Zuora credentials used for CI to a type of API credential that doesn't expire over time.  We need further investigation to determine how to create these types of creds.

### Result
More consistent runs on CI and less time to get MRs merged.",2
27846643,2019-12-02 13:00:11.548,Product audit; make `main_product` easy to reason about,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

[We're building out the UI](https://gitlab.com/gitlab-org/customers-gitlab-com/issues/679) for previously purchased products. Reading up on the current HAML templates there’s a lot of cases covered.

Without an exhaustive list of which products are still active; we’re forced to cover those same cases.

A concrete case of when we don't know what's coming back to us is causing problems https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/745#note_250156476
We can’t say for sure what’s going to come from a call to `main_product` - we’d expect it to be the Plan associated with a subscription; but we can’t say for sure.

### Proposal

Make the list of possible products simpler (deprecate products) or make it easier to educate oneself on the products (make active products visible).",5
27696442,2019-11-28 13:33:49.549,Add attributes to permitted params for subscriptions#create,"I found three unpermitted params for the subscriptions#create action while playing around with updating subscriptions.

```
Unpermitted parameters: :order_id, :subscription_name, :subscription_edu_or_oss
```",1
27685413,2019-11-28 07:48:33.784,Flaky subscription spec,"There is a [flaky test](https://gitlab.com/gitlab-org/customers-gitlab-com/-/jobs/363330404#L4245) in the subscription feature spec:

```
Failures:
  1) Subscriptions Successfully purchase and active subscription
     Failure/Error: find('h3', text: 'Billing Information', visible: true, wait: zuora_max_wait_time)
     Capybara::ElementNotFound:
       Unable to find visible css ""h3"" with text ""Billing Information""
     # ./spec/features/subscriptions_spec.rb:133:in `block (2 levels) in <top (required)>'
```


It was not reproducable locall with the seed number.

Failed pipelines:

* https://gitlab.com/gitlab-org/customers-gitlab-com/-/jobs/363330404#L4245
* https://gitlab.com/gitlab-org/customers-gitlab-com/-/jobs/363907169
* https://gitlab.com/gitlab-org/customers-gitlab-com/-/jobs/367766502#L4307",2
27683179,2019-11-28 06:15:41.468,Close button of  alert component is showing in the wrong place,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you're about to submit isn't a duplicate.

Do not include confidential information! 
--->

### Summary

The close button of the `.alert` component is showing on the far right beside the edge of the screen.

### Steps to reproduce

- Go to payment methods page
- Add or edit a payment method
- Click submit
- The `.alert` component will be shown

### What is the current *bug* behavior?

The close button of the alert component is showing in the wrong place.

### What is the expected *correct* behavior?

The close button of the alert component should be shown within the parent container making the layout of the website consistent.

### Relevant logs and/or screenshots

![Screen_Shot_2019-11-28_at_09.14.44](/uploads/9bf885a2c4dae8acdf9c3f7adf47c04b/Screen_Shot_2019-11-28_at_09.14.44.png)

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",1
27589183,2019-11-26 18:20:21.250,Sentry Errors::MissingSalesforceAccountIdError,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you're about to submit isn't a duplicate.

Do not include confidential information! 
--->

### Summary

We get a large amount of these errors in Sentry and we should investigate it and fix it: https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/810657 

@rdavila Believes it is related to worker SyncGitlabGroupMemberWorker, which is used to update Salesforce when a user is added so that Support can understand what level of support to provide to a user.

### Steps

- [x] Delete the system hook(s) that points to `https://customers.gitlab.com/gitlab_system_hook` from `GL.com`
- [x] Drop logic related to `SyncGitlabGroupMemberWorker` from customers (routes / controllers / job)
- [x] Clean up of other changes that were introduced to allow the dropped logic (this will simplify the code)
- [x] Submit a MR to the cookbooks to remove the generation of the constant: https://gitlab.com/gitlab-cookbooks/cookbook-customers-gitlab-com/-/merge_requests/104
- [x] Create an issue for infrastructure to drop the value: https://gitlab.com/gitlab-com/gl-infra/infrastructure/-/issues/11569",2
27573397,2019-11-26 11:29:54.422,Don't redirect the user to /plans if no payment methods available,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

The user without payment methods will not be able to access the payment methods index page, instead, they'll be redirected to `/plans` page.

### Proposal

Don't redirect the user to the `/plans` page if they don't have any payment methods, instead, keep the user on the same page where we'll display a proper alert.

### Result

No user confusion when they want to add new payment methods or view current methods when the list is empty.

### Next steps (if any)

Schedule the issue.

### How will we measure success?",1
27524140,2019-11-25 07:11:39.795,Jest occasionally creates junit_jest.xml,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you're about to submit isn't a duplicate.

Do not include confidential information! 
--->

### Summary

Running frontend tests occasionally creates `junit_jest.xml` in the root directory.
Even we have a guard `if (process.env.CI)` for that file, I still see that file has been created.

### Steps to reproduce

I haven't figured out steps to reproduce that problem but I will do.

### What is the current *bug* behavior?

Running frontend tests occasionally creates `junit_jest.xml` in the root directory.

### What is the expected *correct* behavior?

This file must be created on CI env only.

### Relevant logs and/or screenshots
Here is the content of that file:
```xml
<?xml version=""1.0"" encoding=""UTF-8""?>
<testsuites name=""jest tests"" tests=""4"" failures=""0"" time=""1.704"">
  <testsuite name=""ZuoraSubscription"" errors=""0"" failures=""0"" skipped=""0"" timestamp=""2019-11-25T07:04:13"" time=""1.058"" tests=""2"">
    <testcase classname=""ZuoraSubscription fires callback on success"" name=""ZuoraSubscription fires callback on success"" time=""0.005"">
    </testcase>
    <testcase classname=""ZuoraSubscription logs and recovers from malformed server response"" name=""ZuoraSubscription logs and recovers from malformed server response"" time=""0"">
    </testcase>
  </testsuite>
  <testsuite name=""isNumeric"" errors=""0"" failures=""0"" skipped=""0"" timestamp=""2019-11-25T07:04:13"" time=""1.061"" tests=""2"">
    <testcase classname=""isNumeric parses numeric values"" name=""isNumeric parses numeric values"" time=""0.002"">
    </testcase>
    <testcase classname=""isNumeric does not accept string numbers"" name=""isNumeric does not accept string numbers"" time=""0.001"">
    </testcase>
  </testsuite>
</testsuites>
```

### Workarounds

(Ways to get around the issue)

### Reported examples

1. 
1. 
1. 

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",1
27463174,2019-11-22 12:11:03.170,Remove Zuora::RestClient,"Follow-up from #745 

This is the original [comment](https://gitlab.com/gitlab-org/customers-gitlab-com/issues/745#note_241255135). I will post the important parts in here again:

> I checked the following calls for Zuora::RestClient (all that I could find) and everything can be replace by Ironbank calls:
> 
> https://gitlab.com/gitlab-org/customers-gitlab-com/blob/staging/app%2Fcontrollers%2Freceipts_controller.rb#L14:
> 
> ```
> response = IronBank.client.connection.get(""/v1/files/#{file_id}"")
> ```
> 
> https://gitlab.com/gitlab-org/customers-gitlab-com/blob/staging/app/workers/bulk_download_invoice.rb#L23:
> 
> ```
> response = IronBank.client.connection.get(""/v1/files/#{invoice_file.file_id}"")
> ```
> 
> https://gitlab.com/gitlab-org/customers-gitlab-com/blob/staging/lib%2Fzuora%2Fdigital_signature.rb#L13-19:
> 
> ```
> response = IronBank.client.connection.post(
>   '/v1/rsa-signatures',
>   'uri' => APP_CONFIG.zuora.payment_page_url,
>   'method' => 'POST',
>   'pageId' => payment_page_id
> )
> 
> OpenStruct.new(response.body)
> ```
> 
> https://gitlab.com/gitlab-org/customers-gitlab-com/blob/staging/lib%2Fzuora%2Fdigital_signature.rb#L23-29:
> 
> ```
> response = IronBank.client.connection.post(
>   '/v1/rsa-signatures/decrypt',
>   'publicKey' => key,
>   'method' => 'POST',
>   'signature' => signature
> )
> 
> _url, tenant_id, token, timestamp, page_id = response.body['decryptedSignature'].split('#')
> ```",3
27391337,2019-11-21 08:56:04.676,Add frontend documentation,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

All guidelines, caveats or tips that we follow are not documented in a single place, people contributing to this project are not aware of it, and it doesn't exist to serve as a reference.

### Proposal

Add all guidelines, caveats or tips that we follow to `doc/frontend.md`.

### Result

Everything we do will be clear to any contributor and maintainer.

### Next steps (if any)

- [ ] Ask the team what topics we should cover in the frontend documentation

### How will we measure success?",6
27251912,2019-11-20 10:06:52.228,Add E2E tests for sign in,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

We don't have E2E tests for sign in. That's why we encountered #857 during manual testing. We should catch these errors during automatic tests (`rspec`). Adding these tests will also cover the integration layer between the Browser and the Web Server, things like CSRF token.

### Proposal

Write E2E test for sign in.

### Result

Catch possible sign in errors on running tests

### Next steps (if any)

### How will we measure success?

* Increased code coverage
* Decreased errors rate",1
27231359,2019-11-19 18:04:23.988,Investigate flaky spec in gon_helper_spec.rb,"### Problem
We noticed after #616 merged, the staging pipeline failed because of one particular spec.  This spec passes in isolation locally but we were able to reproduce the failure when running the full test suite with a specific seed.

```
Failures:

  1) GonHelper does not inject variables on json requests (as an optimization)
     Failure/Error: expect(Gon.all_variables).to be_empty
       expected `{""features""=>{:pajamas_design_system=>false}, ""is_signed_in""=>false}.empty?` to return true, got false
     # ./spec/controllers/concerns/gon_helper_spec.rb:44:in `block (2 levels) in <top (required)>'

Finished in 1 minute 40.35 seconds (files took 7.66 seconds to load)
1176 examples, 1 failure, 1 pending

Failed examples:

rspec ./spec/controllers/concerns/gon_helper_spec.rb:41 # GonHelper does not inject variables on json requests (as an optimization)

Randomized with seed 60133
```

### Proposal
Address the flaky spec.

### Result
A more consistent green test suite.

### Next steps (if any)

### How will we measure success?",1
27228180,2019-11-19 16:34:12.965,Ensure feature specs are not asserting on hidden elements,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Raised in https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/722#note_246967622

We're currently using `Capybara.ignore_hidden_elements = false` in our feature specs, in large part because we're asserting `hidden` loading spinners are not active.

This leads to non-obvious failures like https://gitlab.com/gitlab-org/customers-gitlab-com/issues/853

Since feature specs are E2E and should assert on what the user can see and interact with; we should only be working with visible and interactable DOM elements.

### Proposal

Set a global `Capybara.ignore_hidden_elements = true` and fix any specs that are affected by this.

### Result

Feature specs more closely resemble how a user interacts with the customer portal.

### Next steps (if any)

### How will we measure success?",3
27184635,2019-11-18 17:06:47.573,[REST Update] Add ability to delete Iron Bank records,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
The iron bank gem does not provide an out of box solution to delete records.

For e.g. previously with the `active_zuora` gem, an account could be updated as follows:

```ruby
account = customer.zuora_account
account.delete
```

This, is however, not possible with the Iron bank gem.

It provides `update`, `delete` and similar other CRUD classes to perform these operations: https://github.com/zendesk/iron_bank/tree/master/lib/iron_bank/actions

### Proposal
Add a `delete` method to delete records, that would internally invoke Iron Bank's `delete` api.

### Result


### Next steps (if any)
Consider moving the `delete` method to the iron bank gem.

### How will we measure success?",2
27010711,2019-11-13 11:13:52.973,Upgrade gem `webpacker` to 4.2.0,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

We had a problem with the `webpacker` in the past. Especially when it continued working when `yarn:install` task failed. They addressed that issue in this release.

### Proposal

Upgrade gem `webpacker` to 4.2.0

### Result

* We receive updated `style-loader` package
* We can remove [our ad-hoc solution](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/staging/lib/tasks/webpacker/yarn_install.rake) for the problem above 

### Next steps (if any)

### How will we measure success?",1
26991409,2019-11-12 18:49:01.167,Exclude VCR cassettes from Danger bot,"### Problem
When Danger bot does it's evaluation of changes in an MR, VCR cassette changes are factored into the warning about if a MR is too large.  This can totally skew the perception of the MR being too large and can make the warning useless for any MR that includes VCR changes.

![Screen_Shot_2019-11-12_at_1.42.38_PM](/uploads/592c95b25c9f8813a72a6353f8c0364b/Screen_Shot_2019-11-12_at_1.42.38_PM.png)

### Proposal
We should update Danger bot to exclude VCR cassettes from this warning.  VCR cassette changes aren't generally a concern as we can/should re-record cassettes commonly.  These can largely be ignored by the reviewer.

### Result
Improved stats regarding MR size.

### Next steps (if any)

### How will we measure success?",1
26988824,2019-11-12 17:00:01.743,Redirect to `/subscriptions` on success instead of showing only the updated subscription,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Currently when you update a subscription you’re taken to a page that looks the same as the index, but some of your subscriptions go away.. like, toggle the auto-renew and boom, all your subscriptions go away except the one that you just clicked a toggle button on.

This is done to have the user focus in on the subscription that changed, but the `this page look an awful lot like where I was, where did my other subscriptions go?` feeling is hard to shake.

_Note that this is a dev account. Most users won't have this many subscriptions_

![page-redirect](/uploads/ba6726a886f9005566dbbd3c40a1c619/page-redirect.gif)

### Proposed solution

Redirect to `/subscriptions` instead. It's a fairly small change.",1
26986426,2019-11-12 15:38:05.331,Danger bot is inconsistent,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
Danger bot did not fire for https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/652

Instead outputting

```
$ danger --fail-on-errors=true
Not a GitLabCI Pull Request - skipping `danger` run.

```

https://gitlab.com/gitlab-org/customers-gitlab-com/-/jobs/348252409

### Result
Danger bot should be consistent.",1
26945965,2019-11-11 16:43:33.953,"Follow-up from ""Adds fsl magic comment to all files in /app""","LGTM :) @jejacks0n just to double-check, did you search for `.freeze` on those files to remove instances where it's a duplicate?",1
26913034,2019-11-11 07:03:35.001,Use docker image for running CI stages,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Current stages for CI pipelines take ~10 minutes to finish, most of that time will be spent on installing dependencies.

### Proposal

Add stage for building a docker image as a base image for running all other stages, so the stages won't need to install any dependencies and can start the actual job immediately.

### Result

- Faster CI run time => faster feedback on the MR.
- A step toward auto devops.

### Next steps (if any)

* [ ] Evaluate the proposal.
* [ ] Schedule the issue.


### How will we measure success?

With less time to get a feedback from the pipelines.

### Relevant links

- https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
- https://blog.daftcode.pl/make-your-ci-pipeline-fast-and-awesome-with-gitlab-container-registry-41ef244d1ce6
- https://docs.gitlab.com/ee/user/packages/container_registry/index.html
- https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#using-the-gitlab-container-registry",2
26836271,2019-11-08 03:37:16.502,[REST Update] Add ability to update Iron Bank records,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
The iron bank gem does not provide an out of box solution to update records.

For e.g. previously with the `active_zuora` gem, an account could be updated as follows:

```ruby
account = customer.zuora_account
account.update_attributes(name: 'new_name')
```

This, is however, not possible with the Iron bank gem.

It provides `update`, `delete` and similar other CRUD classes to perform these operations: https://github.com/zendesk/iron_bank/tree/master/lib/iron_bank/actions

### Proposal
To start with, add an `update` method to update records, that would internally invoke Iron Bank's `update` api.

### Result
1. Iron Bank records can be easily updated using AR-like commands.
2. `errors` on failure should be available in `object.errors`

### Next steps (if any)

### How will we measure success?",2
26813689,2019-11-07 13:52:07.977,Huge gap between navbar and flash messages container,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you're about to submit isn't a duplicate.

Do not include confidential information! 
--->

### Summary

After upgrade to BS4 we have a huge gap now between the navigation bar and the container for flash messages. 

### Steps to reproduce

1. Enable Pajamas via Rails console: `Feature.enable(:pajamas_design_system)`
2. Sign out from the customer portal
3. Navigate to any page that requires authentication, for example, `/payment_methods`
4. Scroll to the top to see the gap.

### What is the current *bug* behavior?

Huge gap between navbar and flash messages container

### What is the expected *correct* behavior?

No gap between navbar and flash messages container

### Relevant logs and/or screenshots

![image](/uploads/bcac4e59f81a2ff50716d7e28404db7b/image.png)

### Workarounds

(Ways to get around the issue)

### Reported examples

1. 
1. 
1. 

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",1
26714612,2019-11-05 13:25:37.273,Change from unicorn to puma,"### Proposal
As part of the Rails upgrade (#498) we should change the webserver from unicorn to puma. It is the new default for Rails and has some great features such as forking and multithreading.
This will require a change in the cookbook except we wait until the move to auto devops.",5
26651290,2019-11-04 11:53:44.790,Inconsistency between forms on same page,"### Summary

There are two form on a page and they are behaving differently when sending them with a blank required field.

### Steps to reproduce

Go to `customers/edit` and send the ""Account Details"" form with a blank first name. Then send the ""Change Password"" form with a  blank current password.

### What is the current *bug* behavior?

The ""Account Details"" form shows a html5 require validation for the blank field and therefore the form can't be sent to the server.
The ""Change Password"" form is sent directly to the server for validations.

### What is the expected *correct* behavior?

Both forms should respond with a html5 require validation.

@tipyn @jackib ",1
26651042,2019-11-04 11:44:44.726,"Active navigation item is lost on send empty ""Change Password"" form","### Summary

No active navigation item is diplayed after sending an empty ""Change Password"" form.

### Steps to reproduce

Go to `customers/edit` and send a blank ""Change Password"" form.

### What is the current *bug* behavior?

The active navigation item (My Account) is lost. 

### What is the expected *correct* behavior?

The navigation item ""My Account"" should still be active.

### Relevant logs and/or screenshots

When calling the page:
![Active navigation item](/uploads/c58fa47e36faae496a3cc4871ac7b3b4/Screenshot_2019-11-04_at_12.42.29_PM.png)

After sending the form:
![No active navigation item](/uploads/02e20354606697c5c7f614321f0557b8/Screenshot_2019-11-04_at_12.42.20_PM.png)

@tipyn @jackib ",1
26650985,2019-11-04 11:42:57.080,"Pajamas Update: Portal ""Plan"" Page","| Main Page | Modal popup (multi-choice) |
| ------ | ------ |
| ![Buy_Products_-_v2_-1](/uploads/b7cd3bac9390cd8b1f96bc8eae77254b/Buy_Products_-_v2_-1.png) | ![Buy_Products_-_v2_-2](/uploads/4fca61938a90458cfe992ecc0ea36b96/Buy_Products_-_v2_-2.png) | 

### Design Specs

https://gitlab-org.gitlab.io/gitlab-design/hosted/tim/&1886-customers-portal-pages-redesigns/plan-page",5
26645965,2019-11-04 09:39:00.456,Don't generate valid Gitlab licenses through https://customers.stg.gitlab.com,"**[HackerOne report #726223](https://hackerone.com/reports/726223)** by `rpadovani` on 2019-10-31, assigned to @cmaxim:

### Summary

I can create valid Gitlab licenses through https://customers.stg.gitlab.com

### Steps to reproduce

1. Register as standard user to `https://customers.stg.gitlab.com`  
2. Buy a license for Gitlab Ultimate  
3. When asked for a credit card, insert one of these:  https://stripe.com/docs/testing#cards  
4. You now have a license and a invoice from Gitlab (that could be used also for tax frauds)  
5. Insert the license in a instance  
6. Free Gitlab Ultimate!

### Impact

Free Gitlab Ultimate

### What is the current *bug* behavior?

Staging is accessible and generates valid licenses

### What is the expected *correct* behavior?

Staging shouldn't be accessible

### Relevant logs and/or screenshots

Attached the license and the invoice

## Impact

Free Gitlab Ultimate, valid invoices when nothing was paid

## Attachments

**Warning:** Attachments received through HackerOne, please exercise caution!

* [Test.gitlab-license](https://[edited.license]](https://h1.sec.gitlab.net/a/[edited.pdf])
* [Screenshot_[edited]_License___Admin_Area.png](https://h1.sec.gitlab.net/a/[edited].png)",1
26573516,2019-11-02 00:11:19.962,Using Subscription name instead of Zuora Subscription ID breaks reassociation of some accounts,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

in #551 we deprecated using the Zuora Subscription ID, but for accounts that have a manually assigned subscription name (e.g. ""Corporation- 33 gitlab.com Gold"") attempting to associate (or re-associate) the subscription results in a 404.

An example is in https://customers.gitlab.com/admin/customer/125776/ - if you impersonate this customer and attempt to re-associate the subscription, you'll get taken to 
`https://customers.gitlab.com/subscriptions/redacted-subscription--name/edit?transaction=change_gitlab_group`


### Proposal

### Result

### Next steps (if any)

### How will we measure success?",2
26566889,2019-11-01 18:29:52.712,Add Tax ID/VAT field on checkout in customer portal,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem: 
We are missing `VAT ID` and `Company Country of Establishment` on EU orders and we don't ask for Tax ID certificates

### Potential Workflow
* Current Customers
  * Checkbox: Field: I am Tax or VAT exempt (true/false), if marked true, then show the next field values:
    * Show them their ID on file: then they select:
        - ""Use ID on file"" or ""My ID has changed"", if they choose ""I have a new ID"" then show a dependent field:
            * Company Country of Origin: If EU country, we show field ""VAT ID"" (Account.taxinfo.VATid (objectified)) and we run a check on their VAT ID; if anything else, we show field ""Tax ID"" (Account.taxinfo.TaxExemptCertificateID (objectified))
* New Customers
  * Checkbox: Field: I have a Tax or VAT ID (true/false), if marked true, then show:
    * Company Country of Origin: If EU country, we show field ""VAT ID"" (Account.taxinfo.VATid (objectified)) and we run a check on their VAT ID; if anything else, we show field ""Tax ID"" (Account.taxinfo.TaxExemptCertificateID (objectified))

### Result:
GitLab has the proper documentation to comply with tax regulation.

### Next steps (if any)
* [x]  signoff from salesops and financeops that we can submit directly to these fields; address any risk of overwriting existing data
* [x]  get field API names for Zuora to submit order
   - `Account.taxinfo.VATid (objectified)` according to [Zuora SOAP API documentation](https://knowledgecenter.zuora.com/DC_Developers/G_SOAP_API/E1_SOAP_API_Object_Reference/Account) and [other Zuora API documentation](https://www.zuora.com/developer/api-reference/#operation/Object_PUTAccount)
   - Jamie opened a support ticket to request access to the Zuora API field since it's required for this field specifically
* [x]  get API field name for Company Tax ID field Account.taxinfo.TaxExemptCertificateID (objectified)
* [x]  @annapiaseczna @igroenewegenmackintosh provide list of countries that use VAT ID
```
Austria, Italy, Belgium, Latvia, Bulgaria, Lithuania, Croatia, Luxembourg, Cyprus, Malta, Czechia, Netherlands, Denmark, Poland, Estonia,	Portugal, Finland, Romania, France, Slovakia, Germany, Slovenia, Greece, Spain, Hungary, Sweden, Ireland, United Kingdom
```

### How will we measure success?
Reduction of VAT and Tax ID fields with no value

cc @igroenewegenmackintosh @annapiaseczna",3
26539282,2019-10-31 20:36:25.302,"Follow-up from ""Register customers via API""","Classes should use `module` instead of adding the module in front of the classname.
E.g. [`OmniAuthController`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/staging/app%2Fcontrollers%2Fcustomers%2Fomniauth_callbacks_controller.rb#L1)

should be

```ruby
module Customers
 class OmniauthCallbacksController
end
```


The following discussion from !567 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/567#note_238065910):  (+3 comments)

    > Sort of nitpicky, but you might want to break this out like the following:
    > ```
    > module Api
    >   class CustomersController < ActionController::Base
    > ```
    > 
    > I don't think we have this Rubocop setting activated just yet, but [here's a ruby style guide](https://rubystyle.guide/#namespace-definition) describing the problems that sometimes arise without the explicit nesting.",1
26521972,2019-10-31 13:20:22.738,Append Add-on Users to Total User Count on Billing Page for Gitlab.com Subscriptions,"### Summary

Sales is conducting an initiative to contact accounts who have exceeded their users/seats and attempt to collect on the overage. Note, this is happening mid-cycle and not at the renewal period.

#### PROBLEM: Affecting GitLab.com Accounts

- When the add-on users are booked, they are coming into the customers portal as a separate line item and not appending to the total user count on the billing page of their namespace on GitLab.com.
- GitLab.com is getting updated with the new add-on users instead of the total of the existing + add-on.
- This is not a blocker for the user, but displays incorrect information on the billing page (i.e. their original user count) thereby causing user confusion and a poor experience.
- We haven’t found a work-around for this.",3
26511320,2019-10-31 07:44:33.810,Company field is not a required html5 field,"### Summary

Company field is not a html5 requirement when filling out the sign up form but after submitting a rails validation is shown that it can't be blank.

### Steps to reproduce
When signing up for a new account (Starter tier) you have to fill out the registration form. Fill out the required fields before company and then hit send. No validation html5 validation is shown for the company field. So leave it blank and fill out the rest of the form. After submit the valid form you come to a new page and then a validation with ""company can't be blank"" is shown.

### What is the current *bug* behavior?

Othere fields show a html5 require validation but not the company field - missing consistency.

### What is the expected *correct* behavior?

Show a html5 require validation.

### Relevant logs and/or screenshots

![Screenshot_2019-10-31_at_8.36.30_AM](/uploads/5542e16a76d9c5c8297c9a289cda1a95/Screenshot_2019-10-31_at_8.36.30_AM.png)

![Screenshot_2019-10-31_at_8.36.04_AM](/uploads/7db8ef9e78f0fd2d986c04551093d2e9/Screenshot_2019-10-31_at_8.36.04_AM.png)

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->

@tipyn @jackib ",1
26469006,2019-10-30 06:04:32.240,Rubyzip's dependency issue with selenium-webdriver,"### Summary

Bundle update doesn't work due to a dependency issue with rubyzip. The Gemfile speficies rubyzip ~> 2.0 and selenium-webdriver requires ~> 1.2, >= 1.2.2.

### Steps to reproduce

`bundle update ANY_GEMNAME`

### What is the current *bug* behavior?

bundle update can't be run because it throws an error

### What is the expected *correct* behavior?

bundle update should be executable.",2
26393153,2019-10-28 22:42:57.615,Update gems to latest versions,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

With ruby upgrade to 2.6, few gems were found to be upgradable: 
https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/587#note_236182236

Updating gems would require thorough testing to ensure nothing breaks.

Diff patch: [gem-version-diff.patch](/uploads/f1d4e37a58a396198315b4406d3fa9ed/gem-version-diff.patch)

### Proposal

### Result

### Next steps (if any)

### How will we measure success?",2
26393077,2019-10-28 22:36:37.786,Remove monkey patch spec file on upgrading Rails to latest,"The following discussion from !587 should be addressed:

- [ ] @asubramanian1 started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/587#note_235432148):  (+2 comments)

    > We could maybe add a follow-up issue to remove this file, once the [Rails version is updated](https://gitlab.com/gitlab-org/customers-gitlab-com/issues/498).",1
26392939,2019-10-28 22:27:07.217,Automate download of bulk invoice,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Following discussions on https://gitlab.com/gitlab-org/customers-gitlab-com/issues/504#note_236278173,

  1.  Add a cron job to download invoices on the 3rd of every month for the entity `GmbH` and send it to apiaseczna@gitlab.com, with CC to [wilson@gitlab.com](mailto:wilson@gitlab.com).

### Proposal

### Result

This task would avoid any intervention from engineering team to download and send invoices.

### Next steps (if any)

* [x]  @annapiaseczna Could you provide the recipient to whom the invoices should be sent to?

### How will we measure success?",1
26327963,2019-10-25 19:02:40.411,90 day password expiration for for customers.gitlab.com team member accounts,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

For PCI compliance purposes, we need to have a 90 password expiration for `customers.gitlab.com` on all team member accounts. **This shouldn't be applied to customer user accounts, only GitLab team member accounts.** This would remediate a [compliance gap](https://gitlab.com/gitlab-com/gl-security/compliance/compliance/issues/498) we found during our gap analysis project.

Please see the exchange below [this comment](https://gitlab.com/gitlab-com/gl-security/compliance/compliance/issues/498#note_219082240) for more context.

### Proposal

Add 90 day password experiation for all GitLab team member accounts on or that provide access to the data of `customers.gitlab.com` (e.g., accounts on the app itself, database accounts, etc). After those 90 days, the password cannot be used to log in and must be changed.

### Result

`customers.gitlab.com` has a 90 day password expiration for all GitLab team member accounts on or that provide access to the data of `customers.gitlab.com` (e.g., accounts on the app itself, database accounts, etc)",2
26211426,2019-10-22 22:54:48.706,Investigate apis that use GL.com admin token instead of user token,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
Couple of api calls made from subscription portal to GL.com use the admin token. 

For e.g. Updating of namespace could utilize `user` token, instead of admin token since its a user specific action: https://gitlab.com/gitlab-org/customers-gitlab-com/blob/staging/app/services/gitlab/namespace/update_service.rb#L26

### Proposal
Investigate and fix apis that can use GL user token instead of admin token.

### Result

### Next steps (if any)

### How will we measure success?",3
26200544,2019-10-22 15:38:56.289,Combine all frontend files under app/frontend,"This is a follow up to a discussion started in https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/547#note_233805127

I'm thinking about moving all the javascript code in an MR from `app/assets/javascript` to `app/javascript` so all JS will be in one folder instead of being spread on 2 folders.

@vitallium suggested that if we are going to do that the better name will be `app/frontend` because we will add styles there too. But I like the idea of moving JS from `app/assets`.

Do you mind combining everything related to the frontend (JS, Sass, tests) including webpacker's entry points `app/javascript/pack` under one `app/frontend` folder?


### Update

We will gradually adopt this structure while we work on &1788.

The file structure will look similar to:

```
frontend
├── packs
├── javascripts
├── javascripts
│   ├── account
│   │   ├── components
│   │   │   ├── account_app.vue
│   │   │   └── personal_details_form.vue
│   │   ├── constants.js
│   │   ├── index.js
│   │   ├── mixins
│   │   ├── services
│   │   └── store
│   │       ├── actions.js
│   │       ├── getters.js
│   │       ├── index.js
│   │       ├── mutation_types.js
│   │       ├── mutations.js
│   │       └── state.js
│   └── pages
│       └── customers
│           └── edit.js
└── stylesheets
    ├── components
    │   └── _buttons.scss
    └── pages

```",1
26185720,2019-10-22 08:44:53.363,"Follow-up from ""Bootstrap version 4"" - Rename plan-info-panel to plan-info-card","The following discussion from !545 should be addressed:

- [ ] @ClemMakesApps started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/545#note_233455706): 

    > We should probably as a follow up issue rename `.plan-info-panel` to `.plan-info-card`


We have an unfortunately named class `.plan-info-panel` in `subscription_upgrades/_plan.html.haml`.
This is because [`panels` have been renamed to `card`](https://getbootstrap.com/docs/4.0/migration/#panels-thumbnails-and-wells) in Bootstrap 3 -> 4.

# Definition of done

`plan-info-panel` has been renamed to `plan-info-card` in HTML and JS references.",1
26150893,2019-10-21 10:04:52.451,Use `autoprefixer` for CSS,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
Currently we need to manually add vendor specific prefixes https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/558#note_232562193

This is a manual and error-prone process.

Instead we should use [autoprefixer](https://github.com/postcss/autoprefixer)

### Proposal
~~Investigate whether it makes sense to add `autoprefixer` via Gems or NPM dependency (serve it directly to `webpacker`)~~

We should use a NPM solution https://gitlab.com/gitlab-org/customers-gitlab-com/issues/785#note_233197359

### Next steps (if any)
Enable `stylelint` https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/558
### How will we measure success?",3
26117999,2019-10-19 12:55:52.930,Sign up page is broken on mobile devices,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you're about to submit isn't a duplicate.

Do not include confidential information! 
--->

### Summary

Invisible `Country` select due to applied ad-hoc workaround for triggering HTML5 validation on `chosen-js` selects.

### Steps to reproduce

1. Navigate to https://customers.gitlab.com from a mobile device or by using device emulation in a browser;
2. Click `Sign in` from the top right hamburger menu;
3. Click `Register now` in the bottom.

### What is the current *bug* behavior?

See the missing `Country` select.

### What is the expected *correct* behavior?

You should able to see the `Country` select and interact with it.

### Relevant logs and/or screenshots

![Screen_Shot_2019-10-19_at_15.53.34](/uploads/24838b673aef3a7f974e651529a9d2d8/Screen_Shot_2019-10-19_at_15.53.34.png)

### Workarounds

Remove our ad-hoc solution for `chosen` selects.

### Reported examples

None

### Additional information

[`chosen` is disabled](https://github.com/harvesthq/chosen/pull/1388) on mobile devices such as iPhone, iPad.

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",1
26090047,2019-10-18 16:51:35.047,Refactor Bulk download invoice to use REST APIs,"The following discussion from !399 should be addressed:

- [ ] @asubramanian1 started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/399#note_230282933):  (+2 comments)

    > @oswaldo: Soooooo, I did some load testing with production credentials to see how long it takes to run for a month's data, and below are some inferences:
    > 
    > Initially, the job was querying for accounts for a given entity, and iterated through each of them to fetch invoices for them during the given time period.
    > 
    > Apparently, the query to return accounts for `US` entity takes way too long (waited for almost 20mins just to query for the account ids - this could be because there are too many accounts in this entity). The query ran quick for other entities though, which has less number of accounts:
    > 
    > ![Screen_Shot_2019-10-15_at_2.26.20_AM](/uploads/20b35703e3b4f0c146db9b4bd70efe3e/Screen_Shot_2019-10-15_at_2.26.20_AM.png)
    > 
    > Thus, I have modified the querying logic to: 
    > 
    > 1. Query invoices during the time period
    > 2. Check if the account of the invoice belongs to the given entity. If not, skip.
    > 3. If yes, download the pdf file for the invoice
    > 
    > It took **40 mins** to download invoices for **32 days**, total records processed: **2603**.
    > 
    > ![Screen_Shot_2019-10-15_at_2.49.28_AM](/uploads/8fafdbf4b8c4d1f0bc2694593ceb1d65/Screen_Shot_2019-10-15_at_2.49.28_AM.png)
    > 
    > The average number of invoices for a month is: 1663, maximum being 2438. Trend being:
    > 
    > ![Screen_Shot_2019-10-15_at_2.58.19_AM](/uploads/8675b5ae7c925316910a01e08f2fa6e1/Screen_Shot_2019-10-15_at_2.58.19_AM.png)
    > 
    > We can setup expectation with the Finance team that the report would be available within an hour - the request is for a month duration as mentioned in the issue (https://gitlab.com/gitlab-org/customers-gitlab-com/issues/504).
    > 
    > Let me know your thoughts.
    > 
    > Edit: Would have preferred to do a join in this situation, but for the [limitations](https://knowledgecenter.zuora.com/DC_Developers/BC_ZOQL), it won't be possible :(",5
26086470,2019-10-18 15:17:26.558,"Change ""Name"" to ""Namespace path"" in GitLab Groups","### Problem

GitLab.com support team uses the `Gitlab Groups` view to get quick information about the customer. It would be much more helpful if the `namespace path` was listed instead of (or in addition to) the `name`.

### Proposal

Change the `name` field to `namespace path`

![Screen_Shot_2019-10-18_at_10.14.45_AM](/uploads/d213e10d5a99d7bd2cc0e92bdb42220c/Screen_Shot_2019-10-18_at_10.14.45_AM.png)",1
26072793,2019-10-18 09:35:44.744,Ensure payment errors are propagated to the UI,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
We're seeing errors in `onSubscriptionError` like [this Sentry error report](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/234458/?query=cannot%20read) and [this](https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1000451/?query=cannot%20read)

Looking at the function nothing seems off at first glance.

```
// subscription_form.js
function onSubscriptonError(errors) {
  if (errors.attributes && errors.attributes.indexOf('coupon') >= 0) {
    $('#coupon-error').text('Invalid code');
  } else {
    ZuoraSubscriptionErrorHandler.redirectToErrorPage(errors);
  }
}

````

This fatal error is occurring because `onSubscriptonError` (I also just noticed there's a typo there) is being called with with an `undefined` object.

This happens in the callback here
```
// subscription_form.js
ZuoraSubscription.update(data, result => {
    if (result.success) {
      on_success(result);
    } else {
      onSubscriptonError(result.errors);
    }

    window.scrollTo(0, 0);

    // Whatever the response is always enable the submit button
    $('#preview-subscription').removeAttr('disabled');
  });
```

#### What does the user see?
The user just sees the loading page spinning without resolving

#### How should we have noticed this?
- Look at Sentry error reports; however [this isn't part of our workflow](https://gitlab.com/gitlab-org/customers-gitlab-com/issues/714)
- Have tests in place for this scenario
- Use static types to catch these problems; *If static type checking was in place the computer would catch this error before we'd ship this piece of code*

### Proposal
A patch here is to ensure we're not passing `undefined` to `onSubscriptonError`
```
onSubscriptonError(result.errors || {code: 500, message: 'Unknown error occurred, this has been logged in our service; Please open a Support ticket if the problem persists' });
```

The more serious problem is that we didn't catch this sooner.
We should
- Incorporate Sentry into our workflow (all fulfillment engineers should have Sentry notifications on? Open tickets automatically for new error reports?)
- Increase our test coverage
- Seriously consider adopting something like TypeScript",2
26066186,2019-10-18 06:26:23.052,Reflected XSS on customers.gitlab.com,"**[HackerOne report #715760](https://hackerone.com/reports/715760)** by `badshah_` on 2019-10-16, assigned to @cmaxim:

### Summary

I found a reflected XSS at the GET endpoint **https://customers.gitlab.com/subscriptions/new?plan_id=2c92a0ff6145d07001614efff26d15da&transaction=create_subscription**

### Steps to reproduce

For firefox please visit the following url:

`https://customers.gitlab.com/subscriptions/new?plan_id=2c92a0ff6145d07001614efff26d15da&transaction[1%27%3E%3C/div%3E%3Csvg%20onload=alert(%27badshah%27);%27%3E]=%27%22`

![Firefox.png](https://h1.sec.gitlab.net/a/595a98c7-e509-4275-bcc0-93891bd6a0fe/Firefox.png)

For Chrome please visit the following url:

`https://customers.gitlab.com/subscriptions/new?plan_id=2c92a0ff6145d07001614efff26d15da&transaction[1%27></div><svg><discard%20onbegin=alert(%27badshah%27);%27>]=%27""`

![Chrome.png](https://h1.sec.gitlab.net/a/4ad7003c-27dd-416a-b40c-534f7999887d/Chrome.png)

## Impact

- Session takeover of authenticated victims. As this is a portal to manage subscriptions it would give the attacker more information like linked Gitlab account, etc.

If you are on Firefox, load the following `https://customers.gitlab.com/subscriptions/new?plan_id=2c92a0ff6145d07001614efff26d15da&transaction[1%27%3E%3C/div%3E%3Cscript%3Eprompt(document.cookie)%3C/script%3E%3C%20=%27;%27%3E]=%27%22`. This will display all the cookies.

![Session_takeover.png](https://h1.sec.gitlab.net/a/a1bac5b3-a207-4a08-8c4b-3c6a1812dc2d/Session_takeover.png)

- Malicious javascript execution on victim's browser

## Attachments

**Warning:** Attachments received through HackerOne, please exercise caution!

* [Firefox.png](https://h1.sec.gitlab.net/a/595a98c7-e509-4275-bcc0-93891bd6a0fe/Firefox.png)
* [Chrome.png](https://h1.sec.gitlab.net/a/4ad7003c-27dd-416a-b40c-534f7999887d/Chrome.png)
* [Session_takeover.png](https://h1.sec.gitlab.net/a/a1bac5b3-a207-4a08-8c4b-3c6a1812dc2d/Session_takeover.png)",3
26024508,2019-10-17 05:23:53.585,Subscription should be amended instead of created when changing Group for a GL.com subscription,"### Steps

1. Create two groups, Group A with 1 member and Group B with 2.
1. Purchase a Bronze subscription for Group A.
1. After subscription is created, change the linked Group to Group B.
1. Complete the payment step.


### Expected

The original subscription is amended and Group A is assigned the Free plan.

### Actual

A new subscription is created for Group B and Group A maintains his paid plan.

### Next steps (if any)

### How will we measure success?",2
26022546,2019-10-17 02:54:08.019,500 error during impersonation,"### Summary

The customers portal is throwing a `500` error when attempting to impersonate various customer account. I've noticed this is happening more and more frequently and is really impeding our ability to assist customers.

### Steps to reproduce

1. In the customers portal admin, navigate to https://customers.gitlab.com/admin/customer/17737/edit
1. Select the impersonation icon

### What is the current *bug* behavior?

The page loads with a `500` error

### What is the expected *correct* behavior?

The page should load without an error

### Relevant logs and/or screenshots

![Screen_Shot_2019-10-16_at_9.47.54_PM](/uploads/63ac145c2607b9c189174ac4adbb953b/Screen_Shot_2019-10-16_at_9.47.54_PM.png)

### Workarounds

I'm asking the support engineers if they can clear this error here: https://gitlab.com/gitlab-com/support/dotcom/dotcom-internal/issues/989

### Reported examples

1. https://gitlab.zendesk.com/agent/tickets/134882 ; https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1017334/events/20729358/
1. https://gitlab.zendesk.com/agent/tickets/135670 ; specific event: https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/1017334/events/20755426/
1. https://gitlab.zendesk.com/agent/tickets/135802",2
26020099,2019-10-16 22:56:17.575,Trouble changing trial plan from admin panel: ArgumentError: invalid date,"https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/957524/

```
ArgumentError: invalid date
  lib/rails_admin/update_gitlab_namespace_plan.rb:33:in `strptime'
    Date.strptime(params[:trial_exp_on], '%m-%d-%Y')
  lib/rails_admin/update_gitlab_namespace_plan.rb:33:in `trial_expiration_date'
    Date.strptime(params[:trial_exp_on], '%m-%d-%Y')
  lib/rails_admin/update_gitlab_namespace_plan.rb:77:in `block in update_order'
    h[:end_date]             = trial_expiration_date if trial_expiration_date
  lib/rails_admin/update_gitlab_namespace_plan.rb:74:in `tap'
    attrs = {}.tap do |h|
  lib/rails_admin/update_gitlab_namespace_plan.rb:74:in `update_order'
    attrs = {}.tap do |h|
...
(99 additional frame(s) were not displayed)

ArgumentError: invalid date
```

Not sure what's happening here, because a trial expiry date existed

### Examples

1. https://gitlab.com/gitlab-com/support/dotcom/dotcom-internal/issues/985
1. https://gitlab.com/gitlab-com/support/dotcom/dotcom-internal/issues/1007
1. https://gitlab.com/gitlab-com/support/dotcom/dotcom-internal/issues/1013
1. https://gitlab.com/gitlab-com/support/dotcom/dotcom-internal/issues/1023
1. https://gitlab.com/gitlab-com/support/dotcom/dotcom-internal/issues/1014
1. https://gitlab.com/gitlab-com/support/dotcom/dotcom-internal/issues/1018
1. https://gitlab.com/gitlab-com/support/dotcom/dotcom-internal/issues/1053
1. https://gitlab.com/gitlab-com/support/dotcom/dotcom-internal/issues/1131
1. https://gitlab.zendesk.com/agent/tickets/140240",2
26015510,2019-10-16 19:13:11.113,Improvements to logger output,"### Problem

@rdavila [suggested the following logging improvements in !506](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/506#note_230325305):

> - Apply ANSI colors to log lines based on the log level.
> - Add the path of the caller as the prefix, e.g: ""/path/to/log_helper/caller.rb: 'LOG MESSAGE'""

### Proposal

### Result
More context and better formatting of log statements.

### Next steps (if any)

### How will we measure success?",2
26002863,2019-10-16 14:14:57.518,Make sure production::blocker issues can be confidential too,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

The ~""production::blocker"" label only works if the issue is not confidential. We should use a token to actually check for all issues.",0
25983843,2019-10-16 05:36:52.451,New form of payment is broken when other payment form already exist,"### Summary

Add a new form of payment is broken when where's already a payment method.

### Steps to reproduce

(How one can reproduce the issue - this is very important)

1. Add new payment method
1. Navigate to `/plans`
1. Add pick a plan
1. (select number of users) and click Proceed to checkout
1. On the billing information block click 'add a new form of payment' radio

### What is the current *bug* behavior?

Clicking 'add a new form of payment' does not show the credit cards iframe for adding new payment method.

### What is the expected *correct* behavior?

Clicking 'add a new form of payment' should show the credit cards iframe for adding new payment method.

### Relevant logs and/or screenshots

![Kapture_2019-10-16_at_8.27.26](/uploads/47bb1a94ae1662035a2c4e1cb5ea55e3/Kapture_2019-10-16_at_8.27.26.gif)

### Workarounds

Open console, remove `hidden` class from `#new-payment-method` div.

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",4
25983416,2019-10-16 05:04:41.252,[REST Update] List Subscriptions through the REST API,"### Problem

Currently subscriptions are listed (`Manage Purchases` section) through the SOAP API

### Proposal

- [ ] List subscriptions through the REST API

Some other sections where we list subscription details are:

- [ ] Add more seats section.
- [ ] Renew subscription section.

### Result

We will stop using SOAP for listing subscriptions.

### Next steps (if any)

Work on https://gitlab.com/gitlab-org/customers-gitlab-com/issues/759

### How will we measure success?",2
25983233,2019-10-16 04:50:13.641,[Frontend] extract zuora events from payment_method template,"### Problem

When we move our JS from sprockets to webpacker, all classes will not be accessible from outside (i.e. not added to global scope).

`app/views/zuora_callbacks/payment_method.html.haml` has inline JS that depends on JS classes that will not exist in the global scope, and its functionality will break once we move the JS to webpacker.

### Proposal

Extract Zuora events from payment_method template (implemented [in this commit](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/470/diffs?commit_id=3cc325aaa5a5c796adc81529e7efb9408a9fe02d)), so no errors will happen when the haml template tries to call non-global classes (e.g. `ZuoraSubscriptionErrorHandler`, `SubscriptionUpgradeDispatcher`).

### Result

Moving forward with webpacker migration without breaking the payment methods functionality.",4
25982567,2019-10-16 04:11:10.744,[REST Update] Process Subscription updates through the REST API,"### Problem

Currently simple subscription updates are processed through the SOAP API.

### Proposal

- [ ] Process [subscription updates](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/faa95ea44cbf92f11acd72ab96d4651322f59d1b/app/models/subscription.rb#L14-18) through the REST API.

### Result

Simple subscription updates will be processed through the REST API.

### Next steps (if any)

Work on https://gitlab.com/gitlab-org/customers-gitlab-com/issues/758

### How will we measure success?",2
25982552,2019-10-16 04:09:41.873,[REST Update] Process Subscription amendments through the REST API,"### Problem

Currently all subscription amendments are processed through the SOAP API.

### Proposal

Adjust the [`AmendSubscriptionService`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/faa95ea44cbf92f11acd72ab96d4651322f59d1b/app/services/amend_subscription_service.rb#L8-8) and [`AmendGenerator`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/faa95ea44cbf92f11acd72ab96d4651322f59d1b/app/models/amend_generator.rb#L5-5) to use the REST API.

### Result

All subscription amendments will be processed through the REST API.

### Next steps (if any)

### How will we measure success?",2
25965386,2019-10-15 14:42:05.586,Deprecate usage of `hidden` classes,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
[Hidden has been deprecated](https://getbootstrap.com/docs/4.0/migration/#responsive-utilities) from bootstrap and we're using our own polyfill for this class.

There's a reason this was removed from Bootstrap. Maybe we should follow suit?

### Next steps (if any)
- Investigate if this should be done
- Investigate alternatives
### How will we measure success?",3
25935017,2019-10-15 04:07:37.682,[REST Update] Make Payment Methods section use the REST API,"### Problem

Currently the `Payment Methods` section (`PaymentMethodsController`)
 is using the SOAP API.

### Proposal

Use the REST API for the following features:

- [x] List all the existing payment methods.
- [x] Ability to add a new payment method.
- [x] Ability to edit payment method.
- [x] Ability to delete a payment method.
- [x] Ability to set payment method as the default.
- [x] Check that there is one payment as the default at minimum when editing an existent payment method.

### Result

`Payment Methods` section will be migrated from using the SOAP API to REST.

### Next steps (if any)

Work on https://gitlab.com/gitlab-org/customers-gitlab-com/issues/761

### How will we measure success?

Test plan: https://docs.google.com/spreadsheets/d/1HSOvrDWVtqDdr5hYtr2sEosCT0KkjKF49RPZuUe--DI/",5
25933179,2019-10-15 03:48:42.797,[REST Update] Implement REST Api client,"### Problem

We're going to consume the REST API of Zuora instead of the SOAP version and we need to create a client for it.

### Proposal

Evaluate if we can use one of the following gems or if we should create the client from scratch:

* https://github.com/zendesk/iron_bank
* https://github.com/contactually/zuora-ruby
* https://github.com/netlify/zuora-ruby-client
* https://www.rubydoc.info/gems/zuora_api/1.7.08 (provided by Zuora)

### Result

After client is implemented we will be able to consume the REST API.

### Next steps (if any)

Work on https://gitlab.com/gitlab-org/customers-gitlab-com/issues/755

### How will we measure success?",2
25910750,2019-10-14 13:44:20.250,[Portal Pajamas] Upgrade Bootstrap to version 4,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
We want to consume `gitlab-ui` components https://gitlab.com/gitlab-org/customers-gitlab-com/issues/729

To do this we need to be on bootstrap v4.
### Proposal
Upgrade to bootstrap v4.

Ensure any UI change is intentional.

Migration guide: https://getbootstrap.com/docs/4.0/migration
### Result
We're ready for `gitlab-ui`",5
25903459,2019-10-14 10:48:24.275,Move our JS to webpack,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->
Background: https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/521#note_229943169
### Problem
We overreached when merging !470 and a bug snuck in; which was fixed in !514
The diff is too large to review with fresh eyes, so let's break it up.

### Proposal
Make a clear separation of migrating to webpack.
Since our dependencies are loaded and attached via global scope we can do a gradual migration.

1. Move global dependencies to webpack (https://gitlab.com/gitlab-org/customers-gitlab-com/issues/751)
2. Move our JS (`app/assets/javascripts`) to webpack (that's this ticket)",5
25903378,2019-10-14 10:45:29.344,Move global JS dependencies to Webpack,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->
Background: https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/521#note_229943169
### Problem
We overreached when merging !470 and a bug snuck in; which was fixed in !514
The diff is too large to review with fresh eyes, so let's break it up.

### Proposal
Make a clear separation of migrating to webpack.
Since our dependencies are loaded and attached via global scope we can do a gradual migration.

1. Move global dependencies to webpack (that's this ticket)
2. Move our JS (`app/assets/javascripts`) to webpack (see https://gitlab.com/gitlab-org/customers-gitlab-com/issues/752)

Dependencies (double check that this is a correct list when implementing)
* Query and its plugins
* Bootstrap
* Zuora's script
* Accounting script
* snowplow? /cc @gitlab-org/growth
* URI.js
* chosen
* `eu_country_codes`",3
25864647,2019-10-11 20:09:00.748,LicenseNotificationService should accept a subscription object only,"The following discussion from !506 should be addressed:

- [ ] @asubramanian1 started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/506#note_229525163): 

    > (Not to fix in this MR) - but it would be nice if the method accepts either `subscription_id` or `subscription_object`
",1
25860286,2019-10-11 16:27:02.288,Gracefully handle errors in CreateOrderService,"The following discussion from !506 should be addressed:

- [ ] @asubramanian1 started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/506#note_229438928):  (+1 comment)

    > Wdyt about rescuing the operation, and returning `{ success: false }`
    > 
    > https://gitlab.com/gitlab-org/customers-gitlab-com/blob/24d53e03a63059232dcdc6931e25d21b3fe36841/app/services/create_order_service.rb#L27 and others could raise exception",2
25770982,2019-10-09 15:23:18.353,[REST Update] Update Zuora base url and authentication method,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
The REST API base url for Zuora we have in code: https://gitlab.com/gitlab-org/customers-gitlab-com/blob/staging/lib/zuora/rest_client.rb#L7 is different than what's mentioned in Zuora documentation: https://www.zuora.com/developer/api-reference/#section/Introduction/Access-to-the-API. It's probably an old url and Zuora has deprecated it by now (could not find reference docs).

The old url probably still works (used in Receipts and Digital Signature), but would be good to update to the latest ones.

Also, Zuora recommendeds to use API token as a way to authenticate. Currently, we use the legacy way of `apiAccessKeyId` and `apiSecretAccessKey` to authenticate: https://www.zuora.com/developer/api-reference/#section/Authentication/Other-Supported-Authentication-Schemes

### Proposal
* [ ]  Update base url to conform with Zuora documentation
* [ ]  Change authentication method to use tokens

### Result

### Next steps (if any)

### How will we measure success?",2
25750938,2019-10-09 08:08:14.729,Follow up: extract inline JS to erb file,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

This is a follow up to https://gitlab.com/gitlab-org/customers-gitlab-com/merge_requests/521#note_227722085

### Problem

We're having inline JS in layout files to pass data from Rails to JS, we can unify those files and include it instead.

### Proposal

Extract inline JS to erb file and include it instead.
Use https://github.com/rails/webpacker#erb for reference.

### Result

Remove code redundancy and all JS that are not handled by webpacker.

### Next steps (if any)

### How will we measure success?",4
93082739,2021-09-03 14:31:28.685,Add feature flag for processing orders callouts,"### Background

To get [Zuora Orders Harmonization](https://gitlab.com/groups/gitlab-org/-/epics/6641) working in CustomersDot, there are many things to still sort out.  We've found that with Orders Harmonization enabled in Zuora, when using the Amend API to modify subscriptions, CustomersDot can receive multiple callouts to the `subscription_update` endpoint.  This is because with Order Action Processed callouts configured alongside the Amendment Processed callouts, both will be triggered in Zuora.  When the Order feature is used, only the Order Action callout will be triggered.

It seems likely that we will need a feature flag for Orders Harmonization.  This will serve as an indicator to know which callouts to process.

### Proposal

Introduce a feature flag, `orders_harmonization`, which will server as an indication of which callouts to process.  With the flag enabled, CustomersDot should process Orders-related callouts.  If disabled, CustomersDot should process the existing amendment-related callouts.

To distinguish Orders-related callouts from amendments-related callouts, we could check the callout body params for `order_id`.  We're not exactly sure at this moment what type of callout will be used for orders (see [this thread](https://gitlab.com/gitlab-com/business-technology/enterprise-apps/intake/-/issues/322#note_666782612) for more info), but it seems like whether we go with order processed or order action processed, either one should contain an `order_id`.

### Result

Feature flag created: https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/104/edit",1
93027345,2021-09-02 18:10:02.653,Remove amendment from Product object,"## Background

When using the Amend API to make changes to a subscription, the Subscription Rate Plan ends up with a reference to the `amendment_id` responsible for the change. As part of the [Orders Harmonization](https://gitlab.com/groups/gitlab-org/-/epics/6641) testing, we noticed when using Orders to make changes to a subscription, there is no `amendment_id` on the Subscription Rate Plan (interestingly there is an `amendment_type`).

CustomersDot uses this reference to the `amendment_id` in order to build a `Product` object ([ref](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/ac33b9df3ddfd21f27eaad5e452d86394ecb7384/app/models/product.rb#L22)) for the subscription (think of this as an object representing the products attached to the subscription). 

As far as we can tell, the amendment on the Product is used only to determine [the ](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/ac33b9df3ddfd21f27eaad5e452d86394ecb7384/app/models/product.rb#L52)`created_at` datetime of the Product. CustomersDot is using the `created_date` of the amendment as the Product's `created_at` date. It's not exactly clear why this is using the amendment, but was introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/333 over 2 years ago. Perhaps this information could be pulled from the Subscription Rate Plan, Charge or Tier, and eliminate this dependency on the amendment.

## Purpose

Investigate if `amendment` can be removed from [the `Product` model](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/ac33b9df3ddfd21f27eaad5e452d86394ecb7384/app/models/product.rb#L22).  It appears to only be used for [the `created_at` method](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/ac33b9df3ddfd21f27eaad5e452d86394ecb7384/app/models/product.rb#L52) (but we should confirm that).  If we use other object like the Subscription Rate Plan, Charge or Tier to get a ""created"" timestamp of the product, we would be able to remove amendment.

We also noticed that the [amendment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/937b0ca6dd146c43fb21a5d8bff356824e052bd9/app/models/subscription.rb#L72) in the subscription object appears to be only used for product initialization. We should determine if it can be removed from Subscription as well.",2
93009357,2021-09-02 13:23:35.754,Add Danger reminder for updating DB structure diagrams,"# Proposal

As mentioned in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3547#note_667582820, [the `database/Dangerfile`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/9c670a912f16fa2877c4ed8d96c572cb525f75ab/danger/database/Dangerfile) could be updated to include a reminder about how/where to update the [db structure diagrams on the Fulfillment architecture page](https://about.gitlab.com/handbook/engineering/development/fulfillment/architecture/#database-structure-of-customersdot-and-licensedot).",1
92961922,2021-09-01 22:11:36.686,[Documentation] CustomersDot <> Zuora Object Mapping,"### Problem

We need a way to understand how Zuora objects are mapped in CustomersDot.  This helps solve several business and technical challenges.  For one, this helps when analyzing impact of a change.  It helps in describing scope of a required change.  It can also help with communicating the state of a subscription resulting from an order/account update.

### Proposal

Create information oriented documentation that describes and maps Zuora object fields to fields in CustomersDot.  At the very least, the documentation includes:

- list of fields in CustomersDot and the corresponding field it maps to in Zuora
- each field is fully qualified and specifies the source, table name and field name (ie: Source, TABLE_NAME.FIELD_NAME )
- each field describes when they are initialized, and possibly subsequent updates, if appropriate
- each field describes initial value, if appropriate",2
92945411,2021-09-01 15:50:53.269,Error transferring CI minutes between namespaces,"https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2780568/?referrer=gitlab_plugin

```
Stacktrace (most recent call first):

  lib/gitlab/logger_helpers.rb:24:in `public_send'
    Gitlab::Logger.public_send(log_level, object, options) # rubocop:disable GitlabSecurity/PublicSend
  lib/gitlab/logger_helpers.rb:24:in `log'
    Gitlab::Logger.public_send(log_level, object, options) # rubocop:disable GitlabSecurity/PublicSend
  lib/gitlab/logger_helpers.rb:13:in `log_error'
    log(:error, error, extra: extra)
  app/services/gitlab/hosted_plans/purchased_add_ons/transfer_ci_minutes_service.rb:23:in `rescue in execute'
    log_error(
  app/services/gitlab/hosted_plans/purchased_add_ons/transfer_ci_minutes_service.rb:17:in `execute'
    def execute
  app/services/gitlab/namespaces/update_plan_info_service.rb:120:in `update_gitlab_ci_minutes'
    ).execute
  app/services/gitlab/namespaces/update_plan_info_service.rb:77:in `update_new_namespace'
    update_gitlab_ci_minutes
  app/services/gitlab/namespaces/update_plan_info_service.rb:38:in `execute'
    update_new_namespace
  app/workers/zuora_callout/base_worker.rb:73:in `sync_gitlab_com_subscription'
    Gitlab::Namespaces::UpdatePlanInfoService.new(order, force_sync: true).execute
  app/workers/zuora_callback_worker.rb:24:in `perform'
    sync_gitlab_com_subscription(result[:order])
...
(31 additional frame(s) were not displayed)

Error transferring CI minutes between namespaces
```",2
92845286,2021-08-31 07:46:21.722,Revert quick fix of Zuora cloud license enabled flag,"# Summary of problem to solve

A [quick fix](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3706) was added to fix issues where future subscriptions are not cloud license enabled.

This potentially can have a [rare edge case](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3706#note_652209766), so we should remove this fix one month after it is deployed.

## Proposal
Revert the logic in seat link to enable all future subscriptions.
___",1
92644434,2021-08-26 14:14:11.722,Update activated_at when activate request received for a previously activated instance,"### Problem

As discussed in [this discussion thread](https://gitlab.com/gitlab-org/gitlab/-/issues/337531#note_661936602), an instance could fluctuate between the type of license used for their subscription.  They could start with a license file, then use a cloud license, back to a license file, and so on.  When a customer activates an instance for the first time, [the `activated_at` timestamp is set to the current datetime](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/e32106e55ef97492032ef0e8789119f637ed3272/app/services/cloud_activations/activate_service.rb#L61).  However, if the instance had previously been activated (IOW. a `SelfManagedInstanceActivation` already exists for the `activation_code` and `instance_identifier`, the `activated_at` isn't updated but it probably should be since the instance is activating again.

### Proposal

In [the `ActivateService`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/e32106e55ef97492032ef0e8789119f637ed3272/app/services/cloud_activations/activate_service.rb#L19), update the `activated_at` timestamp to the current time if the `self_managed_instance_activation` record already exists.  Also, make sure the new license generated after the `activated_at` is updated contains this change so that when synced to the instance the ""Activated On"" reflects the current time.

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

Adding this new logic to the activation service, to update the timestamp, a simple test should be added to ensure that this timestamp is updated to the appropriate time.  It is not enough to validate that the `activated_at` column has changed, but we must also validate the value.",2
92631329,2021-08-26 10:22:57.781,Replace Sentry.captureMessage with Sentry.captureException,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

For some reason we use `Sentry.captureMessage` for capturing exceptions and that leads to several problems:

- Unhelpful messages in out status channel in Slack. See the image below.
- `captureMessage` automatically assigns the `info` level to the message which breaks the error statistic because `captureException` sets the level to `fatal`. 

![image](/uploads/84f4af18c70d2af8791d8411433cc81f/image.png)

### Proposal

Replace all occurrences of `Sentry.captureMessage` with `Sentry.captureException` in places where we capture exceptions.

### Result

### Next steps (if any)

### How will we measure success?",2
92593820,2021-08-25 20:08:19.548,Remove obsolete trial code,"## Proposal

Let's investigate whether the `/trials/new` action and its related views can be removed.  If they aren't used anymore, removing all this related code should simplify the trials code in CustomersDot, which is pretty complex at the moment.

### Follow-up

The following discussion from !3743 should be addressed:

- [ ] @jagood started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3743#note_659686621):  (+2 comments)

    > I'm not sure what this function is for.  I only see it used here:  https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/e65123726c8ffb93bad38783f00ecdb2bf467b73/app/views/trials/_simple_gitlab_com_trial_form.html.haml#L16
    > 
    > Just guessing from the heading of that file, ""Free Trial of GitLab.com Gold"", maybe this is all unused code at this point?

We should also look at removing [`app/views/trials/_gitlab_com_trial_form.html.haml`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/2642d79401b3ecc422f71c047be30b5aff249c82/app/views/trials/_gitlab_com_trial_form.html.haml) as well as it also refers to a Gold Trial.

This should also take care of the work mentioned in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2782 related to removing these views:

* `app/views/trials/new.html.haml` 
* `app/views/trials/_simple_gitlab_com_trial_form.html.haml`",2
92528020,2021-08-24 21:57:14.967,[FE] Cloud Licensing - Workflow for Expired Cloud License,"## Summary

After a license expires, the GitLab instance becomes blocked and git features like pushes are blocked. Here's a link to the docs on this: https://docs.gitlab.com/ee/user/admin_area/license.html#what-happens-when-your-license-expires. When a customer is using a license file they will renew their subscription and upload a new license file to reinstate the features or remove the license file. This will be the same behaviour for cloud licenses, but there is currently no way for a customer to remove a cloud license from their self-managed instance. This issue is to design/investigate the removal of a cloud license. [Original discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3215#note_595998053).

## Proposal

- Add a remove license button to the Admin > Subscription page for cloud licenses
- Make a request to [`LicensesController#destroy`](https://gitlab.com/gitlab-org/gitlab/blob/a90ec139423285cd8046a6373603c4b79d85e46d/ee/app/controllers/admin/licenses_controller.rb#L37) (`DELETE /admin/license`)

## Backend

Issue: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3525",2
92527844,2021-08-24 21:48:35.054,[BE] Cloud Licensing - Workflow for Expired Cloud License,"## Summary

After a license expires, the GitLab instance becomes blocked and git features like pushes are blocked. Here's a link to the docs on this: https://docs.gitlab.com/ee/user/admin_area/license.html#what-happens-when-your-license-expires. When a customer is using a license file they will renew their subscription and upload a new license file to reinstate the features or remove the license file. This will be the same behaviour for cloud licenses, but there is currently no way for a customer to remove a cloud license from their self-managed instance. This issue is to design/investigate the removal of a cloud license. [Original discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3215#note_595998053).

## Proposal

- Add a remove license button to the Admin > Subscription page for cloud licenses
- Follow the same removal flow as legacy licenses

We should be able to reuse the same endpoint for deleting legacy licenses, [`LicensesController#destroy`](https://gitlab.com/gitlab-org/gitlab/blob/a90ec139423285cd8046a6373603c4b79d85e46d/ee/app/controllers/admin/licenses_controller.rb#L37).  We'll need to update [the `Licenses::DestroyService`](https://gitlab.com/gitlab-org/gitlab/blob/d926e54cc88ad2cba71a3579e033e10954066430/ee/app/services/licenses/destroy_service.rb#L13) to allow cloud licenses to be destroyed.",2
92520374,2021-08-24 18:10:30.325,New Trials Report as Free Plan in CustomersDot Backend,"### Problem

A trial plan using one of the new `ultimate_trial` plans appears as a `free` plan in the CustomersDot admin backend.

![Free](/uploads/673feef0ba96a4c4a3da42d913182020/Free.png)

Attempting to update the plan expiration date via the UI results in a 500 error:

![Screen_Shot_2021-08-24_at_2.08.08_PM](/uploads/c8f0ebb54126df76e2c01b557eca00e2/Screen_Shot_2021-08-24_at_2.08.08_PM.png)

And then the plan no longer has any expiration date in the CustomersDot backend:

![FreeExpirationMissing](/uploads/03b98525bb75609def93e705e3e19861/FreeExpirationMissing.png)

### Proposal

The dropdown options need the new `ultimate_trial` and `premium_trial` plans.",1
92469628,2021-08-24 01:58:00.729,Refinement: Update the Renew button to provide more information,"<!-- The first four sections: ""Problem to solve"", ""Intended users"", ""User experience goal"", and ""Proposal"", are strongly recommended, while the rest of the sections can be filled out during the problem validation or breakdown phase. However, keep in mind that providing complete and relevant information early helps our product team validate the problem and start working on a solution. -->

### Problem to solve

The ability to manually renew a subscription is only available starting 15 days prior to the expiration date of the subscription.

Currently, the renew button is disabled until 15 days before the expriration date with a tool tip explaining when the customer will be able to renew.

![Screen_Shot_2022-11-30_at_4.59.23_PM](/uploads/06d9ecd6f1b61cde47a2875103b60a83/Screen_Shot_2022-11-30_at_4.59.23_PM.png)

This has proven to be a confusing experience for customers because they often do not see the tooltip.

Additionally, customer sometimes try to find a way to pay true-ups without knowing that the true-up is paid at the same time as renewal.

### Intended users

Subscription owners/managers in CDot

### User experience goal

Customer know when they can renew and what they can do when they click the `Renew` button once it's available.

### Proposal

<!-- How are we going to solve the problem? Try to include the user journey! https://about.gitlab.com/handbook/journeys/#user-journey -->

Keep the renew button active at all times, regardless of whether or not the customer has the ability to renew. 

If the ability to renew is not available when they click the `Renew` button, show a modal explaining the renewal window and that they will pay for true-ups at the time of their renewal.

**Note:** We need to promote this issue to an epic and then break it down into smaller issues based on this [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3521#note_1318050870). The [refinement notes](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3521#note_1318042013) can be used for the issue breakdown.

**Design:** [See design section](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3521/designs/Clicking__Renew__when_renew_action_is_not_available.png)",1
92453968,2021-08-23 18:27:08.663,"MalformedQueryFault error raised because custom field, collectionsagent__c removed","### Problem

We're seeing some errors related to a malformed Zuora query in CustomersDot production.

- https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2769584
- https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2769590
- https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2769602
- https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2769599

Looks like the custom field, `collectionsagent__c` was removed from the Account object in Zuora production.

### Proposal

I've reached out to @mquitevis about restoring the field in Zuora production temporarily as we remove the reference from CustomersDot.",1
92285162,2021-08-19 16:30:14.304,Add  documentation to the CustomersDot REST API,"### Problem
Current REST API is not documented. To find out what we offer we need to check the code every time.

### Proposal
We could use [swagger](https://swagger.io/) for documentation.

- solves documentation & discoverability problem
- provides sandbox [SwaggerUI](https://swagger.io/tools/swagger-ui/) to allow developer and non developer to interact with APIs
- uses OpenAPI (fka Swagger Specification)

We would like to focus on `/subscription/*` endpoint first as it's the one we work the most at the moment

There is also [rswag](https://github.com/rswag/rswag#getting-started) gem for auto generated docs

#### What are our gains
- clean documentation
- faster lookup of what we have and how to use it
- spec could be used as a draft for future GraphQL endpoint during migration
- faster onboarding of new team members

#### Implementation plan
| Step | Issue |
| ------ | ------ |
| Setup documentation | 👉 you are here |
| Write the actual yaml docs for subscription | :white_check_mark:  https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3667 |

#### What we need to do
**Option A (preferred):** 
- Add openAPI integration https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3509#note_660256083, make sure the authentication works
- Document `/subscription*` routes

**Option B (in case integration doesn't work how it should):**
- add swagger specs & rswag integration (inspiration ""https://medium.com/@clarkjohnson_85334/adding-swagger-docs-to-a-rails-6-api-using-rswag-a3e8bc577986)
- add swagger UI (documentation)

Both steps are critical because just documenting won't help in better discoverability

### How will we measure success?
Checking on ""can we query X from CustomersDot"" will become a trivial 5-minutes task",5
92178935,2021-08-18 09:26:55.348,Add 'Trial' indication in license list,"For the investigation of license problems for customers with multiple subscriptions or a lot of historical changes, having as much info as possible available up front in the license list helps in narrowing down which license details need to be looked at. \
It would help if an indication was added showing if a license is a trial.

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

A frontend test should accompany this change to ensure that the indication is correct depending on the trial status.

- If License is not trial, do not show the indication.
- If License is trial, show the indication.",1
92146374,2021-08-17 20:52:23.858,New Trial Plans Do Not Expire Properly,"After we enable the `trial_plans` flag in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3378, trial plans will be created with their own plan - `ultimate_trial` instead of `ultimate`.

The new trial plans do not expire appropriately like the old plans do.

## Steps to reproduce

1. Create an ultimate trial using the current plans.  So that you have an `ultimate` trial plan.  (Not an `ultimate_trial` trial plan)

1. Enable the `trial_plans` and the `deprovision_newly_expired_subscriptions` feature flags for your local development environment.

1. Create an ultimate trial again.  This plan should end up with an `ultimate_trial` plan, because the `trial_plans` flag is enabled.  (`deprovision_newly_expired_subscriptions` is related to the `ExpireOrderCronJob` worker which comes into play later)

1. Open the billing pages for both plans.  In the screenshots below, we can see that both New Trial Group (`ultimate`) and Eric Group (`ultimate_trial`) have Ultimate Trial plans set to expire in the future.

New Trial Group (`ultimate`)

![Screen_Shot_2021-08-17_at_5.29.58_PM](/uploads/790932fb0dbc0b0b258f9df218ecc2ae/Screen_Shot_2021-08-17_at_5.29.58_PM.png)

Eric Group (`ultimate_trial`)

![Screen_Shot_2021-08-17_at_5.29.48_PM](/uploads/d11c2c54611f98bfb0b4758ad7e78f0a/Screen_Shot_2021-08-17_at_5.29.48_PM.png)


5. Set the system clock forward to a date after the Ultimate Trial expiry date.  In the running example, this would be any date after 2021-09-12.

![Screen_Shot_2021-08-17_at_5.35.03_PM](/uploads/0fb21e03bd7b66113da417e30a5948b0/Screen_Shot_2021-08-17_at_5.35.03_PM.png)

6. Wait briefly for the [`ExpireOrderCronJob`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/6d58fe82c4780841bea2c3f56b93f601e93274a0/app/jobs/expire_order_cron_job.rb) to run.  Refresh the browser and observe what happens to each trial plan.  See the screenshots below.  New Trial Group (`ultimate`) shows that it is expired and we can see from the lack of an ""Epics"" menu item that the Ultimate features have been withdrawn.  However, Eric Group (`ultimate_trial`) shows an error from CustomersDot and the Ultimate Trial features are still present, as evidenced by the ""Epics"" menu item.

New Trial Group (`ultimate`)

![Screen_Shot_2021-09-17_at_5.37.57_PM](/uploads/c40eea34357959deb70ce02aa2f3a6e7/Screen_Shot_2021-09-17_at_5.37.57_PM.png)

Eric Group (`ultimate_trial`)

![Screen_Shot_2021-09-17_at_5.37.40_PM](/uploads/7ff362412515791521cc107e24faf52b/Screen_Shot_2021-09-17_at_5.37.40_PM.png)",1
92142469,2021-08-17 19:04:09.576,Easier hyperlink to open license details page,"In the license list of LicenseDot, the `Name` field was the hyperlink to open the license details page. \
In CustomersDot this is replaced by an (i) icon.

The icon is tiny and far to the right, which might require horizontal scrolling. \
I would like to see the `Name` field act as hyperlink again.",1
92142211,2021-08-17 18:58:39.220,Add confirmation dialog to 'Resend to customer via email' icon from cloud activation and license list,"LicenseDot has a `Resend to customer via email` button on the license details page. \
In CustomersDot this functionality is now available as an icon in the license list. \
As the icon is tiny, amidst several other icons, and the resending is immediate, accidental resends will happen.

~~Either move the functionality to a button on the license details page~~, or add a confirmation dialog. \
Edit: button is already present on the license details page.",2
92142042,2021-08-17 18:53:14.560,Show license details page after creating a license,"## Summary

After creating a new license in CustomersDot, the details page of the license that happens to be be the license at the top of the list (?) is shown. \
That's utterly confusing, you expect to see the details of the license you just created.

## Proposal

Display details of the newly created license after submit.",1
92141935,2021-08-17 18:49:51.337,Show license details page after duplicating a license,"## Summary
After duplicating a license in CustomersDot, the details page of the license from which you duplicated is shown. \
That's very confusing, as you expect to see the details of the new license you just created.

## Proposal

Display details of newly duplicated license upon submit instead of the original.",0
92141600,2021-08-17 18:46:22.943,Message that duplicated license is mailed,"When you duplicate a license in CustomersDot, a message is shown: `License successfully created`. \
LicenseDot shows the message: `License was successfully created and sent to customer`. \

As the current message doesn't mention that the license is emailed, users might start doubting that all went well. \
It confused me the first time!",1
92140416,2021-08-17 18:31:52.735,Allow manual entry of dates in CustomersDot datepicker,"## Summary

The `New Offline License` and `Duplicate license` forms in CustomersDot have a datepicker that doesn't seem to accept manual entry of dates. \
We often copy/paste or type dates in ISO 8601 format, in addition to clicking around in the calendar to pick the date.

## Proposal

Add ability to paste a date from a user's clipboard.",3
92140281,2021-08-17 18:28:33.228,Standardizing ISO 8601 for date and time across CustomersDot Admin,"The `New Offline License` and `Duplicate license` forms in CustomersDot show dates in `MMMM DD, YYYY` format. \
This should be the company standard `ISO 8601` format.",2
92139958,2021-08-17 18:21:40.889,Show 'Previous Users Count' and 'Trueup Count' in CustomersDot's list of licenses,"Recently LicenseDot was improved by showing the `Previous Users Count` and `Trueup Count` in addition to `Users Count` in the list at https://license.gitlab.com. \
This proves to be very useful while investigating license problems. \
By looking at the values in the list you know which licenses are worth including in the investigation and which are not.

CustomersDot's license list at https://customers.gitlab.com/admin/license only shows `Users Count`. \
Please add `Previous Users Count` and `Trueup Count`.",1
92075345,2021-08-17 02:39:18.073,Inform Sales of limitation when disabling cloud license,"For https://gitlab.com/gitlab-org/gitlab/-/issues/337958 we created a temporary fix, however there can be an edge case: 

> especially for customers that have multiple instances. Say we have a customer who originally activated using cloud and later wants to use offline licenses. Support or Sales manually updates the Zuora subscription with `TurnOnCloudLicensing__c` as ""No"", and provides the customer with an offline license. Say the customer does not install the license immediately, the Zuora subscription might be reverted back to `TurnOnCloudLicensing__c` as ""Yes"". Those with multiple instances would need to make sure all had an offline license applied before seat link ran again.

@teresatison do you know how we can communicate with Sales/Support that, if we ever want to revert from cloud license back to offline license, the offline license must be applied before seat-link occurs, and **on all instances**?

Our temporary fix will be removed after 1-2 month, after that Sales/Support will no longer need to worry about this.",0
92046756,2021-08-16 15:09:09.259,Renewal license has 'Previous users count' set to 'Users count',"### Summary

A renewal license was generated with an incorrect `Previous users count`. \
The `Previous users count` happens to be the same as the `Users count`. \

This could be a coincidence, but I recall someone recently mentioning a similar incorrect renewal. \
Could not find an issue for it though.

### Workaround

Manually create a license with the correct numbers.

### Reported examples

1. https://customers.gitlab.com/admin/license/1000674
1. https://gitlab.zendesk.com/agent/tickets/232843, https://customers.gitlab.com/admin/license/1000852
1. https://gitlab.zendesk.com/agent/tickets/242306, https://customers.gitlab.com/admin/license/1003353
1. https://gitlab.zendesk.com/agent/tickets/237329, https://customers.gitlab.com/admin/license/1003239
1. https://gitlab.zendesk.com/agent/tickets/242071, https://customers.gitlab.com/admin/license/1003463
1. https://gitlab.zendesk.com/agent/tickets/242947, https://customers.gitlab.com/admin/license/1004046
1. https://gitlab.zendesk.com/agent/tickets/251300, https://customers.gitlab.com/admin/license/1008102
1. https://gitlab.zendesk.com/agent/tickets/255564, https://customers.gitlab.com/admin/license/1010903
1. https://gitlab.zendesk.com/agent/tickets/258317, https://customers.gitlab.com/admin/license/1012418
1. https://gitlab.zendesk.com/agent/tickets/261120, https://customers.gitlab.com/admin/license/1014650
1. https://gitlab.zendesk.com/agent/tickets/279611

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",3
91951337,2021-08-13 17:42:36.219,[UX] Information Hierarchy and General Layout for Support Admin Tool,"## User Story

As a product owner, I want to map current user flows and object domains in CustomersDot Admin Support Tool to help design and improve the information hierarchy and layout for users.

## Deliverables

- IA Documentation
- List of user flows 
- Conduct interviews with Support tooling users
- UX Scorecards on user JTBD (Still to be defined)",5
91947348,2021-08-13 15:44:51.353,Exclude trials from deletion of groups/namespaces when they have a subscription,"### Problem

After the implementation of https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1879 , users can no longer delete a group while there is a trial.

However, unlike a regular subscription, trials cannot be removed from a group. So a user must wait 30 days for the trial to expire before having the option to delete the group.

While it's not a complete blocker, it is a significant inconvenience for users. If they want it deleted earlier, they have to write into support, who can change the trial expiration date.

Just for reference, we encountered this while wanting to test: https://gitlab.com/gitlab-org/gitlab/-/merge_requests/66951

### Proposal

Exclude trials from the subscription check for deletion of groups/namespaces. If needed, we can wait until the trial specific plans `ultimate_trial` and `premium_trial` are in use.

### Result

Users should be able to delete trial-only namespaces.

### Next steps (if any)

### How will we measure success?",2
91888517,2021-08-12 17:31:14.924,Prod gitlab_customers_dot_jwt_public_key not populating,"Related to https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3000

For some reason, `gitlab_customers_dot_jwt_public_key` is not populating in `secrets.yml` for production. It is for staging. 

template updates: https://gitlab.com/gitlab-cookbooks/cookbook-customers-gitlab-com/-/merge_requests/133  
vault values: https://gitlab.com/gitlab-com/gl-infra/infrastructure/-/issues/13949",1
91825782,2021-08-11 16:15:37.882,Unify property names for CI Minutes and Storage,"While working on !3689 we figured out that we use `productNameFull` and not `productName` in a majority of places withing addons purchase flow. `productName` is only used once for purchase success notification.

- [ ] @sheldonled started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3689#note_648238773):  (+4 comments)

    > **question**: can we unify `productName`, `productNameFull`, `productNameShorthand` into just `productName`?

## Suggestion

1. Remove the `productName` from the https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/frontend/javascripts/purchase/products.js
1. Update all usages of `productName` to use `productNameFull`
1. Rename `productNameFull` into `productName`

## Visual changes that would be caused this way

No visual changes for CI Minutes, only Storage

| Before (Storage) | After (Storage) |
| ------ | ------ |
| ![Screenshot_2021-08-11_at_18.10.48](/uploads/57d3bbc5c53730a28f7f71c79735b46f/Screenshot_2021-08-11_at_18.10.48.png) | ![Screenshot_2021-08-11_at_18.12.47](/uploads/0e571ae3fa7a9ce8c341d744c52a2ecb/Screenshot_2021-08-11_at_18.12.47.png)|",1
91751032,2021-08-10 13:59:36.649,Update Storybook setup,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
Storybook has an outdated setup and is not widely used for dev/design topics rather for test runs.

### Proposal
We can get more out of the tool, it offers a great dev environment for isolated components. It can be used together by designer and developer to check components before they land in staging/production.

To achieve it, we could introduce a couple of addons that make developers lives easier. As a minimum, we should consider adding [essential addons](https://storybook.js.org/docs/vue/essentials/introduction) (especially [controls](https://storybook.js.org/docs/vue/essentials/controls) that offers dynamic props change). These addons are already used by `gitlab` project.

Also, it's time to migrate the setup to use `main.js`, `preview.js` and add postcss-addon on top. It would not only remove the deprecation warnings but make us ready for Storybook 7 (most likely to be released in 2021).

### Next steps (if any)
If we cover the two topics above, we can consider updating the old and/or building new stories utilizing mentioned addons and involving designers to check/test components and pages in Storybook.",2
91660967,2021-08-09 07:53:34.509,CI Minutes Provisioning - Trigger namespace change,"### Establish CI Minute Purchase Identifiers on GitLab

The following outlines requirements from the architecture proposal as defined in !3142, we've split up the tasks into separate issues along system boundaries.

**Base components**

* [x] Add a table in the GitLab DB: https://gitlab.com/gitlab-org/gitlab/-/merge_requests/62393

**API (re-)Sync components**

* [x] Create a new endpoint that moves packs: https://gitlab.com/gitlab-org/gitlab/-/merge_requests/64212

**Support Namespace Changes**

* [x] Trigger an update of the namespace ID via the endpoint added above :point_left_tone3: **we are here**


### Testing and verification

As part of this work, we have put https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2925 behind a feature flag until this issue is complete. We will need to verify both flows (new purchases and namespace changes) are applied correctly once this work is complete and the feature flag enabled.",5
91571479,2021-08-06 14:51:25.947,Remove version check when setting Super Sonics flags processing renewal amendments,"### Problem

As described in [this thread](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3034#note_639971420):

> Just to summarize where we are now, we decided that for renewals to be eligible for cloud licensing we would check a number of factors ([defined here in code](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/b7ab6e6ec6167bfae68f5cd045e245bb7500c0c3/app/workers/zuora_callback_worker.rb#L113)) when processing the renewal amendment callout. The one that I'm wondering about is the gitlab version check. This check works by querying for the latest seat link record for the subscription where the gitlab version is available, and compares this version to the minimum version requirement for cloud licensing (14.1).
>
> I think this is a problem because after we decided on this path, we later decided to no longer send seat link data from GitLab starting on version 14.1 unless the SM instance did has a license with cloud licensing enabled. I don't see how any renewal would be eligible for cloud licensing given we won't receive the version data for 14.1.
> 
> Now that we are rolling out with both types of licenses (offline and cloud), I wonder if we shouldn't just remove the GitLab version requirement altogether. Before we were concerned about forcing customers into the cloud license strategy that they weren't prepared for, but that shouldn't matter now.
>
> It has some nice side benefits as well like:
>
> 1. Gets more people with the option of cloud licensing.
> 1. Might entice more customers to upgrade their GitLab version when renewing.
> 1. Removes a query against the LicenseSeatLink table which probably won't be performant over time.
> 1. Makes the code cleaner.

### Proposal

Remove [the GitLab version check](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/7c54a467dcecf386814d5d9e524c98b6be87dc07/app/workers/zuora_callback_worker.rb#L118) that happens in the `ZuoraCallbackWorker` as part of the logic to decide whether the subscription should have the Super Sonics custom fields set at renewal.",1
91559700,2021-08-06 11:04:24.338,Downloading a license results in a new license being generated,"<!---
Please read this!

Before opening a new issue, make sure to search for keywords in the issues
filtered by the ""bug"" label in relevant trackers:

- https://gitlab.com/gitlab-org/gitlab/issues?label_name%5B%5D=bug
- https://gitlab.com/gitlab-org/customers-gitlab-com/issues?label_name%5B%5D=bug

and verify the issue you're about to submit isn't a duplicate.

Do not include confidential information!
--->

### Summary

Each time a license is downloaded from the `Customers Portal > Manage purchases` screen, a new license is generated.

### Steps to reproduce

- Go to `Customers Portal > Manage purchases` screen
- Use the `Download license` button to download the license file. Do this twice.
- Observe in https://customers.gitlab.com/admin/license that the license was created twice. Inspecting the details page will show a different digest and key.
- Decoding the downloaded files will show that the information is the same in both files.

### What is the current *bug* behavior?

Each time a license is downloaded from the `Customers Portal > Manage purchases` screen, a new license is generated.

Possibly relevant is that for the subscription where I observed this behavior the existing license was present in LicenseDot, but not yet in CustomersDot.

### What is the expected *correct* behavior?

Each time a license is downloaded from the `Customers Portal > Manage purchases` screen, the existing license is returned.

### Relevant logs and/or screenshots

(Paste any relevant logs - please use code blocks (```) to format console output,
logs, and code as it's tough to read otherwise.)

### Workarounds

(Ways to get around the issue)

### Reported examples

1.
1.
1.

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",2
91549815,2021-08-06 08:28:04.182,[FE] Validate activation code length on frontend,"### Problem

Many tried to pass the license file as an activation code during Cloud License activation. License files are all very long while activation codes are a length of 24 characters.

### Proposal

- We should validate the length of the activation code in the front end. This can quickly help customers to understand that they have entered the wrong thing in the activation code field.
- We should also include some help text underneath the activation input field...<br>`This activation code is a 24-character alphanumeric string.`

![Frame_21](/uploads/cb9dba022be5e8210672911422124b18/Frame_21.png)

### Result

- Customer can learn about mistakes more quickly.
- Reduce errors on sentry",1
91511127,2021-08-05 15:17:56.666,Seat Link fails when license data contains subscription id exceeding 64 characters,"https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2708483/?referrer=gitlab_plugin

```
PG::StringDataRightTruncation: ERROR:  value too long for type character varying(64)

  app/services/seat_link_create_service.rb:22:in `execute'
    if seat_link.save
  app/controllers/api/v1/seat_links_controller.rb:13:in `create'
    ).execute
  lib/middleware/health_check/health_check_responder.rb:14:in `call'
    return @app.call(env) if format.nil? || (ip_blocked(env) && not_authenticated(env))
...
(135 additional frame(s) were not displayed)

ActiveRecord::ValueTooLong: PG::StringDataRightTruncation: ERROR:  value too long for type character varying(64)
```

### Problem

Seat Link fails when the license in the request contains a `zuora_subscription_id` that exceeds the limit (64 characters) for this column in the `license_seat_links` table.  This appears to be happening because LicenseDot does not have a length limit on the `zuora_subscription_id` column and some manually created licenses exceeded 64 characters.  When these licenses are received used for Seat Link, we see the errors like above.

In reality, a `zuora_subscription_id` should only be 32 characters in length so anything longer than that is likely a mistake.  It appears there are 9 licenses currently in LicenseDot that exceed this limit.  In all 9 cases, the `zuora_subscription_id` appears to be a mistake, where a URL was entered instead of an id (see below from LicenseDot).

```
irb(main):001:0> License.where('LENGTH(zuora_subscription_id) > 64').count
D, [2021-08-05T15:03:28.552984 #62] DEBUG -- :    (477.9ms)  SELECT COUNT(*) FROM ""licenses"" WHERE (LENGTH(zuora_subscription_id) > 64)
=> 9

irb(main):002:0> licenses = License.where('LENGTH(zuora_subscription_id) > 64').pluck(:zuora_subscription_id)
=> [""https://www.zuora.com/apps/Subscription.do?method=view&id=2c92a0fe65cb1a800165d208b79e5a56"", ""2c92a0fd7912307c01791493f4342e59#anchor2c92a0fd7912307c01791493f4592e5e"", ""https://www.zuora.com/apps/Subscription.do?method=view&id=2c92a0ff64176cd401641ee1a7ce411b"", ""https://gitlab.recurly.com/subscriptions/36cee8c72c0efd0ceb07ec4c04b8367a"", ""https://gitlab.recurly.com/subscriptions/36cee8c72c0efd0ceb07ec4c04b8367a"", ""https://gitlab.recurly.com/subscriptions/36cee8c72c0efd0ceb07ec4c04b8367a"", ""https://www.zuora.com/apps/Subscription.do?method=view&id=2c92a0fe65cb1a800165d208b79e5a56"", ""https://www.zuora.com/apps/Subscription.do?method=view&id=https://www.zuora.com/apps/Subscription.do?method=view&id=2c92a0fe65cb1a800165d208b79e5a56"", ""https://www.zuora.com/apps/Subscription.do?method=view&id=2c92a0ff67756a270167762a68561538""]
```

### Proposal

This error should not happen with cloud licensing but there are things we can do to limit this happening going forward.  Here are some things to consider:

- We can validate the `zuora_subscription_id` when creating licenses.  We have an issue for this already: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3385.
- We should include rails validations on the `License` model to match the limit DB constraints for a better user experience when creating licenses.
- We could have sales or support provide corrected licenses to customers to avoid the errors above.",1
91483446,2021-08-05 08:59:54.430,[Daily Pipeline Fails 4 of 4] Enable daily pipeline run with empty VCR cassettes again,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

The [daily pipeline run with empty VCR cassettes](https://gitlab.com/gitlab-org/customers-gitlab-com/-/pipeline_schedules/118484/edit) has been disabled for over a year now. The pipeline didn't pass back then since a lot of new specs were added that use VCR cassettes but there wasn't a rerecordability for all of them.

### Proposal

After all other issues from [the epic](https://gitlab.com/groups/gitlab-org/-/epics/6519) are closed, enable the daily pipeline run with empty VCR cassettes again.

### Result

The daily pipeline run with empty VCR cassettes

### Next steps (if any)

### How will we measure success?",1
91482844,2021-08-05 08:53:26.945,[Daily Pipeline Fails 3 of 4] Evaluate LicenseDot instance usage for daily pipeline run with empty VCR cassettes,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Similar to https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3438, we may require an instance for LicenseDot to use for the daily pipeline run with empty VCR cassettes.

**Note:** It might make sense to tackle https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3551 before this issue since it won't be necessary to have a LicenseDot instance anymore then.

### Proposal

- Evaluate if it's sufficient to reuse LicenseDot staging since LicenseDot is going to be deprecated at some point (if yes, weight: 1)
- If the answer to the above is no, implement something like a temp instance similar to what is being done for a temp GitLab instance in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3438 (weight: 3)

### Result

Clean separation between an instance that is only needed for specs and other envs.

### Next steps (if any)

### How will we measure success?",0
91482450,2021-08-05 08:49:16.731,[Daily Pipeline Fails 2 of 4] Use temp GitLab instance for daily pipeline run with empty VCR cassettes,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

There are quite a few requests that are sent to a GitLab instance when running the test suite with empty VCR cassettes. Since the requests are not only get requests, but also put and post ones, we need a own GitLab instance for the daily pipeline run with empty VCR cassettes.

### Proposal

- Check with QA how they spin up a docker instance for the E2E tests (https://gitlab.com/groups/gitlab-org/-/epics/6519#note_643775127)
- Implement the same for the daily pipeline run
- Seed the instance with the test data from [this spec support class](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/3f0cc55d1ef0ee32df77719f5cb5a6743c37b5b3/spec/support/gitlab_seed_service.rb)

### Result

An instance that is only used for specs to write and read data from without polluting other environments like GitLab.com staging.

### Next steps (if any)

### How will we measure success?",5
91481961,2021-08-05 08:42:09.618,Automatically retry failed specs in a pipeline run,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Some specs in the test suite require multiple tries in order to pass. This is going to be a problem for the daily pipeline run with empty VCR cassettes.

### Proposal

Implement retry mechanism into the test suite. Evaluate gems like [rspec-retry](https://github.com/NoRedInk/rspec-retry) that QA is using for E2E tests.

### Result

Making a successful pipeline run with empty VCR cassettes possible by avoiding failures due to random errors like flaky specs, Zuora timeouts or not finding an element.

### Next steps (if any)

### How will we measure success?",0
91481780,2021-08-05 08:39:37.117,Automatically retry failed specs in a pipeline run,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Some specs in the test suite require multiple tries in order to pass. This is going to be a problem for the daily pipeline run with empty VCR cassettes.

### Proposal

Implement retry mechanism into the test suite. Evaluate gems like [rspec-retry](https://github.com/NoRedInk/rspec-retry) that QA is using for E2E tests.

### Result

Making a successful pipeline run with empty VCR cassettes possible by avoiding failures due to random errors like flaky specs, Zuora timeouts or not finding an element.

### Next steps (if any)

### How will we measure success?",3
91481528,2021-08-05 08:35:12.343,[Daily Pipeline Fails 1 of 4] Make all specs rerecordable,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

For the daily pipeline run with empty VCR cassettes, we have to make sure that all specs that use VCR are rerecordable.

### Proposal

Find specs that are not rerecordable and fix them.

### Result

All specs being rerecordable.

### Next steps (if any)

### How will we measure success?",2
91457274,2021-08-04 20:06:59.838,Feature Request: add 'download license' to admin section,"With license file management moving into CustomerDot admin section now, there doesn't appear to be a way to download the license file, a function that was very useful in LicenseDot.  You can see the license text, but this is not useful for downloading and sending it along; the line breaks get converted into spaces which breaks the license.  Also it's just more convenient having a one-click option for retrieving the license.

There's sort of a workaround by impersonating the user and downloading the file, but this is only applicable to the most recent version of a license, and is error prone ([1](https://gitlab.com/gitlab-org/license-gitlab-com/-/issues/217) [2](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3419) [3](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2799))

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

Frontend and feature tests should accompany this change.

- Frontend tests should ensure that the download license link is present.
- Feature test should ensure that the appropriate MIME is presented, as well as the content within.  (Validate that the downloaded content is the same as the text displayed.)",2
91449921,2021-08-04 16:40:12.780,Cloud License: Investigate reseller purchases getting activation codes,"### Summary

[Related slack](https://gitlab.slack.com/archives/C018C623KBJ/p1628090677137200?thread_ts=1628088842.119600&cid=C018C623KBJ)

Reseller purchased licenses should not create and send cloud activation codes.

@teresatison mentioned in slack:

> reseller was out of scope for V1, so no changes there.

But per @amandarueda 

> We should have a look into this because an activation code was generated for this reseller deal.

### Reported examples

1. https://gitlab-federal-support.zendesk.com/agent/tickets/1258 (US team only)
1.
1.

<!---
Please add both severity and priority level according to: https://docs.gitlab.com/ee/development/contributing/issue_workflow.html#severity-labels
--->",2
91448543,2021-08-04 16:08:36.151,Allow edits to super_sonics_aware in Admin interface,"### Problem

As discussed in [this Slack thread](https://gitlab.slack.com/archives/CNA13RPPA/p1627925913041500?thread_ts=1627924518.040700&cid=CNA13RPPA), there might be times when Admins would need to edit the `super_sonics_aware` flag for `CloudActivation` records.  This currently isn't possible in the Admin interface.

### Proposal

Allow the `super_sonics_aware` field to be editable from the Admin interface.  We should probably document when this feature should be used.  For example, a customer must legally accept new terms of service before using cloud licensing so this should be known before enabling `super_sonics_aware` for a subscription.

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

With the possibility of the ""accepting new terms of service"", this would call for a new end-to-end test to be created to test this flow.  A [test case](https://gitlab.com/gitlab-org/customers-gitlab-com/-/quality/test_cases) should be created and a test should be written.",2
91447558,2021-08-04 15:43:10.092,CloudActivation should match on subscription_name only,"### Problem

We realized in a few cases distinct customer records in CustomersDot can share the same `zuora_account_id`.  Cloud Activations have attributes for `subscription_name` and `customer_id`.  Both attributes are currently used when finding a cloud activation for a subscription ([code](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/748cbc04aee7725b5d6d9544f64768bcf5756768/app/models/subscription.rb#L420)), despite the fact that the subscription could be shared by multiple customer accounts.  This leads to a problem where a customer that has access to a subscription but wasn't the creator of the subscription does not see the activation code in the subscription card in CustomersDot.

![Screen_Shot_2021-08-04_at_9.16.50_AM](/uploads/8957e12288942df79de6dc3d6b47a7f6/Screen_Shot_2021-08-04_at_9.16.50_AM.png)

See [this Slack thread](https://gitlab.slack.com/archives/CNA13RPPA/p1628085874075700) for more details.

### Proposal

Update the [code for finding a cloud activation](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/748cbc04aee7725b5d6d9544f64768bcf5756768/app/models/subscription.rb#L420) for a subscription to only look up by `subscription_name`.  Find any other cloud activation code that involves `customer_id` and consider whether it should be adjusted.",2
91432439,2021-08-04 12:13:06.441,Namespace Select should take advantage of v-model,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Our [`NamespaceSelect` Component](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/frontend/javascripts/purchase/components/namespace_select.vue) helps us in managing the namespaces selection nicely. There are a couple of things we can improve though:

1. its API forces the parent to manually manage the state
1. its API seems to have knowledge the parents will use the data for some other actions
1. its usage from the parent components is not always consistent

|An example from Storybook|
|-|
|![Screenshot_2021-08-04_at_14.03.07](/uploads/ddb754f9c2d21767a70e3b313756b474/Screenshot_2021-08-04_at_14.03.07.png)|

### Proposal

To help with the improvements above, let's make the `NamespaceSelect` `v-model`-ready by [configuring it](https://vuejs.org/v2/api/#model):
- using `change` event to propagate the selection, which is the newly selected `namespace`:
- `value` as the prop for the selected namespace
- `initialNamespaceId` would be good to stay only as a non-required prop to define the initially selected id

A selector is a quite common scenario where a `v-model` would turn useful to avoid 1). Also, a `v-model`-enabled component can support divergent usages (like the ones specified in the [notes below](#notes)), but should not be designed based on the assumption of such usages.

### Notes

The namespace selection is sometimes used to perform other operations as a consequence of the selection (see examples of usage). While this might not be ideal, changing this approach would result in a much larger scope. To circumvent this, we can rely on the usage of `watch`:

```js
watch: {
    selectedNamespace() {
      // operation to perform
    },
  },
```

In at least one case, the `change` event is just proxied. This is a valid approach for `v-model`-enabled components as well. We can keep it as-is.

### Result

Having this way, we can avoid manual handling of data mutation in some of the parent components using it. Here's a list of where it's used:

- [New GitLab Subscription Form](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/frontend/javascripts/subscription/components/new_gitlab_subscription_form.vue)
- [Change Namespace Form](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/frontend/javascripts/subscription/components/change_namespace_form.vue)
- [Purchase Details Card](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/frontend/javascripts/purchase/components/purchase_details_card.vue)

### Next steps (if any)

After having introduced `v-model` capability for the component, tag `@fulfillment-group/fe` on the Issue to notify them of the change and/or share the news in `#s_fulfillment_engineering`.",3
91396768,2021-08-03 20:20:01.159,Multi Year Subscriptions and License file start/end dates,"### Summary

Self-managed subscriptions sold with a validity period greater than 12 months result in a license file always being generated for the original start date and original end date.  This includes any amendments made to the subscription, such as adding users, often resulting in the system generating a license file with a 12-month validity period in the past.


### Steps to reproduce

1. Have a multi-year subscription
1. Create any amendment to it that would result in a new license being generated, like adding seats to the license, during year 2 or 3.

### What is the current *bug* behavior?

License files created with outdated validity periods. 

**Reason:**
* We generate a legacy license with `term_start_date` + 1 year based on our logic of generating all legacy licenses for 1 year.
* The problem with this is that `term_start_date` matches the original subscription start date - so when we are year 2 or 3 of a MY subscription and a new license is generated, it will be for the first year only.

### What is the expected *correct* behavior?
Generate a license file that matches the relevant, current year of the subscription.


### Workarounds

Generate license manually with the correct dates.

### Reported examples

1. https://license.gitlab.com/licenses/180420
   - Issued at 2021-06-22 ; Starts at 2018-09-28, the original date of the [first amendment on the subscription](https://www.zuora.com/apps/Subscription.do?method=view&id=2c92a00766206962016630c57a8f4072)
1. gitlab-com/support/internal-requests#8536
1. https://gitlab.zendesk.com/agent/tickets/223424
   - [added users to a multi-year](https://www.zuora.com/apps/Amendment.do?method=viewInfo&id=2c92a0fe7a8544b7017a87139ba95503), resulting [license file](https://license.gitlab.com/licenses/182744) Issued at 2021-07-08 ; Starts at 2020-05-22
1. https://gitlab.com/gitlab-com/support/internal-requests/-/issues/8911
   - https://customers.gitlab.com/admin/license/1000675, Issue at 2021-08-12, Starts at 2020-09-30
   - After clicking the download license file in the subscription, a new license was generated: https://customers.gitlab.com/admin/license/1001375, issue at 2021-08-25, Starts at 2020-09-30 

## Proposal
Dynamically calculate the license `end date` and license `start date` for a multi-year subscription on a legacy or offline license based on the provision date.
* By dynamically setting `end date` of the license based on the provision date, we ensure the license is aligned to the current term.
* By dynamically setting `start date` based on provision date, the 1-year increment logic can hold true, allowing true-ups to be calculated correctly. 

Note: an alternative option is to generate all legacy licenses for the full subscription term (i.e. 3 years) but this is not something we are prepared to move to at this time ([comment for details](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3421#note_1230790958)).",3
91372866,2021-08-03 12:57:12.850,PG::StringDataRightTruncation error occurring on activation,"https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2747467/?referrer=gitlab_plugin

```
Stacktrace (most recent call first):

  lib/gitlab/logger_helpers.rb:24:in `public_send'
    Gitlab::Logger.public_send(log_level, object, options) # rubocop:disable GitlabSecurity/PublicSend
  lib/gitlab/logger_helpers.rb:24:in `log'
    Gitlab::Logger.public_send(log_level, object, options) # rubocop:disable GitlabSecurity/PublicSend
  lib/gitlab/logger_helpers.rb:13:in `log_error'
    log(:error, error, extra: extra)
  app/services/cloud_activations/activate_service.rb:132:in `handle_error'
    log_error(message, extra: extra)
  app/services/cloud_activations/activate_service.rb:36:in `rescue in execute'
    handle_error(e.message)
  app/services/cloud_activations/activate_service.rb:21:in `execute'
    def execute
  app/graphql/mutations/cloud_activations/activate.rb:23:in `resolve'
    ).execute
  app/controllers/graphql_controller.rb:21:in `execute'
    result = PaymentAppSchema.execute(query, variables: variables, context: context, operation_name: operation_name)
  lib/middleware/health_check/health_check_responder.rb:14:in `call'
    return @app.call(env) if format.nil? || (ip_blocked(env) && not_authenticated(env))
...
(135 additional frame(s) were not displayed)

PG::StringDataRightTruncation: ERROR:  value too long for type character varying(32)

```",1
91243730,2021-08-02 06:35:25.745,"Follow-up from ""Add super sonics aware on cloud activations list""","## Proposal

In !3625 we added ""super sonics aware"" column to cloud activation list as follows:

![](https://gitlab.com/gitlab-org/customers-gitlab-com/uploads/f44be93d329f0f0a238a9021a4192d77/Screen_Shot_2021-07-30_at_10.59.06_AM.png)

During the review a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3625#note_639917181) came up about the output of that column if it is suitable from a UX perspective (it will output either `true` or ` false`), an argument that it's okay is that only admins will see that table.

Should we change this value to something else, or it's okay to keep as is?",0
91110851,2021-07-29 18:52:09.220,Some Admins do not have the expected access levels after Okta sign in,"### Problem

There are multiple reports of Admins, mostly Support team members, that do not have the expected read/write access to the Customers Admin interface.  It seems that after signing in via Okta, the Admin record is updated with the read only access level to Customers information. 

Please see this [Slack thread](https://gitlab.slack.com/archives/CK4EQH50E/p1627532249099000) for more details.

#### Background

[Two days ago we enabled the `admin_roles` feature flag](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/98/edit) in Production after receiving word that the necessary license app groups have been to the CustomersDot Okta app.  With this enabled, admin roles would be enforced and certain write actions would be restricted based on access levels.  These access levels should be set in [the `Admins::AuthenticateFromOmniauthService`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/6bbe84277de0cb0c4b6e68dc86afbbe9285c723c/app/services/admins/authenticate_from_omniauth_service.rb#L4) which is executed after Okta redirects back to CustomersDot after successful sign in.   If the customers groups returned from Okta include the CustomersDot write access group (`okta-customerportal-users`), then the read/write access level would be assigned to the Admin.  

However, something seems to be amiss in this integration.  This could be a caching issue where CustomersDot is receiving stale group information.  However, admins have reported attempting to login with multiple browsers, even incognito windows, and still have the issue.

### Proposal

Investigate why this is occurring and fix it.  We need more logging in the authentication service in order to determine what groups CustomersDot is receiving from Okta.  Once we have that information, we should be able to determine if CustomersDot is receiving stale information, pointing to a caching problem, or if there is a bug in the service in CustomersDot.",2
91106090,2021-07-29 17:04:02.541,Upgrade Unleash Gem,"We use the Unleash client gem in CustomersDot for our feature flags.

We're currently using version 0.1.6, released September 12th, 2019.  The latest version is 3.2.2, released March 26th, 2021.

Unleash Releases: https://github.com/Unleash/unleash-client-ruby/releases

We should consider upgrading our gem to the latest version.

### Availability & Testing

<!-- This section needs to be retained and filled in during the workflow planning breakdown phase of this feature proposal, if not earlier.

What risks does this change pose to our availability? How might it affect the quality of the product? What additional test coverage or changes to tests will be needed? Will it require cross-browser testing?

Please list the test areas (unit, integration and end-to-end) that needs to be added or updated to ensure that this feature will work as intended. Please use the list below as guidance.
* Unit test changes
* Integration test changes
* End-to-end test change

See the test engineering planning process and reach out to your counterpart Software Engineer in Test for assistance: https://about.gitlab.com/handbook/engineering/quality/test-engineering/#test-planning -->

As this upgrade is quite significant (major version 0 to major version 3 [three major versions ahead]), we should ensure that all feature flags act as they should.

This may be a mostly manual effort with the help of some feature specs, but we should ensure that the behavior does not change between versions.",2
91101299,2021-07-29 15:31:37.180,Community Programs - Allow for purchases with no payment methods,"## Problem

When purchasing Community Programs on an account with no payment methods (which the majority of our Community consumers will do) the purchase will fail with `Can not have Account with Auto-Pay enabled if Payment Method is null`

It's expected that Zuora will not allow this [since CustomersDot sets auto_pay: true](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3392#note_635762121) on purchases.

## Expected result

Users with new accounts and no payment methods should be able to purchase a community program


## Proposal

Update parameters (for free Community subscriptions only) to not process payments and to not set account to auto-pay.

1. [ ] Update `auto_pay` to false

```
:account=>{│
            :auto_pay=>false,
```

2. [ ] Update `process_payments` to false

```
:subscribe_options=>{│
            :process_payments=>false,
```

Ensure we have test coverage for ""purchase of community programs with no payment methods""",3
90835017,2021-07-26 09:37:02.701,Old orders and customers throwing errors on staging,"### Problem

Due to [switch to new Zuora server](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2848) the previous data within the Customers and the Orders table became redundant and due to presence of `zuora_account_id` within the customers table lead to error `Account ID is invalid` while purchasing orders within the staging gitlab.com 

### Proposal

Delete the old customers and their corresponding orders from the database right before the switch happened. 

### Result

It would ask the customers again to register to buy a new subscription.

### How will we measure success?

It should not throw `Account ID is invalid.` error on the buy new subscription page.",1
90749259,2021-07-23 20:05:50.553,Validate Zuora subscription name and ID when creating licenses,"### Problem

As mentioned in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3379, we have instances where licenses have been manually created with a typo in the `zuora_subscription_name` field.  For example, it might include a leading or trailing whitespace by mistake.  This is a problem because this field is commonly used as a lookup to find the subscription associated with the licenses (e.g. Seat Link Service) but with the typo, the association is not found.

This was only found in about 13 licenses as of 2021-07-23 in LicenseDot production so it's a small problem but does lead to some noisy Sentry errors.  You can find the list of licenses in [this comment](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3585#note_634371978).

### Proposal

Add a validation to CustomersDot when licenses are created to verify the `zuora_subscription_name` and `zuora_subscription_id` are valid by querying Zuora.  It's probably not worth adding this same validation to LicenseDot given it's a very small problem and would be more effort to connect to Zuora for validation in that application.",2
90737772,2021-07-23 14:44:36.832,Evaluate impact of GitLab database decomposition,"As described in https://gitlab.com/gitlab-org/fulfillment-meta/-/issues/283, evaluate and document the impact of database decomposition on Fulfillment and specifically Purchase operations.",2
90736587,2021-07-23 14:19:29.795,Fix Eula rendering,"### Problem

Currently Eula **Content** is rendered ""as is"" in the list view.

This creates a huge horizontal scroll that pushes out the other columns and the actions.

### Acceptance Criteria

Eula **Content** is formatted to be truncated for the list view and will remain accessible in the show view.",1
90698556,2021-07-22 19:50:28.878,Manually created licenses with typo causing Seat Link failures,"### Problem

I noticed when verifying the changes from https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3563 that some errors have been occurring in the SeatLinkCreateService when the license received in the request contains a `zuora_subscription_name` with a typo.  Specifically, in the cases I've seen (see Sentry links below), the `zuora_subscription_name` contains and extra whitespace character at the end of the string which causes `Zuora::Subscription` not to be found when queried.  In both cases, the licenses were created manually in LicenseDot.

Sentry Issues:
- https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2735681/events/f0637a1b406b436eb2c8568cb3dc16ee/
- https://sentry.gitlab.net/gitlab/customersgitlabcom/issues/2735681/events/484f4cd8ace848558c4bd802b93aee4e/

### Proposal

A simple solution could be to trim the trailing whitespace characters when processing the seat link request.",1
90636602,2021-07-21 17:17:05.866,Proof of Delivery,"
## Background

This issue describes the smallest and simplest changes we can start iterating on to help our internal teams confirm that the provisioning email was sent.

## Proposal

#### MVC - 14.8
- Capture and set the date and time when the confirmation email with provisioning info was generated and sent.
- Display this information for each active subscription in Customers Admin Portal.
  - Option 1: within the Basic Info tab, add a field ""Delivery Confirmation"" This new line will display the date and time when the confirmation email containing the license was sent and the email address of who it was sent to
  - Option 2: add a new tab next to Show tab with label ""Delivery Confirmation"" This new tab will display the date and time when the confirmation email with the license was sent and the email address of who it was sent to
  - Option 3: Leverage Papertrail (version tracking gem) to store the email the license was sent to and the timestamp when it was sent. Use the History tab of a license object to display it - [Proposal](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3370#note_804551801)

:rocket: The decision was to implement option 3 - See https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3370#note_817042324. 

#### Post MVC
- Capture delivery information for each outgoing message that contains a license 
- Display all deliveries related to the license in some delivery history table/dashboard

## Related Problems

- as defined [here](https://gitlab.com/gitlab-org/fulfillment-meta/-/issues/273)
- as described [here](https://gitlab.com/gitlab-com/sales-team/field-operations/deal-desk/-/issues/156)",2
90507022,2021-07-19 15:42:33.317,Use strong_memoize for SeatLinksController#license_data,"The following discussion from !3553 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3553#note_630280185): 

    > **Question (non-blocking):** As I look at this code again, I'm wondering if we should use `strong_memoize` here to avoid `license_data` logic being executed twice in event it is `nil`?  No need to block this MR on that point though given it was using the `||=` strategy before.  Let me know your thoughts on it though.  I'll probably go ahead and create a follow-up issue for it.",1
90333252,2021-07-15 12:47:16.399,Community Program - Glue SaaS form,"### Problem

Similar to #3331, we need to make sure all parts of SaaS subscription form are well integrated.

### Proposal

- [x] Duplicate `community_ee_subscription_form.vue` to `community_saas_subscription_form.vue`
- [x] Replace SaaS placeholder in `new_community_subscription.vue` with the newly duplicated file `community_saas_subscription_form.vue`
- [x] Duplicate `community_ee_subscription_form_spec.js` to `community_saas_subscription_form_spec.js`
- [x] Update `community_saas_subscription_form.vue` to use `namespace-select` from #3015 (send selected namespace with request payload and make sure ""claim"" button is disabled if no namespace is selected)
- [x] Make sure `community_saas_subscription_form_spec.js` is covering all changes
- [x] Run full purchase workflow locally to ensure everything is working as expected",3
90319429,2021-07-15 08:38:24.585,Switch impersonate and group icons,"### Problem

It seems strange that we annotate the impersonate option with `icon-home` while:

![image](/uploads/f2d8c523b06407c70a77aa8399906a61/image.png)

All other icons describe their function well, but these two often trip me up. Esp. in the search results overview: I usually want to view a user's group, but I often point instinctively towards the `icon-home`.

### Proposal

Switch those icons around. I `grep` through the code just now for those icon names, but didn't find an obvious place to change. Are such design elements pulled in from another repo?

### Result

Less accidental impersonation events

### Next steps (if any)

### How will we measure success?",1
90275298,2021-07-14 14:10:30.544,Verify sentry-rails gem,"### Description of the changes

Blocking production deployments until the `sentry-rails gem` update, introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3513, is verified in stg.  This MR  removes the deprecated `sentry-raven` gem and replaces it with `sentry-rails` to avoid missing features and security patches.

### Potentially breaking changes checklist

* [x] Follow the regular process to create the MR. Make sure this issue is Public.
* [x] Make sure the maintainer adds the ~""production::blocker"" label to this issue once the MR is ready to be merged
* [ ] Once the MR lands in Staging, announce the changes in [#s_fulfillment](https://gitlab.slack.com/archives/CMJ8JR0RH) and request help for testing all the different flows affected
* [ ] Announce the changes in [#support_licensing-subscription](https://gitlab.slack.com/archives/C018C623KBJ)
* [ ] Create a revert MR targeting `master` to quickly deploy to production should anything go wrong
* [ ] Inform the `@sre-oncall` about the potentially breaking changes
* [ ] Remove the ~""production::blocker"" label if testing has completed successfully, wait for production deployment
* [ ] If everything looks good after a few hours/days (depending on the change), close the revert MR
* [ ] If there has been a problem, merge the revert MR into `master`, inform Infrastructure/`@sre-oncall` to trigger a `chef` deploy (if urgent) and push the changes to the `staging` branch last",0
90254578,2021-07-14 11:44:40.709,Extract params to presenter in community program - new subscription,"## Proposal

The number of parameters being passed to the frontend in `app/views/subscriptions/community_program/new_self_managed.html.haml` is growing, let's extract all the params to a presenter.

This will allow us to test those params and reuse the params in `new_gitLab.html.haml`.",0
90229348,2021-07-14 02:59:48.782,Community subscriptions should be able to renew up to 3 months before expiration date,"### Problem

In this issue https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3268 we have limited customers' ability to renew early. They can now only renew starting at 15 days before subscription expiration date.

Community Program subscriptions (with $0 revenue) need to be renewable starting at 3 months before expiration date, because it takes some time to go through the re-approval process.

The renew button (https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3575+) on community programs subscription card (EDU and OSS) and renewal banner (https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3574+) for community programs (EDU and OSS) should be shown 3 months before expiration date.

[Community Program Subscription Renewal Setup instructions](https://gitlab.com/groups/gitlab-org/-/epics/5711#steps-to-setup)

### Proposal

Allow Community Program subscriptions with $0 SKUs to renew 3 months before expiration date.

### Result

### Next steps (if any)

### How will we measure success?",2
90207376,2021-07-13 15:50:18.657,Community Programs Self-Checkout - Start/End Date,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

We need to get the Start and End Dates to inform in the Self-Checkout. The current implementation is adding via JS (https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3456#note_624247786)

### Proposal

Implement the necessary ~backend to retrieve Start/End Dates for the Community Program new Subscription and inform it in `app/frontend/packs/pages/subscriptions/community_program/new.js`

### Result

Data is coming from the backend

### Next steps (if any)

### How will we measure success?

Ensuring that this data is coming from the backend, when going to Community Program Self-checkout",1
90205411,2021-07-13 15:17:17.657,Frontend errors: use `ErrorBoundary` for error handling,"# Overview

As part of our effort to improve the frontend logs management in `CustomersDot`, as well as reduce code duplication and manual error handling, provide more useful and consistent error info to our users, we will implement a [_holistic_ approach to errors](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2279) which consists of 2 parts:

- [Centralise Sentry logs management](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3349)
- Use `ErrorBoundary` for error handling (current)

The 2 parts have been individuated in a **[previous research with PoC](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2935)** which helped define the approach. Some use cases are presented [here](https://vue-demo.xyz/).

##### Use `ErrorBoundary` Component for displaying UI errors

Advantages of `ErrorBoundary` Component are:

- follows a standard approach in the industry, see [React's ErrorBoundaries](https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html#introducing-error-boundaries)
- implements our values of [boring solutions](https://about.gitlab.com/handbook/values/#boring-solutions): it leverages [Vue errorCaptured hook](https://vuejs.org/v2/api/#errorCaptured)
- increases maintainability: we rely on `GlAlert` for displaying errors, we can encapsulate its usage in the `ErrorBoundary`
- allows moving error messages definitions to a more central level (app or global configuration)

We will measure success by:

- reducing (eliminating) manual toggling of errors

<details>
<summary>The approach is also good for splitting responsibilities between layers and increasing the flexibility fo our error displaying management </summary>

- **responsibility** comes in terms of delegation when the UI/UX of errors for a (more or less long) chain of components can be handled at a centralized place. An `ErrorBoundary` Component is a quasi [render-less component](https://adamwathan.me/renderless-components-in-vuejs/), that aims to help in scenarios where data and behaviors are often the same. Analog to this is the use of services such as `API`, `Vuex`, that lift from the component the burden of managing communication or data flow
- **flexibility** comes in terms of configuration. An `ErrorBoundary` Component is general enough to account for the majority of cases while also being close enough to the app where it's used to adapt to more specific cases where the desired behavior might need to change or adapt

</details>

##### Scenarios to consider

<details>
<summary>Errors coming from the ~backend are not suitable for being displayed to the user</summary>

We had [some cases](https://gitlab.com/gitlab-org/gitlab/-/issues/331148) where the error received from the ~backend was not offering much information to the ~frontend. The suggested approach will allow us:

- in the short run, to account for such cases in a more flexible way
- in the long run, to establish a way where the ~backend communicates with the ~frontend using codes (e.g. `UNSUCCESSFUL_X_Y_Z` instead of string literals, an approach that [already proved useful](https://gitlab.com/gitlab-org/gitlab/-/issues/327255#note_556782292))

</details>

# Implementation plan

[Sentry Vue Integration](https://docs.sentry.io/platforms/javascript/guides/vue/configuration/integrations/default/) [attaches the `errorHandlder` to our Vue instance](https://github.com/getsentry/sentry-javascript/blob/master/packages/integrations/src/vue.ts#L390). This will catch and log all the errors generated at runtime to the specified Sentry API.

After creating the `ErrorBoundary` Component, we should tackle each application one by one.

| Step | MR |
|-|-|
| Create the `ErroBoundary` Component (an [example](https://gitlab.com/agulina/vue-demo/-/blob/main/src/services/error_boundary.vue)) |  _tdb_ |
| Use `ErrorBoundary` in [`add_seats.vue`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/662f889b066e628c8b5db7aec0b8099d72927ff2/app/frontend/javascripts/subscription/components/add_seats.vue) | _tdb_ |

# Other resources

- the Draft MR: gitlab-org/customers-gitlab-com!2935
- a video showing the approaches in the demo app: [link to drive](https://drive.google.com/file/d/1yBdT51vIP-DEdL54QOZoIgPSFSOa-rhu/view?usp=sharing)
- a video for some more specific cases: [link to drive](https://drive.google.com/file/d/1KXNUX-CCU-MXot0q6aC9fic9fY7BjspR/view?usp=sharing)
- a video for some more specific cases: [link to drive](https://drive.google.com/file/d/1RBaJ7bDezuXcJblWgImY9uTDdCfeF3TS/view?usp=sharing)",5
90198755,2021-07-13 13:32:49.027,Frontend errors: use Sentry Integration for error logging,"# Overview

As part of our effort to improve the frontend logs management in `CustomersDot`, as well as reduce code duplication and manual error handling, provide more useful and consistent error info to our users, we will implement a [_holistic_ approach to errors](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2279) which consists of 2 parts:

- Use Sentry Integration for error logging (current)
- [Use `ErrorBoundary` for error handling](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3350)

The 2 parts have been individuated in a **[previous research with PoC](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/2935)** which helped define the approach. Some use cases are presented [here](https://vue-demo.xyz/).

##### Use Sentry Integration for error logging

We expect improvements in the following areas:

- separation of concerns: our components will only be responsible for *handling* errors, not for *logging* them
- DRYness: in most cases where we manually log errors, we're just proxying them. This only adds maintenance cost and no value
- using [boring solutions](https://about.gitlab.com/handbook/values/#boring-solutions): we _already_ have most of the functionality in place, due to Sentry Integration being active [the following line](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/50ee3275a0177e192102268f93ce87f47ee07d8b/app/frontend/packs/sentry.js#L9)

We will measure them by:

- reduction or elimination of manual calls to `Sentry.captureMessage` and `Sentry.captureException` most of which are just proxying the error ([instances of `captureMessage`](https://gitlab.com/search?group_id=9970&project_id=2670515&repository_ref=&scope=blobs&search=Sentry.captureMessage&snippets=false) and [instances of `captureException`]((https://gitlab.com/search?group_id=9970&project_id=2670515&repository_ref=&scope=blobs&search=Sentry.captureException&snippets=false)))
- reduction or elimination of the checks for Sentry call in tests

##### Scenarios to consider

<details>
<summary>Errors based on [unprocessable entity](https://www.keycdn.com/support/422-unprocessable-entity)</summary>

We have had [some cases as such](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2697). Errors like this are very useful for the user in order to recover from them but may or *may not* be useful for our system. A centralized approach will let us configure which error we want to exclude at a higher level.
</details>

<details>
<summary>Dynamic rendering errors</summary>

Rendering errors are hard to handle mainly because of unpredictability: how would you know which component is gonna break and for which reason? It seems intuitive that only a centralized way can give enough confidence for such cases. Also note: by *dynamic* rendering errors here we mean the ones that might be caused by supplying inconsistent data to a component. Errors that prevent the component from rendering, whatever the point of failure is (a method, the template, etc), the kind of scenarios that would leave the page blank and log a red error in the console.
</details>

# Implementation plan

Vue offers an [errorHanlder config](https://vuejs.org/v2/api/#errorHandler) which can be used as a unified place to where all errors can bubble up. [Sentry Vue Integration](https://docs.sentry.io/platforms/javascript/guides/vue/configuration/integrations/default/) [attaches the `errorHandlder` to our Vue instance](https://github.com/getsentry/sentry-javascript/blob/master/packages/integrations/src/vue.ts#L390). This will catch and log all the errors generated at runtime to the specified Sentry API.

In order to make this work we will need to:

* always `return` `Promise` from Vue `methods` where async calls are made (if we don't do it, Sentry Integration will catch the error anyways, but it will also display as an uncaught error in the console)
* if the error is manually handled (in a `catch` block), always throw a new `Error`

##### Sentry.captureException

An example of how one can remove the manual `captureException` and let Sentry handle the error:

<details>
<summary>Diff</summary>

```
diff --git a/app/frontend/javascripts/subscription/components/subscription_license_buttons.vue b/app/frontend/javascripts/subscription/components/subscription_license_buttons.vue
--- a/app/frontend/javascripts/subscription/components/subscription_license_buttons.vue	(revision d2679d3c9f25ef8ac0a57a3e1e9f875f1169fa2c)
+++ b/app/frontend/javascripts/subscription/components/subscription_license_buttons.vue	(date 1626185697875)
@@ -49,7 +49,7 @@
       if (this.licenseFile.length > 0) {
         return;
       }
-      this.fetchLicense();
+      return this.fetchLicense();
     },
     async fetchLicense() {
       this.isFetchingLicense = true;
@@ -64,7 +64,7 @@
         this.isLicenseCollapseVisible = false;
         // eslint-disable-next-line no-jquery/no-animate-toggle
         this.$toast.show(this.$options.toast.error);
-        Sentry.captureException(err);
+        throw new Error(err.message);
       }
       this.isFetchingLicense = false;
     },
```
</details>

The resulting payload sent to Sentry is the same:

<details>
<summary>Before</summary>
```json
{""exception"":{""values"":[{""type"":""Error"",""value"":""Request failed with status code 422"",""stacktrace"":{""frames"":[{""colno"":7,""filename"":""https://agulina.ngrok.io/packs/js/vendor-b73adfbd1839150fb479.chunk.js"",""function"":""XMLHttpRequest.handleLoad"",""in_app"":true,""lineno"":36629},{""colno"":12,""filename"":""https://agulina.ngrok.io/packs/js/vendor-b73adfbd1839150fb479.chunk.js"",""function"":""settle"",""in_app"":true,""lineno"":37389},{""colno"":15,""filename"":""https://agulina.ngrok.io/packs/js/vendor-b73adfbd1839150fb479.chunk.js"",""function"":""createError"",""in_app"":true,""lineno"":37155}]},""mechanism"":{""handled"":true,""type"":""generic""}}]},""level"":""error"",""event_id"":""783d557d0b2d40608d3ed88d33a14c99"",""platform"":""javascript"",""sdk"":{""name"":""sentry.javascript.browser"",""packages"":[{""name"":""npm:@sentry/browser"",""version"":""5.21.1""}],""version"":""5.21.1"",""integrations"":[""InboundFilters"",""FunctionToString"",""TryCatch"",""Breadcrumbs"",""GlobalHandlers"",""LinkedErrors"",""UserAgent"",""RewriteFrames"",""Dedupe"",""ExtraErrorData"",""Vue""]},""timestamp"":1626186230.9387002,""environment"":""development"",""release"":""d2679d3c9f25ef8ac0a57a3e1e9f875f1169fa2c"",""user"":{""id"":6,""email"":""angelo@thismail.com"",""company"":""Angelo Local Company""},""breadcrumbs"":[{""timestamp"":1626185805.2841,""category"":""console"",""data"":{""arguments"":[""You are running Vue in development mode.\nMake sure to turn on production mode when deploying for production.\nSee more tips at https://vuejs.org/guide/deployment.html""],""logger"":""console""},""level"":""info"",""message"":""You are running Vue in development mode.\nMake sure to turn on production mode when deploying for production.\nSee more tips at https://vuejs.org/guide/deployment.html""},{""timestamp"":1626185805.2847002,""category"":""ui.click"",""message"":""div.collapse-content > div#collapse-container-id-5.gl-mt-2.collapse""},{""timestamp"":1626185805.5453,""category"":""xhr"",""data"":{""method"":""GET"",""url"":""https://webpacko-dev-server.ngrok.io/sockjs-node/info?t=1626185805285"",""status_code"":200},""type"":""http""},{""timestamp"":1626185806.3127003,""category"":""xhr"",""data"":{""method"":""POST"",""url"":""/mini-profiler-resources/results"",""status_code"":200},""type"":""http""},{""timestamp"":1626185806.3188,""category"":""xhr"",""data"":{""method"":""POST"",""url"":""/mini-profiler-resources/results"",""status_code"":200},""type"":""http""},{""timestamp"":1626185806.3203,""category"":""xhr"",""data"":{""method"":""POST"",""url"":""/mini-profiler-resources/results"",""status_code"":200},""type"":""http""},{""timestamp"":1626185806.3252,""category"":""ui.click"",""message"":""tbody > tr > td.profiler-duration. > a.profiler-queries-show""},{""timestamp"":1626186226.4326,""category"":""ui.click"",""message"":""div > div > div > a.gl-link""},{""timestamp"":1626186230.9316,""category"":""xhr"",""data"":{""method"":""GET"",""url"":""/licenses/A-S00067289"",""status_code"":422},""type"":""http""}],""request"":{""url"":""https://agulina.ngrok.io/subscriptions"",""headers"":{""User-Agent"":""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36""}},""contexts"":{""Error"":{""message"":""[undefined]"",""name"":""[undefined]"",""description"":""[undefined]"",""number"":""[undefined]"",""fileName"":""[undefined]"",""lineNumber"":""[undefined]"",""columnNumber"":""[undefined]"",""stack"":""[undefined]"",""config"":{""url"":""/licenses/A-S00067289"",""method"":""get"",""headers"":""[Object]"",""transformRequest"":""[Array]"",""transformResponse"":""[Array]"",""timeout"":0,""adapter"":""[Function: xhrAdapter]"",""xsrfCookieName"":""XSRF-TOKEN"",""xsrfHeaderName"":""X-XSRF-TOKEN"",""maxContentLength"":-1,""maxBodyLength"":-1,""validateStatus"":""[Function: validateStatus]"",""data"":""[undefined]""},""code"":""[undefined]""}}}
```
</details>

<details>
<summary>After</summary>
```json
{""exception"":{""values"":[{""type"":""Error"",""value"":""Request failed with status code 422"",""stacktrace"":{""frames"":[{""colno"":7,""filename"":""https://agulina.ngrok.io/packs/js/vendor-b73adfbd1839150fb479.chunk.js"",""function"":""XMLHttpRequest.handleLoad"",""in_app"":true,""lineno"":36629},{""colno"":12,""filename"":""https://agulina.ngrok.io/packs/js/vendor-b73adfbd1839150fb479.chunk.js"",""function"":""settle"",""in_app"":true,""lineno"":37389},{""colno"":15,""filename"":""https://agulina.ngrok.io/packs/js/vendor-b73adfbd1839150fb479.chunk.js"",""function"":""createError"",""in_app"":true,""lineno"":37155}]},""mechanism"":{""handled"":true,""type"":""generic""}}]},""level"":""error"",""event_id"":""783d557d0b2d40608d3ed88d33a14c99"",""platform"":""javascript"",""sdk"":{""name"":""sentry.javascript.browser"",""packages"":[{""name"":""npm:@sentry/browser"",""version"":""5.21.1""}],""version"":""5.21.1"",""integrations"":[""InboundFilters"",""FunctionToString"",""TryCatch"",""Breadcrumbs"",""GlobalHandlers"",""LinkedErrors"",""UserAgent"",""RewriteFrames"",""Dedupe"",""ExtraErrorData"",""Vue""]},""timestamp"":1626186230.9387002,""environment"":""development"",""release"":""d2679d3c9f25ef8ac0a57a3e1e9f875f1169fa2c"",""user"":{""id"":6,""email"":""angelo@thismail.com"",""company"":""Angelo Local Company""},""breadcrumbs"":[{""timestamp"":1626185805.2841,""category"":""console"",""data"":{""arguments"":[""You are running Vue in development mode.\nMake sure to turn on production mode when deploying for production.\nSee more tips at https://vuejs.org/guide/deployment.html""],""logger"":""console""},""level"":""info"",""message"":""You are running Vue in development mode.\nMake sure to turn on production mode when deploying for production.\nSee more tips at https://vuejs.org/guide/deployment.html""},{""timestamp"":1626185805.2847002,""category"":""ui.click"",""message"":""div.collapse-content > div#collapse-container-id-5.gl-mt-2.collapse""},{""timestamp"":1626185805.5453,""category"":""xhr"",""data"":{""method"":""GET"",""url"":""https://webpacko-dev-server.ngrok.io/sockjs-node/info?t=1626185805285"",""status_code"":200},""type"":""http""},{""timestamp"":1626185806.3127003,""category"":""xhr"",""data"":{""method"":""POST"",""url"":""/mini-profiler-resources/results"",""status_code"":200},""type"":""http""},{""timestamp"":1626185806.3188,""category"":""xhr"",""data"":{""method"":""POST"",""url"":""/mini-profiler-resources/results"",""status_code"":200},""type"":""http""},{""timestamp"":1626185806.3203,""category"":""xhr"",""data"":{""method"":""POST"",""url"":""/mini-profiler-resources/results"",""status_code"":200},""type"":""http""},{""timestamp"":1626185806.3252,""category"":""ui.click"",""message"":""tbody > tr > td.profiler-duration. > a.profiler-queries-show""},{""timestamp"":1626186226.4326,""category"":""ui.click"",""message"":""div > div > div > a.gl-link""},{""timestamp"":1626186230.9316,""category"":""xhr"",""data"":{""method"":""GET"",""url"":""/licenses/A-S00067289"",""status_code"":422},""type"":""http""}],""request"":{""url"":""https://agulina.ngrok.io/subscriptions"",""headers"":{""User-Agent"":""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36""}},""contexts"":{""Error"":{""message"":""[undefined]"",""name"":""[undefined]"",""description"":""[undefined]"",""number"":""[undefined]"",""fileName"":""[undefined]"",""lineNumber"":""[undefined]"",""columnNumber"":""[undefined]"",""stack"":""[undefined]"",""config"":{""url"":""/licenses/A-S00067289"",""method"":""get"",""headers"":""[Object]"",""transformRequest"":""[Array]"",""transformResponse"":""[Array]"",""timeout"":0,""adapter"":""[Function: xhrAdapter]"",""xsrfCookieName"":""XSRF-TOKEN"",""xsrfHeaderName"":""X-XSRF-TOKEN"",""maxContentLength"":-1,""maxBodyLength"":-1,""validateStatus"":""[Function: validateStatus]"",""data"":""[undefined]""},""code"":""[undefined]""}}}
```
</details>


##### Sentry.captureMessage

An example of how one can remove the manual `captureMessage` and let Sentry handle the error. **Note that this will change the log level from `info` to `error`**.

<details>
<summary>Diff</summary>

```
diff --git a/app/frontend/javascripts/subscription/components/new_gitlab_subscription.vue b/app/frontend/javascripts/subscription/components/new_gitlab_subscription.vue
--- a/app/frontend/javascripts/subscription/components/new_gitlab_subscription.vue	(revision d2679d3c9f25ef8ac0a57a3e1e9f875f1169fa2c)
+++ b/app/frontend/javascripts/subscription/components/new_gitlab_subscription.vue	(date 1626187067985)
@@ -82,9 +82,6 @@
       this.showSuccessModal = true;
     },
     handleError(message) {
-      if (message) {
-        Sentry.captureMessage(message);
-      }
       this.errorMessage = message;
     },
   },
diff --git a/app/frontend/javascripts/subscription/components/new_gitlab_subscription_form.vue b/app/frontend/javascripts/subscription/components/new_gitlab_subscription_form.vue
--- a/app/frontend/javascripts/subscription/components/new_gitlab_subscription_form.vue	(revision d2679d3c9f25ef8ac0a57a3e1e9f875f1169fa2c)
+++ b/app/frontend/javascripts/subscription/components/new_gitlab_subscription_form.vue	(date 1626187443274)
@@ -151,7 +151,7 @@
 
       this.clearError();
 
-      purchaseSubscription(requestParams)
+      return purchaseSubscription(requestParams)
         .then(({ invoice_item, invoice }) => {
           this.invoice = invoice;
           this.serviceStartDate = invoice_item[0].service_start_date;
@@ -159,6 +159,7 @@
         })
         .catch((error) => {
           this.$emit('error', error.message);
+          throw new Error('This is a dummy error')
         })
         .finally(() => {
           this.isLoading = false;
```
</details>

# Other resources

- the Draft MR: gitlab-org/customers-gitlab-com!2935
- a video showing the approaches in the demo app: [link to drive](https://drive.google.com/file/d/1yBdT51vIP-DEdL54QOZoIgPSFSOa-rhu/view?usp=sharing)
- a video for some more specific cases: [link to drive](https://drive.google.com/file/d/1KXNUX-CCU-MXot0q6aC9fic9fY7BjspR/view?usp=sharing)
- a video for some more specific cases: [link to drive](https://drive.google.com/file/d/1RBaJ7bDezuXcJblWgImY9uTDdCfeF3TS/view?usp=sharing)",5
90177139,2021-07-13 07:41:01.892,Addons purchase info seem redundant and not so clear,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

With gitlab-org/customers-gitlab-com#2876:
- `Price` and `Subtotal` lines in the Addons purchase will necessarily display the same values (there are no other products to purchase)
- the Unit Price of the product is not so evident and placed in a line that's not even so clear

| |||
|-|-|-|
| Simple | ![Screenshot_2021-07-13_at_09.04.43](/uploads/372c4527876ba894d9feb3799047e565/Screenshot_2021-07-13_at_09.04.43.png)| This should be fixed with gitlab-org/customers-gitlab-com#2876. Also, the line for quantity is a bit weird.
| with Proration credit | ![Screenshot_2021-07-15_at_07.08.26](/uploads/d5ce956a4661d281c25964f5d0a7a9fb/Screenshot_2021-07-15_at_07.08.26.png) | The info here are correctly displayed and the difference between `Price` and `Subtotal` clearly makes sense

### Proposal

To solve this, I'm proposing to make the line for the quantity a bit more readable.

| | | |
|-|-|-|
| Price per Unit (clearer quantity)|![Screenshot_2021-07-13_at_09.11.03](/uploads/9359bcc242573db548b6e275240dd792/Screenshot_2021-07-13_at_09.11.03.png)| If we want to keep the Price as a total, we can at least improve the line for the quantity a bit. |",1
90163707,2021-07-13 03:08:19.129,Previous user count is incorrect when changing products and seat count during renewal,"### Problem

When a subscription is renewed, and the user changes the product and the number of active users at the same time, the `previous_user_count` is the same as the new `user_count`.

This is because `Subscription#previous` finds the last version of the subscription and we use the result of this to get the `previous_user_count`. This is an issue when changing products and seats, because we generate an amendment of the subscription with the new product and the new seat count before processing the renewal amendment. This means the previous version at that point is the version with the new product and the new user count.

##### Example

![Screen_Shot_2021-07-13_at_3.10.22_PM](/uploads/d701cb402d3ee4a38b3353e051b77556/Screen_Shot_2021-07-13_at_3.10.22_PM.png)

^ In this example, we renew the initial subscription (V1) and change the product from premium to ultimate. We also change the user count (which was 10 in V1 and is then 15 in V3). When we process the renewal, we look for the most recent previous version and this is returning V3 currently. This means we're creating the license with `user_count: 15, previous_user_count: 15` but it should be `user_count: 15, previous_user_count: 10`

#### 🐛 Steps to reproduce

1. Create a new self-managed license via CustomersDot
1. Navigate to the renewal page for that license
1. Renew the license with:
   1. Changed product (ie Premium -> Ultimate)
   1. Changed number of users
1. View the license in the db: `previous_users_count == user_count`

#### 📸 Screenshots

![Example](/uploads/9e44db1ba9601d91dc6464efa7ccce22/count_present.mp4)


### Proposal

I'm not entirely sure how to address this, it will likely require some investigation. We need to get the version of the subscription before we made the renewal amendments, or we need to store the `previous_user_count` somewhere else and look it up from there.

### Reported Examples

1. https://gitlab.com/gitlab-com/support/internal-requests/-/issues/11348
1.",3
90041200,2021-07-09 19:15:06.643,Allow users to manually renew subscription up to 45 days post expiration (change from 30 days),"## Summary

The following issue https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1393 introduced the limitation of showing 'Renew' button up to 30 days after subscription expiration, but hiding it after 30 days.

Per comment here https://gitlab.com/gitlab-com/sales-team/field-operations/deal-desk/-/issues/102#note_622857803 from @jrabbits [The foundational policy](https://about.gitlab.com/handbook/sales/field-operations/order-processing/#late-renewals) now states that renewals can be closed up to 45 days after the renewal date. This requires a modification of the logic from 30 days to 45 days.

## Proposal

Make an update to logic introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1393 to use 45 days instead of 30 days.",2
89905285,2021-07-07 12:59:36.344,Make use of SubscriptionCurrentVersionFinder redundant,"Continuing the discussion from the MR https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3484 here, we are introducing a new class `SubscriptionVersionFinder` to find subscriptions which were active/present in a given period of time. 

The `SubscriptionCurrentVersionFinder` makes the use of `SubscriptionVersionFinder` and finds the subscriptions which were active on `Date.current`. 

We can simply make a call to `SubscriptionVersionFinder` and use the method current_version which will make use of `Date.current` without having to use the whole calls being inherited from `SubscriptionVersionFinder`.

Update: In addition to the above, we will also update the logic where `SubscriptionCurrentVersionFinder` is used to use the new POC logic introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/4246+ instead.

### How will we measure success?

We should not need to update VCR after the change has been made as the query to Zuora still has to be the same.",2
89826866,2021-07-06 09:58:38.853,Community Program - Glue self-managed form,"### Problem

We have all the parts of the self-managed form in the main component, but they're not integrated together.

### Proposal

Glue all parts to send confirmed request to backend and handle error/success.

### Details

- [x] When the purchase succeed, we'll show success modal with ""View your subscription"" button.
- [x] If there's a coupon code error, we'll show it below coupon code input field.
- [x] If there are other errors, we'll show it on top of the form.

### To do

- [x] Once !3456 is merged, send seats count alongside the request",3
89783311,2021-07-05 15:08:54.363,Update wrapper to find GlTooltip using data-testId,"The following discussion from !3467 should be addressed:

- [ ] @aalakkad started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3467#note_616282898):  (+6 comments)

    > **suggestion (non-blocking):** I think it's better if we added data-testid to the tooltips, since we're having 2 of them instead of one.
    > 
    > Then we can choose which tooltip are we targeting in the tests rather than finding a tooltip and hope it's the correct one.
    > 
    > I'm marking this as non-blocking to be done in a follow-up, but will defer to the maintainer to decide if it's ok.

cc: @rhardarson",1
89756680,2021-07-05 08:09:11.456,Rename occurrences of `user` to `customer` in purchase flow,"When talking about out application, we rarely use the term `user` but prefer `customer`. To keep our application vocabulary consistent with the usage, let's replace the references to `user` with `customer`, at least for the purchase experience. This will help us keeping a shared language between all team members.


The following discussion from !3490 should be addressed:

- [ ] @agulina started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3490#note_617304689):  (+1 comment)

    > **question**: I struggle a bit here because CDot is sometimes inconsistent with names.
    > 
    > Should it be `customer` or `user`?",2
89642208,2021-07-02 01:05:40.086,"IronBank Gem version(4.4.1, used by current CustomersDot ) does not connect to Zuora Central Sandbox","IronBank Gem version(4.4.1, used by current CustomersDot ) does not connect to Zuora Central Sandbox.


### Problem

Since CustomersDot rely on IronBank to connect to Zuora, this prevent CustomersDot from working with Zuora central sandbox. This blocks issue https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2848

Details in https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2848#note_616941950

### Proposal

Two options so far:
1. Bump iron_bank gem version to [v5.2.3](https://github.com/zendesk/iron_bank/releases/tag/v5.2.3), which contains the [fix exactly for this issue](https://github.com/zendesk/iron_bank/pull/74).
2. Monkey patch the fix in CustomersDot, on top of existing iron_bank gem 4.4.1

In local environment, with monkey patch, I have verified IronBank can query from Central Sandbox(`rest.test.zuora.com`) successfully.

Option 1 is preferred. Asked in slack to see whether people have concern to bump iron_bank gem version https://gitlab.slack.com/archives/CMJ8JR0RH/p1625186996057700

Thanks @jameslopez to suggest a nice checklist in MR https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3504 - we should follow the checklist.
* [x] Follow the regular process to create the MR. Make sure this issue is Public.
* [x] Make sure the maintainer adds the ~""production::blocker"" label to this issue once the MR is ready to be merged
* [x] Once the MR lands in Staging, announce the changes in `#s_fulfillment` and request help for testing all the different flows affected
* [x] Announce the changes in `#support_licensing-subscription`
* [x] Create a revert MR targeting `master` to quickly deploy to production should anything go wrong
* [ ] Inform the `@sre-oncall` about the potentially breaking changes
* [x] Remove the ~""production::blocker"" label if tested has completed succesfully, wait for production deployment
* [x] If everything looks good after a few hours/days (depending on the change), close the revert MR
* [ ] If there has been a problem, merge the revert MR into `master`, inform Infrastructure/`@sre-oncall` to trigger a `chef` deploy (if urgent) and push the changes to the `staging` branch last


### How will we measure success?

CustomersDot can connect to `rest.test.zuora.com`",2
89532931,2021-06-30 10:53:54.164,Community Programs Self-Checkout - Customer Information,"In https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2089 we extracted a customer information component to use in the Community Programs checkout flow.

### TODO

Consume the created component in the community programs self-managed flow",1
89501828,2021-06-29 20:56:25.075,"Follow-up from ""Use current_subscription when checking for last_quarter reconciliation""","The following discussion from !3468 should be addressed:

- [ ] @tyleramos started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3468#note_614688188): 

    > **Suggestion for follow-up:** I'm seeing we have similar logic of `order.current_subscription || order.subscription` in at least 3 other places now.  What do you think about defining as a method on `Order` and using that method in those references to DRY it up a bit?",1
89459784,2021-06-29 08:38:35.315,"Follow-up from ""Update expired subscription downgrade process""","The following discussion from !3379 should be addressed:

- [ ] @rcobb started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3379#note_613651926):  (+1 comment)

    > Random thought: Not related to this MR but IMO having these checks here is a bit unintuitive. I think moving them to their own method makes their intent more clear.
    > 
    > ```ruby
    > def end_date_in_sync_with_zuora?
    >   return true unless check_zuora_end_date?
    > 
    >   order_end_date.to_s == zuora_subscription_end_date.to_s
    > end
    > 
    > def check_zuora_end_date?
    >   return false if order.trial?
    >   return false if end_date_before_expiration...
    >   ...
    > end
    > ```",2
89067046,2021-06-22 06:12:19.301,Remove collapse component from subscription card,"## Proposal

- Remove the collapse component that wraps the subscription card, as [suggested](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3374#note_604989438) by @timnoah.

- Removing the collapse also removes the thick border around the subscription card.

- Replace the thin border between cards with a thick gray 4px border.

## Design

**[Figma Specs](https://www.figma.com/file/yjusTZF6Qgr4DzXkvE5bK2/Customers-Portal-Templates?node-id=1113%3A4023)**

![Manage_purchases_-_Updated](/uploads/69ffb582aa55e4163040d78270791e37/Manage_purchases_-_Updated.png)

Related to #3140 and !3374.",2
89054358,2021-06-21 21:02:30.177,Downloading licenses can lead to LicenseOutOfSyncError,"### Problem

[Tom Houston reported](https://gitlab.slack.com/archives/CMJ8JR0RH/p1624288923284200) earlier today that he came across 2 customers who are getting 500 errors when trying to download their license.  The system shows an error when trying to display the license in CustomersDot.  

He's seeing the following errors in both cases:
```
ObtainLicenseService::LicenseOutOfSyncError: ObtainLicenseService::LicenseOutOfSyncError License and subscription are out of sync
```

#### Links to Customer accounts and tickets:
- https://gitlab.zendesk.com/agent/tickets/219463
- https://gitlab.zendesk.com/agent/tickets/219343
- https://customers.gitlab.com/admin/customer/291084/edit
- https://customers.gitlab.com/admin/customer/184727/edit

### Proposal

This appears to be related to a recent change in the way licenses are downloaded in CustomersDot, introduced in https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3315.  After a cursory look, this seems to be happening in the `ObtainLicenseService` where the license is being compared to the current subscription.  However, this code should not be used yet as it should be behind the `cloud_license_sync` feature flag.",2
88823997,2021-06-16 15:27:30.234,Conditionally create a license in CustomersDot if missing using feature flag,"### Problem

As described in [this Slack thread](https://gitlab.slack.com/archives/CMJ8JR0RH/p1623853191158300), we realized that a handful of licenses were being created in CustomersDot rather than LicenseDot before the `cloud_license_sync` feature flag was enabled.  It turns out this began after we merged https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3315 which creates a license if one doesn't exist when users attempt to download or copy a license.  This feature creates the license using CustomersDot rather than LicenseDot, which wasn't expected until the `cloud_license_sync` is enabled.

### Proposal

Update the `ObtainLicenseService` to avoid creating a license in CustomersDot if the `cloud_license_sync` feature is disabled.  Instead we should fallback to the old behavior of raising an error instead.",2
88773290,2021-06-15 22:47:45.897,Customers should only be able to renew 15 days before subscription expiration date,"### Problem

Today, customers are able to renew their subscription early via the Customer Portal. This can create various downstream issues, like the following:

1. [Early renewal can cause issues for reconciliations](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3182)
1. [Prevent users from accidentally renewing multiple times
](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/1099) 
1. [Renewing subscription multiple times will cause trueup error when its count is changed](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3268)

Sales Assisted renewals have already been aligned to the [FY22 Booking Policy](https://about.gitlab.com/handbook/sales/field-operations/order-processing/#renewal-opportunities), which states that we wait to close the renewal till 15 days from renewal date.  We now need to align self-service renewals to the same policy.

Original issue thread: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3182#note_599340590

### Proposal

Prevent early renewals by hiding ""Renew"" button 15 days before Subscription End Date, and add a related check in the backend. 

~backend specific tasks:

- Lock down the `/renew` route from the backend. Hiding the `renew` button isn't sufficient since we're linking to the renew route from multiple places (CustomersDot, Billing page)

~frontend specific tasks:

- Disable the ""Renew"" button 15 days before Subscription End Date
- Add a tooltip explaining why it's disabled (perhaps `Ability to renew will be available in X days`)

### Result

Customers can only renew their subscription 15 days before renewal date.

### Next steps (if any)

### How will we measure success?",3
88760740,2021-06-15 16:24:12.254,Add Invoice Item Charge Amount and Invoice Data and Entity to Data Packet,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem
While reviewing the Data we receive from Web Directs we found 2 additional fields that will be needed to fully automate our reconcile process and 1 that is blocking us from getting the correct charged Amount on prorated add-ons.

### Proposal
Please add the following fields to the Rate Plan Charge payload pointed at the corresponding Salesforce fields:

| Salesforce Field                      | Zuora Object chain                     |
|---------------------------------------|----------------------------------------|
| Webstore_Zuora_Invoice_Entity__c      | Invoice Item: Invoice: Account: Entity |
| Webstore_Zuora_Invoice_Date__c        | Invoice Item: Invoice: Invoice Date    |
| Webstore_Zuora_Invoice_item_Charge__c | Invoice Item: Charge Amount            |


### Result

### Next steps (if any)

### How will we measure success?",2
88663144,2021-06-14 10:30:08.677,Expired subscriptions downgrade - modify Plan scope,"### Summary

The expired subscription downgrade process is based on this following query:

```
orders = Order.saas_subscriptions.full.where('end_date < ?', expiration_date)
```

The use of the `saas_subscriptions` scope means that we're limiting our query so that only orders related to specific Plan are  retrieved.

### What is the current *bug* behavior?

The retrieved `Order` objects are related to one of the following plan:
- Ultimate Saas 1 Year plan: `2c92a0ff76f0d5250176f2f8c86f305a`
- Premium Saas 1 Year plan: `2c92a00d76f0d5060176f2fb0a5029ff`
- (Deprecated) Gold plan: `2c92a0fc5a83f01d015aa6db83c45aac`
- (Deprecated) Silver plan: `2c92a0fd5a840403015aa6d9ea2c46d6`
- (Deprecated) Bronze plan: `2c92a0ff5a840412015aa3cde86f2ba6`

### What is the expected *correct* behavior?

Orders should be retrieved regardless of related plan. Ensure at least that it is a Saas plan.",2
88656191,2021-06-14 08:46:47.581,Refactor condition to be easier comprehensible,"The following discussion from !3366 should be addressed:

- [ ] @cwiesner started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3366#note_600340545): 

    > `return unless current_customer && !params.key?(:edit_namespace) && gitlab_com_lead`
    >
    > **nitpick (non-blocking):** Not for this merge request but we should refactor this condition to make it easier comprehensible.

### Proposal

This can be done by using an `if` instead of an `unless` which is easier to understand on a quick look.",1
90099679,2021-06-11 17:08:01.521,Validate Customer's License File,"## User Story

As product owner, I want to examine the customer's license file, when available, so that I can determine whether the file is valid or not and understand whether that is causing the 401 HTTP response.

## Acceptance Criteria
- [License file](https://gitlab.com/gitlab-com/account-management/eastern-north-america/ihs-markit/-/issues/69#note_601131184) is validated and a determination is made on whether its validity is causing the 401 error.

> SyncSeatLinkRequestWorker::RequestError: Seat Link request failed! Code:401 Body:{""success"":false}



## Customer Issue Reference
- https://gitlab.com/gitlab-com/account-management/eastern-north-america/ihs-markit/-/issues/69",3
88586757,2021-06-11 15:52:04.422,Clean up wsdl file,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

In https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/70b04d0db1a918b1e8c803d943acab4776b391ec/config/application.yml#L169 we're referencing a WSDL file that's version 88. The newest version of this file is 109.

Moreover it looks like this file is no longer used since we moved away from SOAP https://gitlab.com/groups/gitlab-org/-/epics/1993


### Proposal

1. Confirm this is no longer used in our project and cookbooks.
1. Confirm this is not used in our 3rd party code like https://github.com/sportngin/active_zuora
1. Delete reference and record cassettes to remove the references - [example](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/spec/fixtures/vcr_cassettes/amendmentbaseservice/_amend_/with_2_line_items_e_g_adding_and_removing_product_/logs_sending_amendment_request.yml#L5)",2
88580109,2021-06-11 13:46:57.163,Self-Managed - Community Programs Self-Checkout - Coupon code input,"As part of https://gitlab.com/groups/gitlab-org/-/epics/5068 users will be guided to CustomersDot need input the coupon code they've received.

[Designs](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2677/designs/Community_programs_checkout___Invalid_coupon_code_error.png)


![image](/uploads/196f6cc2c92d5541d007507af9f48688/image.png)


### TODO

1. Add input field for coupon code
1. Pass coupon code to API payload when purchasing subscription following https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2362
1. Render error message inline if code is consumed `This code has already been used.` or not valid `This code is not valid. Try re-entering the code from your email`

### How to see the pages

- Make sure you've the [`community_program_coupons`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/feature_flags/91/edit) enabled for your setup.
- Login to your CustomersDot
- Navigate to any of:
  - `/subscriptions/community_program/new?edition=self_managed&coupon_code=coupon_test&product=oss`
  - `/subscriptions/community_program/new?edition=saas&coupon_code=coupon_test&product=oss`

BE logic issue: https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2362",3
88547806,2021-06-11 01:22:41.782,Extract Community Program Subscription Data loading out of the view layer,"### Problem

Follow up from https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3292

We have data in the following views that relies on the `GitlabPlansHelper` for loading and formatting the data for the frontend:

1. `app/views/subscriptions/community_program/new_saas.html.haml`
1. `app/views/subscriptions/community_program/new_self_managed.html.haml`
1. `app/views/subscriptions/_new_gitlab_com_subscription.html.haml`
1. `app/views/subscriptions/_new_ee_subscription.html.haml`

We should extract the data loading out of this helper (into the controller?) ~~and move the presentation logic to a presenter so that it is easier to test~~. Helper methods are available across all controllers, so moving this logic to a presenter class will help us signal more clearly what it applies to.

### Proposal

1. ~~Create one or several presenters to format the data for the new subscription pages~~
1. Load and filter the eligible namespaces in the controller/services instead of the view helper
   - Currently this is happening in `GitlabPlansHelper#gitlab_namespaces`

**Note:** after extracting the data loading into the controllers, it didn't seem as important to create presenters so we've decided to leave this part for now.",5
88541788,2021-06-10 20:38:24.198,Remove report_date from LicenseSeatLink,"### Problem

In https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3163, the `SeatLinkCreateService` was updated to always save `LicenseSeatLink` records with a `report_timestamp`, even when `timestamp` isn't provided in the request params.  If `timestamp` is missing, the `date` param is used to construct a timestamp instead (e.g. `date` + 3:00 UTC). This was added in https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3356.  Other MRs related to https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3163 were merged to remove the dependence on `report_date` like backfilling `report_timestamp`, along with transitioning DB constraints from `report_date` to `report_timestamp`.

With these changes, we no longer need to continue storing or referencing `report_date` on `LicenseSeatLink`.  All logic in CustomersDot should use `report_timestamp`.

### Proposal

In this issue, we should finish the steps to removing `report_date`.

- Remove any remaining references to `report_date`
- Ignore the column in the model.
- Remove the column from the database.",2
88539873,2021-06-10 19:35:28.081,"Follow-up from ""Execute Salesforce::CreateLeadService async""","The following discussion from !3347 should be addressed:

- [ ] @vij started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3347#note_594561479):  (+3 comments)

    > Do we need to call `set_logger` here? If I've traced it through correctly, without passing a filename arg, I think [it assigns the `Sidekiq::Logger`](https://gitlab.com/gitlab-org/customers-gitlab-com/blob/853bd226bc41167336b5cb5f739823da05088658/app/workers/concerns/loggable_worker.rb#L20), which is also the default? :thinking: 

Also it was noted that the name: `ZuoraWorker` was no longer accurate and misleading because this is too used for Salesforce interactions so we will rename it to something less specific.

This service specifically includes rescue / raise logic that relies on Zuora and Salesforce [error codes](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/01446ba03a7aa99f3fed1dec17fcfea87dd0a611/lib/errors.rb#L13) so will try with `IntegrationWorker` because we already have a `BaseWorker`.

### Proposal

- Update all workers that `include ZuoraWorker` to not call `set_logger` when the intention is to use the default `Sidekiq.logger`.

- Rename `ZuoraWorker` to `IntegrationWorker`",2
88515572,2021-06-10 11:06:58.290,Tooltips with seat-link info do not render properly for self-managed subscription cards,"## Description

If there is more than a Self-Managed subscription on the page that is canceled, only the first one gets the tooltip displayed for the Resume button. This could happen because all rendered tooltips have the same target ID.

## Video

![Screen_Recording_2021-06-10_at_14.09.14](/uploads/a93ea52db6990e097d42be9bc139a32f/Screen_Recording_2021-06-10_at_14.09.14.mov)",2
88485512,2021-06-09 21:54:42.383,[UX] Cloud Licensing - Workflow for Expired Cloud License,"### Problem

After a license expires, the GitLab instance becomes blocked and git features like pushes are blocked. Here's a link to the docs on this: https://docs.gitlab.com/ee/user/admin_area/license.html#what-happens-when-your-license-expires. When a customer is using a license file they will renew their subscription and upload a new license file to reinstate the features or remove the license file. This will be the same behaviour for cloud licenses, but there is currently no way for a customer to remove a cloud license from their self-managed instance. This issue is to design/investigate the removal of a cloud license. [Original discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3215#note_595998053).

I've created [this issue](https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/3512) to also discuss a better way to gracefully handle the downgrading of an expired license as I'm unsure whether we should be blocking git features like pushes.

### Proposal

- Add a remove license button to the Admin > Subscription page for cloud licenses
- Follow the same removal flow as legacy licenses
 
[**Figma design specs**](https://www.figma.com/file/0cuDNaL8iPZdUaMY8vtBzh/Workflow-for-Expired-Cloud-License?node-id=2%3A6791)",2
88458650,2021-06-09 13:24:17.849,"Follow-up from ""Add cleanup_groupless_subscriptions rake task""","The following discussion from !3361 should be addressed:

- [ ] @vij started a [discussion](https://gitlab.com/gitlab-org/customers-gitlab-com/-/merge_requests/3361#note_596397219):  (+2 comments)

    > I think it's kind of nice having them defined in this file so you know what's going on at a glance, but there's an existing helper for stubbing this call, if you'd rather use it (apologies if you already know about it, but I just wanted to point it out incase you didn't):
    > 
    > https://gitlab.com/gitlab-org/customers-gitlab-com/blob/853bd226bc41167336b5cb5f739823da05088658/spec/support/stub_gitlab_calls.rb#L159",2
88399091,2021-06-08 14:32:06.968,Conditionally show address block in customer info,"## Description

As entering the user address is optional, we have to make the component that displays the customer info conditionally show the address. At the moment, when the user hasn't entered an address, we display an empty HTML container that has spacing applied to it. This doesn't result in predictable vertical spacing and it hinders accessibility.

Maybe as part of this issue we can revisit the HTML elements that are shown inside of the customer info component so we make sure they're semantic.

The component is called `customer-information.vue`.

This issue is a follow-up from https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2089

## Screenshots

| User can leave out their address fields... | Empty containers rendered in DOM |
| --- | --- |
| ![Screenshot_2021-06-08_at_17.20.29](/uploads/a6f964bc77cd7ede9b0a74cc4a40bf09/Screenshot_2021-06-08_at_17.20.29.png) | ![Screenshot_2021-06-08_at_17.31.21](/uploads/a4f2069f470009ebd0edd733bb5e75c9/Screenshot_2021-06-08_at_17.31.21.png) |",2
88186669,2021-06-03 22:25:42.527,remove AutoRenew__c from the schema files,"We have renamed the Custom Auto Renew Zuora custom field API name from `AutoRenew__c` to `TurnOnAutoRenew__c`(issue https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2947)

After renaming , `AutoRenew__c` is now useless. It should be removed.

We need to remove `AutoRenew__c` from the [schema files](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/5fe12ca3016abc4814fdf756afa6896869dfec53/config/zuora/production/schema/Subscription.xml#L53) as well. And then we can remove the Zuora custom field.


### Problem

`AutoRenew__c` is now useless. It should be removed.

### Proposal

remove `AutoRenew__c` from the schema files
- Production schema file https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/5fe12ca3016abc4814fdf756afa6896869dfec53/config/zuora/production/schema/Subscription.xml#L53
- Sandbox schema file https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/5fe12ca3016abc4814fdf756afa6896869dfec53/config/zuora/sandbox/schema/Subscription.xml#L53
- Staging schema file https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/def98ff782c5f26107bce05e2c3e3cb746654276/config/zuora/staging/schema/Subscription.xml#L145

### Result
`AutoRenew__c` is removed from the schema files

### Next steps (if any)

- [ ] Ask @mquitevis to remove the Zuora Subscription custom field `AutoRenew__c`

### How will we measure success?",2
88102849,2021-06-02 12:53:22.879,Download invoice link shows 404,"<!-- Please complete the template below as best as you can. Make sure to check if this issue has already been raised by someone else first to avoid duplication. 

For each section below, please add screenshots or links or anything that may help visual learners understand the problem better, even if this takes you an extra minute or two this is a great help to some folks.

https://www.learning-styles-online.com/style/visual-spatial/

-->

### Problem

Sometimes on invoice page, a `download invoice` link shows up and is clickable, but results in a 404 page.

e.g. pipeline https://gitlab.com/gitlab-org/customers-gitlab-com/-/jobs/1262188785

![image](/uploads/322f10a4de1133201301d689718daec0/image.png)

We had [Slack discussion](https://gitlab.slack.com/archives/CMJ8JR0RH/p1618003253143800) identified root cause is a delay from Zuora when generating invoice for new subscription.

### Proposal

UI improvement proposed - a temporary text field showing `Processing...` on invoice page instead of providing a download link when invoice is not ready from Zuora :point_down: 

![image](/uploads/01f95706df9299ba8d08ad76ec65d4a8/image.png)

### Result

### Next steps (if any)

### How will we measure success?",3
88047848,2021-06-01 15:21:33.554,Perform amendment to update rate plan charge for EOA,"As part of the main issue https://gitlab.com/gitlab-org/customers-gitlab-com/-/issues/2783, we have worked on calling to [update the `rate_plan_charge`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/services/amendment_base_service.rb#L267) whenever the user has [accepted/declined the EOA offer](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/services/amendment_base_service.rb#L272). 

This callback is made after the renew has been amended and [via a background job](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/workers/update_subscription_eoa_starter_bronze_offer_worker.rb) which makes a call to update the custom value [`EoaStarterBronzeOfferAccepted__c`](https://gitlab.com/gitlab-org/customers-gitlab-com/-/blob/staging/app/workers/update_subscription_eoa_starter_bronze_offer_worker.rb#L43) and then traverses though the rate_plans to find the rate_plan_charges which are part of PREMIUM plans and then make the changes to the `price_change_option`.

These changes can be resulted into an error by Zuora which is then just logged into the Sentry and no rescue of the error is then called in place.  

### Proposal

The amendment takes place in a batch and if one results in error then all of it is rolledback by Zuora. Instead of calling the update on `rate_plan_charges` after the amendment happens we can add another amendment to the batch to update the rate_plan_charges `price_change_option` itself. 

cc: @vshumilo",5
